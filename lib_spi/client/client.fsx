let rec method0 () : struct (string * string * string * bool) =
    let v0 : string = ""
    let v1 : obj = v0
    struct (v0, v0, v0, true)
and method1 (v0 : string) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "($0).to_string()"
    let v2 : Types.std.string.String = Fable.Core.Rust.emitExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method2 (v0 : Types.std.string.String) : Types.EmitType<Types.std.string.String> =
    let v1 : Types.EmitType<Types.std.string.String> = v0 |> unbox<Types.EmitType<Types.std.string.String>>
    v1
and method4 (v0 : int32, v1 : string) : string =
    let v2 : int32 = String.length v1
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : string = $"0{v1}"
        method4(v0, v4)
    else
        v1
and method5 (v0 : uint8) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.Rust.emitExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method6 (v0 : (Types.EmitType<Types.std.string.String> [])) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "core::ops::Deref::deref($0)"
    let v2 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v0 v1
    let v3 : string = "&***$0"
    let v4 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2 v3
    let v5 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4 v3
    let v6 : string = "format!(\"{:?}\", $0)"
    let v7 : Types.std.string.String = Fable.Core.Rust.emitExpr v5 v6
    let v8 : Types.EmitType<Types.std.string.String> = v7 |> unbox<Types.EmitType<Types.std.string.String>>
    v8
and method7 (v0 : string) : string =
    v0
and method8 () : string =
    let v0 : string = "$1=$2"
    v0
and method9 () : string =
    let v0 : string = "[$1]"
    v0
and method10 () : string =
    let v0 : string = "\""
    v0
and method11 () : string =
    let v0 : string = " "
    v0
and method3 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.Rust.emitExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method4(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.Rust.emitExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method1(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method1(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method1(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method5(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method1(v18)
    let v20 : string = "Debug"
    let v21 : Types.EmitType<Types.std.string.String> = method1(v20)
    let v22 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v21|]
    let v23 : Types.EmitType<Types.std.string.String> = method6(v22)
    let v24 : string = "> app ()"
    let v25 : Types.EmitType<Types.std.string.String> = method1(v24)
    let v26 : (Types.EmitType<Types.std.string.String> []) = [|v25|]
    let v27 : string = "core::ops::Deref::deref($0)"
    let v28 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v26 v27
    let v29 : string = "&***$0"
    let v30 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v28 v29
    let v31 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v30 v29
    let v32 : string = "format!(\"{:?}\", $0)"
    let v33 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v32
    let v34 : Types.EmitType<Types.std.string.String> = v33 |> unbox<Types.EmitType<Types.std.string.String>>
    let v35 : string = "format!(\"{}\", $0)"
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v34 v35
    let v37 : string = (v36).ToString ()
    let v38 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = "regex::RegexBuilder::new($0)"
    let v42 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "$0.build().unwrap()"
    let v44 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : string = method7(v37)
    let v46 : string = "$0.as_str()"
    let v47 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v45 v46
    let v48 : string = method8()
    let v49 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v48 v46
    let v50 : string = "$0.replace_all(&$1, $2).to_string()"
    let v51 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v44, v47, v49) v50
    let v52 : obj = v51
    let v53 : string = "fable_library_rust::String_::fromStr($0)"
    let v54 : string = Fable.Core.Rust.emitExpr v52 v53
    let v55 : string = "\\[\"(.*?)\"\\]"
    let v56 : string = $"r#\"{v55}\"#"
    let v57 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v56
    let v58 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v57 v41
    let v59 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v58 v43
    let v60 : string = method7(v54)
    let v61 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v60 v46
    let v62 : string = method9()
    let v63 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v62 v46
    let v64 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v59, v61, v63) v50
    let v65 : obj = v64
    let v66 : string = Fable.Core.Rust.emitExpr v65 v53
    let v67 : string = "\\\\\""
    let v68 : string = $"r#\"{v67}\"#"
    let v69 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v68
    let v70 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v69 v41
    let v71 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v70 v43
    let v72 : string = method7(v66)
    let v73 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v72 v46
    let v74 : string = method10()
    let v75 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v74 v46
    let v76 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v71, v73, v75) v50
    let v77 : obj = v76
    let v78 : string = Fable.Core.Rust.emitExpr v77 v53
    let v79 : string = ", "
    let v80 : string = $"r#\"{v79}\"#"
    let v81 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v80
    let v82 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v81 v41
    let v83 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v82 v43
    let v84 : string = method7(v78)
    let v85 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v84 v46
    let v86 : string = method11()
    let v87 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v86 v46
    let v88 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v83, v85, v87) v50
    let v89 : obj = v88
    let v90 : string = Fable.Core.Rust.emitExpr v89 v53
    let v91 : Types.EmitType<Types.std.string.String> = method1(v90)
    let v92 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1 v27
    let v93 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v92 v29
    let v94 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v93 v29
    let v95 : Types.std.string.String = Fable.Core.Rust.emitExpr v94 v32
    let v96 : Types.EmitType<Types.std.string.String> = v95 |> unbox<Types.EmitType<Types.std.string.String>>
    let v97 : Types.std.string.String = Fable.Core.Rust.emitExpr v96 v35
    let v98 : string = (v97).ToString ()
    let v99 : string = $"r#\"{v38}\"#"
    let v100 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v99
    let v101 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v100 v41
    let v102 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v101 v43
    let v103 : string = method7(v98)
    let v104 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v103 v46
    let v105 : string = method8()
    let v106 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v105 v46
    let v107 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v102, v104, v106) v50
    let v108 : obj = v107
    let v109 : string = Fable.Core.Rust.emitExpr v108 v53
    let v110 : string = $"r#\"{v55}\"#"
    let v111 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v110
    let v112 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v111 v41
    let v113 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v112 v43
    let v114 : string = method7(v109)
    let v115 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v114 v46
    let v116 : string = method9()
    let v117 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v116 v46
    let v118 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v113, v115, v117) v50
    let v119 : obj = v118
    let v120 : string = Fable.Core.Rust.emitExpr v119 v53
    let v121 : string = $"r#\"{v67}\"#"
    let v122 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v121
    let v123 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v122 v41
    let v124 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v123 v43
    let v125 : string = method7(v120)
    let v126 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v125 v46
    let v127 : string = method10()
    let v128 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v127 v46
    let v129 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v124, v126, v128) v50
    let v130 : obj = v129
    let v131 : string = Fable.Core.Rust.emitExpr v130 v53
    let v132 : string = $"r#\"{v79}\"#"
    let v133 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v132
    let v134 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v133 v41
    let v135 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v134 v43
    let v136 : string = method7(v131)
    let v137 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v136 v46
    let v138 : string = method11()
    let v139 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v138 v46
    let v140 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v135, v137, v139) v50
    let v141 : obj = v140
    let v142 : string = Fable.Core.Rust.emitExpr v141 v53
    let v143 : Types.EmitType<Types.std.string.String> = method1(v142)
    let v144 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v35
    let v145 : string = (v144).ToString ()
    let v146 : string = $"r#\"{v38}\"#"
    let v147 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v146
    let v148 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v147 v41
    let v149 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v148 v43
    let v150 : string = method7(v145)
    let v151 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v150 v46
    let v152 : string = method8()
    let v153 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v152 v46
    let v154 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v149, v151, v153) v50
    let v155 : obj = v154
    let v156 : string = Fable.Core.Rust.emitExpr v155 v53
    let v157 : string = $"r#\"{v55}\"#"
    let v158 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v157
    let v159 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v158 v41
    let v160 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v159 v43
    let v161 : string = method7(v156)
    let v162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v161 v46
    let v163 : string = method9()
    let v164 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v163 v46
    let v165 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v160, v162, v164) v50
    let v166 : obj = v165
    let v167 : string = Fable.Core.Rust.emitExpr v166 v53
    let v168 : string = $"r#\"{v67}\"#"
    let v169 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v168
    let v170 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v169 v41
    let v171 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v170 v43
    let v172 : string = method7(v167)
    let v173 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v172 v46
    let v174 : string = method10()
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v174 v46
    let v176 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v171, v173, v175) v50
    let v177 : obj = v176
    let v178 : string = Fable.Core.Rust.emitExpr v177 v53
    let v179 : string = $"r#\"{v79}\"#"
    let v180 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v179
    let v181 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v180 v41
    let v182 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v181 v43
    let v183 : string = method7(v178)
    let v184 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v183 v46
    let v185 : string = method11()
    let v186 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v185 v46
    let v187 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v182, v184, v186) v50
    let v188 : obj = v187
    let v189 : string = Fable.Core.Rust.emitExpr v188 v53
    let v190 : Types.EmitType<Types.std.string.String> = method1(v189)
    let v191 : string = (v91).ToString ()
    let v192 : string = (v143).ToString ()
    let v193 : string = (v190).ToString ()
    let v194 : string = " %c"
    let v195 : string = v191 + v194
    let v196 : string = v195 + v192
    let v197 : string = v196 + v194
    let v198 : string = v197 + v193
    let v199 : string = "($0).as_ref().to_string()"
    let v200 : Types.std.string.String = Fable.Core.Rust.emitExpr v198 v199
    let v201 : string = "387957"
    let v202 : string = $"color: #{v201};"
    let v203 : Types.std.string.String = Fable.Core.Rust.emitExpr v202 v199
    let v204 : string = "color: #385779;"
    let v205 : Types.std.string.String = Fable.Core.Rust.emitExpr v204 v199
    let v206 : (Types.std.string.String []) = [|v200; v203; v205|]
    let v207 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v206 v27
    let v208 : obj = v207
    let v209 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
    let v210 : Types.wasm_bindgen.JsValue = Fable.Core.Rust.emitExpr v208 v209
    let v211 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
    Fable.Core.Rust.emitExpr v210 v211
    ()
and method12 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.Rust.emitExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method4(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.Rust.emitExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method1(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method1(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method1(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method5(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method1(v18)
    let v20 : string = "Debug"
    let v21 : Types.EmitType<Types.std.string.String> = method1(v20)
    let v22 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v21|]
    let v23 : Types.EmitType<Types.std.string.String> = method6(v22)
    let v24 : string = "> append_css_rule ()"
    let v25 : Types.EmitType<Types.std.string.String> = method1(v24)
    let v26 : (Types.EmitType<Types.std.string.String> []) = [|v25|]
    let v27 : string = "core::ops::Deref::deref($0)"
    let v28 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v26 v27
    let v29 : string = "&***$0"
    let v30 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v28 v29
    let v31 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v30 v29
    let v32 : string = "format!(\"{:?}\", $0)"
    let v33 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v32
    let v34 : Types.EmitType<Types.std.string.String> = v33 |> unbox<Types.EmitType<Types.std.string.String>>
    let v35 : string = "format!(\"{}\", $0)"
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v34 v35
    let v37 : string = (v36).ToString ()
    let v38 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = "regex::RegexBuilder::new($0)"
    let v42 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "$0.build().unwrap()"
    let v44 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : string = method7(v37)
    let v46 : string = "$0.as_str()"
    let v47 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v45 v46
    let v48 : string = method8()
    let v49 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v48 v46
    let v50 : string = "$0.replace_all(&$1, $2).to_string()"
    let v51 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v44, v47, v49) v50
    let v52 : obj = v51
    let v53 : string = "fable_library_rust::String_::fromStr($0)"
    let v54 : string = Fable.Core.Rust.emitExpr v52 v53
    let v55 : string = "\\[\"(.*?)\"\\]"
    let v56 : string = $"r#\"{v55}\"#"
    let v57 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v56
    let v58 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v57 v41
    let v59 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v58 v43
    let v60 : string = method7(v54)
    let v61 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v60 v46
    let v62 : string = method9()
    let v63 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v62 v46
    let v64 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v59, v61, v63) v50
    let v65 : obj = v64
    let v66 : string = Fable.Core.Rust.emitExpr v65 v53
    let v67 : string = "\\\\\""
    let v68 : string = $"r#\"{v67}\"#"
    let v69 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v68
    let v70 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v69 v41
    let v71 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v70 v43
    let v72 : string = method7(v66)
    let v73 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v72 v46
    let v74 : string = method10()
    let v75 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v74 v46
    let v76 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v71, v73, v75) v50
    let v77 : obj = v76
    let v78 : string = Fable.Core.Rust.emitExpr v77 v53
    let v79 : string = ", "
    let v80 : string = $"r#\"{v79}\"#"
    let v81 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v80
    let v82 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v81 v41
    let v83 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v82 v43
    let v84 : string = method7(v78)
    let v85 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v84 v46
    let v86 : string = method11()
    let v87 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v86 v46
    let v88 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v83, v85, v87) v50
    let v89 : obj = v88
    let v90 : string = Fable.Core.Rust.emitExpr v89 v53
    let v91 : Types.EmitType<Types.std.string.String> = method1(v90)
    let v92 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1 v27
    let v93 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v92 v29
    let v94 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v93 v29
    let v95 : Types.std.string.String = Fable.Core.Rust.emitExpr v94 v32
    let v96 : Types.EmitType<Types.std.string.String> = v95 |> unbox<Types.EmitType<Types.std.string.String>>
    let v97 : Types.std.string.String = Fable.Core.Rust.emitExpr v96 v35
    let v98 : string = (v97).ToString ()
    let v99 : string = $"r#\"{v38}\"#"
    let v100 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v99
    let v101 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v100 v41
    let v102 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v101 v43
    let v103 : string = method7(v98)
    let v104 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v103 v46
    let v105 : string = method8()
    let v106 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v105 v46
    let v107 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v102, v104, v106) v50
    let v108 : obj = v107
    let v109 : string = Fable.Core.Rust.emitExpr v108 v53
    let v110 : string = $"r#\"{v55}\"#"
    let v111 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v110
    let v112 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v111 v41
    let v113 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v112 v43
    let v114 : string = method7(v109)
    let v115 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v114 v46
    let v116 : string = method9()
    let v117 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v116 v46
    let v118 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v113, v115, v117) v50
    let v119 : obj = v118
    let v120 : string = Fable.Core.Rust.emitExpr v119 v53
    let v121 : string = $"r#\"{v67}\"#"
    let v122 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v121
    let v123 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v122 v41
    let v124 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v123 v43
    let v125 : string = method7(v120)
    let v126 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v125 v46
    let v127 : string = method10()
    let v128 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v127 v46
    let v129 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v124, v126, v128) v50
    let v130 : obj = v129
    let v131 : string = Fable.Core.Rust.emitExpr v130 v53
    let v132 : string = $"r#\"{v79}\"#"
    let v133 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v132
    let v134 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v133 v41
    let v135 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v134 v43
    let v136 : string = method7(v131)
    let v137 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v136 v46
    let v138 : string = method11()
    let v139 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v138 v46
    let v140 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v135, v137, v139) v50
    let v141 : obj = v140
    let v142 : string = Fable.Core.Rust.emitExpr v141 v53
    let v143 : Types.EmitType<Types.std.string.String> = method1(v142)
    let v144 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v35
    let v145 : string = (v144).ToString ()
    let v146 : string = $"r#\"{v38}\"#"
    let v147 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v146
    let v148 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v147 v41
    let v149 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v148 v43
    let v150 : string = method7(v145)
    let v151 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v150 v46
    let v152 : string = method8()
    let v153 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v152 v46
    let v154 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v149, v151, v153) v50
    let v155 : obj = v154
    let v156 : string = Fable.Core.Rust.emitExpr v155 v53
    let v157 : string = $"r#\"{v55}\"#"
    let v158 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v157
    let v159 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v158 v41
    let v160 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v159 v43
    let v161 : string = method7(v156)
    let v162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v161 v46
    let v163 : string = method9()
    let v164 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v163 v46
    let v165 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v160, v162, v164) v50
    let v166 : obj = v165
    let v167 : string = Fable.Core.Rust.emitExpr v166 v53
    let v168 : string = $"r#\"{v67}\"#"
    let v169 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v168
    let v170 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v169 v41
    let v171 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v170 v43
    let v172 : string = method7(v167)
    let v173 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v172 v46
    let v174 : string = method10()
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v174 v46
    let v176 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v171, v173, v175) v50
    let v177 : obj = v176
    let v178 : string = Fable.Core.Rust.emitExpr v177 v53
    let v179 : string = $"r#\"{v79}\"#"
    let v180 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v179
    let v181 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v180 v41
    let v182 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v181 v43
    let v183 : string = method7(v178)
    let v184 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v183 v46
    let v185 : string = method11()
    let v186 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v185 v46
    let v187 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v182, v184, v186) v50
    let v188 : obj = v187
    let v189 : string = Fable.Core.Rust.emitExpr v188 v53
    let v190 : Types.EmitType<Types.std.string.String> = method1(v189)
    let v191 : string = (v91).ToString ()
    let v192 : string = (v143).ToString ()
    let v193 : string = (v190).ToString ()
    let v194 : string = " %c"
    let v195 : string = v191 + v194
    let v196 : string = v195 + v192
    let v197 : string = v196 + v194
    let v198 : string = v197 + v193
    let v199 : string = "($0).as_ref().to_string()"
    let v200 : Types.std.string.String = Fable.Core.Rust.emitExpr v198 v199
    let v201 : string = "666666"
    let v202 : string = $"color: #{v201};"
    let v203 : Types.std.string.String = Fable.Core.Rust.emitExpr v202 v199
    let v204 : string = "color: #385779;"
    let v205 : Types.std.string.String = Fable.Core.Rust.emitExpr v204 v199
    let v206 : (Types.std.string.String []) = [|v200; v203; v205|]
    let v207 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v206 v27
    let v208 : obj = v207
    let v209 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
    let v210 : Types.wasm_bindgen.JsValue = Fable.Core.Rust.emitExpr v208 v209
    let v211 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
    Fable.Core.Rust.emitExpr v210 v211
    ()
and method13 (v0 : Types.Ref<Types.Str>) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.Rust.emitExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method14 (v0 : obj) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.Rust.emitExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method16 (v0 : int32) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.Rust.emitExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and closure1 (v0 : int64) (v1 : int32) : unit =
    let v2 : string = "log_n"
    let v3 : Types.EmitType<Types.std.string.String> = method1(v2)
    let v4 : Types.EmitType<Types.std.string.String> = method16(v1)
    let v5 : (Types.EmitType<Types.std.string.String> []) = [|v3; v4|]
    method3(v0, v5)
and method15 (v0 : int64) : (int32 -> unit) =
    closure1(v0)
and method17 () : string =
    let v0 : string = "name"
    v0
and method18 () : Types.std.string.String =
    let v0 : string = "store"
    let v1 : string = "($0).to_string()"
    let v2 : Types.std.string.String = Fable.Core.Rust.emitExpr v0 v1
    v2
and method19 () : Types.std.string.String =
    let v0 : string = "store"
    let v1 : string = "($0).to_string()"
    let v2 : Types.std.string.String = Fable.Core.Rust.emitExpr v0 v1
    v2
and method20 () : Types.wasm_bindgen.JsValue =
    let v0 : string = "key"
    let v1 : string = "wasm_bindgen::JsValue::from_str($0)"
    let v2 : Types.wasm_bindgen.JsValue = Fable.Core.Rust.emitExpr v0 v1
    v2
and method21 () : Types.wasm_bindgen.JsValue =
    let v0 : string = "value"
    let v1 : string = "wasm_bindgen::JsValue::from_str($0)"
    let v2 : Types.wasm_bindgen.JsValue = Fable.Core.Rust.emitExpr v0 v1
    v2
and closure2 () (v0 : string) : Types.indexed_db_futures.request.OpenDbRequest =
    let v1 : string = "($0).to_string()"
    let v2 : Types.std.string.String = Fable.Core.Rust.emitExpr v0 v1
    let v3 : string = "indexed_db_futures::IdbDatabase::open_u32(&v2, 1).unwrap()"
    let v4 : Types.indexed_db_futures.request.OpenDbRequest = Fable.Core.Rust.emitExpr () v3
    v4
and method22 () : bool =
    false
and method23 (v0 : Types.Tuple<Types.async_std.sync.Mutex<bool>, Types.async_std.sync.Condvar>) : Types.Tuple<Types.async_std.sync.Mutex<bool>, Types.async_std.sync.Condvar> =
    v0
and method24 (v0 : Option<Types.ehttp.Response>) : Option<Types.ehttp.Response> =
    v0
and method25 (v0 : Types.async_std.sync.Mutex<Option<Types.ehttp.Response>>) : Types.async_std.sync.Mutex<Option<Types.ehttp.Response>> =
    v0
and method26 (v0 : Types.std.sync.Arc<Types.async_std.sync.Mutex<Option<Types.ehttp.Response>>>) : Types.std.sync.Arc<Types.async_std.sync.Mutex<Option<Types.ehttp.Response>>> =
    v0
and closure3 (v0 : int64) (v1 : Types.std.cell.RefCell<Types.std.sync.Arc<Types.async_std.sync.Mutex<Option<Types.ehttp.Response>>>>) : unit =
    let v2 : string = "v1.borrow()"
    let v3 : Types.std.cell.CellRef<Types.std.sync.Arc<Types.async_std.sync.Mutex<Option<Types.ehttp.Response>>>> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "v3.try_lock()"
    let v5 : Option<Types.core.future.Future<Types.async_std.sync.Mutex<Types.std.sync.Arc<Types.async_std.sync.Mutex<Option<Types.ehttp.Response>>>>>> = Fable.Core.Rust.emitExpr () v4
    let v6 : string = "app > fetch ()"
    let v7 : Types.EmitType<Types.std.string.String> = method1(v6)
    let v8 : string = ""
    let v9 : Types.EmitType<Types.std.string.String> = method1(v8)
    let v10 : string = "response"
    let v11 : Types.EmitType<Types.std.string.String> = method1(v10)
    let v12 : string = "format!(\"{:?}\", $0)"
    let v13 : Types.std.string.String = Fable.Core.Rust.emitExpr v5 v12
    let v14 : Types.EmitType<Types.std.string.String> = method2(v13)
    let v15 : (Types.EmitType<Types.std.string.String> []) = [|v7; v9; v11; v14|]
    method3(v0, v15)
and method27 (v0 : Types.futures_signals.signal.MutableSignal<Types.StaticRef<Types.Str>>) : Types.futures_signals.signal.MutableSignal<Types.StaticRef<Types.Str>> =
    v0
and closure5 (v0 : Types.std.rc.Rc<Types.futures_signals.signal.Mutable<Types.StaticRef<Types.Str>>>) (v1 : Types.StaticRef<Types.Str>) : unit =
    let v2 : string = "*$0.set_neq(v1)"
    Fable.Core.Rust.emitExpr v0 v2
    ()
and closure4 (v0 : Types.std.rc.Rc<Types.futures_signals.signal.Mutable<Types.StaticRef<Types.Str>>>) (v1 : Types.std.rc.Rc<Types.web_sys.HtmlInputElement>) : unit =
    let v2 : string = ""
    let v3 : string = "let value0 = v1;"
    let v4 : string = v2 + v3
    let v5 : string = "let value0 = value0.value();"
    let v6 : string = v4 + v5
    let v7 : string = "let value0 = value0.into_boxed_str();"
    let v8 : string = v6 + v7
    let v9 : string = "let value0 = Box::leak(value0);"
    let v10 : string = v8 + v9
    let v11 : (Types.StaticRef<Types.Str> -> unit) = closure5(v0)
    let v12 : string = "v11(value0);"
    let v13 : string = v10 + v12
    let v14 : string = "()"
    let v15 : string = v13 + v14
    Fable.Core.Rust.emitExpr () v15
    ()
and closure0 () () : int32 =
    let v0 : string = "console_error_panic_hook::set_once()"
    Fable.Core.Rust.emitExpr () v0
    let struct (v1 : string, v2 : string, v3 : string, v4 : bool) = method0()
    let v5 : string = "chrono::Utc::now()"
    let v6 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v5
    let v7 : string = "($0).timestamp()"
    let v8 : int64 = Fable.Core.Rust.emitExpr v6 v7
    let v9 : string = "web_sys::window().unwrap()"
    let v10 : obj = Fable.Core.Rust.emitExpr () v9
    let v11 : string = "$0.document().unwrap()"
    let v12 : obj = Fable.Core.Rust.emitExpr v10 v11
    let v13 : string = "$0.head().unwrap()"
    let v14 : obj = Fable.Core.Rust.emitExpr v12 v13
    let v15 : string = "style"
    let v16 : string = $"r#\"{v15}\"#"
    let v17 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v16
    let v18 : string = "$0.create_element($1).unwrap()"
    let v19 : obj = Fable.Core.Rust.emitExpr struct (v12, v17) v18
    let v20 : string = "wasm_bindgen::JsCast::unchecked_into(v19)"
    let v21 : Types.web_sys.HtmlStyleElement = Fable.Core.Rust.emitExpr () v20
    let v22 : string = "std::rc::Rc::new(v21)"
    let v23 : Types.std.rc.Rc<Types.web_sys.HtmlStyleElement> = Fable.Core.Rust.emitExpr () v22
    let v24 : Types.EmitType<Types.std.string.String> = method1(v15)
    let v25 : string = "format!(\"{:?}\", $0)"
    let v26 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v25
    let v27 : Types.EmitType<Types.std.string.String> = method2(v26)
    let v28 : (Types.EmitType<Types.std.string.String> []) = [|v24; v27|]
    method3(v8, v28)
    let v29 : string = "type"
    let v30 : string = $"r#\"{v29}\"#"
    let v31 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v30
    let v32 : string = "text/css"
    let v33 : string = $"r#\"{v32}\"#"
    let v34 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v33
    let v35 : string = "$0.set_attribute($1, $2).unwrap()"
    Fable.Core.Rust.emitExpr struct (v23, v31, v34) v35
    let v36 : string = "data-id"
    let v37 : string = $"r#\"{v36}\"#"
    let v38 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v37
    let v39 : string = "global-css"
    let v40 : string = $"r#\"{v39}\"#"
    let v41 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v40
    Fable.Core.Rust.emitExpr struct (v23, v38, v41) v35
    let v42 : string = "$0.append_child(&$1).unwrap()"
    Fable.Core.Rust.emitExpr struct (v14, v23) v42
    let struct (v43 : string, v44 : string, v45 : string, v46 : bool) = method0()
    let v47 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v5
    let v48 : int64 = Fable.Core.Rust.emitExpr v47 v7
    let v49 : string = "v23.sheet()"
    let v50 : obj = Fable.Core.Rust.emitExpr () v49
    let v51 : string = "v50.unwrap()"
    let v52 : obj = Fable.Core.Rust.emitExpr () v51
    let v53 : string = "wasm_bindgen::JsCast::unchecked_into::<"
    let v54 : string = "web_sys::CssStyleSheet"
    let v55 : string = v53 + v54
    let v56 : string = ">(v52)"
    let v57 : string = v55 + v56
    let v58 : obj = Fable.Core.Rust.emitExpr () v57
    let v59 : string = ": "
    let v60 : string = "margin"
    let v61 : string = v60 + v59
    let v62 : string = "0"
    let v63 : string = v61 + v62
    let v64 : string = ";"
    let v65 : string = v63 + v64
    let v66 : string = ""
    let v67 : string = v65 + v66
    let v68 : string = ": "
    let v69 : string = "padding"
    let v70 : string = v69 + v68
    let v71 : string = v70 + v62
    let v72 : string = ";"
    let v73 : string = v71 + v72
    let v74 : string = v73 + v67
    let v75 : string = ": "
    let v76 : string = "width"
    let v77 : string = v76 + v75
    let v78 : string = "100%"
    let v79 : string = v77 + v78
    let v80 : string = ";"
    let v81 : string = v79 + v80
    let v82 : string = v81 + v74
    let v83 : string = ": "
    let v84 : string = "height"
    let v85 : string = v84 + v83
    let v86 : string = v85 + v78
    let v87 : string = ";"
    let v88 : string = v86 + v87
    let v89 : string = v88 + v82
    let v90 : string = ": "
    let v91 : string = "overflow"
    let v92 : string = v91 + v90
    let v93 : string = "hidden"
    let v94 : string = v92 + v93
    let v95 : string = ";"
    let v96 : string = v94 + v95
    let v97 : string = v96 + v89
    let v98 : string = " {"
    let v99 : string = "html, body"
    let v100 : string = v99 + v98
    let v101 : string = "  "
    let v102 : string = v100 + v101
    let v103 : string = v102 + v97
    let v104 : string = " "
    let v105 : string = v103 + v104
    let v106 : string = "}"
    let v107 : string = v105 + v106
    let v108 : string = $"r#\"{v107}\"#"
    let v109 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v108
    let v110 : string = "v58.insert_rule(v109).unwrap()"
    let v111 : obj = Fable.Core.Rust.emitExpr () v110
    let v112 : string = "rule"
    let v113 : Types.EmitType<Types.std.string.String> = method1(v112)
    let v114 : Types.EmitType<Types.std.string.String> = method1(v99)
    let v115 : string = "idx"
    let v116 : Types.EmitType<Types.std.string.String> = method1(v115)
    let v117 : Types.std.string.String = Fable.Core.Rust.emitExpr v111 v25
    let v118 : Types.EmitType<Types.std.string.String> = method2(v117)
    let v119 : (Types.EmitType<Types.std.string.String> []) = [|v113; v114; v116; v118|]
    method12(v48, v119)
    let struct (v120 : string, v121 : string, v122 : string, v123 : bool) = method0()
    let v124 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v5
    let v125 : int64 = Fable.Core.Rust.emitExpr v124 v7
    let v126 : string = "v23.sheet()"
    let v127 : obj = Fable.Core.Rust.emitExpr () v126
    let v128 : string = "v127.unwrap()"
    let v129 : obj = Fable.Core.Rust.emitExpr () v128
    let v130 : string = "wasm_bindgen::JsCast::unchecked_into::<"
    let v131 : string = v130 + v54
    let v132 : string = ">(v129)"
    let v133 : string = v131 + v132
    let v134 : obj = Fable.Core.Rust.emitExpr () v133
    let v135 : string = ": "
    let v136 : string = "font-family"
    let v137 : string = v136 + v135
    let v138 : string = "system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", sans-serif"
    let v139 : string = v137 + v138
    let v140 : string = ";"
    let v141 : string = v139 + v140
    let v142 : string = v141 + v66
    let v143 : string = ": "
    let v144 : string = "-webkit-font-smoothing"
    let v145 : string = v144 + v143
    let v146 : string = "antialiased"
    let v147 : string = v145 + v146
    let v148 : string = ";"
    let v149 : string = v147 + v148
    let v150 : string = v149 + v142
    let v151 : string = ": "
    let v152 : string = "-moz-osx-font-smoothing"
    let v153 : string = v152 + v151
    let v154 : string = "grayscale"
    let v155 : string = v153 + v154
    let v156 : string = ";"
    let v157 : string = v155 + v156
    let v158 : string = v157 + v150
    let v159 : string = ": "
    let v160 : string = "display"
    let v161 : string = v160 + v159
    let v162 : string = "flex"
    let v163 : string = v161 + v162
    let v164 : string = ";"
    let v165 : string = v163 + v164
    let v166 : string = v165 + v158
    let v167 : string = ": "
    let v168 : string = "flex-direction"
    let v169 : string = v168 + v167
    let v170 : string = "row"
    let v171 : string = v169 + v170
    let v172 : string = ";"
    let v173 : string = v171 + v172
    let v174 : string = v173 + v166
    let v175 : string = ": "
    let v176 : string = "box-sizing"
    let v177 : string = v176 + v175
    let v178 : string = "border-box"
    let v179 : string = v177 + v178
    let v180 : string = ";"
    let v181 : string = v179 + v180
    let v182 : string = v181 + v174
    let v183 : string = ": "
    let v184 : string = "align-items"
    let v185 : string = v184 + v183
    let v186 : string = "stretch"
    let v187 : string = v185 + v186
    let v188 : string = ";"
    let v189 : string = v187 + v188
    let v190 : string = v189 + v182
    let v191 : string = ": "
    let v192 : string = "align-content"
    let v193 : string = v192 + v191
    let v194 : string = v193 + v186
    let v195 : string = ";"
    let v196 : string = v194 + v195
    let v197 : string = v196 + v190
    let v198 : string = " {"
    let v199 : string = "body"
    let v200 : string = v199 + v198
    let v201 : string = "  "
    let v202 : string = v200 + v201
    let v203 : string = v202 + v197
    let v204 : string = " "
    let v205 : string = v203 + v204
    let v206 : string = "}"
    let v207 : string = v205 + v206
    let v208 : string = $"r#\"{v207}\"#"
    let v209 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v208
    let v210 : string = "v134.insert_rule(v209).unwrap()"
    let v211 : obj = Fable.Core.Rust.emitExpr () v210
    let v212 : Types.EmitType<Types.std.string.String> = method1(v112)
    let v213 : Types.EmitType<Types.std.string.String> = method1(v199)
    let v214 : Types.EmitType<Types.std.string.String> = method1(v115)
    let v215 : Types.std.string.String = Fable.Core.Rust.emitExpr v211 v25
    let v216 : Types.EmitType<Types.std.string.String> = method2(v215)
    let v217 : (Types.EmitType<Types.std.string.String> []) = [|v212; v213; v214; v216|]
    method12(v125, v217)
    let struct (v218 : string, v219 : string, v220 : string, v221 : bool) = method0()
    let v222 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v5
    let v223 : int64 = Fable.Core.Rust.emitExpr v222 v7
    let v224 : string = "v23.sheet()"
    let v225 : obj = Fable.Core.Rust.emitExpr () v224
    let v226 : string = "v225.unwrap()"
    let v227 : obj = Fable.Core.Rust.emitExpr () v226
    let v228 : string = "wasm_bindgen::JsCast::unchecked_into::<"
    let v229 : string = v228 + v54
    let v230 : string = ">(v227)"
    let v231 : string = v229 + v230
    let v232 : obj = Fable.Core.Rust.emitExpr () v231
    let v233 : string = ": "
    let v234 : string = v76 + v233
    let v235 : string = "11px"
    let v236 : string = v234 + v235
    let v237 : string = ";"
    let v238 : string = v236 + v237
    let v239 : string = v238 + v66
    let v240 : string = " {"
    let v241 : string = "*::-webkit-scrollbar"
    let v242 : string = v241 + v240
    let v243 : string = "  "
    let v244 : string = v242 + v243
    let v245 : string = v244 + v239
    let v246 : string = " "
    let v247 : string = v245 + v246
    let v248 : string = "}"
    let v249 : string = v247 + v248
    let v250 : string = $"r#\"{v249}\"#"
    let v251 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v250
    let v252 : string = "v232.insert_rule(v251).unwrap()"
    let v253 : obj = Fable.Core.Rust.emitExpr () v252
    let v254 : Types.EmitType<Types.std.string.String> = method1(v112)
    let v255 : Types.EmitType<Types.std.string.String> = method1(v241)
    let v256 : Types.EmitType<Types.std.string.String> = method1(v115)
    let v257 : Types.std.string.String = Fable.Core.Rust.emitExpr v253 v25
    let v258 : Types.EmitType<Types.std.string.String> = method2(v257)
    let v259 : (Types.EmitType<Types.std.string.String> []) = [|v254; v255; v256; v258|]
    method12(v223, v259)
    let struct (v260 : string, v261 : string, v262 : string, v263 : bool) = method0()
    let v264 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v5
    let v265 : int64 = Fable.Core.Rust.emitExpr v264 v7
    let v266 : string = "v23.sheet()"
    let v267 : obj = Fable.Core.Rust.emitExpr () v266
    let v268 : string = "v267.unwrap()"
    let v269 : obj = Fable.Core.Rust.emitExpr () v268
    let v270 : string = "wasm_bindgen::JsCast::unchecked_into::<"
    let v271 : string = v270 + v54
    let v272 : string = ">(v269)"
    let v273 : string = v271 + v272
    let v274 : obj = Fable.Core.Rust.emitExpr () v273
    let v275 : string = ": "
    let v276 : string = v84 + v275
    let v277 : string = "8px"
    let v278 : string = v276 + v277
    let v279 : string = ";"
    let v280 : string = v278 + v279
    let v281 : string = v280 + v66
    let v282 : string = " {"
    let v283 : string = "*::-webkit-scrollbar:horizontal"
    let v284 : string = v283 + v282
    let v285 : string = "  "
    let v286 : string = v284 + v285
    let v287 : string = v286 + v281
    let v288 : string = " "
    let v289 : string = v287 + v288
    let v290 : string = "}"
    let v291 : string = v289 + v290
    let v292 : string = $"r#\"{v291}\"#"
    let v293 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v292
    let v294 : string = "v274.insert_rule(v293).unwrap()"
    let v295 : obj = Fable.Core.Rust.emitExpr () v294
    let v296 : Types.EmitType<Types.std.string.String> = method1(v112)
    let v297 : Types.EmitType<Types.std.string.String> = method1(v283)
    let v298 : Types.EmitType<Types.std.string.String> = method1(v115)
    let v299 : Types.std.string.String = Fable.Core.Rust.emitExpr v295 v25
    let v300 : Types.EmitType<Types.std.string.String> = method2(v299)
    let v301 : (Types.EmitType<Types.std.string.String> []) = [|v296; v297; v298; v300|]
    method12(v265, v301)
    let struct (v302 : string, v303 : string, v304 : string, v305 : bool) = method0()
    let v306 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v5
    let v307 : int64 = Fable.Core.Rust.emitExpr v306 v7
    let v308 : string = "v23.sheet()"
    let v309 : obj = Fable.Core.Rust.emitExpr () v308
    let v310 : string = "v309.unwrap()"
    let v311 : obj = Fable.Core.Rust.emitExpr () v310
    let v312 : string = "wasm_bindgen::JsCast::unchecked_into::<"
    let v313 : string = v312 + v54
    let v314 : string = ">(v311)"
    let v315 : string = v313 + v314
    let v316 : obj = Fable.Core.Rust.emitExpr () v315
    let v317 : string = ": "
    let v318 : string = v160 + v317
    let v319 : string = "none"
    let v320 : string = v318 + v319
    let v321 : string = ";"
    let v322 : string = v320 + v321
    let v323 : string = v322 + v66
    let v324 : string = " {"
    let v325 : string = "*::-webkit-scrollbar-track"
    let v326 : string = v325 + v324
    let v327 : string = "  "
    let v328 : string = v326 + v327
    let v329 : string = v328 + v323
    let v330 : string = " "
    let v331 : string = v329 + v330
    let v332 : string = "}"
    let v333 : string = v331 + v332
    let v334 : string = $"r#\"{v333}\"#"
    let v335 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v334
    let v336 : string = "v316.insert_rule(v335).unwrap()"
    let v337 : obj = Fable.Core.Rust.emitExpr () v336
    let v338 : Types.EmitType<Types.std.string.String> = method1(v112)
    let v339 : Types.EmitType<Types.std.string.String> = method1(v325)
    let v340 : Types.EmitType<Types.std.string.String> = method1(v115)
    let v341 : Types.std.string.String = Fable.Core.Rust.emitExpr v337 v25
    let v342 : Types.EmitType<Types.std.string.String> = method2(v341)
    let v343 : (Types.EmitType<Types.std.string.String> []) = [|v338; v339; v340; v342|]
    method12(v307, v343)
    let struct (v344 : string, v345 : string, v346 : string, v347 : bool) = method0()
    let v348 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v5
    let v349 : int64 = Fable.Core.Rust.emitExpr v348 v7
    let v350 : string = "v23.sheet()"
    let v351 : obj = Fable.Core.Rust.emitExpr () v350
    let v352 : string = "v351.unwrap()"
    let v353 : obj = Fable.Core.Rust.emitExpr () v352
    let v354 : string = "wasm_bindgen::JsCast::unchecked_into::<"
    let v355 : string = v354 + v54
    let v356 : string = ">(v353)"
    let v357 : string = v355 + v356
    let v358 : obj = Fable.Core.Rust.emitExpr () v357
    let v359 : string = ": "
    let v360 : string = v160 + v359
    let v361 : string = v360 + v319
    let v362 : string = ";"
    let v363 : string = v361 + v362
    let v364 : string = v363 + v66
    let v365 : string = " {"
    let v366 : string = "*::-webkit-scrollbar-corner"
    let v367 : string = v366 + v365
    let v368 : string = "  "
    let v369 : string = v367 + v368
    let v370 : string = v369 + v364
    let v371 : string = " "
    let v372 : string = v370 + v371
    let v373 : string = "}"
    let v374 : string = v372 + v373
    let v375 : string = $"r#\"{v374}\"#"
    let v376 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v375
    let v377 : string = "v358.insert_rule(v376).unwrap()"
    let v378 : obj = Fable.Core.Rust.emitExpr () v377
    let v379 : Types.EmitType<Types.std.string.String> = method1(v112)
    let v380 : Types.EmitType<Types.std.string.String> = method1(v366)
    let v381 : Types.EmitType<Types.std.string.String> = method1(v115)
    let v382 : Types.std.string.String = Fable.Core.Rust.emitExpr v378 v25
    let v383 : Types.EmitType<Types.std.string.String> = method2(v382)
    let v384 : (Types.EmitType<Types.std.string.String> []) = [|v379; v380; v381; v383|]
    method12(v349, v384)
    let struct (v385 : string, v386 : string, v387 : string, v388 : bool) = method0()
    let v389 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v5
    let v390 : int64 = Fable.Core.Rust.emitExpr v389 v7
    let v391 : string = "v23.sheet()"
    let v392 : obj = Fable.Core.Rust.emitExpr () v391
    let v393 : string = "v392.unwrap()"
    let v394 : obj = Fable.Core.Rust.emitExpr () v393
    let v395 : string = "wasm_bindgen::JsCast::unchecked_into::<"
    let v396 : string = v395 + v54
    let v397 : string = ">(v394)"
    let v398 : string = v396 + v397
    let v399 : obj = Fable.Core.Rust.emitExpr () v398
    let v400 : string = ": "
    let v401 : string = "background"
    let v402 : string = v401 + v400
    let v403 : string = "#555"
    let v404 : string = v402 + v403
    let v405 : string = ";"
    let v406 : string = v404 + v405
    let v407 : string = v406 + v66
    let v408 : string = ": "
    let v409 : string = "opacity"
    let v410 : string = v409 + v408
    let v411 : string = "0.8"
    let v412 : string = v410 + v411
    let v413 : string = ";"
    let v414 : string = v412 + v413
    let v415 : string = v414 + v407
    let v416 : string = ": "
    let v417 : string = "background-clip"
    let v418 : string = v417 + v416
    let v419 : string = "content-box"
    let v420 : string = v418 + v419
    let v421 : string = ";"
    let v422 : string = v420 + v421
    let v423 : string = v422 + v415
    let v424 : string = ": "
    let v425 : string = "border-left"
    let v426 : string = v425 + v424
    let v427 : string = "2px solid transparent"
    let v428 : string = v426 + v427
    let v429 : string = ";"
    let v430 : string = v428 + v429
    let v431 : string = v430 + v423
    let v432 : string = " {"
    let v433 : string = "*::-webkit-scrollbar-thumb"
    let v434 : string = v433 + v432
    let v435 : string = "  "
    let v436 : string = v434 + v435
    let v437 : string = v436 + v431
    let v438 : string = " "
    let v439 : string = v437 + v438
    let v440 : string = "}"
    let v441 : string = v439 + v440
    let v442 : string = $"r#\"{v441}\"#"
    let v443 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v442
    let v444 : string = "v399.insert_rule(v443).unwrap()"
    let v445 : obj = Fable.Core.Rust.emitExpr () v444
    let v446 : Types.EmitType<Types.std.string.String> = method1(v112)
    let v447 : Types.EmitType<Types.std.string.String> = method1(v433)
    let v448 : Types.EmitType<Types.std.string.String> = method1(v115)
    let v449 : Types.std.string.String = Fable.Core.Rust.emitExpr v445 v25
    let v450 : Types.EmitType<Types.std.string.String> = method2(v449)
    let v451 : (Types.EmitType<Types.std.string.String> []) = [|v446; v447; v448; v450|]
    method12(v390, v451)
    let struct (v452 : string, v453 : string, v454 : string, v455 : bool) = method0()
    let v456 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v5
    let v457 : int64 = Fable.Core.Rust.emitExpr v456 v7
    let v458 : string = "v23.sheet()"
    let v459 : obj = Fable.Core.Rust.emitExpr () v458
    let v460 : string = "v459.unwrap()"
    let v461 : obj = Fable.Core.Rust.emitExpr () v460
    let v462 : string = "wasm_bindgen::JsCast::unchecked_into::<"
    let v463 : string = v462 + v54
    let v464 : string = ">(v461)"
    let v465 : string = v463 + v464
    let v466 : obj = Fable.Core.Rust.emitExpr () v465
    let v467 : string = ": "
    let v468 : string = v401 + v467
    let v469 : string = "#ccc"
    let v470 : string = v468 + v469
    let v471 : string = ";"
    let v472 : string = v470 + v471
    let v473 : string = v472 + v66
    let v474 : string = ": "
    let v475 : string = v417 + v474
    let v476 : string = v475 + v419
    let v477 : string = ";"
    let v478 : string = v476 + v477
    let v479 : string = v478 + v473
    let v480 : string = ": "
    let v481 : string = v425 + v480
    let v482 : string = v481 + v427
    let v483 : string = ";"
    let v484 : string = v482 + v483
    let v485 : string = v484 + v479
    let v486 : string = " {"
    let v487 : string = "*::-webkit-scrollbar-thumb:hover"
    let v488 : string = v487 + v486
    let v489 : string = "  "
    let v490 : string = v488 + v489
    let v491 : string = v490 + v485
    let v492 : string = " "
    let v493 : string = v491 + v492
    let v494 : string = "}"
    let v495 : string = v493 + v494
    let v496 : string = $"r#\"{v495}\"#"
    let v497 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v496
    let v498 : string = "v466.insert_rule(v497).unwrap()"
    let v499 : obj = Fable.Core.Rust.emitExpr () v498
    let v500 : Types.EmitType<Types.std.string.String> = method1(v112)
    let v501 : Types.EmitType<Types.std.string.String> = method1(v487)
    let v502 : Types.EmitType<Types.std.string.String> = method1(v115)
    let v503 : Types.std.string.String = Fable.Core.Rust.emitExpr v499 v25
    let v504 : Types.EmitType<Types.std.string.String> = method2(v503)
    let v505 : (Types.EmitType<Types.std.string.String> []) = [|v500; v501; v502; v504|]
    method12(v457, v505)
    let v506 : string = "v10.local_storage().unwrap().unwrap()"
    let v507 : obj = Fable.Core.Rust.emitExpr () v506
    let v508 : string = "set_local_storage_value"
    let v509 : Types.EmitType<Types.std.string.String> = method1(v508)
    let v510 : (Types.EmitType<Types.std.string.String> []) = [|v509|]
    method3(v8, v510)
    let v511 : string = "key"
    let v512 : string = $"r#\"{v511}\"#"
    let v513 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v512
    let v514 : string = "value"
    let v515 : string = $"r#\"{v514}\"#"
    let v516 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v515
    let v517 : Types.EmitType<Types.std.string.String> = method1(v511)
    let v518 : Types.EmitType<Types.std.string.String> = method13(v513)
    let v519 : Types.EmitType<Types.std.string.String> = method1(v514)
    let v520 : Types.EmitType<Types.std.string.String> = method13(v516)
    let v521 : (Types.EmitType<Types.std.string.String> []) = [|v517; v518; v519; v520|]
    method3(v8, v521)
    let v522 : string = "v507.set_item(v513, v516).unwrap()"
    let v523 : obj = Fable.Core.Rust.emitExpr () v522
    let v524 : string = "set_result"
    let v525 : Types.EmitType<Types.std.string.String> = method1(v524)
    let v526 : Types.EmitType<Types.std.string.String> = method14(v523)
    let v527 : (Types.EmitType<Types.std.string.String> []) = [|v525; v526|]
    method3(v8, v527)
    let v528 : (int32 -> unit) = method15(v8)
    let v529 : string = method17()
    let v530 : Types.std.string.String = method18()
    let v531 : Types.std.string.String = method19()
    let v532 : Types.wasm_bindgen.JsValue = method20()
    let v533 : Types.wasm_bindgen.JsValue = method21()
    let v534 : (int32 -> unit) = closure1(v8)
    let v535 : string = "  v534(0);"
    let v536 : string = "async move {"
    let v537 : string = v536 + v535
    let v538 : (string -> Types.indexed_db_futures.request.OpenDbRequest) = closure2()
    let v539 : string = "  let mut db_ref_____ = v538(v529);"
    let v540 : string = v537 + v539
    let v541 : string = "  v534(1);"
    let v542 : string = v540 + v541
    let v543 : string = "  let db_param_ = &mut db_ref_____;"
    let v544 : string = v542 + v543
    let v545 : string = "  indexed_db_futures::prelude::IdbOpenDbRequestLike::set_on_upgrade_needed("
    let v546 : string = v544 + v545
    let v547 : string = "    db_param_,"
    let v548 : string = v546 + v547
    let v549 : string = "    Some(move |event: &indexed_db_futures::IdbVersionChangeEvent| {"
    let v550 : string = v548 + v549
    let v551 : string = "      v528(2);"
    let v552 : string = v550 + v551
    let v553 : string = "      let db: &indexed_db_futures::IdbDatabase = event.db();"
    let v554 : string = v552 + v553
    let v555 : string = "      v528(3);"
    let v556 : string = v554 + v555
    let v557 : string = "      if !db.object_store_names().any(|n| &n == &v531.clone()) {"
    let v558 : string = v556 + v557
    let v559 : string = "        let object_store = db.create_object_store(&v531.clone());"
    let v560 : string = v558 + v559
    let v561 : string = "        let object_store: indexed_db_futures::prelude::IdbObjectStore = object_store.unwrap();"
    let v562 : string = v560 + v561
    let v563 : string = "        ();"
    let v564 : string = v562 + v563
    let v565 : string = "      };"
    let v566 : string = v564 + v565
    let v567 : string = "      v528(4);"
    let v568 : string = v566 + v567
    let v569 : string = "      Ok(())"
    let v570 : string = v568 + v569
    let v571 : string = "    })"
    let v572 : string = v570 + v571
    let v573 : string = "  );"
    let v574 : string = v572 + v573
    let v575 : string = "  v534(5);"
    let v576 : string = v574 + v575
    let v577 : string = "  let db_future_ = db_ref_____;"
    let v578 : string = v576 + v577
    let v579 : string = "  let db_future = db_future_.into_future();"
    let v580 : string = v578 + v579
    let v581 : string = "  let db = db_future.await;"
    let v582 : string = v580 + v581
    let v583 : string = "  v534(6);"
    let v584 : string = v582 + v583
    let v585 : string = "  let db = db.unwrap();"
    let v586 : string = v584 + v585
    let v587 : string = "  v534(7);"
    let v588 : string = v586 + v587
    let v589 : string = "  let tx = db.transaction_on_one_with_mode(&v530.clone(), indexed_db_futures::prelude::IdbTransactionMode::Readwrite);"
    let v590 : string = v588 + v589
    let v591 : string = "  v534(8);"
    let v592 : string = v590 + v591
    let v593 : string = "  let tx = tx.unwrap();"
    let v594 : string = v592 + v593
    let v595 : string = "  v534(9);"
    let v596 : string = v594 + v595
    let v597 : string = "  let store = tx.object_store(&v530.clone()).unwrap();"
    let v598 : string = v596 + v597
    let v599 : string = "  v534(10);"
    let v600 : string = v598 + v599
    let v601 : string = "  store.put_key_val_owned("
    let v602 : string = v600 + v601
    let v603 : string = "    &v532,"
    let v604 : string = v602 + v603
    let v605 : string = "    &v533"
    let v606 : string = v604 + v605
    let v607 : string = "  ).unwrap();"
    let v608 : string = v606 + v607
    let v609 : string = "  v534(11);"
    let v610 : string = v608 + v609
    let v611 : string = "  tx.await.into_result().unwrap();"
    let v612 : string = v610 + v611
    let v613 : string = "  v534(12);"
    let v614 : string = v612 + v613
    let v615 : string = "  let tx = db.transaction_on_one_with_mode(&v530.clone(), indexed_db_futures::prelude::IdbTransactionMode::Readonly);"
    let v616 : string = v614 + v615
    let v617 : string = "  v534(13);"
    let v618 : string = v616 + v617
    let v619 : string = "  let tx = tx.unwrap();"
    let v620 : string = v618 + v619
    let v621 : string = "  v534(14);"
    let v622 : string = v620 + v621
    let v623 : string = "  let store = tx.object_store(&v530.clone()).unwrap();"
    let v624 : string = v622 + v623
    let v625 : string = "  v534(-1);"
    let v626 : string = v624 + v625
    let v627 : string = "  Ok::<(), web_sys::DomException>(())"
    let v628 : string = v626 + v627
    let v629 : string = "}"
    let v630 : string = v628 + v629
    let v631 : Types.core.future.Future<obj> = Fable.Core.Rust.emitExpr () v630
    let v632 : string = "async_std::task::block_on(v631)"
    Fable.Core.Rust.emitExpr () v632
    let v633 : string = "https://dummyjson.com/users"
    let v634 : string = "($0).to_string()"
    let v635 : Types.std.string.String = Fable.Core.Rust.emitExpr v633 v634
    let v636 : string = "ehttp::Request::get($0)"
    let v637 : Types.ehttp.Request = Fable.Core.Rust.emitExpr v635 v636
    let v638 : bool = method22()
    let v639 : string = "async_std::sync::Mutex::new(v638)"
    let v640 : Types.async_std.sync.Mutex<bool> = Fable.Core.Rust.emitExpr () v639
    let v641 : string = "async_std::sync::Condvar::new()"
    let v642 : Types.async_std.sync.Condvar = Fable.Core.Rust.emitExpr () v641
    let v643 : string = "(v640, v642)"
    let v644 : Types.Tuple<Types.async_std.sync.Mutex<bool>, Types.async_std.sync.Condvar> = Fable.Core.Rust.emitExpr () v643
    let v645 : Types.Tuple<Types.async_std.sync.Mutex<bool>, Types.async_std.sync.Condvar> = method23(v644)
    let v646 : string = "std::sync::Arc::new(v645)"
    let v647 : Types.std.sync.Arc<Types.Tuple<Types.async_std.sync.Mutex<bool>, Types.async_std.sync.Condvar>> = Fable.Core.Rust.emitExpr () v646
    let v648 : string = "v647.clone()"
    let v649 : Types.std.sync.Arc<Types.Tuple<Types.async_std.sync.Mutex<bool>, Types.async_std.sync.Condvar>> = Fable.Core.Rust.emitExpr () v648
    let v650 : Option<Types.ehttp.Response> = None |> unbox
    let v651 : Option<Types.ehttp.Response> = method24(v650)
    let v652 : string = "async_std::sync::Mutex::new(v651)"
    let v653 : Types.async_std.sync.Mutex<Option<Types.ehttp.Response>> = Fable.Core.Rust.emitExpr () v652
    let v654 : Types.async_std.sync.Mutex<Option<Types.ehttp.Response>> = method25(v653)
    let v655 : string = "std::sync::Arc::new(v654)"
    let v656 : Types.std.sync.Arc<Types.async_std.sync.Mutex<Option<Types.ehttp.Response>>> = Fable.Core.Rust.emitExpr () v655
    let v657 : Types.std.sync.Arc<Types.async_std.sync.Mutex<Option<Types.ehttp.Response>>> = method26(v656)
    let v658 : string = "std::cell::RefCell::new(v657)"
    let v659 : Types.std.cell.RefCell<Types.std.sync.Arc<Types.async_std.sync.Mutex<Option<Types.ehttp.Response>>>> = Fable.Core.Rust.emitExpr () v658
    let v660 : string = "v659.clone()"
    let v661 : Types.std.cell.RefCell<Types.std.sync.Arc<Types.async_std.sync.Mutex<Option<Types.ehttp.Response>>>> = Fable.Core.Rust.emitExpr () v660
    let v662 : string = "move |x: ehttp::Result<ehttp::Response>| {"
    let v663 : string = "  let r = x.clone().unwrap();"
    let v664 : string = v662 + v663
    let v665 : string = "  *v659.borrow_mut().try_lock().unwrap() = Some(r);"
    let v666 : string = v664 + v665
    let v667 : string = "  async_std::task::block_on(async move {"
    let v668 : string = v666 + v667
    let v669 : string = "    let (lock, cvar) = &*v649;"
    let v670 : string = v668 + v669
    let v671 : string = "    let mut started = lock.lock().await;"
    let v672 : string = v670 + v671
    let v673 : string = "    *started = true;"
    let v674 : string = v672 + v673
    let v675 : string = "    cvar.notify_one();"
    let v676 : string = v674 + v675
    let v677 : string = "  });"
    let v678 : string = v676 + v677
    let v679 : string = v678 + v629
    let v680 : obj = Fable.Core.Rust.emitExpr () v679
    let v681 : string = "Box::new(v680)"
    let v682 : Types.Box<obj> = Fable.Core.Rust.emitExpr () v681
    let v683 : string = "ehttp::fetch(v637, v682)"
    Fable.Core.Rust.emitExpr () v683
    let v684 : string = "  let (lock, cvar) = &*v647;"
    let v685 : string = v536 + v684
    let v686 : string = "  let mut started = lock.lock().await;"
    let v687 : string = v685 + v686
    let v688 : string = "  while !*started {"
    let v689 : string = v687 + v688
    let v690 : string = "    started = cvar.wait(started).await;"
    let v691 : string = v689 + v690
    let v692 : string = "  }"
    let v693 : string = v691 + v692
    let v694 : (Types.std.cell.RefCell<Types.std.sync.Arc<Types.async_std.sync.Mutex<Option<Types.ehttp.Response>>>> -> unit) = closure3(v8)
    let v695 : string = "  v694(v661);"
    let v696 : string = v693 + v695
    let v697 : string = v696 + v629
    let v698 : Types.core.future.Future<obj> = Fable.Core.Rust.emitExpr () v697
    let v699 : string = "async_std::task::block_on(v698)"
    Fable.Core.Rust.emitExpr () v699
    let v700 : string = "https://time.is"
    let v701 : string = $"r#\"{v700}\"#"
    let v702 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v701
    let v703 : Types.StaticRef<Types.Str> = v702 |> unbox
    let v704 : string = "futures_signals::signal::Mutable::new(v703)"
    let v705 : Types.futures_signals.signal.Mutable<Types.StaticRef<Types.Str>> = Fable.Core.Rust.emitExpr () v704
    let v706 : string = "std::rc::Rc::new(v705)"
    let v707 : Types.std.rc.Rc<Types.futures_signals.signal.Mutable<Types.StaticRef<Types.Str>>> = Fable.Core.Rust.emitExpr () v706
    let v708 : string = "input"
    let v709 : string = $"r#\"{v708}\"#"
    let v710 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v709
    let v711 : string = "dominator::DomBuilder::new_html($0)"
    let v712 : Types.dominator.DomBuilder<Types.web_sys.HtmlInputElement> = Fable.Core.Rust.emitExpr v710 v711
    let v713 : string = "color"
    let v714 : string = $"r#\"{v713}\"#"
    let v715 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v714
    let v716 : string = "#666"
    let v717 : string = $"r#\"{v716}\"#"
    let v718 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v717
    let v719 : string = " .style(v715, v718) "
    let v720 : string = v66 + v719
    let v721 : string = "dominator::class! {"
    let v722 : string = v721 + v720
    let v723 : string = v722 + v629
    let v724 : obj = Fable.Core.Rust.emitExpr () v723
    let v725 : string = "v712.class(&*v724)"
    let v726 : Types.dominator.DomBuilder<Types.web_sys.HtmlInputElement> = Fable.Core.Rust.emitExpr () v725
    let v727 : string = "placeholder"
    let v728 : string = $"r#\"{v727}\"#"
    let v729 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v728
    let v730 : string = "url"
    let v731 : string = $"r#\"{v730}\"#"
    let v732 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v731
    let v733 : string = "v726.attr(v729, v732)"
    let v734 : Types.dominator.DomBuilder<Types.web_sys.HtmlInputElement> = Fable.Core.Rust.emitExpr () v733
    let v735 : string = "v707.signal()"
    let v736 : Types.futures_signals.signal.MutableSignal<Types.StaticRef<Types.Str>> = Fable.Core.Rust.emitExpr () v735
    let v737 : string = $"r#\"{v514}\"#"
    let v738 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v737
    let v739 : Types.futures_signals.signal.MutableSignal<Types.StaticRef<Types.Str>> = method27(v736)
    let v740 : string = "v734.prop_signal(v738, v739)"
    let v741 : Types.dominator.DomBuilder<Types.web_sys.HtmlInputElement> = Fable.Core.Rust.emitExpr () v740
    let v742 : string = ".event(dominator::clone!("
    let v743 : (Types.std.rc.Rc<Types.web_sys.HtmlInputElement> -> unit) = closure4(v707)
    let v744 : string = "  v743 => move |_: dominator::events::Input| {"
    let v745 : string = v742 + v744
    let v746 : string = "    let element_ = std::rc::Rc::new(&element); "
    let v747 : string = v745 + v746
    let v748 : string = "    let el = (*element_).clone().into(); "
    let v749 : string = v747 + v748
    let v750 : string = "    v743(el); "
    let v751 : string = v749 + v750
    let v752 : string = "  }"
    let v753 : string = v751 + v752
    let v754 : string = "))"
    let v755 : string = v753 + v754
    let v756 : string = v755 + v66
    let v757 : string = "dominator::with_node!("
    let v758 : string = "   v741,"
    let v759 : string = v757 + v758
    let v760 : string = "   element => {"
    let v761 : string = v759 + v760
    let v762 : string = "      "
    let v763 : string = v761 + v762
    let v764 : string = v763 + v756
    let v765 : string = " "
    let v766 : string = v764 + v765
    let v767 : string = "   }"
    let v768 : string = v766 + v767
    let v769 : string = ")"
    let v770 : string = v768 + v769
    let v771 : Types.dominator.DomBuilder<Types.web_sys.HtmlInputElement> = Fable.Core.Rust.emitExpr () v770
    let v772 : string = "v771.into_dom()"
    let v773 : Types.dominator.Dom = Fable.Core.Rust.emitExpr () v772
    let v774 : string = "iframe"
    let v775 : string = $"r#\"{v774}\"#"
    let v776 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v775
    let v777 : string = "dominator::DomBuilder::new_html($0)"
    let v778 : Types.dominator.DomBuilder<Types.web_sys.HtmlElement> = Fable.Core.Rust.emitExpr v776 v777
    let v779 : string = $"r#\"{v76}\"#"
    let v780 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v779
    let v781 : string = $"r#\"{v78}\"#"
    let v782 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v781
    let v783 : string = " .style(v780, v782) "
    let v784 : string = v66 + v783
    let v785 : string = $"r#\"{v162}\"#"
    let v786 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v785
    let v787 : string = "1"
    let v788 : string = $"r#\"{v787}\"#"
    let v789 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v788
    let v790 : string = " .style(v786, v789) "
    let v791 : string = v784 + v790
    let v792 : string = "border"
    let v793 : string = $"r#\"{v792}\"#"
    let v794 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v793
    let v795 : string = $"r#\"{v62}\"#"
    let v796 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v795
    let v797 : string = " .style(v794, v796) "
    let v798 : string = v791 + v797
    let v799 : string = "dominator::class! {"
    let v800 : string = v799 + v798
    let v801 : string = v800 + v629
    let v802 : obj = Fable.Core.Rust.emitExpr () v801
    let v803 : string = "v778.class(&*v802)"
    let v804 : Types.dominator.DomBuilder<Types.web_sys.HtmlElement> = Fable.Core.Rust.emitExpr () v803
    let v805 : string = "title"
    let v806 : string = $"r#\"{v805}\"#"
    let v807 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v806
    let v808 : string = $"r#\"{v805}\"#"
    let v809 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v808
    let v810 : string = "v804.attr(v807, v809)"
    let v811 : Types.dominator.DomBuilder<Types.web_sys.HtmlElement> = Fable.Core.Rust.emitExpr () v810
    let v812 : string = "v707.signal()"
    let v813 : Types.futures_signals.signal.MutableSignal<Types.StaticRef<Types.Str>> = Fable.Core.Rust.emitExpr () v812
    let v814 : string = "src"
    let v815 : string = $"r#\"{v814}\"#"
    let v816 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v815
    let v817 : Types.futures_signals.signal.MutableSignal<Types.StaticRef<Types.Str>> = method27(v813)
    let v818 : string = "v811.prop_signal(v816, v817)"
    let v819 : Types.dominator.DomBuilder<Types.web_sys.HtmlElement> = Fable.Core.Rust.emitExpr () v818
    let v820 : string = "v819.into_dom()"
    let v821 : Types.dominator.Dom = Fable.Core.Rust.emitExpr () v820
    let v822 : string = "div"
    let v823 : string = $"r#\"{v822}\"#"
    let v824 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v823
    let v825 : string = "dominator::DomBuilder::new_html($0)"
    let v826 : Types.dominator.DomBuilder<Types.web_sys.HtmlElement> = Fable.Core.Rust.emitExpr v824 v825
    let v827 : string = "background-color"
    let v828 : string = $"r#\"{v827}\"#"
    let v829 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v828
    let v830 : string = $"r#\"{v716}\"#"
    let v831 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v830
    let v832 : string = " .style(v829, v831) "
    let v833 : string = v66 + v832
    let v834 : string = $"r#\"{v160}\"#"
    let v835 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v834
    let v836 : string = $"r#\"{v162}\"#"
    let v837 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v836
    let v838 : string = " .style(v835, v837) "
    let v839 : string = v833 + v838
    let v840 : string = $"r#\"{v162}\"#"
    let v841 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v840
    let v842 : string = $"r#\"{v787}\"#"
    let v843 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v842
    let v844 : string = " .style(v841, v843) "
    let v845 : string = v839 + v844
    let v846 : string = $"r#\"{v168}\"#"
    let v847 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v846
    let v848 : string = "column"
    let v849 : string = $"r#\"{v848}\"#"
    let v850 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v849
    let v851 : string = " .style(v847, v850) "
    let v852 : string = v845 + v851
    let v853 : string = "dominator::class! {"
    let v854 : string = v853 + v852
    let v855 : string = v854 + v629
    let v856 : obj = Fable.Core.Rust.emitExpr () v855
    let v857 : string = "v826.class(&*v856)"
    let v858 : Types.dominator.DomBuilder<Types.web_sys.HtmlElement> = Fable.Core.Rust.emitExpr () v857
    let v859 : string = "v773"
    let v860 : string = v66 + v859
    let v861 : string = ", v821"
    let v862 : string = v860 + v861
    let v863 : string = "["
    let v864 : string = v863 + v862
    let v865 : string = "]"
    let v866 : string = v864 + v865
    let v867 : obj = Fable.Core.Rust.emitExpr () v866
    let v868 : string = "v858.children(v867)"
    let v869 : Types.dominator.DomBuilder<Types.web_sys.HtmlElement> = Fable.Core.Rust.emitExpr () v868
    let v870 : string = "v869.into_dom()"
    let v871 : Types.dominator.Dom = Fable.Core.Rust.emitExpr () v870
    let v872 : string = "dominator::body()"
    let v873 : Types.web_sys.HtmlElement = Fable.Core.Rust.emitExpr () v872
    let v874 : string = "dominator::append_dom(&v873, v871)"
    Fable.Core.Rust.emitExpr () v874
    let v875 : string = "app end"
    let v876 : Types.EmitType<Types.std.string.String> = method1(v875)
    let v877 : string = "???"
    let v878 : Types.EmitType<Types.std.string.String> = method1(v877)
    let v879 : (Types.EmitType<Types.std.string.String> []) = [|v876; v878|]
    method3(v8, v879)
    0
let v0 : (unit -> int32) = closure0()
()
