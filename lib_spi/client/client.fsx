let rec method0 () : struct (string * string * string * bool) =
    let v0 : string = ""
    let v1 : obj = v0
    struct (v0, v0, v0, true)
and method1 (v0 : int32, v1 : string) : string =
    let v2 : int32 = String.length v1
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : string = $"0{v1}"
        method1(v0, v4)
    else
        v1
and method2 (v0 : string) : string =
    v0
and method3 () : string =
    let v0 : string = "$1=$2"
    v0
and method4 () : string =
    let v0 : string = "[$1]"
    v0
and method5 () : string =
    let v0 : string = " "
    v0
and method6 () : string =
    let v0 : string = "387957"
    v0
and method7 () : string =
    let v0 : string = "222222"
    v0
and closure0 () () : int32 =
    let struct (v0 : string, v1 : string, v2 : string, v3 : bool) = method0()
    let v4 : string = "chrono::Utc::now()"
    let v5 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v6 : string = "($0).timestamp()"
    let v7 : int64 = Fable.Core.Rust.emitExpr v5 v6
    let v8 : string = "web_sys::window().unwrap()"
    let v9 : obj = Fable.Core.Rust.emitExpr () v8
    let v10 : string = "$0.document().unwrap()"
    let v11 : obj = Fable.Core.Rust.emitExpr v9 v10
    let v12 : string = "$0.body().unwrap()"
    let v13 : obj = Fable.Core.Rust.emitExpr v11 v12
    let v14 : string = "iframe"
    let v15 : string = $"r#\"{v14}\"#"
    let v16 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v15
    let v17 : string = "$0.create_element($1).unwrap()"
    let v18 : obj = Fable.Core.Rust.emitExpr struct (v11, v16) v17
    let v19 : string = "window"
    let v20 : string = "($0).to_string()"
    let v21 : Types.std.string.String = Fable.Core.Rust.emitExpr v19 v20
    let v22 : Types.EmitType<Types.std.string.String> = v21 |> unbox<Types.EmitType<Types.std.string.String>>
    let v23 : string = "format!(\"{:?}\", $0)"
    let v24 : Types.std.string.String = Fable.Core.Rust.emitExpr v9 v23
    let v25 : Types.EmitType<Types.std.string.String> = v24 |> unbox<Types.EmitType<Types.std.string.String>>
    let v26 : string = "document"
    let v27 : Types.std.string.String = Fable.Core.Rust.emitExpr v26 v20
    let v28 : Types.EmitType<Types.std.string.String> = v27 |> unbox<Types.EmitType<Types.std.string.String>>
    let v29 : Types.std.string.String = Fable.Core.Rust.emitExpr v11 v23
    let v30 : Types.EmitType<Types.std.string.String> = v29 |> unbox<Types.EmitType<Types.std.string.String>>
    let v31 : string = "body"
    let v32 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v20
    let v33 : Types.EmitType<Types.std.string.String> = v32 |> unbox<Types.EmitType<Types.std.string.String>>
    let v34 : Types.std.string.String = Fable.Core.Rust.emitExpr v13 v23
    let v35 : Types.EmitType<Types.std.string.String> = v34 |> unbox<Types.EmitType<Types.std.string.String>>
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v14 v20
    let v37 : Types.EmitType<Types.std.string.String> = v36 |> unbox<Types.EmitType<Types.std.string.String>>
    let v38 : Types.std.string.String = Fable.Core.Rust.emitExpr v18 v23
    let v39 : Types.EmitType<Types.std.string.String> = v38 |> unbox<Types.EmitType<Types.std.string.String>>
    let v40 : (Types.EmitType<Types.std.string.String> []) = [|v22; v25; v28; v30; v33; v35; v37; v39|]
    let v41 : string = "core::ops::Deref::deref($0)"
    let v42 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v40 v41
    let v43 : Types.std.string.String = Fable.Core.Rust.emitExpr v42 v23
    let v44 : Types.EmitType<Types.std.string.String> = v43 |> unbox<Types.EmitType<Types.std.string.String>>
    let v45 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v46 : int64 = Fable.Core.Rust.emitExpr v45 v6
    let v47 : int64 = v46 - v7
    let v48 : string = (v47).ToString ()
    let v49 : int32 = 6
    let v50 : string = method1(v49, v48)
    let v51 : string = "rand::random::<u8>()"
    let v52 : uint8 = Fable.Core.Rust.emitExpr () v51
    let v53 : string = "timestamp"
    let v54 : Types.std.string.String = Fable.Core.Rust.emitExpr v53 v20
    let v55 : Types.EmitType<Types.std.string.String> = v54 |> unbox<Types.EmitType<Types.std.string.String>>
    let v56 : Types.std.string.String = Fable.Core.Rust.emitExpr v50 v20
    let v57 : Types.EmitType<Types.std.string.String> = v56 |> unbox<Types.EmitType<Types.std.string.String>>
    let v58 : string = "run_id"
    let v59 : Types.std.string.String = Fable.Core.Rust.emitExpr v58 v20
    let v60 : Types.EmitType<Types.std.string.String> = v59 |> unbox<Types.EmitType<Types.std.string.String>>
    let v61 : Types.std.string.String = Fable.Core.Rust.emitExpr v52 v23
    let v62 : Types.EmitType<Types.std.string.String> = v61 |> unbox<Types.EmitType<Types.std.string.String>>
    let v63 : string = "log_level"
    let v64 : Types.std.string.String = Fable.Core.Rust.emitExpr v63 v20
    let v65 : Types.EmitType<Types.std.string.String> = v64 |> unbox<Types.EmitType<Types.std.string.String>>
    let v66 : string = "Debug"
    let v67 : Types.std.string.String = Fable.Core.Rust.emitExpr v66 v20
    let v68 : Types.EmitType<Types.std.string.String> = v67 |> unbox<Types.EmitType<Types.std.string.String>>
    let v69 : (Types.EmitType<Types.std.string.String> []) = [|v55; v57; v60; v62; v65; v68|]
    let v70 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v69 v41
    let v71 : Types.std.string.String = Fable.Core.Rust.emitExpr v70 v23
    let v72 : Types.EmitType<Types.std.string.String> = v71 |> unbox<Types.EmitType<Types.std.string.String>>
    let v73 : string = "> app ()"
    let v74 : Types.std.string.String = Fable.Core.Rust.emitExpr v73 v20
    let v75 : Types.EmitType<Types.std.string.String> = v74 |> unbox<Types.EmitType<Types.std.string.String>>
    let v76 : (Types.EmitType<Types.std.string.String> []) = [|v75|]
    let v77 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v76 v41
    let v78 : Types.std.string.String = Fable.Core.Rust.emitExpr v77 v23
    let v79 : Types.EmitType<Types.std.string.String> = v78 |> unbox<Types.EmitType<Types.std.string.String>>
    let v80 : Types.std.string.String = v79 |> unbox
    let v81 : string = "fable_library_rust::String_::fromStr($0)"
    let v82 : string = Fable.Core.Rust.emitExpr v80 v81
    let v83 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v84 : string = $"r#\"{v83}\"#"
    let v85 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v84
    let v86 : string = "regex::RegexBuilder::new($0)"
    let v87 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v85 v86
    let v88 : string = "$0.build().unwrap()"
    let v89 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v87 v88
    let v90 : string = method2(v82)
    let v91 : string = "$0.as_str()"
    let v92 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v90 v91
    let v93 : string = method3()
    let v94 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v93 v91
    let v95 : string = "$0.replace_all(&$1, $2).to_string()"
    let v96 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v89, v92, v94) v95
    let v97 : string = Fable.Core.Rust.emitExpr v96 v81
    let v98 : string = "\\[\"(.*?)\"\\]"
    let v99 : string = $"r#\"{v98}\"#"
    let v100 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v99
    let v101 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v100 v86
    let v102 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v101 v88
    let v103 : string = method2(v97)
    let v104 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v103 v91
    let v105 : string = method4()
    let v106 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v105 v91
    let v107 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v102, v104, v106) v95
    let v108 : string = Fable.Core.Rust.emitExpr v107 v81
    let v109 : string = ", "
    let v110 : string = $"r#\"{v109}\"#"
    let v111 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v110
    let v112 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v111 v86
    let v113 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v112 v88
    let v114 : string = method2(v108)
    let v115 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v114 v91
    let v116 : string = method5()
    let v117 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v116 v91
    let v118 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v113, v115, v117) v95
    let v119 : string = Fable.Core.Rust.emitExpr v118 v81
    let v120 : Types.std.string.String = Fable.Core.Rust.emitExpr v119 v20
    let v121 : Types.EmitType<Types.std.string.String> = v120 |> unbox<Types.EmitType<Types.std.string.String>>
    let v122 : string = "purple"
    let v123 : string = "colored::Colorize::color(&*$0, $1.to_string())"
    let v124 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v121, v122) v123
    let v125 : string = "format!(\"{}\", $0)"
    let v126 : Types.std.string.String = Fable.Core.Rust.emitExpr v124 v125
    let v127 : Types.std.string.String = v44 |> unbox
    let v128 : string = Fable.Core.Rust.emitExpr v127 v81
    let v129 : string = $"r#\"{v83}\"#"
    let v130 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v129
    let v131 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v130 v86
    let v132 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v131 v88
    let v133 : string = method2(v128)
    let v134 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v133 v91
    let v135 : string = method3()
    let v136 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v135 v91
    let v137 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v132, v134, v136) v95
    let v138 : string = Fable.Core.Rust.emitExpr v137 v81
    let v139 : string = $"r#\"{v98}\"#"
    let v140 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v139
    let v141 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v140 v86
    let v142 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v141 v88
    let v143 : string = method2(v138)
    let v144 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v143 v91
    let v145 : string = method4()
    let v146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v145 v91
    let v147 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v142, v144, v146) v95
    let v148 : string = Fable.Core.Rust.emitExpr v147 v81
    let v149 : string = $"r#\"{v109}\"#"
    let v150 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v149
    let v151 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v150 v86
    let v152 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v151 v88
    let v153 : string = method2(v148)
    let v154 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v153 v91
    let v155 : string = method5()
    let v156 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v155 v91
    let v157 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v152, v154, v156) v95
    let v158 : string = Fable.Core.Rust.emitExpr v157 v81
    let v159 : Types.std.string.String = Fable.Core.Rust.emitExpr v158 v20
    let v160 : Types.EmitType<Types.std.string.String> = v159 |> unbox<Types.EmitType<Types.std.string.String>>
    let v161 : string = method6()
    let v162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v161 v91
    let v163 : unativeint = unativeint 0
    let v164 : unativeint = unativeint 2
    let v165 : string = "&$0[$1..$2]"
    let v166 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v162, v163, v164) v165
    let v167 : string = Fable.Core.Rust.emitExpr v166 v81
    let v168 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v169 : uint8 = Fable.Core.Rust.emitExpr v167 v168
    let v170 : string = method6()
    let v171 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v170 v91
    let v172 : unativeint = unativeint 2
    let v173 : unativeint = unativeint 4
    let v174 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v171, v172, v173) v165
    let v175 : string = Fable.Core.Rust.emitExpr v174 v81
    let v176 : uint8 = Fable.Core.Rust.emitExpr v175 v168
    let v177 : string = method6()
    let v178 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v177 v91
    let v179 : unativeint = unativeint 4
    let v180 : unativeint = unativeint 6
    let v181 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v178, v179, v180) v165
    let v182 : string = Fable.Core.Rust.emitExpr v181 v81
    let v183 : uint8 = Fable.Core.Rust.emitExpr v182 v168
    let v184 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v185 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v160, v169, v176, v183) v184
    let v186 : Types.std.string.String = Fable.Core.Rust.emitExpr v185 v125
    let v187 : Types.std.string.String = v72 |> unbox
    let v188 : string = Fable.Core.Rust.emitExpr v187 v81
    let v189 : string = $"r#\"{v83}\"#"
    let v190 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v189
    let v191 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v190 v86
    let v192 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v191 v88
    let v193 : string = method2(v188)
    let v194 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v193 v91
    let v195 : string = method3()
    let v196 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v195 v91
    let v197 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v192, v194, v196) v95
    let v198 : string = Fable.Core.Rust.emitExpr v197 v81
    let v199 : string = $"r#\"{v98}\"#"
    let v200 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v199
    let v201 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v200 v86
    let v202 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v201 v88
    let v203 : string = method2(v198)
    let v204 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v203 v91
    let v205 : string = method4()
    let v206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v205 v91
    let v207 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v202, v204, v206) v95
    let v208 : string = Fable.Core.Rust.emitExpr v207 v81
    let v209 : string = $"r#\"{v109}\"#"
    let v210 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v209
    let v211 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v210 v86
    let v212 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v211 v88
    let v213 : string = method2(v208)
    let v214 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v213 v91
    let v215 : string = method5()
    let v216 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v215 v91
    let v217 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v212, v214, v216) v95
    let v218 : string = Fable.Core.Rust.emitExpr v217 v81
    let v219 : Types.std.string.String = Fable.Core.Rust.emitExpr v218 v20
    let v220 : Types.EmitType<Types.std.string.String> = v219 |> unbox<Types.EmitType<Types.std.string.String>>
    let v221 : string = method7()
    let v222 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v221 v91
    let v223 : unativeint = unativeint 0
    let v224 : unativeint = unativeint 2
    let v225 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v222, v223, v224) v165
    let v226 : string = Fable.Core.Rust.emitExpr v225 v81
    let v227 : uint8 = Fable.Core.Rust.emitExpr v226 v168
    let v228 : string = method7()
    let v229 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v228 v91
    let v230 : unativeint = unativeint 2
    let v231 : unativeint = unativeint 4
    let v232 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v229, v230, v231) v165
    let v233 : string = Fable.Core.Rust.emitExpr v232 v81
    let v234 : uint8 = Fable.Core.Rust.emitExpr v233 v168
    let v235 : string = method7()
    let v236 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v235 v91
    let v237 : unativeint = unativeint 4
    let v238 : unativeint = unativeint 6
    let v239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v236, v237, v238) v165
    let v240 : string = Fable.Core.Rust.emitExpr v239 v81
    let v241 : uint8 = Fable.Core.Rust.emitExpr v240 v168
    let v242 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v220, v227, v234, v241) v184
    let v243 : Types.std.string.String = Fable.Core.Rust.emitExpr v242 v125
    let v244 : string = $"{v126} {v186} {v243}"
    let v245 : string = "wasm_bindgen::JsValue::from_str($0)"
    let v246 : obj = Fable.Core.Rust.emitExpr v244 v245
    let v247 : string = "web_sys::console::log_1(&$0)"
    Fable.Core.Rust.emitExpr v246 v247
    let v248 : string = "src"
    let v249 : string = $"r#\"{v248}\"#"
    let v250 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v249
    let v251 : string = "https://time.is"
    let v252 : string = $"r#\"{v251}\"#"
    let v253 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v252
    let v254 : string = "$0.set_attribute($1, $2).unwrap()"
    Fable.Core.Rust.emitExpr struct (v18, v250, v253) v254
    let v255 : string = "width"
    let v256 : string = $"r#\"{v255}\"#"
    let v257 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v256
    let v258 : string = "100%"
    let v259 : string = $"r#\"{v258}\"#"
    let v260 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v259
    Fable.Core.Rust.emitExpr struct (v18, v257, v260) v254
    let v261 : string = "style"
    let v262 : string = $"r#\"{v261}\"#"
    let v263 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v262
    let v264 : string = "height: 100vh; border: 0;"
    let v265 : string = $"r#\"{v264}\"#"
    let v266 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v265
    Fable.Core.Rust.emitExpr struct (v18, v263, v266) v254
    let v267 : string = "data-test"
    let v268 : string = $"r#\"{v267}\"#"
    let v269 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v268
    let v270 : string = "1"
    let v271 : string = $"r#\"{v270}\"#"
    let v272 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v271
    Fable.Core.Rust.emitExpr struct (v18, v269, v272) v254
    let v273 : string = "$0.append_child(&$1).unwrap()"
    Fable.Core.Rust.emitExpr struct (v13, v18) v273
    let v274 : string = "a"
    let v275 : string = "($0).as_ref().to_string()"
    let v276 : Types.std.string.String = Fable.Core.Rust.emitExpr v274 v275
    let v277 : string = "b"
    let v278 : Types.std.string.String = Fable.Core.Rust.emitExpr v277 v275
    let v279 : (Types.std.string.String []) = [|v276; v278|]
    let v280 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v279 v41
    let v281 : string = "$0"
    let v282 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v280 v281
    let v283 : obj = v282
    let v284 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
    let v285 : obj = Fable.Core.Rust.emitExpr v283 v284
    let v286 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
    Fable.Core.Rust.emitExpr v285 v286
    0
let v0 : (unit -> int32) = closure0()
()
