type [<Struct>] US0 =
    | US0_0
    | US0_1
let rec method0 () : struct (string * string * string * bool) =
    let v0 : string = ""
    let v1 : obj = v0
    struct (v0, v0, v0, true)
and method1 (v0 : int32, v1 : string) : string =
    let v2 : int32 = String.length v1
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : string = $"0{v1}"
        method1(v0, v4)
    else
        v1
and method2 (v0 : string) : string =
    v0
and method3 () : string =
    let v0 : string = "$1=$2"
    v0
and method4 () : string =
    let v0 : string = "[$1]"
    v0
and method5 () : string =
    let v0 : string = " "
    v0
and method6 () : string =
    let v0 : string = "387957"
    v0
and method7 () : string =
    let v0 : string = "385779"
    v0
and closure0 () () : int32 =
    let struct (v0 : string, v1 : string, v2 : string, v3 : bool) = method0()
    let v4 : string = "chrono::Utc::now()"
    let v5 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v6 : string = "($0).timestamp()"
    let v7 : int64 = Fable.Core.Rust.emitExpr v5 v6
    let v8 : string = "web_sys::window().unwrap()"
    let v9 : obj = Fable.Core.Rust.emitExpr () v8
    let v10 : string = "$0.document().unwrap()"
    let v11 : obj = Fable.Core.Rust.emitExpr v9 v10
    let v12 : string = "$0.body().unwrap()"
    let v13 : obj = Fable.Core.Rust.emitExpr v11 v12
    let v14 : string = "iframe"
    let v15 : string = $"r#\"{v14}\"#"
    let v16 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v15
    let v17 : string = "$0.create_element($1).unwrap()"
    let v18 : obj = Fable.Core.Rust.emitExpr struct (v11, v16) v17
    let v19 : string = "window"
    let v20 : string = "($0).to_string()"
    let v21 : Types.std.string.String = Fable.Core.Rust.emitExpr v19 v20
    let v22 : Types.EmitType<Types.std.string.String> = v21 |> unbox<Types.EmitType<Types.std.string.String>>
    let v23 : string = "format!(\"{:?}\", $0)"
    let v24 : Types.std.string.String = Fable.Core.Rust.emitExpr v9 v23
    let v25 : Types.EmitType<Types.std.string.String> = v24 |> unbox<Types.EmitType<Types.std.string.String>>
    let v26 : string = "document"
    let v27 : Types.std.string.String = Fable.Core.Rust.emitExpr v26 v20
    let v28 : Types.EmitType<Types.std.string.String> = v27 |> unbox<Types.EmitType<Types.std.string.String>>
    let v29 : Types.std.string.String = Fable.Core.Rust.emitExpr v11 v23
    let v30 : Types.EmitType<Types.std.string.String> = v29 |> unbox<Types.EmitType<Types.std.string.String>>
    let v31 : string = "body"
    let v32 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v20
    let v33 : Types.EmitType<Types.std.string.String> = v32 |> unbox<Types.EmitType<Types.std.string.String>>
    let v34 : Types.std.string.String = Fable.Core.Rust.emitExpr v13 v23
    let v35 : Types.EmitType<Types.std.string.String> = v34 |> unbox<Types.EmitType<Types.std.string.String>>
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v14 v20
    let v37 : Types.EmitType<Types.std.string.String> = v36 |> unbox<Types.EmitType<Types.std.string.String>>
    let v38 : Types.std.string.String = Fable.Core.Rust.emitExpr v18 v23
    let v39 : Types.EmitType<Types.std.string.String> = v38 |> unbox<Types.EmitType<Types.std.string.String>>
    let v40 : (Types.EmitType<Types.std.string.String> []) = [|v22; v25; v28; v30; v33; v35; v37; v39|]
    let v41 : string = "core::ops::Deref::deref($0)"
    let v42 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "&***$0"
    let v44 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v44 v43
    let v46 : Types.std.string.String = Fable.Core.Rust.emitExpr v45 v23
    let v47 : Types.EmitType<Types.std.string.String> = v46 |> unbox<Types.EmitType<Types.std.string.String>>
    let v48 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v49 : int64 = Fable.Core.Rust.emitExpr v48 v6
    let v50 : int64 = v49 - v7
    let v51 : string = (v50).ToString ()
    let v52 : int32 = 6
    let v53 : string = method1(v52, v51)
    let v54 : string = "rand::random::<u8>()"
    let v55 : uint8 = Fable.Core.Rust.emitExpr () v54
    let v56 : string = "timestamp"
    let v57 : Types.std.string.String = Fable.Core.Rust.emitExpr v56 v20
    let v58 : Types.EmitType<Types.std.string.String> = v57 |> unbox<Types.EmitType<Types.std.string.String>>
    let v59 : Types.std.string.String = Fable.Core.Rust.emitExpr v53 v20
    let v60 : Types.EmitType<Types.std.string.String> = v59 |> unbox<Types.EmitType<Types.std.string.String>>
    let v61 : string = "run_id"
    let v62 : Types.std.string.String = Fable.Core.Rust.emitExpr v61 v20
    let v63 : Types.EmitType<Types.std.string.String> = v62 |> unbox<Types.EmitType<Types.std.string.String>>
    let v64 : Types.std.string.String = Fable.Core.Rust.emitExpr v55 v23
    let v65 : Types.EmitType<Types.std.string.String> = v64 |> unbox<Types.EmitType<Types.std.string.String>>
    let v66 : string = "log_level"
    let v67 : Types.std.string.String = Fable.Core.Rust.emitExpr v66 v20
    let v68 : Types.EmitType<Types.std.string.String> = v67 |> unbox<Types.EmitType<Types.std.string.String>>
    let v69 : string = "Debug"
    let v70 : Types.std.string.String = Fable.Core.Rust.emitExpr v69 v20
    let v71 : Types.EmitType<Types.std.string.String> = v70 |> unbox<Types.EmitType<Types.std.string.String>>
    let v72 : (Types.EmitType<Types.std.string.String> []) = [|v58; v60; v63; v65; v68; v71|]
    let v73 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v72 v41
    let v74 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v73 v43
    let v75 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v74 v43
    let v76 : Types.std.string.String = Fable.Core.Rust.emitExpr v75 v23
    let v77 : Types.EmitType<Types.std.string.String> = v76 |> unbox<Types.EmitType<Types.std.string.String>>
    let v78 : string = "> app ()"
    let v79 : Types.std.string.String = Fable.Core.Rust.emitExpr v78 v20
    let v80 : Types.EmitType<Types.std.string.String> = v79 |> unbox<Types.EmitType<Types.std.string.String>>
    let v81 : (Types.EmitType<Types.std.string.String> []) = [|v80|]
    let v82 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v81 v41
    let v83 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v82 v43
    let v84 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v83 v43
    let v85 : Types.std.string.String = Fable.Core.Rust.emitExpr v84 v23
    let v86 : Types.EmitType<Types.std.string.String> = v85 |> unbox<Types.EmitType<Types.std.string.String>>
    let v87 : string = "format!(\"{}\", $0)"
    let v88 : Types.std.string.String = Fable.Core.Rust.emitExpr v86 v87
    let v89 : string = (v88).ToString ()
    let v90 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v91 : string = $"r#\"{v90}\"#"
    let v92 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v91
    let v93 : string = "regex::RegexBuilder::new($0)"
    let v94 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v92 v93
    let v95 : string = "$0.build().unwrap()"
    let v96 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v94 v95
    let v97 : string = method2(v89)
    let v98 : string = "$0.as_str()"
    let v99 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v97 v98
    let v100 : string = method3()
    let v101 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v100 v98
    let v102 : string = "$0.replace_all(&$1, $2).to_string()"
    let v103 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v96, v99, v101) v102
    let v104 : string = "fable_library_rust::String_::fromStr($0)"
    let v105 : string = Fable.Core.Rust.emitExpr v103 v104
    let v106 : string = "\\[\"(.*?)\"\\]"
    let v107 : string = $"r#\"{v106}\"#"
    let v108 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v107
    let v109 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v108 v93
    let v110 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v109 v95
    let v111 : string = method2(v105)
    let v112 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v111 v98
    let v113 : string = method4()
    let v114 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v113 v98
    let v115 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v110, v112, v114) v102
    let v116 : string = Fable.Core.Rust.emitExpr v115 v104
    let v117 : string = ", "
    let v118 : string = $"r#\"{v117}\"#"
    let v119 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v118
    let v120 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v119 v93
    let v121 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v120 v95
    let v122 : string = method2(v116)
    let v123 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v122 v98
    let v124 : string = method5()
    let v125 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v124 v98
    let v126 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v121, v123, v125) v102
    let v127 : string = Fable.Core.Rust.emitExpr v126 v104
    let v128 : Types.std.string.String = Fable.Core.Rust.emitExpr v127 v20
    let v129 : Types.EmitType<Types.std.string.String> = v128 |> unbox<Types.EmitType<Types.std.string.String>>
    let v130 : Types.std.string.String = Fable.Core.Rust.emitExpr v47 v87
    let v131 : string = (v130).ToString ()
    let v132 : string = $"r#\"{v90}\"#"
    let v133 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v132
    let v134 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v133 v93
    let v135 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v134 v95
    let v136 : string = method2(v131)
    let v137 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v136 v98
    let v138 : string = method3()
    let v139 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v138 v98
    let v140 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v135, v137, v139) v102
    let v141 : string = Fable.Core.Rust.emitExpr v140 v104
    let v142 : string = $"r#\"{v106}\"#"
    let v143 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v142
    let v144 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v143 v93
    let v145 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v144 v95
    let v146 : string = method2(v141)
    let v147 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v146 v98
    let v148 : string = method4()
    let v149 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v148 v98
    let v150 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v145, v147, v149) v102
    let v151 : string = Fable.Core.Rust.emitExpr v150 v104
    let v152 : string = $"r#\"{v117}\"#"
    let v153 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v152
    let v154 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v153 v93
    let v155 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v154 v95
    let v156 : string = method2(v151)
    let v157 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v156 v98
    let v158 : string = method5()
    let v159 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v158 v98
    let v160 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v155, v157, v159) v102
    let v161 : string = Fable.Core.Rust.emitExpr v160 v104
    let v162 : Types.std.string.String = Fable.Core.Rust.emitExpr v161 v20
    let v163 : Types.EmitType<Types.std.string.String> = v162 |> unbox<Types.EmitType<Types.std.string.String>>
    let v164 : Types.std.string.String = Fable.Core.Rust.emitExpr v77 v87
    let v165 : string = (v164).ToString ()
    let v166 : string = $"r#\"{v90}\"#"
    let v167 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v166
    let v168 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v167 v93
    let v169 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v168 v95
    let v170 : string = method2(v165)
    let v171 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v170 v98
    let v172 : string = method3()
    let v173 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v172 v98
    let v174 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v169, v171, v173) v102
    let v175 : string = Fable.Core.Rust.emitExpr v174 v104
    let v176 : string = $"r#\"{v106}\"#"
    let v177 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v176
    let v178 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v177 v93
    let v179 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v178 v95
    let v180 : string = method2(v175)
    let v181 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v180 v98
    let v182 : string = method4()
    let v183 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v182 v98
    let v184 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v179, v181, v183) v102
    let v185 : string = Fable.Core.Rust.emitExpr v184 v104
    let v186 : string = $"r#\"{v117}\"#"
    let v187 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v186
    let v188 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v187 v93
    let v189 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v188 v95
    let v190 : string = method2(v185)
    let v191 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v190 v98
    let v192 : string = method5()
    let v193 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v192 v98
    let v194 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v189, v191, v193) v102
    let v195 : string = Fable.Core.Rust.emitExpr v194 v104
    let v196 : Types.std.string.String = Fable.Core.Rust.emitExpr v195 v20
    let v197 : Types.EmitType<Types.std.string.String> = v196 |> unbox<Types.EmitType<Types.std.string.String>>
    let v198 : string = "cfg!(target_arch = \"wasm32\")"
    let v199 : bool = Fable.Core.Rust.emitExpr () v198
    let v202 : US0 =
        if v199 then
            US0_1
        else
            US0_0
    match v202 with
    | US0_1 -> (* Wasm32 *)
        let v203 : string = (v129).ToString ()
        let v204 : string = (v163).ToString ()
        let v205 : string = (v197).ToString ()
        let v206 : string = " %c"
        let v207 : string = v203 + v206
        let v208 : string = v207 + v204
        let v209 : string = v208 + v206
        let v210 : string = v209 + v205
        let v211 : string = "($0).as_ref().to_string()"
        let v212 : Types.std.string.String = Fable.Core.Rust.emitExpr v210 v211
        let v213 : string = "387957"
        let v214 : string = $"color: #{v213};"
        let v215 : Types.std.string.String = Fable.Core.Rust.emitExpr v214 v211
        let v216 : string = "color: #385779;"
        let v217 : Types.std.string.String = Fable.Core.Rust.emitExpr v216 v211
        let v218 : (Types.std.string.String []) = [|v212; v215; v217|]
        let v219 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v218 v41
        let v220 : obj = v219
        let v221 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v222 : obj = Fable.Core.Rust.emitExpr v220 v221
        let v223 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v222 v223
        ()
    | _ ->
        let v224 : string = method6()
        let v225 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v224 v98
        let v226 : unativeint = unativeint 0
        let v227 : unativeint = unativeint 2
        let v228 : string = "&$0[$1..$2]"
        let v229 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v225, v226, v227) v228
        let v230 : string = Fable.Core.Rust.emitExpr v229 v104
        let v231 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v232 : uint8 = Fable.Core.Rust.emitExpr v230 v231
        let v233 : string = method6()
        let v234 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v233 v98
        let v235 : unativeint = unativeint 2
        let v236 : unativeint = unativeint 4
        let v237 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v234, v235, v236) v228
        let v238 : string = Fable.Core.Rust.emitExpr v237 v104
        let v239 : uint8 = Fable.Core.Rust.emitExpr v238 v231
        let v240 : string = method6()
        let v241 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v240 v98
        let v242 : unativeint = unativeint 4
        let v243 : unativeint = unativeint 6
        let v244 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v241, v242, v243) v228
        let v245 : string = Fable.Core.Rust.emitExpr v244 v104
        let v246 : uint8 = Fable.Core.Rust.emitExpr v245 v231
        let v247 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v248 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v163, v232, v239, v246) v247
        let v249 : Types.std.string.String = Fable.Core.Rust.emitExpr v248 v87
        let v250 : string = method7()
        let v251 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v250 v98
        let v252 : unativeint = unativeint 0
        let v253 : unativeint = unativeint 2
        let v254 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v251, v252, v253) v228
        let v255 : string = Fable.Core.Rust.emitExpr v254 v104
        let v256 : uint8 = Fable.Core.Rust.emitExpr v255 v231
        let v257 : string = method7()
        let v258 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v257 v98
        let v259 : unativeint = unativeint 2
        let v260 : unativeint = unativeint 4
        let v261 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v258, v259, v260) v228
        let v262 : string = Fable.Core.Rust.emitExpr v261 v104
        let v263 : uint8 = Fable.Core.Rust.emitExpr v262 v231
        let v264 : string = method7()
        let v265 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v264 v98
        let v266 : unativeint = unativeint 4
        let v267 : unativeint = unativeint 6
        let v268 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v265, v266, v267) v228
        let v269 : string = Fable.Core.Rust.emitExpr v268 v104
        let v270 : uint8 = Fable.Core.Rust.emitExpr v269 v231
        let v271 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v197, v256, v263, v270) v247
        let v272 : Types.std.string.String = Fable.Core.Rust.emitExpr v271 v87
        let v273 : string = $"{v129} {v249} {v272}"
        System.Console.WriteLine v273
        ()
    let v274 : string = "src"
    let v275 : string = $"r#\"{v274}\"#"
    let v276 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v275
    let v277 : string = "https://time.is"
    let v278 : string = $"r#\"{v277}\"#"
    let v279 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v278
    let v280 : string = "$0.set_attribute($1, $2).unwrap()"
    Fable.Core.Rust.emitExpr struct (v18, v276, v279) v280
    let v281 : string = "width"
    let v282 : string = $"r#\"{v281}\"#"
    let v283 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v282
    let v284 : string = "100%"
    let v285 : string = $"r#\"{v284}\"#"
    let v286 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v285
    Fable.Core.Rust.emitExpr struct (v18, v283, v286) v280
    let v287 : string = "style"
    let v288 : string = $"r#\"{v287}\"#"
    let v289 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v288
    let v290 : string = "height: 100vh; border: 0;"
    let v291 : string = $"r#\"{v290}\"#"
    let v292 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v291
    Fable.Core.Rust.emitExpr struct (v18, v289, v292) v280
    let v293 : string = "data-test"
    let v294 : string = $"r#\"{v293}\"#"
    let v295 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v294
    let v296 : string = "1"
    let v297 : string = $"r#\"{v296}\"#"
    let v298 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v297
    Fable.Core.Rust.emitExpr struct (v18, v295, v298) v280
    let v299 : string = "$0.append_child(&$1).unwrap()"
    Fable.Core.Rust.emitExpr struct (v13, v18) v299
    0
let v0 : (unit -> int32) = closure0()
()
