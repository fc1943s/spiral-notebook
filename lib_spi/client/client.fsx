type Mut0 = {mutable l0 : int32}
let rec method0 () : struct (string * string * string * bool) =
    let v0 : string = ""
    let v1 : obj = v0
    struct (v0, v0, v0, true)
and method1 (v0 : int32, v1 : string) : string =
    let v2 : int32 = String.length v1
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : string = $"0{v1}"
        method1(v0, v4)
    else
        v1
and method2 (v0 : string) : string =
    v0
and method3 () : string =
    let v0 : string = "$1=$2"
    v0
and method4 () : string =
    let v0 : string = "[$1]"
    v0
and method5 () : string =
    let v0 : string = " "
    v0
and method6 () : string =
    let v0 : string = "387957"
    v0
and method7 () : string =
    let v0 : string = "222222"
    v0
and method8 (v0 : int32, v1 : Mut0) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and closure0 () () : int32 =
    let struct (v0 : string, v1 : string, v2 : string, v3 : bool) = method0()
    let v4 : string = "chrono::Utc::now()"
    let v5 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v6 : string = "($0).timestamp()"
    let v7 : int64 = Fable.Core.Rust.emitExpr v5 v6
    let v8 : string = "web_sys::window().unwrap()"
    let v9 : obj = Fable.Core.Rust.emitExpr () v8
    let v10 : string = "$0.document().unwrap()"
    let v11 : obj = Fable.Core.Rust.emitExpr v9 v10
    let v12 : string = "$0.body().unwrap()"
    let v13 : obj = Fable.Core.Rust.emitExpr v11 v12
    let v14 : string = "iframe"
    let v15 : string = $"r#\"{v14}\"#"
    let v16 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v15
    let v17 : string = "$0.create_element($1).unwrap()"
    let v18 : obj = Fable.Core.Rust.emitExpr struct (v11, v16) v17
    let v19 : string = "window"
    let v20 : string = "($0).to_string()"
    let v21 : Types.std.string.String = Fable.Core.Rust.emitExpr v19 v20
    let v22 : Types.EmitType<Types.std.string.String> = v21 |> unbox<Types.EmitType<Types.std.string.String>>
    let v23 : string = "format!(\"{:?}\", $0)"
    let v24 : Types.std.string.String = Fable.Core.Rust.emitExpr v9 v23
    let v25 : Types.EmitType<Types.std.string.String> = v24 |> unbox<Types.EmitType<Types.std.string.String>>
    let v26 : string = "document"
    let v27 : Types.std.string.String = Fable.Core.Rust.emitExpr v26 v20
    let v28 : Types.EmitType<Types.std.string.String> = v27 |> unbox<Types.EmitType<Types.std.string.String>>
    let v29 : Types.std.string.String = Fable.Core.Rust.emitExpr v11 v23
    let v30 : Types.EmitType<Types.std.string.String> = v29 |> unbox<Types.EmitType<Types.std.string.String>>
    let v31 : string = "body"
    let v32 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v20
    let v33 : Types.EmitType<Types.std.string.String> = v32 |> unbox<Types.EmitType<Types.std.string.String>>
    let v34 : Types.std.string.String = Fable.Core.Rust.emitExpr v13 v23
    let v35 : Types.EmitType<Types.std.string.String> = v34 |> unbox<Types.EmitType<Types.std.string.String>>
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v14 v20
    let v37 : Types.EmitType<Types.std.string.String> = v36 |> unbox<Types.EmitType<Types.std.string.String>>
    let v38 : Types.std.string.String = Fable.Core.Rust.emitExpr v18 v23
    let v39 : Types.EmitType<Types.std.string.String> = v38 |> unbox<Types.EmitType<Types.std.string.String>>
    let v40 : (Types.EmitType<Types.std.string.String> []) = [|v22; v25; v28; v30; v33; v35; v37; v39|]
    let v41 : string = "core::ops::Deref::deref($0)"
    let v42 : Types.Ref<Types.Ref<Types.Ref<Types.Ref<obj>>>> = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "*$0"
    let v44 : Types.Ref<Types.Ref<Types.Ref<obj>>> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : Types.Ref<Types.Ref<obj>> = Fable.Core.Rust.emitExpr v44 v43
    let v46 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v45 v43
    let v47 : Types.std.string.String = Fable.Core.Rust.emitExpr v46 v23
    let v48 : Types.EmitType<Types.std.string.String> = v47 |> unbox<Types.EmitType<Types.std.string.String>>
    let v49 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v50 : int64 = Fable.Core.Rust.emitExpr v49 v6
    let v51 : int64 = v50 - v7
    let v52 : string = (v51).ToString ()
    let v53 : int32 = 6
    let v54 : string = method1(v53, v52)
    let v55 : string = "rand::random::<u8>()"
    let v56 : uint8 = Fable.Core.Rust.emitExpr () v55
    let v57 : string = "timestamp"
    let v58 : Types.std.string.String = Fable.Core.Rust.emitExpr v57 v20
    let v59 : Types.EmitType<Types.std.string.String> = v58 |> unbox<Types.EmitType<Types.std.string.String>>
    let v60 : Types.std.string.String = Fable.Core.Rust.emitExpr v54 v20
    let v61 : Types.EmitType<Types.std.string.String> = v60 |> unbox<Types.EmitType<Types.std.string.String>>
    let v62 : string = "run_id"
    let v63 : Types.std.string.String = Fable.Core.Rust.emitExpr v62 v20
    let v64 : Types.EmitType<Types.std.string.String> = v63 |> unbox<Types.EmitType<Types.std.string.String>>
    let v65 : Types.std.string.String = Fable.Core.Rust.emitExpr v56 v23
    let v66 : Types.EmitType<Types.std.string.String> = v65 |> unbox<Types.EmitType<Types.std.string.String>>
    let v67 : string = "log_level"
    let v68 : Types.std.string.String = Fable.Core.Rust.emitExpr v67 v20
    let v69 : Types.EmitType<Types.std.string.String> = v68 |> unbox<Types.EmitType<Types.std.string.String>>
    let v70 : string = "Debug"
    let v71 : Types.std.string.String = Fable.Core.Rust.emitExpr v70 v20
    let v72 : Types.EmitType<Types.std.string.String> = v71 |> unbox<Types.EmitType<Types.std.string.String>>
    let v73 : (Types.EmitType<Types.std.string.String> []) = [|v59; v61; v64; v66; v69; v72|]
    let v74 : Types.Ref<Types.Ref<Types.Ref<Types.Ref<obj>>>> = Fable.Core.Rust.emitExpr v73 v41
    let v75 : Types.Ref<Types.Ref<Types.Ref<obj>>> = Fable.Core.Rust.emitExpr v74 v43
    let v76 : Types.Ref<Types.Ref<obj>> = Fable.Core.Rust.emitExpr v75 v43
    let v77 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v76 v43
    let v78 : Types.std.string.String = Fable.Core.Rust.emitExpr v77 v23
    let v79 : Types.EmitType<Types.std.string.String> = v78 |> unbox<Types.EmitType<Types.std.string.String>>
    let v80 : string = "> app ()"
    let v81 : Types.std.string.String = Fable.Core.Rust.emitExpr v80 v20
    let v82 : Types.EmitType<Types.std.string.String> = v81 |> unbox<Types.EmitType<Types.std.string.String>>
    let v83 : (Types.EmitType<Types.std.string.String> []) = [|v82|]
    let v84 : Types.Ref<Types.Ref<Types.Ref<Types.Ref<obj>>>> = Fable.Core.Rust.emitExpr v83 v41
    let v85 : Types.Ref<Types.Ref<Types.Ref<obj>>> = Fable.Core.Rust.emitExpr v84 v43
    let v86 : Types.Ref<Types.Ref<obj>> = Fable.Core.Rust.emitExpr v85 v43
    let v87 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v86 v43
    let v88 : Types.std.string.String = Fable.Core.Rust.emitExpr v87 v23
    let v89 : Types.EmitType<Types.std.string.String> = v88 |> unbox<Types.EmitType<Types.std.string.String>>
    let v90 : Types.std.string.String = v89 |> unbox
    let v91 : string = "fable_library_rust::String_::fromStr($0)"
    let v92 : string = Fable.Core.Rust.emitExpr v90 v91
    let v93 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v94 : string = $"r#\"{v93}\"#"
    let v95 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v94
    let v96 : string = "regex::RegexBuilder::new($0)"
    let v97 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v95 v96
    let v98 : string = "$0.build().unwrap()"
    let v99 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v97 v98
    let v100 : string = method2(v92)
    let v101 : string = "$0.as_str()"
    let v102 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v100 v101
    let v103 : string = method3()
    let v104 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v103 v101
    let v105 : string = "$0.replace_all(&$1, $2).to_string()"
    let v106 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v99, v102, v104) v105
    let v107 : string = Fable.Core.Rust.emitExpr v106 v91
    let v108 : string = "\\[\"(.*?)\"\\]"
    let v109 : string = $"r#\"{v108}\"#"
    let v110 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v109
    let v111 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v110 v96
    let v112 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v111 v98
    let v113 : string = method2(v107)
    let v114 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v113 v101
    let v115 : string = method4()
    let v116 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v115 v101
    let v117 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v112, v114, v116) v105
    let v118 : string = Fable.Core.Rust.emitExpr v117 v91
    let v119 : string = ", "
    let v120 : string = $"r#\"{v119}\"#"
    let v121 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v120
    let v122 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v121 v96
    let v123 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v122 v98
    let v124 : string = method2(v118)
    let v125 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v124 v101
    let v126 : string = method5()
    let v127 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v126 v101
    let v128 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v123, v125, v127) v105
    let v129 : string = Fable.Core.Rust.emitExpr v128 v91
    let v130 : Types.std.string.String = Fable.Core.Rust.emitExpr v129 v20
    let v131 : Types.EmitType<Types.std.string.String> = v130 |> unbox<Types.EmitType<Types.std.string.String>>
    let v132 : string = "purple"
    let v133 : string = "colored::Colorize::color(&*$0, $1.to_string())"
    let v134 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v131, v132) v133
    let v135 : string = "format!(\"{}\", $0)"
    let v136 : Types.std.string.String = Fable.Core.Rust.emitExpr v134 v135
    let v137 : Types.std.string.String = v48 |> unbox
    let v138 : string = Fable.Core.Rust.emitExpr v137 v91
    let v139 : string = $"r#\"{v93}\"#"
    let v140 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v139
    let v141 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v140 v96
    let v142 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v141 v98
    let v143 : string = method2(v138)
    let v144 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v143 v101
    let v145 : string = method3()
    let v146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v145 v101
    let v147 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v142, v144, v146) v105
    let v148 : string = Fable.Core.Rust.emitExpr v147 v91
    let v149 : string = $"r#\"{v108}\"#"
    let v150 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v149
    let v151 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v150 v96
    let v152 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v151 v98
    let v153 : string = method2(v148)
    let v154 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v153 v101
    let v155 : string = method4()
    let v156 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v155 v101
    let v157 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v152, v154, v156) v105
    let v158 : string = Fable.Core.Rust.emitExpr v157 v91
    let v159 : string = $"r#\"{v119}\"#"
    let v160 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v159
    let v161 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v160 v96
    let v162 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v161 v98
    let v163 : string = method2(v158)
    let v164 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v163 v101
    let v165 : string = method5()
    let v166 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v165 v101
    let v167 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v162, v164, v166) v105
    let v168 : string = Fable.Core.Rust.emitExpr v167 v91
    let v169 : Types.std.string.String = Fable.Core.Rust.emitExpr v168 v20
    let v170 : Types.EmitType<Types.std.string.String> = v169 |> unbox<Types.EmitType<Types.std.string.String>>
    let v171 : string = method6()
    let v172 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v171 v101
    let v173 : unativeint = unativeint 0
    let v174 : unativeint = unativeint 2
    let v175 : string = "&$0[$1..$2]"
    let v176 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v172, v173, v174) v175
    let v177 : string = Fable.Core.Rust.emitExpr v176 v91
    let v178 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v179 : uint8 = Fable.Core.Rust.emitExpr v177 v178
    let v180 : string = method6()
    let v181 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v180 v101
    let v182 : unativeint = unativeint 2
    let v183 : unativeint = unativeint 4
    let v184 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v181, v182, v183) v175
    let v185 : string = Fable.Core.Rust.emitExpr v184 v91
    let v186 : uint8 = Fable.Core.Rust.emitExpr v185 v178
    let v187 : string = method6()
    let v188 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v187 v101
    let v189 : unativeint = unativeint 4
    let v190 : unativeint = unativeint 6
    let v191 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v188, v189, v190) v175
    let v192 : string = Fable.Core.Rust.emitExpr v191 v91
    let v193 : uint8 = Fable.Core.Rust.emitExpr v192 v178
    let v194 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v195 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v170, v179, v186, v193) v194
    let v196 : Types.std.string.String = Fable.Core.Rust.emitExpr v195 v135
    let v197 : Types.std.string.String = v79 |> unbox
    let v198 : string = Fable.Core.Rust.emitExpr v197 v91
    let v199 : string = $"r#\"{v93}\"#"
    let v200 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v199
    let v201 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v200 v96
    let v202 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v201 v98
    let v203 : string = method2(v198)
    let v204 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v203 v101
    let v205 : string = method3()
    let v206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v205 v101
    let v207 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v202, v204, v206) v105
    let v208 : string = Fable.Core.Rust.emitExpr v207 v91
    let v209 : string = $"r#\"{v108}\"#"
    let v210 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v209
    let v211 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v210 v96
    let v212 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v211 v98
    let v213 : string = method2(v208)
    let v214 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v213 v101
    let v215 : string = method4()
    let v216 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v215 v101
    let v217 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v212, v214, v216) v105
    let v218 : string = Fable.Core.Rust.emitExpr v217 v91
    let v219 : string = $"r#\"{v119}\"#"
    let v220 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v219
    let v221 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v220 v96
    let v222 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v221 v98
    let v223 : string = method2(v218)
    let v224 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v223 v101
    let v225 : string = method5()
    let v226 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v225 v101
    let v227 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v222, v224, v226) v105
    let v228 : string = Fable.Core.Rust.emitExpr v227 v91
    let v229 : Types.std.string.String = Fable.Core.Rust.emitExpr v228 v20
    let v230 : Types.EmitType<Types.std.string.String> = v229 |> unbox<Types.EmitType<Types.std.string.String>>
    let v231 : string = method7()
    let v232 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v231 v101
    let v233 : unativeint = unativeint 0
    let v234 : unativeint = unativeint 2
    let v235 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v232, v233, v234) v175
    let v236 : string = Fable.Core.Rust.emitExpr v235 v91
    let v237 : uint8 = Fable.Core.Rust.emitExpr v236 v178
    let v238 : string = method7()
    let v239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v238 v101
    let v240 : unativeint = unativeint 2
    let v241 : unativeint = unativeint 4
    let v242 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v239, v240, v241) v175
    let v243 : string = Fable.Core.Rust.emitExpr v242 v91
    let v244 : uint8 = Fable.Core.Rust.emitExpr v243 v178
    let v245 : string = method7()
    let v246 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v245 v101
    let v247 : unativeint = unativeint 4
    let v248 : unativeint = unativeint 6
    let v249 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v246, v247, v248) v175
    let v250 : string = Fable.Core.Rust.emitExpr v249 v91
    let v251 : uint8 = Fable.Core.Rust.emitExpr v250 v178
    let v252 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v230, v237, v244, v251) v194
    let v253 : Types.std.string.String = Fable.Core.Rust.emitExpr v252 v135
    let v254 : string = $"{v136} {v196} {v253}"
    let v255 : string = "wasm_bindgen::JsValue::from_str($0)"
    let v256 : obj = Fable.Core.Rust.emitExpr v254 v255
    let v257 : string = "web_sys::console::log_1(&$0)"
    Fable.Core.Rust.emitExpr v256 v257
    let v258 : string = "src"
    let v259 : string = $"r#\"{v258}\"#"
    let v260 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v259
    let v261 : string = "https://time.is"
    let v262 : string = $"r#\"{v261}\"#"
    let v263 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v262
    let v264 : string = "$0.set_attribute($1, $2).unwrap()"
    Fable.Core.Rust.emitExpr struct (v18, v260, v263) v264
    let v265 : string = "width"
    let v266 : string = $"r#\"{v265}\"#"
    let v267 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v266
    let v268 : string = "100%"
    let v269 : string = $"r#\"{v268}\"#"
    let v270 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v269
    Fable.Core.Rust.emitExpr struct (v18, v267, v270) v264
    let v271 : string = "style"
    let v272 : string = $"r#\"{v271}\"#"
    let v273 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v272
    let v274 : string = "height: 100vh; border: 0;"
    let v275 : string = $"r#\"{v274}\"#"
    let v276 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v275
    Fable.Core.Rust.emitExpr struct (v18, v273, v276) v264
    let v277 : string = "data-test"
    let v278 : string = $"r#\"{v277}\"#"
    let v279 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v278
    let v280 : string = "1"
    let v281 : string = $"r#\"{v280}\"#"
    let v282 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v281
    Fable.Core.Rust.emitExpr struct (v18, v279, v282) v264
    let v283 : string = "$0.append_child(&$1).unwrap()"
    Fable.Core.Rust.emitExpr struct (v13, v18) v283
    let v284 : string = "a"
    let v285 : string = "b"
    let v286 : (string []) = [|v284; v285|]
    let v287 : int32 = v286.Length
    let v288 : (Types.std.string.String []) = Array.zeroCreate<Types.std.string.String> (v287)
    let v289 : Mut0 = {l0 = 0} : Mut0
    while method8(v287, v289) do
        let v291 : int32 = v289.l0
        let v292 : string = v286.[int v291]
        let v293 : Types.std.string.String = Fable.Core.Rust.emitExpr v292 v20
        v288.[int v291] <- v293
        let v294 : int32 = v291 + 1
        v289.l0 <- v294
        ()
    let v295 : Types.Ref<Types.Ref<Types.Ref<Types.Ref<obj>>>> = Fable.Core.Rust.emitExpr v288 v41
    let v296 : Types.Ref<Types.Ref<Types.Ref<obj>>> = Fable.Core.Rust.emitExpr v295 v43
    let v297 : Types.Ref<Types.Ref<obj>> = Fable.Core.Rust.emitExpr v296 v43
    let v298 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v297 v43
    let v299 : obj = v298
    let v300 : string = "serde_wasm_bindgen::to_value(&****$0).unwrap()"
    let v301 : obj = Fable.Core.Rust.emitExpr v299 v300
    let v302 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
    Fable.Core.Rust.emitExpr v301 v302
    0
let v0 : (unit -> int32) = closure0()
()
