let rec method0 () : struct (string * string * string * bool) =
    let v0 : string = ""
    let v1 : obj = v0
    struct (v0, v0, v0, true)
and method1 (v0 : string) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "($0).to_string()"
    let v2 : Types.std.string.String = Fable.Core.Rust.emitExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method2 (v0 : Types.std.string.String) : Types.EmitType<Types.std.string.String> =
    let v1 : Types.EmitType<Types.std.string.String> = v0 |> unbox<Types.EmitType<Types.std.string.String>>
    v1
and method4 (v0 : int32, v1 : string) : string =
    let v2 : int32 = String.length v1
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : string = $"0{v1}"
        method4(v0, v4)
    else
        v1
and method5 (v0 : uint8) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.Rust.emitExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method6 (v0 : (Types.EmitType<Types.std.string.String> [])) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "core::ops::Deref::deref($0)"
    let v2 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v0 v1
    let v3 : string = "&***$0"
    let v4 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2 v3
    let v5 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4 v3
    let v6 : string = "format!(\"{:?}\", $0)"
    let v7 : Types.std.string.String = Fable.Core.Rust.emitExpr v5 v6
    let v8 : Types.EmitType<Types.std.string.String> = v7 |> unbox<Types.EmitType<Types.std.string.String>>
    v8
and method7 (v0 : string) : string =
    v0
and method8 () : string =
    let v0 : string = "$1=$2"
    v0
and method9 () : string =
    let v0 : string = "[$1]"
    v0
and method10 () : string =
    let v0 : string = "\""
    v0
and method11 () : string =
    let v0 : string = " "
    v0
and method3 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.Rust.emitExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method4(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.Rust.emitExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method1(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method1(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method1(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method5(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method1(v18)
    let v20 : string = "Debug"
    let v21 : Types.EmitType<Types.std.string.String> = method1(v20)
    let v22 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v21|]
    let v23 : Types.EmitType<Types.std.string.String> = method6(v22)
    let v24 : string = "> app ()"
    let v25 : Types.EmitType<Types.std.string.String> = method1(v24)
    let v26 : (Types.EmitType<Types.std.string.String> []) = [|v25|]
    let v27 : string = "core::ops::Deref::deref($0)"
    let v28 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v26 v27
    let v29 : string = "&***$0"
    let v30 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v28 v29
    let v31 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v30 v29
    let v32 : string = "format!(\"{:?}\", $0)"
    let v33 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v32
    let v34 : Types.EmitType<Types.std.string.String> = v33 |> unbox<Types.EmitType<Types.std.string.String>>
    let v35 : string = "format!(\"{}\", $0)"
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v34 v35
    let v37 : string = (v36).ToString ()
    let v38 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = "regex::RegexBuilder::new($0)"
    let v42 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "$0.build().unwrap()"
    let v44 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : string = method7(v37)
    let v46 : string = "$0.as_str()"
    let v47 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v45 v46
    let v48 : string = method8()
    let v49 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v48 v46
    let v50 : string = "$0.replace_all(&$1, $2).to_string()"
    let v51 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v44, v47, v49) v50
    let v52 : obj = v51
    let v53 : string = "fable_library_rust::String_::fromStr($0)"
    let v54 : string = Fable.Core.Rust.emitExpr v52 v53
    let v55 : string = "\\[\"(.*?)\"\\]"
    let v56 : string = $"r#\"{v55}\"#"
    let v57 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v56
    let v58 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v57 v41
    let v59 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v58 v43
    let v60 : string = method7(v54)
    let v61 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v60 v46
    let v62 : string = method9()
    let v63 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v62 v46
    let v64 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v59, v61, v63) v50
    let v65 : obj = v64
    let v66 : string = Fable.Core.Rust.emitExpr v65 v53
    let v67 : string = "\\\\\""
    let v68 : string = $"r#\"{v67}\"#"
    let v69 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v68
    let v70 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v69 v41
    let v71 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v70 v43
    let v72 : string = method7(v66)
    let v73 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v72 v46
    let v74 : string = method10()
    let v75 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v74 v46
    let v76 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v71, v73, v75) v50
    let v77 : obj = v76
    let v78 : string = Fable.Core.Rust.emitExpr v77 v53
    let v79 : string = ", "
    let v80 : string = $"r#\"{v79}\"#"
    let v81 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v80
    let v82 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v81 v41
    let v83 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v82 v43
    let v84 : string = method7(v78)
    let v85 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v84 v46
    let v86 : string = method11()
    let v87 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v86 v46
    let v88 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v83, v85, v87) v50
    let v89 : obj = v88
    let v90 : string = Fable.Core.Rust.emitExpr v89 v53
    let v91 : Types.EmitType<Types.std.string.String> = method1(v90)
    let v92 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1 v27
    let v93 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v92 v29
    let v94 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v93 v29
    let v95 : Types.std.string.String = Fable.Core.Rust.emitExpr v94 v32
    let v96 : Types.EmitType<Types.std.string.String> = v95 |> unbox<Types.EmitType<Types.std.string.String>>
    let v97 : Types.std.string.String = Fable.Core.Rust.emitExpr v96 v35
    let v98 : string = (v97).ToString ()
    let v99 : string = $"r#\"{v38}\"#"
    let v100 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v99
    let v101 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v100 v41
    let v102 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v101 v43
    let v103 : string = method7(v98)
    let v104 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v103 v46
    let v105 : string = method8()
    let v106 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v105 v46
    let v107 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v102, v104, v106) v50
    let v108 : obj = v107
    let v109 : string = Fable.Core.Rust.emitExpr v108 v53
    let v110 : string = $"r#\"{v55}\"#"
    let v111 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v110
    let v112 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v111 v41
    let v113 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v112 v43
    let v114 : string = method7(v109)
    let v115 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v114 v46
    let v116 : string = method9()
    let v117 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v116 v46
    let v118 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v113, v115, v117) v50
    let v119 : obj = v118
    let v120 : string = Fable.Core.Rust.emitExpr v119 v53
    let v121 : string = $"r#\"{v67}\"#"
    let v122 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v121
    let v123 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v122 v41
    let v124 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v123 v43
    let v125 : string = method7(v120)
    let v126 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v125 v46
    let v127 : string = method10()
    let v128 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v127 v46
    let v129 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v124, v126, v128) v50
    let v130 : obj = v129
    let v131 : string = Fable.Core.Rust.emitExpr v130 v53
    let v132 : string = $"r#\"{v79}\"#"
    let v133 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v132
    let v134 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v133 v41
    let v135 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v134 v43
    let v136 : string = method7(v131)
    let v137 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v136 v46
    let v138 : string = method11()
    let v139 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v138 v46
    let v140 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v135, v137, v139) v50
    let v141 : obj = v140
    let v142 : string = Fable.Core.Rust.emitExpr v141 v53
    let v143 : Types.EmitType<Types.std.string.String> = method1(v142)
    let v144 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v35
    let v145 : string = (v144).ToString ()
    let v146 : string = $"r#\"{v38}\"#"
    let v147 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v146
    let v148 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v147 v41
    let v149 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v148 v43
    let v150 : string = method7(v145)
    let v151 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v150 v46
    let v152 : string = method8()
    let v153 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v152 v46
    let v154 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v149, v151, v153) v50
    let v155 : obj = v154
    let v156 : string = Fable.Core.Rust.emitExpr v155 v53
    let v157 : string = $"r#\"{v55}\"#"
    let v158 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v157
    let v159 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v158 v41
    let v160 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v159 v43
    let v161 : string = method7(v156)
    let v162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v161 v46
    let v163 : string = method9()
    let v164 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v163 v46
    let v165 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v160, v162, v164) v50
    let v166 : obj = v165
    let v167 : string = Fable.Core.Rust.emitExpr v166 v53
    let v168 : string = $"r#\"{v67}\"#"
    let v169 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v168
    let v170 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v169 v41
    let v171 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v170 v43
    let v172 : string = method7(v167)
    let v173 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v172 v46
    let v174 : string = method10()
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v174 v46
    let v176 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v171, v173, v175) v50
    let v177 : obj = v176
    let v178 : string = Fable.Core.Rust.emitExpr v177 v53
    let v179 : string = $"r#\"{v79}\"#"
    let v180 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v179
    let v181 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v180 v41
    let v182 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v181 v43
    let v183 : string = method7(v178)
    let v184 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v183 v46
    let v185 : string = method11()
    let v186 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v185 v46
    let v187 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v182, v184, v186) v50
    let v188 : obj = v187
    let v189 : string = Fable.Core.Rust.emitExpr v188 v53
    let v190 : Types.EmitType<Types.std.string.String> = method1(v189)
    let v191 : string = (v91).ToString ()
    let v192 : string = (v143).ToString ()
    let v193 : string = (v190).ToString ()
    let v194 : string = " %c"
    let v195 : string = v191 + v194
    let v196 : string = v195 + v192
    let v197 : string = v196 + v194
    let v198 : string = v197 + v193
    let v199 : string = "($0).as_ref().to_string()"
    let v200 : Types.std.string.String = Fable.Core.Rust.emitExpr v198 v199
    let v201 : string = "387957"
    let v202 : string = $"color: #{v201};"
    let v203 : Types.std.string.String = Fable.Core.Rust.emitExpr v202 v199
    let v204 : string = "color: #385779;"
    let v205 : Types.std.string.String = Fable.Core.Rust.emitExpr v204 v199
    let v206 : (Types.std.string.String []) = [|v200; v203; v205|]
    let v207 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v206 v27
    let v208 : obj = v207
    let v209 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
    let v210 : Types.wasm_bindgen.JsValue = Fable.Core.Rust.emitExpr v208 v209
    let v211 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
    Fable.Core.Rust.emitExpr v210 v211
    ()
and method12 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.Rust.emitExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method4(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.Rust.emitExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method1(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method1(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method1(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method5(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method1(v18)
    let v20 : string = "Debug"
    let v21 : Types.EmitType<Types.std.string.String> = method1(v20)
    let v22 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v21|]
    let v23 : Types.EmitType<Types.std.string.String> = method6(v22)
    let v24 : string = "> append_css_rule ()"
    let v25 : Types.EmitType<Types.std.string.String> = method1(v24)
    let v26 : (Types.EmitType<Types.std.string.String> []) = [|v25|]
    let v27 : string = "core::ops::Deref::deref($0)"
    let v28 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v26 v27
    let v29 : string = "&***$0"
    let v30 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v28 v29
    let v31 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v30 v29
    let v32 : string = "format!(\"{:?}\", $0)"
    let v33 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v32
    let v34 : Types.EmitType<Types.std.string.String> = v33 |> unbox<Types.EmitType<Types.std.string.String>>
    let v35 : string = "format!(\"{}\", $0)"
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v34 v35
    let v37 : string = (v36).ToString ()
    let v38 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = "regex::RegexBuilder::new($0)"
    let v42 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "$0.build().unwrap()"
    let v44 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : string = method7(v37)
    let v46 : string = "$0.as_str()"
    let v47 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v45 v46
    let v48 : string = method8()
    let v49 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v48 v46
    let v50 : string = "$0.replace_all(&$1, $2).to_string()"
    let v51 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v44, v47, v49) v50
    let v52 : obj = v51
    let v53 : string = "fable_library_rust::String_::fromStr($0)"
    let v54 : string = Fable.Core.Rust.emitExpr v52 v53
    let v55 : string = "\\[\"(.*?)\"\\]"
    let v56 : string = $"r#\"{v55}\"#"
    let v57 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v56
    let v58 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v57 v41
    let v59 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v58 v43
    let v60 : string = method7(v54)
    let v61 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v60 v46
    let v62 : string = method9()
    let v63 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v62 v46
    let v64 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v59, v61, v63) v50
    let v65 : obj = v64
    let v66 : string = Fable.Core.Rust.emitExpr v65 v53
    let v67 : string = "\\\\\""
    let v68 : string = $"r#\"{v67}\"#"
    let v69 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v68
    let v70 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v69 v41
    let v71 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v70 v43
    let v72 : string = method7(v66)
    let v73 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v72 v46
    let v74 : string = method10()
    let v75 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v74 v46
    let v76 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v71, v73, v75) v50
    let v77 : obj = v76
    let v78 : string = Fable.Core.Rust.emitExpr v77 v53
    let v79 : string = ", "
    let v80 : string = $"r#\"{v79}\"#"
    let v81 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v80
    let v82 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v81 v41
    let v83 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v82 v43
    let v84 : string = method7(v78)
    let v85 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v84 v46
    let v86 : string = method11()
    let v87 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v86 v46
    let v88 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v83, v85, v87) v50
    let v89 : obj = v88
    let v90 : string = Fable.Core.Rust.emitExpr v89 v53
    let v91 : Types.EmitType<Types.std.string.String> = method1(v90)
    let v92 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1 v27
    let v93 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v92 v29
    let v94 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v93 v29
    let v95 : Types.std.string.String = Fable.Core.Rust.emitExpr v94 v32
    let v96 : Types.EmitType<Types.std.string.String> = v95 |> unbox<Types.EmitType<Types.std.string.String>>
    let v97 : Types.std.string.String = Fable.Core.Rust.emitExpr v96 v35
    let v98 : string = (v97).ToString ()
    let v99 : string = $"r#\"{v38}\"#"
    let v100 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v99
    let v101 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v100 v41
    let v102 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v101 v43
    let v103 : string = method7(v98)
    let v104 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v103 v46
    let v105 : string = method8()
    let v106 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v105 v46
    let v107 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v102, v104, v106) v50
    let v108 : obj = v107
    let v109 : string = Fable.Core.Rust.emitExpr v108 v53
    let v110 : string = $"r#\"{v55}\"#"
    let v111 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v110
    let v112 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v111 v41
    let v113 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v112 v43
    let v114 : string = method7(v109)
    let v115 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v114 v46
    let v116 : string = method9()
    let v117 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v116 v46
    let v118 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v113, v115, v117) v50
    let v119 : obj = v118
    let v120 : string = Fable.Core.Rust.emitExpr v119 v53
    let v121 : string = $"r#\"{v67}\"#"
    let v122 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v121
    let v123 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v122 v41
    let v124 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v123 v43
    let v125 : string = method7(v120)
    let v126 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v125 v46
    let v127 : string = method10()
    let v128 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v127 v46
    let v129 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v124, v126, v128) v50
    let v130 : obj = v129
    let v131 : string = Fable.Core.Rust.emitExpr v130 v53
    let v132 : string = $"r#\"{v79}\"#"
    let v133 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v132
    let v134 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v133 v41
    let v135 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v134 v43
    let v136 : string = method7(v131)
    let v137 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v136 v46
    let v138 : string = method11()
    let v139 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v138 v46
    let v140 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v135, v137, v139) v50
    let v141 : obj = v140
    let v142 : string = Fable.Core.Rust.emitExpr v141 v53
    let v143 : Types.EmitType<Types.std.string.String> = method1(v142)
    let v144 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v35
    let v145 : string = (v144).ToString ()
    let v146 : string = $"r#\"{v38}\"#"
    let v147 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v146
    let v148 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v147 v41
    let v149 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v148 v43
    let v150 : string = method7(v145)
    let v151 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v150 v46
    let v152 : string = method8()
    let v153 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v152 v46
    let v154 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v149, v151, v153) v50
    let v155 : obj = v154
    let v156 : string = Fable.Core.Rust.emitExpr v155 v53
    let v157 : string = $"r#\"{v55}\"#"
    let v158 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v157
    let v159 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v158 v41
    let v160 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v159 v43
    let v161 : string = method7(v156)
    let v162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v161 v46
    let v163 : string = method9()
    let v164 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v163 v46
    let v165 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v160, v162, v164) v50
    let v166 : obj = v165
    let v167 : string = Fable.Core.Rust.emitExpr v166 v53
    let v168 : string = $"r#\"{v67}\"#"
    let v169 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v168
    let v170 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v169 v41
    let v171 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v170 v43
    let v172 : string = method7(v167)
    let v173 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v172 v46
    let v174 : string = method10()
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v174 v46
    let v176 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v171, v173, v175) v50
    let v177 : obj = v176
    let v178 : string = Fable.Core.Rust.emitExpr v177 v53
    let v179 : string = $"r#\"{v79}\"#"
    let v180 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v179
    let v181 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v180 v41
    let v182 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v181 v43
    let v183 : string = method7(v178)
    let v184 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v183 v46
    let v185 : string = method11()
    let v186 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v185 v46
    let v187 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v182, v184, v186) v50
    let v188 : obj = v187
    let v189 : string = Fable.Core.Rust.emitExpr v188 v53
    let v190 : Types.EmitType<Types.std.string.String> = method1(v189)
    let v191 : string = (v91).ToString ()
    let v192 : string = (v143).ToString ()
    let v193 : string = (v190).ToString ()
    let v194 : string = " %c"
    let v195 : string = v191 + v194
    let v196 : string = v195 + v192
    let v197 : string = v196 + v194
    let v198 : string = v197 + v193
    let v199 : string = "($0).as_ref().to_string()"
    let v200 : Types.std.string.String = Fable.Core.Rust.emitExpr v198 v199
    let v201 : string = "666666"
    let v202 : string = $"color: #{v201};"
    let v203 : Types.std.string.String = Fable.Core.Rust.emitExpr v202 v199
    let v204 : string = "color: #385779;"
    let v205 : Types.std.string.String = Fable.Core.Rust.emitExpr v204 v199
    let v206 : (Types.std.string.String []) = [|v200; v203; v205|]
    let v207 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v206 v27
    let v208 : obj = v207
    let v209 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
    let v210 : Types.wasm_bindgen.JsValue = Fable.Core.Rust.emitExpr v208 v209
    let v211 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
    Fable.Core.Rust.emitExpr v210 v211
    ()
and method13 () : bool =
    false
and method14 (v0 : Types.Tuple<Types.async_std.sync.Mutex<bool>, Types.async_std.sync.Condvar>) : Types.Tuple<Types.async_std.sync.Mutex<bool>, Types.async_std.sync.Condvar> =
    v0
and method15 (v0 : Option<Types.ehttp.Response>) : Option<Types.ehttp.Response> =
    v0
and method16 (v0 : Types.async_std.sync.Mutex<Option<Types.ehttp.Response>>) : Types.async_std.sync.Mutex<Option<Types.ehttp.Response>> =
    v0
and method17 (v0 : Types.std.sync.Arc<Types.async_std.sync.Mutex<Option<Types.ehttp.Response>>>) : Types.std.sync.Arc<Types.async_std.sync.Mutex<Option<Types.ehttp.Response>>> =
    v0
and closure1 (v0 : int64) (v1 : Types.std.cell.RefCell<Types.std.sync.Arc<Types.async_std.sync.Mutex<Option<Types.ehttp.Response>>>>) : unit =
    let v2 : string = "app > fetch ()"
    let v3 : Types.EmitType<Types.std.string.String> = method1(v2)
    let v4 : (Types.EmitType<Types.std.string.String> []) = [|v3|]
    method3(v0, v4)
    let v5 : string = "v1.borrow()"
    let v6 : Types.std.cell.CellRef<Types.std.sync.Arc<Types.async_std.sync.Mutex<Option<Types.ehttp.Response>>>> = Fable.Core.Rust.emitExpr () v5
    let v7 : string = "v6.try_lock()"
    let v8 : Option<Types.core.future.Future<Types.async_std.sync.Mutex<Types.std.sync.Arc<Types.async_std.sync.Mutex<Option<Types.ehttp.Response>>>>>> = Fable.Core.Rust.emitExpr () v7
    let v9 : string = "response"
    let v10 : Types.EmitType<Types.std.string.String> = method1(v9)
    let v11 : string = "format!(\"{:?}\", $0)"
    let v12 : Types.std.string.String = Fable.Core.Rust.emitExpr v8 v11
    let v13 : Types.EmitType<Types.std.string.String> = method2(v12)
    let v14 : (Types.EmitType<Types.std.string.String> []) = [|v10; v13|]
    method3(v0, v14)
and method18 (v0 : Types.futures_signals.signal.MutableSignal<Types.StaticRef<Types.Str>>) : Types.futures_signals.signal.MutableSignal<Types.StaticRef<Types.Str>> =
    v0
and closure3 (v0 : Types.std.rc.Rc<Types.futures_signals.signal.Mutable<Types.StaticRef<Types.Str>>>) (v1 : Types.StaticRef<Types.Str>) : unit =
    let v2 : string = "*$0.set_neq(v1)"
    Fable.Core.Rust.emitExpr v0 v2
    ()
and closure2 (v0 : Types.std.rc.Rc<Types.futures_signals.signal.Mutable<Types.StaticRef<Types.Str>>>) (v1 : Types.std.rc.Rc<Types.web_sys.HtmlInputElement>) : unit =
    let v2 : string = ""
    let v3 : string = "let value0 = v1;"
    let v4 : string = v2 + v3
    let v5 : string = "let value0 = value0.value();"
    let v6 : string = v4 + v5
    let v7 : string = "let value0 = value0.into_boxed_str();"
    let v8 : string = v6 + v7
    let v9 : string = "let value0 = Box::leak(value0);"
    let v10 : string = v8 + v9
    let v11 : (Types.StaticRef<Types.Str> -> unit) = closure3(v0)
    let v12 : string = "v11(value0);"
    let v13 : string = v10 + v12
    let v14 : string = "()"
    let v15 : string = v13 + v14
    Fable.Core.Rust.emitExpr () v15
    ()
and closure0 () () : int32 =
    let v0 : string = "console_error_panic_hook::set_once()"
    Fable.Core.Rust.emitExpr () v0
    let struct (v1 : string, v2 : string, v3 : string, v4 : bool) = method0()
    let v5 : string = "chrono::Utc::now()"
    let v6 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v5
    let v7 : string = "($0).timestamp()"
    let v8 : int64 = Fable.Core.Rust.emitExpr v6 v7
    let v9 : string = "web_sys::window().unwrap()"
    let v10 : obj = Fable.Core.Rust.emitExpr () v9
    let v11 : string = "$0.document().unwrap()"
    let v12 : obj = Fable.Core.Rust.emitExpr v10 v11
    let v13 : string = "$0.head().unwrap()"
    let v14 : obj = Fable.Core.Rust.emitExpr v12 v13
    let v15 : string = "style"
    let v16 : string = $"r#\"{v15}\"#"
    let v17 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v16
    let v18 : string = "$0.create_element($1).unwrap()"
    let v19 : obj = Fable.Core.Rust.emitExpr struct (v12, v17) v18
    let v20 : string = "wasm_bindgen::JsCast::unchecked_into(v19)"
    let v21 : Types.web_sys.HtmlStyleElement = Fable.Core.Rust.emitExpr () v20
    let v22 : string = "std::rc::Rc::new(v21)"
    let v23 : Types.std.rc.Rc<Types.web_sys.HtmlStyleElement> = Fable.Core.Rust.emitExpr () v22
    let v24 : string = "window"
    let v25 : Types.EmitType<Types.std.string.String> = method1(v24)
    let v26 : string = "format!(\"{:?}\", $0)"
    let v27 : Types.std.string.String = Fable.Core.Rust.emitExpr v10 v26
    let v28 : Types.EmitType<Types.std.string.String> = method2(v27)
    let v29 : string = "document"
    let v30 : Types.EmitType<Types.std.string.String> = method1(v29)
    let v31 : Types.std.string.String = Fable.Core.Rust.emitExpr v12 v26
    let v32 : Types.EmitType<Types.std.string.String> = method2(v31)
    let v33 : string = "head"
    let v34 : Types.EmitType<Types.std.string.String> = method1(v33)
    let v35 : Types.std.string.String = Fable.Core.Rust.emitExpr v14 v26
    let v36 : Types.EmitType<Types.std.string.String> = method2(v35)
    let v37 : Types.EmitType<Types.std.string.String> = method1(v15)
    let v38 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v26
    let v39 : Types.EmitType<Types.std.string.String> = method2(v38)
    let v40 : (Types.EmitType<Types.std.string.String> []) = [|v25; v28; v30; v32; v34; v36; v37; v39|]
    method3(v8, v40)
    let v41 : string = "type"
    let v42 : string = $"r#\"{v41}\"#"
    let v43 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v42
    let v44 : string = "text/css"
    let v45 : string = $"r#\"{v44}\"#"
    let v46 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v45
    let v47 : string = "$0.set_attribute($1, $2).unwrap()"
    Fable.Core.Rust.emitExpr struct (v23, v43, v46) v47
    let v48 : string = "data-id"
    let v49 : string = $"r#\"{v48}\"#"
    let v50 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v49
    let v51 : string = "global-css"
    let v52 : string = $"r#\"{v51}\"#"
    let v53 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v52
    Fable.Core.Rust.emitExpr struct (v23, v50, v53) v47
    let v54 : string = "$0.append_child(&$1).unwrap()"
    Fable.Core.Rust.emitExpr struct (v14, v23) v54
    let struct (v55 : string, v56 : string, v57 : string, v58 : bool) = method0()
    let v59 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v5
    let v60 : int64 = Fable.Core.Rust.emitExpr v59 v7
    let v61 : string = "v23.sheet()"
    let v62 : obj = Fable.Core.Rust.emitExpr () v61
    let v63 : string = "v62.unwrap()"
    let v64 : obj = Fable.Core.Rust.emitExpr () v63
    let v65 : string = "wasm_bindgen::JsCast::unchecked_into::<"
    let v66 : string = "web_sys::CssStyleSheet"
    let v67 : string = v65 + v66
    let v68 : string = ">(v64)"
    let v69 : string = v67 + v68
    let v70 : obj = Fable.Core.Rust.emitExpr () v69
    let v71 : string = ": "
    let v72 : string = "margin"
    let v73 : string = v72 + v71
    let v74 : string = "0"
    let v75 : string = v73 + v74
    let v76 : string = ";"
    let v77 : string = v75 + v76
    let v78 : string = ""
    let v79 : string = v77 + v78
    let v80 : string = ": "
    let v81 : string = "padding"
    let v82 : string = v81 + v80
    let v83 : string = v82 + v74
    let v84 : string = ";"
    let v85 : string = v83 + v84
    let v86 : string = v85 + v79
    let v87 : string = ": "
    let v88 : string = "width"
    let v89 : string = v88 + v87
    let v90 : string = "100%"
    let v91 : string = v89 + v90
    let v92 : string = ";"
    let v93 : string = v91 + v92
    let v94 : string = v93 + v86
    let v95 : string = ": "
    let v96 : string = "height"
    let v97 : string = v96 + v95
    let v98 : string = v97 + v90
    let v99 : string = ";"
    let v100 : string = v98 + v99
    let v101 : string = v100 + v94
    let v102 : string = ": "
    let v103 : string = "overflow"
    let v104 : string = v103 + v102
    let v105 : string = "hidden"
    let v106 : string = v104 + v105
    let v107 : string = ";"
    let v108 : string = v106 + v107
    let v109 : string = v108 + v101
    let v110 : string = " {"
    let v111 : string = "html, body"
    let v112 : string = v111 + v110
    let v113 : string = "  "
    let v114 : string = v112 + v113
    let v115 : string = v114 + v109
    let v116 : string = " "
    let v117 : string = v115 + v116
    let v118 : string = "}"
    let v119 : string = v117 + v118
    let v120 : string = $"r#\"{v119}\"#"
    let v121 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v120
    let v122 : string = "v70.insert_rule(v121).unwrap()"
    let v123 : obj = Fable.Core.Rust.emitExpr () v122
    let v124 : string = "rule"
    let v125 : Types.EmitType<Types.std.string.String> = method1(v124)
    let v126 : Types.EmitType<Types.std.string.String> = method1(v111)
    let v127 : string = "idx"
    let v128 : Types.EmitType<Types.std.string.String> = method1(v127)
    let v129 : Types.std.string.String = Fable.Core.Rust.emitExpr v123 v26
    let v130 : Types.EmitType<Types.std.string.String> = method2(v129)
    let v131 : (Types.EmitType<Types.std.string.String> []) = [|v125; v126; v128; v130|]
    method12(v60, v131)
    let struct (v132 : string, v133 : string, v134 : string, v135 : bool) = method0()
    let v136 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v5
    let v137 : int64 = Fable.Core.Rust.emitExpr v136 v7
    let v138 : string = "v23.sheet()"
    let v139 : obj = Fable.Core.Rust.emitExpr () v138
    let v140 : string = "v139.unwrap()"
    let v141 : obj = Fable.Core.Rust.emitExpr () v140
    let v142 : string = "wasm_bindgen::JsCast::unchecked_into::<"
    let v143 : string = v142 + v66
    let v144 : string = ">(v141)"
    let v145 : string = v143 + v144
    let v146 : obj = Fable.Core.Rust.emitExpr () v145
    let v147 : string = ": "
    let v148 : string = "font-family"
    let v149 : string = v148 + v147
    let v150 : string = "system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", sans-serif"
    let v151 : string = v149 + v150
    let v152 : string = ";"
    let v153 : string = v151 + v152
    let v154 : string = v153 + v78
    let v155 : string = ": "
    let v156 : string = "-webkit-font-smoothing"
    let v157 : string = v156 + v155
    let v158 : string = "antialiased"
    let v159 : string = v157 + v158
    let v160 : string = ";"
    let v161 : string = v159 + v160
    let v162 : string = v161 + v154
    let v163 : string = ": "
    let v164 : string = "-moz-osx-font-smoothing"
    let v165 : string = v164 + v163
    let v166 : string = "grayscale"
    let v167 : string = v165 + v166
    let v168 : string = ";"
    let v169 : string = v167 + v168
    let v170 : string = v169 + v162
    let v171 : string = ": "
    let v172 : string = "display"
    let v173 : string = v172 + v171
    let v174 : string = "flex"
    let v175 : string = v173 + v174
    let v176 : string = ";"
    let v177 : string = v175 + v176
    let v178 : string = v177 + v170
    let v179 : string = ": "
    let v180 : string = "flex-direction"
    let v181 : string = v180 + v179
    let v182 : string = "row"
    let v183 : string = v181 + v182
    let v184 : string = ";"
    let v185 : string = v183 + v184
    let v186 : string = v185 + v178
    let v187 : string = ": "
    let v188 : string = "box-sizing"
    let v189 : string = v188 + v187
    let v190 : string = "border-box"
    let v191 : string = v189 + v190
    let v192 : string = ";"
    let v193 : string = v191 + v192
    let v194 : string = v193 + v186
    let v195 : string = ": "
    let v196 : string = "align-items"
    let v197 : string = v196 + v195
    let v198 : string = "stretch"
    let v199 : string = v197 + v198
    let v200 : string = ";"
    let v201 : string = v199 + v200
    let v202 : string = v201 + v194
    let v203 : string = ": "
    let v204 : string = "align-content"
    let v205 : string = v204 + v203
    let v206 : string = v205 + v198
    let v207 : string = ";"
    let v208 : string = v206 + v207
    let v209 : string = v208 + v202
    let v210 : string = " {"
    let v211 : string = "body"
    let v212 : string = v211 + v210
    let v213 : string = "  "
    let v214 : string = v212 + v213
    let v215 : string = v214 + v209
    let v216 : string = " "
    let v217 : string = v215 + v216
    let v218 : string = "}"
    let v219 : string = v217 + v218
    let v220 : string = $"r#\"{v219}\"#"
    let v221 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v220
    let v222 : string = "v146.insert_rule(v221).unwrap()"
    let v223 : obj = Fable.Core.Rust.emitExpr () v222
    let v224 : Types.EmitType<Types.std.string.String> = method1(v124)
    let v225 : Types.EmitType<Types.std.string.String> = method1(v211)
    let v226 : Types.EmitType<Types.std.string.String> = method1(v127)
    let v227 : Types.std.string.String = Fable.Core.Rust.emitExpr v223 v26
    let v228 : Types.EmitType<Types.std.string.String> = method2(v227)
    let v229 : (Types.EmitType<Types.std.string.String> []) = [|v224; v225; v226; v228|]
    method12(v137, v229)
    let struct (v230 : string, v231 : string, v232 : string, v233 : bool) = method0()
    let v234 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v5
    let v235 : int64 = Fable.Core.Rust.emitExpr v234 v7
    let v236 : string = "v23.sheet()"
    let v237 : obj = Fable.Core.Rust.emitExpr () v236
    let v238 : string = "v237.unwrap()"
    let v239 : obj = Fable.Core.Rust.emitExpr () v238
    let v240 : string = "wasm_bindgen::JsCast::unchecked_into::<"
    let v241 : string = v240 + v66
    let v242 : string = ">(v239)"
    let v243 : string = v241 + v242
    let v244 : obj = Fable.Core.Rust.emitExpr () v243
    let v245 : string = ": "
    let v246 : string = v88 + v245
    let v247 : string = "11px"
    let v248 : string = v246 + v247
    let v249 : string = ";"
    let v250 : string = v248 + v249
    let v251 : string = v250 + v78
    let v252 : string = " {"
    let v253 : string = "*::-webkit-scrollbar"
    let v254 : string = v253 + v252
    let v255 : string = "  "
    let v256 : string = v254 + v255
    let v257 : string = v256 + v251
    let v258 : string = " "
    let v259 : string = v257 + v258
    let v260 : string = "}"
    let v261 : string = v259 + v260
    let v262 : string = $"r#\"{v261}\"#"
    let v263 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v262
    let v264 : string = "v244.insert_rule(v263).unwrap()"
    let v265 : obj = Fable.Core.Rust.emitExpr () v264
    let v266 : Types.EmitType<Types.std.string.String> = method1(v124)
    let v267 : Types.EmitType<Types.std.string.String> = method1(v253)
    let v268 : Types.EmitType<Types.std.string.String> = method1(v127)
    let v269 : Types.std.string.String = Fable.Core.Rust.emitExpr v265 v26
    let v270 : Types.EmitType<Types.std.string.String> = method2(v269)
    let v271 : (Types.EmitType<Types.std.string.String> []) = [|v266; v267; v268; v270|]
    method12(v235, v271)
    let struct (v272 : string, v273 : string, v274 : string, v275 : bool) = method0()
    let v276 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v5
    let v277 : int64 = Fable.Core.Rust.emitExpr v276 v7
    let v278 : string = "v23.sheet()"
    let v279 : obj = Fable.Core.Rust.emitExpr () v278
    let v280 : string = "v279.unwrap()"
    let v281 : obj = Fable.Core.Rust.emitExpr () v280
    let v282 : string = "wasm_bindgen::JsCast::unchecked_into::<"
    let v283 : string = v282 + v66
    let v284 : string = ">(v281)"
    let v285 : string = v283 + v284
    let v286 : obj = Fable.Core.Rust.emitExpr () v285
    let v287 : string = ": "
    let v288 : string = v96 + v287
    let v289 : string = "8px"
    let v290 : string = v288 + v289
    let v291 : string = ";"
    let v292 : string = v290 + v291
    let v293 : string = v292 + v78
    let v294 : string = " {"
    let v295 : string = "*::-webkit-scrollbar:horizontal"
    let v296 : string = v295 + v294
    let v297 : string = "  "
    let v298 : string = v296 + v297
    let v299 : string = v298 + v293
    let v300 : string = " "
    let v301 : string = v299 + v300
    let v302 : string = "}"
    let v303 : string = v301 + v302
    let v304 : string = $"r#\"{v303}\"#"
    let v305 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v304
    let v306 : string = "v286.insert_rule(v305).unwrap()"
    let v307 : obj = Fable.Core.Rust.emitExpr () v306
    let v308 : Types.EmitType<Types.std.string.String> = method1(v124)
    let v309 : Types.EmitType<Types.std.string.String> = method1(v295)
    let v310 : Types.EmitType<Types.std.string.String> = method1(v127)
    let v311 : Types.std.string.String = Fable.Core.Rust.emitExpr v307 v26
    let v312 : Types.EmitType<Types.std.string.String> = method2(v311)
    let v313 : (Types.EmitType<Types.std.string.String> []) = [|v308; v309; v310; v312|]
    method12(v277, v313)
    let struct (v314 : string, v315 : string, v316 : string, v317 : bool) = method0()
    let v318 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v5
    let v319 : int64 = Fable.Core.Rust.emitExpr v318 v7
    let v320 : string = "v23.sheet()"
    let v321 : obj = Fable.Core.Rust.emitExpr () v320
    let v322 : string = "v321.unwrap()"
    let v323 : obj = Fable.Core.Rust.emitExpr () v322
    let v324 : string = "wasm_bindgen::JsCast::unchecked_into::<"
    let v325 : string = v324 + v66
    let v326 : string = ">(v323)"
    let v327 : string = v325 + v326
    let v328 : obj = Fable.Core.Rust.emitExpr () v327
    let v329 : string = ": "
    let v330 : string = v172 + v329
    let v331 : string = "none"
    let v332 : string = v330 + v331
    let v333 : string = ";"
    let v334 : string = v332 + v333
    let v335 : string = v334 + v78
    let v336 : string = " {"
    let v337 : string = "*::-webkit-scrollbar-track"
    let v338 : string = v337 + v336
    let v339 : string = "  "
    let v340 : string = v338 + v339
    let v341 : string = v340 + v335
    let v342 : string = " "
    let v343 : string = v341 + v342
    let v344 : string = "}"
    let v345 : string = v343 + v344
    let v346 : string = $"r#\"{v345}\"#"
    let v347 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v346
    let v348 : string = "v328.insert_rule(v347).unwrap()"
    let v349 : obj = Fable.Core.Rust.emitExpr () v348
    let v350 : Types.EmitType<Types.std.string.String> = method1(v124)
    let v351 : Types.EmitType<Types.std.string.String> = method1(v337)
    let v352 : Types.EmitType<Types.std.string.String> = method1(v127)
    let v353 : Types.std.string.String = Fable.Core.Rust.emitExpr v349 v26
    let v354 : Types.EmitType<Types.std.string.String> = method2(v353)
    let v355 : (Types.EmitType<Types.std.string.String> []) = [|v350; v351; v352; v354|]
    method12(v319, v355)
    let struct (v356 : string, v357 : string, v358 : string, v359 : bool) = method0()
    let v360 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v5
    let v361 : int64 = Fable.Core.Rust.emitExpr v360 v7
    let v362 : string = "v23.sheet()"
    let v363 : obj = Fable.Core.Rust.emitExpr () v362
    let v364 : string = "v363.unwrap()"
    let v365 : obj = Fable.Core.Rust.emitExpr () v364
    let v366 : string = "wasm_bindgen::JsCast::unchecked_into::<"
    let v367 : string = v366 + v66
    let v368 : string = ">(v365)"
    let v369 : string = v367 + v368
    let v370 : obj = Fable.Core.Rust.emitExpr () v369
    let v371 : string = ": "
    let v372 : string = v172 + v371
    let v373 : string = v372 + v331
    let v374 : string = ";"
    let v375 : string = v373 + v374
    let v376 : string = v375 + v78
    let v377 : string = " {"
    let v378 : string = "*::-webkit-scrollbar-corner"
    let v379 : string = v378 + v377
    let v380 : string = "  "
    let v381 : string = v379 + v380
    let v382 : string = v381 + v376
    let v383 : string = " "
    let v384 : string = v382 + v383
    let v385 : string = "}"
    let v386 : string = v384 + v385
    let v387 : string = $"r#\"{v386}\"#"
    let v388 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v387
    let v389 : string = "v370.insert_rule(v388).unwrap()"
    let v390 : obj = Fable.Core.Rust.emitExpr () v389
    let v391 : Types.EmitType<Types.std.string.String> = method1(v124)
    let v392 : Types.EmitType<Types.std.string.String> = method1(v378)
    let v393 : Types.EmitType<Types.std.string.String> = method1(v127)
    let v394 : Types.std.string.String = Fable.Core.Rust.emitExpr v390 v26
    let v395 : Types.EmitType<Types.std.string.String> = method2(v394)
    let v396 : (Types.EmitType<Types.std.string.String> []) = [|v391; v392; v393; v395|]
    method12(v361, v396)
    let struct (v397 : string, v398 : string, v399 : string, v400 : bool) = method0()
    let v401 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v5
    let v402 : int64 = Fable.Core.Rust.emitExpr v401 v7
    let v403 : string = "v23.sheet()"
    let v404 : obj = Fable.Core.Rust.emitExpr () v403
    let v405 : string = "v404.unwrap()"
    let v406 : obj = Fable.Core.Rust.emitExpr () v405
    let v407 : string = "wasm_bindgen::JsCast::unchecked_into::<"
    let v408 : string = v407 + v66
    let v409 : string = ">(v406)"
    let v410 : string = v408 + v409
    let v411 : obj = Fable.Core.Rust.emitExpr () v410
    let v412 : string = ": "
    let v413 : string = "background"
    let v414 : string = v413 + v412
    let v415 : string = "#555"
    let v416 : string = v414 + v415
    let v417 : string = ";"
    let v418 : string = v416 + v417
    let v419 : string = v418 + v78
    let v420 : string = ": "
    let v421 : string = "opacity"
    let v422 : string = v421 + v420
    let v423 : string = "0.8"
    let v424 : string = v422 + v423
    let v425 : string = ";"
    let v426 : string = v424 + v425
    let v427 : string = v426 + v419
    let v428 : string = ": "
    let v429 : string = "background-clip"
    let v430 : string = v429 + v428
    let v431 : string = "content-box"
    let v432 : string = v430 + v431
    let v433 : string = ";"
    let v434 : string = v432 + v433
    let v435 : string = v434 + v427
    let v436 : string = ": "
    let v437 : string = "border-left"
    let v438 : string = v437 + v436
    let v439 : string = "2px solid transparent"
    let v440 : string = v438 + v439
    let v441 : string = ";"
    let v442 : string = v440 + v441
    let v443 : string = v442 + v435
    let v444 : string = " {"
    let v445 : string = "*::-webkit-scrollbar-thumb"
    let v446 : string = v445 + v444
    let v447 : string = "  "
    let v448 : string = v446 + v447
    let v449 : string = v448 + v443
    let v450 : string = " "
    let v451 : string = v449 + v450
    let v452 : string = "}"
    let v453 : string = v451 + v452
    let v454 : string = $"r#\"{v453}\"#"
    let v455 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v454
    let v456 : string = "v411.insert_rule(v455).unwrap()"
    let v457 : obj = Fable.Core.Rust.emitExpr () v456
    let v458 : Types.EmitType<Types.std.string.String> = method1(v124)
    let v459 : Types.EmitType<Types.std.string.String> = method1(v445)
    let v460 : Types.EmitType<Types.std.string.String> = method1(v127)
    let v461 : Types.std.string.String = Fable.Core.Rust.emitExpr v457 v26
    let v462 : Types.EmitType<Types.std.string.String> = method2(v461)
    let v463 : (Types.EmitType<Types.std.string.String> []) = [|v458; v459; v460; v462|]
    method12(v402, v463)
    let struct (v464 : string, v465 : string, v466 : string, v467 : bool) = method0()
    let v468 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v5
    let v469 : int64 = Fable.Core.Rust.emitExpr v468 v7
    let v470 : string = "v23.sheet()"
    let v471 : obj = Fable.Core.Rust.emitExpr () v470
    let v472 : string = "v471.unwrap()"
    let v473 : obj = Fable.Core.Rust.emitExpr () v472
    let v474 : string = "wasm_bindgen::JsCast::unchecked_into::<"
    let v475 : string = v474 + v66
    let v476 : string = ">(v473)"
    let v477 : string = v475 + v476
    let v478 : obj = Fable.Core.Rust.emitExpr () v477
    let v479 : string = ": "
    let v480 : string = v413 + v479
    let v481 : string = "#ccc"
    let v482 : string = v480 + v481
    let v483 : string = ";"
    let v484 : string = v482 + v483
    let v485 : string = v484 + v78
    let v486 : string = ": "
    let v487 : string = v429 + v486
    let v488 : string = v487 + v431
    let v489 : string = ";"
    let v490 : string = v488 + v489
    let v491 : string = v490 + v485
    let v492 : string = ": "
    let v493 : string = v437 + v492
    let v494 : string = v493 + v439
    let v495 : string = ";"
    let v496 : string = v494 + v495
    let v497 : string = v496 + v491
    let v498 : string = " {"
    let v499 : string = "*::-webkit-scrollbar-thumb:hover"
    let v500 : string = v499 + v498
    let v501 : string = "  "
    let v502 : string = v500 + v501
    let v503 : string = v502 + v497
    let v504 : string = " "
    let v505 : string = v503 + v504
    let v506 : string = "}"
    let v507 : string = v505 + v506
    let v508 : string = $"r#\"{v507}\"#"
    let v509 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v508
    let v510 : string = "v478.insert_rule(v509).unwrap()"
    let v511 : obj = Fable.Core.Rust.emitExpr () v510
    let v512 : Types.EmitType<Types.std.string.String> = method1(v124)
    let v513 : Types.EmitType<Types.std.string.String> = method1(v499)
    let v514 : Types.EmitType<Types.std.string.String> = method1(v127)
    let v515 : Types.std.string.String = Fable.Core.Rust.emitExpr v511 v26
    let v516 : Types.EmitType<Types.std.string.String> = method2(v515)
    let v517 : (Types.EmitType<Types.std.string.String> []) = [|v512; v513; v514; v516|]
    method12(v469, v517)
    let v518 : string = "https://dummyjson.com/users"
    let v519 : string = "($0).to_string()"
    let v520 : Types.std.string.String = Fable.Core.Rust.emitExpr v518 v519
    let v521 : string = "ehttp::Request::get($0)"
    let v522 : Types.ehttp.Request = Fable.Core.Rust.emitExpr v520 v521
    let v523 : bool = method13()
    let v524 : string = "async_std::sync::Mutex::new(v523)"
    let v525 : Types.async_std.sync.Mutex<bool> = Fable.Core.Rust.emitExpr () v524
    let v526 : string = "async_std::sync::Condvar::new()"
    let v527 : Types.async_std.sync.Condvar = Fable.Core.Rust.emitExpr () v526
    let v528 : string = "(v525, v527)"
    let v529 : Types.Tuple<Types.async_std.sync.Mutex<bool>, Types.async_std.sync.Condvar> = Fable.Core.Rust.emitExpr () v528
    let v530 : Types.Tuple<Types.async_std.sync.Mutex<bool>, Types.async_std.sync.Condvar> = method14(v529)
    let v531 : string = "std::sync::Arc::new(v530)"
    let v532 : Types.std.sync.Arc<Types.Tuple<Types.async_std.sync.Mutex<bool>, Types.async_std.sync.Condvar>> = Fable.Core.Rust.emitExpr () v531
    let v533 : string = "v532.clone()"
    let v534 : Types.std.sync.Arc<Types.Tuple<Types.async_std.sync.Mutex<bool>, Types.async_std.sync.Condvar>> = Fable.Core.Rust.emitExpr () v533
    let v535 : Option<Types.ehttp.Response> = None |> unbox
    let v536 : Option<Types.ehttp.Response> = method15(v535)
    let v537 : string = "async_std::sync::Mutex::new(v536)"
    let v538 : Types.async_std.sync.Mutex<Option<Types.ehttp.Response>> = Fable.Core.Rust.emitExpr () v537
    let v539 : Types.async_std.sync.Mutex<Option<Types.ehttp.Response>> = method16(v538)
    let v540 : string = "std::sync::Arc::new(v539)"
    let v541 : Types.std.sync.Arc<Types.async_std.sync.Mutex<Option<Types.ehttp.Response>>> = Fable.Core.Rust.emitExpr () v540
    let v542 : Types.std.sync.Arc<Types.async_std.sync.Mutex<Option<Types.ehttp.Response>>> = method17(v541)
    let v543 : string = "std::cell::RefCell::new(v542)"
    let v544 : Types.std.cell.RefCell<Types.std.sync.Arc<Types.async_std.sync.Mutex<Option<Types.ehttp.Response>>>> = Fable.Core.Rust.emitExpr () v543
    let v545 : string = "v544.clone()"
    let v546 : Types.std.cell.RefCell<Types.std.sync.Arc<Types.async_std.sync.Mutex<Option<Types.ehttp.Response>>>> = Fable.Core.Rust.emitExpr () v545
    let v547 : string = "move |x: ehttp::Result<ehttp::Response>| {"
    let v548 : string = "  let r = x.clone().unwrap();"
    let v549 : string = v547 + v548
    let v550 : string = "  *v544.borrow_mut().try_lock().unwrap() = Some(r);"
    let v551 : string = v549 + v550
    let v552 : string = "  async_std::task::block_on(async move {"
    let v553 : string = v551 + v552
    let v554 : string = "    let (lock, cvar) = &*v534;"
    let v555 : string = v553 + v554
    let v556 : string = "    let mut started = lock.lock().await;"
    let v557 : string = v555 + v556
    let v558 : string = "    *started = true;"
    let v559 : string = v557 + v558
    let v560 : string = "    cvar.notify_one();"
    let v561 : string = v559 + v560
    let v562 : string = "  });"
    let v563 : string = v561 + v562
    let v564 : string = "}"
    let v565 : string = v563 + v564
    let v566 : obj = Fable.Core.Rust.emitExpr () v565
    let v567 : string = "Box::new(v566)"
    let v568 : Types.Box<obj> = Fable.Core.Rust.emitExpr () v567
    let v569 : string = "ehttp::fetch(v522, v568)"
    Fable.Core.Rust.emitExpr () v569
    let v570 : string = "  let (lock, cvar) = &*v532;"
    let v571 : string = "async move {"
    let v572 : string = v571 + v570
    let v573 : string = "  let mut started = lock.lock().await;"
    let v574 : string = v572 + v573
    let v575 : string = "  while !*started {"
    let v576 : string = v574 + v575
    let v577 : string = "    started = cvar.wait(started).await;"
    let v578 : string = v576 + v577
    let v579 : string = "  }"
    let v580 : string = v578 + v579
    let v581 : (Types.std.cell.RefCell<Types.std.sync.Arc<Types.async_std.sync.Mutex<Option<Types.ehttp.Response>>>> -> unit) = closure1(v8)
    let v582 : string = "  v581(v546);"
    let v583 : string = v580 + v582
    let v584 : string = v583 + v564
    let v585 : Types.core.future.Future<obj> = Fable.Core.Rust.emitExpr () v584
    let v586 : string = "async_std::task::block_on(v585)"
    Fable.Core.Rust.emitExpr () v586
    let v587 : string = "https://time.is"
    let v588 : string = $"r#\"{v587}\"#"
    let v589 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v588
    let v590 : Types.StaticRef<Types.Str> = v589 |> unbox
    let v591 : string = "futures_signals::signal::Mutable::new(v590)"
    let v592 : Types.futures_signals.signal.Mutable<Types.StaticRef<Types.Str>> = Fable.Core.Rust.emitExpr () v591
    let v593 : string = "std::rc::Rc::new(v592)"
    let v594 : Types.std.rc.Rc<Types.futures_signals.signal.Mutable<Types.StaticRef<Types.Str>>> = Fable.Core.Rust.emitExpr () v593
    let v595 : string = "input"
    let v596 : string = $"r#\"{v595}\"#"
    let v597 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v596
    let v598 : string = "dominator::DomBuilder::new_html($0)"
    let v599 : Types.dominator.DomBuilder<Types.web_sys.HtmlInputElement> = Fable.Core.Rust.emitExpr v597 v598
    let v600 : string = "color"
    let v601 : string = $"r#\"{v600}\"#"
    let v602 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v601
    let v603 : string = "#666"
    let v604 : string = $"r#\"{v603}\"#"
    let v605 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v604
    let v606 : string = " .style(v602, v605) "
    let v607 : string = v78 + v606
    let v608 : string = "dominator::class! {"
    let v609 : string = v608 + v607
    let v610 : string = v609 + v564
    let v611 : obj = Fable.Core.Rust.emitExpr () v610
    let v612 : string = "v599.class(&*v611)"
    let v613 : Types.dominator.DomBuilder<Types.web_sys.HtmlInputElement> = Fable.Core.Rust.emitExpr () v612
    let v614 : string = "placeholder"
    let v615 : string = $"r#\"{v614}\"#"
    let v616 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v615
    let v617 : string = "url"
    let v618 : string = $"r#\"{v617}\"#"
    let v619 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v618
    let v620 : string = "v613.attr(v616, v619)"
    let v621 : Types.dominator.DomBuilder<Types.web_sys.HtmlInputElement> = Fable.Core.Rust.emitExpr () v620
    let v622 : string = "v594.signal()"
    let v623 : Types.futures_signals.signal.MutableSignal<Types.StaticRef<Types.Str>> = Fable.Core.Rust.emitExpr () v622
    let v624 : string = "value"
    let v625 : string = $"r#\"{v624}\"#"
    let v626 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v625
    let v627 : Types.futures_signals.signal.MutableSignal<Types.StaticRef<Types.Str>> = method18(v623)
    let v628 : string = "v621.prop_signal(v626, v627)"
    let v629 : Types.dominator.DomBuilder<Types.web_sys.HtmlInputElement> = Fable.Core.Rust.emitExpr () v628
    let v630 : string = ".event(dominator::clone!("
    let v631 : (Types.std.rc.Rc<Types.web_sys.HtmlInputElement> -> unit) = closure2(v594)
    let v632 : string = "  v631 => move |_: dominator::events::Input| {"
    let v633 : string = v630 + v632
    let v634 : string = "    let element_ = std::rc::Rc::new(&element); "
    let v635 : string = v633 + v634
    let v636 : string = "    let el = (*element_).clone().into(); "
    let v637 : string = v635 + v636
    let v638 : string = "    v631(el); "
    let v639 : string = v637 + v638
    let v640 : string = "  }"
    let v641 : string = v639 + v640
    let v642 : string = "))"
    let v643 : string = v641 + v642
    let v644 : string = v643 + v78
    let v645 : string = "dominator::with_node!("
    let v646 : string = "   v629,"
    let v647 : string = v645 + v646
    let v648 : string = "   element => {"
    let v649 : string = v647 + v648
    let v650 : string = "      "
    let v651 : string = v649 + v650
    let v652 : string = v651 + v644
    let v653 : string = " "
    let v654 : string = v652 + v653
    let v655 : string = "   }"
    let v656 : string = v654 + v655
    let v657 : string = ")"
    let v658 : string = v656 + v657
    let v659 : Types.dominator.DomBuilder<Types.web_sys.HtmlInputElement> = Fable.Core.Rust.emitExpr () v658
    let v660 : string = "v659.into_dom()"
    let v661 : Types.dominator.Dom = Fable.Core.Rust.emitExpr () v660
    let v662 : string = "iframe"
    let v663 : string = $"r#\"{v662}\"#"
    let v664 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v663
    let v665 : string = "dominator::DomBuilder::new_html($0)"
    let v666 : Types.dominator.DomBuilder<Types.web_sys.HtmlElement> = Fable.Core.Rust.emitExpr v664 v665
    let v667 : string = $"r#\"{v88}\"#"
    let v668 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v667
    let v669 : string = $"r#\"{v90}\"#"
    let v670 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v669
    let v671 : string = " .style(v668, v670) "
    let v672 : string = v78 + v671
    let v673 : string = $"r#\"{v174}\"#"
    let v674 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v673
    let v675 : string = "1"
    let v676 : string = $"r#\"{v675}\"#"
    let v677 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v676
    let v678 : string = " .style(v674, v677) "
    let v679 : string = v672 + v678
    let v680 : string = "border"
    let v681 : string = $"r#\"{v680}\"#"
    let v682 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v681
    let v683 : string = $"r#\"{v74}\"#"
    let v684 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v683
    let v685 : string = " .style(v682, v684) "
    let v686 : string = v679 + v685
    let v687 : string = "dominator::class! {"
    let v688 : string = v687 + v686
    let v689 : string = v688 + v564
    let v690 : obj = Fable.Core.Rust.emitExpr () v689
    let v691 : string = "v666.class(&*v690)"
    let v692 : Types.dominator.DomBuilder<Types.web_sys.HtmlElement> = Fable.Core.Rust.emitExpr () v691
    let v693 : string = "title"
    let v694 : string = $"r#\"{v693}\"#"
    let v695 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v694
    let v696 : string = $"r#\"{v693}\"#"
    let v697 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v696
    let v698 : string = "v692.attr(v695, v697)"
    let v699 : Types.dominator.DomBuilder<Types.web_sys.HtmlElement> = Fable.Core.Rust.emitExpr () v698
    let v700 : string = "v594.signal()"
    let v701 : Types.futures_signals.signal.MutableSignal<Types.StaticRef<Types.Str>> = Fable.Core.Rust.emitExpr () v700
    let v702 : string = "src"
    let v703 : string = $"r#\"{v702}\"#"
    let v704 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v703
    let v705 : Types.futures_signals.signal.MutableSignal<Types.StaticRef<Types.Str>> = method18(v701)
    let v706 : string = "v699.prop_signal(v704, v705)"
    let v707 : Types.dominator.DomBuilder<Types.web_sys.HtmlElement> = Fable.Core.Rust.emitExpr () v706
    let v708 : string = "v707.into_dom()"
    let v709 : Types.dominator.Dom = Fable.Core.Rust.emitExpr () v708
    let v710 : string = "div"
    let v711 : string = $"r#\"{v710}\"#"
    let v712 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v711
    let v713 : string = "dominator::DomBuilder::new_html($0)"
    let v714 : Types.dominator.DomBuilder<Types.web_sys.HtmlElement> = Fable.Core.Rust.emitExpr v712 v713
    let v715 : string = "background-color"
    let v716 : string = $"r#\"{v715}\"#"
    let v717 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v716
    let v718 : string = $"r#\"{v603}\"#"
    let v719 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v718
    let v720 : string = " .style(v717, v719) "
    let v721 : string = v78 + v720
    let v722 : string = $"r#\"{v172}\"#"
    let v723 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v722
    let v724 : string = $"r#\"{v174}\"#"
    let v725 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v724
    let v726 : string = " .style(v723, v725) "
    let v727 : string = v721 + v726
    let v728 : string = $"r#\"{v174}\"#"
    let v729 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v728
    let v730 : string = $"r#\"{v675}\"#"
    let v731 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v730
    let v732 : string = " .style(v729, v731) "
    let v733 : string = v727 + v732
    let v734 : string = $"r#\"{v180}\"#"
    let v735 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v734
    let v736 : string = "column"
    let v737 : string = $"r#\"{v736}\"#"
    let v738 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v737
    let v739 : string = " .style(v735, v738) "
    let v740 : string = v733 + v739
    let v741 : string = "dominator::class! {"
    let v742 : string = v741 + v740
    let v743 : string = v742 + v564
    let v744 : obj = Fable.Core.Rust.emitExpr () v743
    let v745 : string = "v714.class(&*v744)"
    let v746 : Types.dominator.DomBuilder<Types.web_sys.HtmlElement> = Fable.Core.Rust.emitExpr () v745
    let v747 : string = "v661"
    let v748 : string = v78 + v747
    let v749 : string = ", v709"
    let v750 : string = v748 + v749
    let v751 : string = "["
    let v752 : string = v751 + v750
    let v753 : string = "]"
    let v754 : string = v752 + v753
    let v755 : obj = Fable.Core.Rust.emitExpr () v754
    let v756 : string = "v746.children(v755)"
    let v757 : Types.dominator.DomBuilder<Types.web_sys.HtmlElement> = Fable.Core.Rust.emitExpr () v756
    let v758 : string = "v757.into_dom()"
    let v759 : Types.dominator.Dom = Fable.Core.Rust.emitExpr () v758
    let v760 : string = "dominator::body()"
    let v761 : Types.web_sys.HtmlElement = Fable.Core.Rust.emitExpr () v760
    let v762 : string = "dominator::append_dom(&v761, v759)"
    Fable.Core.Rust.emitExpr () v762
    let v763 : string = "app end"
    let v764 : Types.EmitType<Types.std.string.String> = method1(v763)
    let v765 : string = "???"
    let v766 : Types.EmitType<Types.std.string.String> = method1(v765)
    let v767 : (Types.EmitType<Types.std.string.String> []) = [|v764; v766|]
    method3(v8, v767)
    0
let v0 : (unit -> int32) = closure0()
()
