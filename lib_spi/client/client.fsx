let rec method0 () : struct (string * string * string * bool) =
    let v0 : string = ""
    let v1 : obj = v0
    struct (v0, v0, v0, true)
and method1 (v0 : int32, v1 : string) : string =
    let v2 : int32 = String.length v1
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : string = $"0{v1}"
        method1(v0, v4)
    else
        v1
and method2 (v0 : string) : string =
    v0
and method3 () : string =
    let v0 : string = "$1=$2"
    v0
and method4 () : string =
    let v0 : string = "[$1]"
    v0
and method5 () : string =
    let v0 : string = " "
    v0
and method6 () : string =
    let v0 : string = "387957"
    v0
and method7 () : string =
    let v0 : string = "222222"
    v0
and closure0 () () : int32 =
    let struct (v0 : string, v1 : string, v2 : string, v3 : bool) = method0()
    let v4 : string = "chrono::Utc::now()"
    let v5 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v6 : string = "($0).timestamp()"
    let v7 : int64 = Fable.Core.Rust.emitExpr v5 v6
    let v8 : string = "web_sys::window().unwrap()"
    let v9 : obj = Fable.Core.Rust.emitExpr () v8
    let v10 : string = "$0.document().unwrap()"
    let v11 : obj = Fable.Core.Rust.emitExpr v9 v10
    let v12 : string = "$0.body().unwrap()"
    let v13 : obj = Fable.Core.Rust.emitExpr v11 v12
    let v14 : string = "iframe"
    let v15 : string = $"r#\"{v14}\"#"
    let v16 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v15
    let v17 : string = "$0.create_element($1).unwrap()"
    let v18 : obj = Fable.Core.Rust.emitExpr struct (v11, v16) v17
    let v19 : string = "window"
    let v20 : string = "($0).to_string()"
    let v21 : Types.std.string.String = Fable.Core.Rust.emitExpr v19 v20
    let v22 : Types.EmitType<Types.std.string.String> = v21 |> unbox<Types.EmitType<Types.std.string.String>>
    let v23 : string = "format!(\"{:?}\", $0)"
    let v24 : Types.std.string.String = Fable.Core.Rust.emitExpr v9 v23
    let v25 : Types.EmitType<Types.std.string.String> = v24 |> unbox<Types.EmitType<Types.std.string.String>>
    let v26 : string = "document"
    let v27 : Types.std.string.String = Fable.Core.Rust.emitExpr v26 v20
    let v28 : Types.EmitType<Types.std.string.String> = v27 |> unbox<Types.EmitType<Types.std.string.String>>
    let v29 : Types.std.string.String = Fable.Core.Rust.emitExpr v11 v23
    let v30 : Types.EmitType<Types.std.string.String> = v29 |> unbox<Types.EmitType<Types.std.string.String>>
    let v31 : string = "body"
    let v32 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v20
    let v33 : Types.EmitType<Types.std.string.String> = v32 |> unbox<Types.EmitType<Types.std.string.String>>
    let v34 : Types.std.string.String = Fable.Core.Rust.emitExpr v13 v23
    let v35 : Types.EmitType<Types.std.string.String> = v34 |> unbox<Types.EmitType<Types.std.string.String>>
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v14 v20
    let v37 : Types.EmitType<Types.std.string.String> = v36 |> unbox<Types.EmitType<Types.std.string.String>>
    let v38 : Types.std.string.String = Fable.Core.Rust.emitExpr v18 v23
    let v39 : Types.EmitType<Types.std.string.String> = v38 |> unbox<Types.EmitType<Types.std.string.String>>
    let v40 : (Types.EmitType<Types.std.string.String> []) = [|v22; v25; v28; v30; v33; v35; v37; v39|]
    let v41 : string = "core::ops::Deref::deref($0)"
    let v42 : obj = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "format!(\"{:?}\", ***$0)"
    let v44 : Types.std.string.String = Fable.Core.Rust.emitExpr v42 v43
    let v45 : Types.EmitType<Types.std.string.String> = v44 |> unbox<Types.EmitType<Types.std.string.String>>
    let v46 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v47 : int64 = Fable.Core.Rust.emitExpr v46 v6
    let v48 : int64 = v47 - v7
    let v49 : string = (v48).ToString ()
    let v50 : int32 = 6
    let v51 : string = method1(v50, v49)
    let v52 : string = "rand::random::<u8>()"
    let v53 : uint8 = Fable.Core.Rust.emitExpr () v52
    let v54 : string = "timestamp"
    let v55 : Types.std.string.String = Fable.Core.Rust.emitExpr v54 v20
    let v56 : Types.EmitType<Types.std.string.String> = v55 |> unbox<Types.EmitType<Types.std.string.String>>
    let v57 : Types.std.string.String = Fable.Core.Rust.emitExpr v51 v20
    let v58 : Types.EmitType<Types.std.string.String> = v57 |> unbox<Types.EmitType<Types.std.string.String>>
    let v59 : string = "run_id"
    let v60 : Types.std.string.String = Fable.Core.Rust.emitExpr v59 v20
    let v61 : Types.EmitType<Types.std.string.String> = v60 |> unbox<Types.EmitType<Types.std.string.String>>
    let v62 : Types.std.string.String = Fable.Core.Rust.emitExpr v53 v23
    let v63 : Types.EmitType<Types.std.string.String> = v62 |> unbox<Types.EmitType<Types.std.string.String>>
    let v64 : string = "log_level"
    let v65 : Types.std.string.String = Fable.Core.Rust.emitExpr v64 v20
    let v66 : Types.EmitType<Types.std.string.String> = v65 |> unbox<Types.EmitType<Types.std.string.String>>
    let v67 : string = "Debug"
    let v68 : Types.std.string.String = Fable.Core.Rust.emitExpr v67 v20
    let v69 : Types.EmitType<Types.std.string.String> = v68 |> unbox<Types.EmitType<Types.std.string.String>>
    let v70 : (Types.EmitType<Types.std.string.String> []) = [|v56; v58; v61; v63; v66; v69|]
    let v71 : obj = Fable.Core.Rust.emitExpr v70 v41
    let v72 : Types.std.string.String = Fable.Core.Rust.emitExpr v71 v43
    let v73 : Types.EmitType<Types.std.string.String> = v72 |> unbox<Types.EmitType<Types.std.string.String>>
    let v74 : string = "> app ()"
    let v75 : Types.std.string.String = Fable.Core.Rust.emitExpr v74 v20
    let v76 : Types.EmitType<Types.std.string.String> = v75 |> unbox<Types.EmitType<Types.std.string.String>>
    let v77 : (Types.EmitType<Types.std.string.String> []) = [|v76|]
    let v78 : obj = Fable.Core.Rust.emitExpr v77 v41
    let v79 : Types.std.string.String = Fable.Core.Rust.emitExpr v78 v43
    let v80 : Types.EmitType<Types.std.string.String> = v79 |> unbox<Types.EmitType<Types.std.string.String>>
    let v81 : Types.std.string.String = v80 |> unbox
    let v82 : string = "fable_library_rust::String_::fromStr($0)"
    let v83 : string = Fable.Core.Rust.emitExpr v81 v82
    let v84 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v85 : string = $"r#\"{v84}\"#"
    let v86 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v85
    let v87 : string = "regex::RegexBuilder::new($0)"
    let v88 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v86 v87
    let v89 : string = "$0.build().unwrap()"
    let v90 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v88 v89
    let v91 : string = method2(v83)
    let v92 : string = "$0.as_str()"
    let v93 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v91 v92
    let v94 : string = method3()
    let v95 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v94 v92
    let v96 : string = "$0.replace_all(&$1, $2).to_string()"
    let v97 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v90, v93, v95) v96
    let v98 : string = Fable.Core.Rust.emitExpr v97 v82
    let v99 : string = "\\[\"(.*?)\"\\]"
    let v100 : string = $"r#\"{v99}\"#"
    let v101 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v100
    let v102 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v101 v87
    let v103 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v102 v89
    let v104 : string = method2(v98)
    let v105 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v104 v92
    let v106 : string = method4()
    let v107 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v106 v92
    let v108 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v103, v105, v107) v96
    let v109 : string = Fable.Core.Rust.emitExpr v108 v82
    let v110 : string = ", "
    let v111 : string = $"r#\"{v110}\"#"
    let v112 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v111
    let v113 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v112 v87
    let v114 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v113 v89
    let v115 : string = method2(v109)
    let v116 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v115 v92
    let v117 : string = method5()
    let v118 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v117 v92
    let v119 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v114, v116, v118) v96
    let v120 : string = Fable.Core.Rust.emitExpr v119 v82
    let v121 : Types.std.string.String = Fable.Core.Rust.emitExpr v120 v20
    let v122 : Types.EmitType<Types.std.string.String> = v121 |> unbox<Types.EmitType<Types.std.string.String>>
    let v123 : string = "purple"
    let v124 : string = "colored::Colorize::color(&*$0, $1.to_string())"
    let v125 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v122, v123) v124
    let v126 : string = "format!(\"{}\", $0)"
    let v127 : Types.std.string.String = Fable.Core.Rust.emitExpr v125 v126
    let v128 : Types.std.string.String = v45 |> unbox
    let v129 : string = Fable.Core.Rust.emitExpr v128 v82
    let v130 : string = $"r#\"{v84}\"#"
    let v131 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v130
    let v132 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v131 v87
    let v133 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v132 v89
    let v134 : string = method2(v129)
    let v135 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v134 v92
    let v136 : string = method3()
    let v137 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v136 v92
    let v138 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v133, v135, v137) v96
    let v139 : string = Fable.Core.Rust.emitExpr v138 v82
    let v140 : string = $"r#\"{v99}\"#"
    let v141 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v140
    let v142 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v141 v87
    let v143 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v142 v89
    let v144 : string = method2(v139)
    let v145 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v144 v92
    let v146 : string = method4()
    let v147 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v146 v92
    let v148 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v143, v145, v147) v96
    let v149 : string = Fable.Core.Rust.emitExpr v148 v82
    let v150 : string = $"r#\"{v110}\"#"
    let v151 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v150
    let v152 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v151 v87
    let v153 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v152 v89
    let v154 : string = method2(v149)
    let v155 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v154 v92
    let v156 : string = method5()
    let v157 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v156 v92
    let v158 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v153, v155, v157) v96
    let v159 : string = Fable.Core.Rust.emitExpr v158 v82
    let v160 : Types.std.string.String = Fable.Core.Rust.emitExpr v159 v20
    let v161 : Types.EmitType<Types.std.string.String> = v160 |> unbox<Types.EmitType<Types.std.string.String>>
    let v162 : string = method6()
    let v163 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v162 v92
    let v164 : unativeint = unativeint 0
    let v165 : unativeint = unativeint 2
    let v166 : string = "&$0[$1..$2]"
    let v167 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v163, v164, v165) v166
    let v168 : string = Fable.Core.Rust.emitExpr v167 v82
    let v169 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v170 : uint8 = Fable.Core.Rust.emitExpr v168 v169
    let v171 : string = method6()
    let v172 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v171 v92
    let v173 : unativeint = unativeint 2
    let v174 : unativeint = unativeint 4
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v172, v173, v174) v166
    let v176 : string = Fable.Core.Rust.emitExpr v175 v82
    let v177 : uint8 = Fable.Core.Rust.emitExpr v176 v169
    let v178 : string = method6()
    let v179 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v178 v92
    let v180 : unativeint = unativeint 4
    let v181 : unativeint = unativeint 6
    let v182 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v179, v180, v181) v166
    let v183 : string = Fable.Core.Rust.emitExpr v182 v82
    let v184 : uint8 = Fable.Core.Rust.emitExpr v183 v169
    let v185 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v186 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v161, v170, v177, v184) v185
    let v187 : Types.std.string.String = Fable.Core.Rust.emitExpr v186 v126
    let v188 : Types.std.string.String = v73 |> unbox
    let v189 : string = Fable.Core.Rust.emitExpr v188 v82
    let v190 : string = $"r#\"{v84}\"#"
    let v191 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v190
    let v192 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v191 v87
    let v193 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v192 v89
    let v194 : string = method2(v189)
    let v195 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v194 v92
    let v196 : string = method3()
    let v197 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v196 v92
    let v198 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v193, v195, v197) v96
    let v199 : string = Fable.Core.Rust.emitExpr v198 v82
    let v200 : string = $"r#\"{v99}\"#"
    let v201 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v200
    let v202 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v201 v87
    let v203 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v202 v89
    let v204 : string = method2(v199)
    let v205 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v204 v92
    let v206 : string = method4()
    let v207 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v206 v92
    let v208 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v203, v205, v207) v96
    let v209 : string = Fable.Core.Rust.emitExpr v208 v82
    let v210 : string = $"r#\"{v110}\"#"
    let v211 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v210
    let v212 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v211 v87
    let v213 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v212 v89
    let v214 : string = method2(v209)
    let v215 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v214 v92
    let v216 : string = method5()
    let v217 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v216 v92
    let v218 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v213, v215, v217) v96
    let v219 : string = Fable.Core.Rust.emitExpr v218 v82
    let v220 : Types.std.string.String = Fable.Core.Rust.emitExpr v219 v20
    let v221 : Types.EmitType<Types.std.string.String> = v220 |> unbox<Types.EmitType<Types.std.string.String>>
    let v222 : string = method7()
    let v223 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v222 v92
    let v224 : unativeint = unativeint 0
    let v225 : unativeint = unativeint 2
    let v226 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v223, v224, v225) v166
    let v227 : string = Fable.Core.Rust.emitExpr v226 v82
    let v228 : uint8 = Fable.Core.Rust.emitExpr v227 v169
    let v229 : string = method7()
    let v230 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v229 v92
    let v231 : unativeint = unativeint 2
    let v232 : unativeint = unativeint 4
    let v233 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v230, v231, v232) v166
    let v234 : string = Fable.Core.Rust.emitExpr v233 v82
    let v235 : uint8 = Fable.Core.Rust.emitExpr v234 v169
    let v236 : string = method7()
    let v237 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v236 v92
    let v238 : unativeint = unativeint 4
    let v239 : unativeint = unativeint 6
    let v240 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v237, v238, v239) v166
    let v241 : string = Fable.Core.Rust.emitExpr v240 v82
    let v242 : uint8 = Fable.Core.Rust.emitExpr v241 v169
    let v243 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v221, v228, v235, v242) v185
    let v244 : Types.std.string.String = Fable.Core.Rust.emitExpr v243 v126
    let v245 : string = $"{v127} {v187} {v244}"
    let v246 : string = "web_sys::console::log_1(&wasm_bindgen::JsValue::from_str($0))"
    Fable.Core.Rust.emitExpr v245 v246
    let v247 : string = "src"
    let v248 : string = $"r#\"{v247}\"#"
    let v249 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v248
    let v250 : string = "https://time.is"
    let v251 : string = $"r#\"{v250}\"#"
    let v252 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v251
    let v253 : string = "$0.set_attribute($1, $2).unwrap()"
    Fable.Core.Rust.emitExpr struct (v18, v249, v252) v253
    let v254 : string = "width"
    let v255 : string = $"r#\"{v254}\"#"
    let v256 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v255
    let v257 : string = "100%"
    let v258 : string = $"r#\"{v257}\"#"
    let v259 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v258
    Fable.Core.Rust.emitExpr struct (v18, v256, v259) v253
    let v260 : string = "style"
    let v261 : string = $"r#\"{v260}\"#"
    let v262 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v261
    let v263 : string = "height: 100vh; border: 0;"
    let v264 : string = $"r#\"{v263}\"#"
    let v265 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v264
    Fable.Core.Rust.emitExpr struct (v18, v262, v265) v253
    let v266 : string = "data-test"
    let v267 : string = $"r#\"{v266}\"#"
    let v268 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v267
    let v269 : string = "1"
    let v270 : string = $"r#\"{v269}\"#"
    let v271 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v270
    Fable.Core.Rust.emitExpr struct (v18, v268, v271) v253
    let v272 : string = "$0.append_child(&$1).unwrap()"
    Fable.Core.Rust.emitExpr struct (v13, v18) v272
    0
let v0 : (unit -> int32) = closure0()
()
