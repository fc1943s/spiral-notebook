open rust.util

// use indexed_db_futures::prelude::*;

// pub async fn example() -> Result<(), DomException> {
//     // Open my_db v1
//     let mut db_req: OpenDbRequest = IdbDatabase::open_u32("my_db", 1)?;
//     db_req.set_on_upgrade_needed(Some(|evt: &IdbVersionChangeEvent| -> Result<(), JsValue> {
//         // Check if the object store exists; create it if it doesn't
//         if let None = evt.db().object_store_names().find(|n| n == "my_store") {
//             evt.db().create_object_store("my_store")?;
//         }
//         Ok(())
//     }));

//     let db: IdbDatabase = db_req.into_future().await?;

//     // Insert/overwrite a record
//     let tx: IdbTransaction = db
//       .transaction_on_one_with_mode("my_store", IdbTransactionMode::Readwrite)?;
//     let store: IdbObjectStore = tx.object_store("my_store")?;

//     let value_to_put: JsValue = get_some_js_value();
//     store.put_key_val_owned("my_key", &value_to_put)?;

//     // IDBTransactions can have an Error or an Abort event; into_result() turns both into a
//     // DOMException
//     tx.await.into_result()?;

//     // Delete a record
//     let tx = db.transaction_on_one_with_mode("my_store", IdbTransactionMode::Readwrite)?;
//     let store = tx.object_store("my_store")?;
//     store.delete_owned("my_key")?;
//     tx.await.into_result()?;

//     // Get a record
//     let tx = db.transaction_on_one("my_store")?;
//     let store = tx.object_store("my_store")?;

//     let value: Option<JsValue> = store.get_owned("my_key")?.await?;
//     use_value(value);

//     // All of the requests in the transaction have already finished so we can just drop it to
//     // avoid the unused future warning, or assign it to _.
//     let _ = tx;

//     Ok(())
// }

inl app () =
    emit_expr () "console_error_panic_hook::set_once()"

    inl get_locals () = ;[!>"> app ()"]
    inl log = new_log Wasm32 (fun () => Debug) get_locals "387957"

    inl window = get_window ()
    inl document = window |> get_document
    inl head = document |> get_head
    inl style : rc html_style_element = document |> create_element "style" |> new_rc

    log Debug ;[!>"style"; !>(style |> format)]

    style
    |> set_attribute'' "type" "text/css"
    |> set_attribute'' "data-id" "global-css"
    |> append_parent'' head

    style
    |> append_css_rule "html, body" [
        "margin", "0"
        "padding", "0"
        "width", "100%"
        "height", "100%"
        "overflow", "hidden"
    ]
    |> append_css_rule "body" [
        "font-family", "system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", sans-serif"
        "-webkit-font-smoothing", "antialiased"
        "-moz-osx-font-smoothing", "grayscale"
        "display", "flex"
        "flex-direction", "row"
        "box-sizing", "border-box"
        "align-items", "stretch"
        "align-content", "stretch"
    ]
    |> append_css_rule "*::-webkit-scrollbar" [
        "width", "11px"
    ]
    |> append_css_rule "*::-webkit-scrollbar:horizontal" [
        "height", "8px"
    ]
    |> append_css_rule "*::-webkit-scrollbar-track" [
        "display", "none"
    ]
    |> append_css_rule "*::-webkit-scrollbar-corner" [
        "display", "none"
    ]
    |> append_css_rule "*::-webkit-scrollbar-thumb" [
        "background", "#555"
        "opacity", "0.8"
        "background-clip", "content-box"
        "border-left", "2px solid transparent"
    ]
    |> append_css_rule "*::-webkit-scrollbar-thumb:hover" [
        "background", "#ccc"
        "background-clip", "content-box"
        "border-left", "2px solid transparent"
    ]
    |> ignore

    inl local_storage = window |> get_local_storage

    local_storage |> set_local_storage_value "key" "value"

    inl local_storage_value = local_storage |> get_local_storage_value "key"

    local_storage |> delete_local_storage_value "key"

    inl local_storage_value = local_storage |> get_local_storage_value "key"


    inl fn : future any =
        inl log_n (n : i32) =
            log Debug ;[!>"log_n"; !>n]
        inl log_n_ = join log_n

        inl log (x : std_string) =
            log Debug ;[!>"log"; !>(x |> format)]

        inl get_db () =
            inl db = db_open "name"
            inl db = db |> new_box
            inl db = db |> box_leak
            db

        inl name = join "name"
        inl store_name = join "store" |> to_std_string
        inl store_name_ = join "store" |> to_std_string
        inl key = join "key" |> js_value_from_str
        inl value = join "value" |> js_value_from_str

        emit_expr
            ()
            ("async move {" +\
            $"\"  !log_n(0);\"" +\
            // $"\"  let db_ref_____ = !get_db();\"" +\
            $"\"  let mut db_ref_____ = !db_open(!name);\"" +\
            $"\"  let db_param_ = &mut db_ref_____;\"" +\
            $"\"  indexed_db_futures::prelude::IdbOpenDbRequestLike::set_on_upgrade_needed(\"" +\
            $"\"    db_param_,\"" +\
            $"\"    Some(move |event: &indexed_db_futures::IdbVersionChangeEvent| {\"" +\
            $"\"      let db: &indexed_db_futures::IdbDatabase = event.db();\"" +\
            $"\"      if !!db.object_store_names().any(|n| &n == &!store_name_.clone()) {\"" +\
            $"\"        let object_store = db.create_object_store(&!store_name_.clone());\"" +\
            $"\"        let object_store: indexed_db_futures::prelude::IdbObjectStore = object_store.unwrap();\"" +\
            $"\"        ();\"" +\
            $"\"      };\"" +\
            $"\"      Ok(())\"" +\
            $"\"    })\"" +\
            $"\"  );\"" +\
            $"\"  let db_future_ = db_ref_____;\"" +\
            $"\"  let db_future = db_future_.into_future();\"" +\
            $"\"  let db = db_future.await;\"" +\
            $"\"  let db = db.unwrap();\"" +\
            $"\"  let tx = db.transaction_on_one_with_mode(&!store_name.clone(), indexed_db_futures::prelude::IdbTransactionMode::Readwrite);\"" +\
            $"\"  let tx = tx.unwrap();\"" +\
            $"\"  let store = tx.object_store(&!store_name.clone()).unwrap();\"" +\
            $"\"  store.put_key_val_owned(\"" +\
            $"\"    &!key,\"" +\
            $"\"    &!value\"" +\
            $"\"  ).unwrap();\"" +\
            $"\"  tx.await.into_result().unwrap();\"" +\
            $"\"  let tx = db.transaction_on_one_with_mode(&!store_name.clone(), indexed_db_futures::prelude::IdbTransactionMode::Readonly);\"" +\
            $"\"  let tx = tx.unwrap();\"" +\
            $"\"  let store = tx.object_store(&!store_name.clone()).unwrap();\"" +\
            $"\"  Ok::<(), web_sys::DomException>(())\"" +\
            "}")

    block_on fn


    inl url_json = "https://dummyjson.com/users"

    inl request = http_request_get url_json
    fetch' request fun response =>
        inl response = response |> borrow |> try_lock
        log Debug ;[
            !>"app > fetch ()"; !>""
            !>"response"; !>(response |> format)
        ]

    inl url_src = "https://time.is" |> raw_string_literal |> to_static_ref
    inl url_mutable = url_src |> new_mutable
    inl url_rc = url_mutable |> new_rc

    inl input =
        new_input ()
        |> set_css [
            "color", "#666"
        ]
        |> set_attr "placeholder" "url"
        |> prop_signal "value" (url_rc |> signal)
        |> with_on_change fun text => url_rc |> set_neq text
        |> into_dom

    inl iframe =
        new_el "iframe"
        |> set_css [
            "width", "100%"
            "flex", "1"
            "border", "0"
        ]
        |> set_attr "title" "title"
        |> prop_signal "src" (url_rc |> signal)
        |> into_dom

    inl div =
        new_el "div"
        |> set_css [
            "background-color", "#666"
            "display", "flex"
            "flex", "1"
            "flex-direction", "column"
        ]
        |> set_children [input; iframe]
        |> into_dom

    get_dom_body ()
    |> append_dom div

    log Debug ;[!>"app end"; !>"???"]

    0i32


inl main () =
    print_static "<client>"

    app
    |> dyn
    |> ignore

    print_static "</client>"
