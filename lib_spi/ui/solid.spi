open js
open real_js
open real_util
open real_solid


union solid_prop =
    | AlignItems : string
    | AriaLabel : string
    | As : js_function
    | BackgroundColor : string
    | Border : string
    | BorderWidth : string
    | BorderBottomWidth : string
    | BorderColor : string
    | Bottom : string
    | Color : string
    | Checked : bool
    | Children : () -> array jsx_element
    | ColorScheme : string
    | Compact : bool
    | Css : any
    | DefaultValue : string
    | Direction : string
    | Display : string
    | Each : a i32 any
    | External : bool
    | Flex : string
    | FlexDirection : string
    | FontSize : string
    | Height : string
    | Href : string
    | Icon : jsx_element
    | Id : string
    | JustifyContent : string
    | Left : string
    | LeftIcon : jsx_element
    | LineHeight : string
    | Margin : string
    | MarginTop : string
    | MarginRight : string
    | MarginBottom : string
    | MarginLeft : string
    | MaxHeight : string
    | MaxWidth : string
    | OnChange : any -> ()
    | OnClick : () -> ()
    | OnInput : any -> ()
    | Outline : string
    | OverflowX : string
    | OverflowY : string
    | Padding : string
    | PaddingTop : string
    | PaddingRight : string
    | PaddingBottom : string
    | PaddingLeft : string
    | Position : string
    | Right : string
    | Size : string
    | Spacing : string
    | Src : string
    | Striped : string
    | Thickness : string
    | Title : jsx_element
    | Top : string
    | Type : string
    | Value : any
    | Width : string
    | ZIndex : i32
    | Zoom : string


inl typecheck_props () =
    real
        union_record_check `solid_prop `(`(prop_keys ())) {check_length=true; check_type=CheckNone}
        union_record_check `solid_prop `solid_props {check_length=true; check_type=CheckOption}

inl init_props (props_fn : solid_props -> solid_props) : solid_props =
    real real_init_props props_fn

inl props_entries (props : solid_props) : a i32 js_obj_prop =
    real record_entries props

inl create_props (entries : a i32 js_obj_prop) : any = real create_obj entries

inl create_custom_component forall props_type.
    ~(cmp : mut props_type -> jsx_element)
    (props : props_type)
    : jsx_element
    =
    inl new_cmp : any -> jsx_element = $"!cmp |> unbox<obj -> JSX.Element>"
    inl mut_props = mut props
    inl props_obj : any = real to_any `(mut props_type) mut_props
    real create_component' new_cmp props_obj


inl create_component
    ~(cmp : mut_props -> jsx_element)
    (props_fn : solid_props -> solid_props)
    (children : () -> array jsx_element)
    : jsx_element
    =
    inl new_cmp : any -> jsx_element = $"!cmp |> unbox<obj -> JSX.Element>"
    inl props : solid_props =
        real
            inl props = init_props props_fn
            real add_children_props children props
    inl new_props = mut props
    $"emitJsExpr (!new_props, !children) \"$0.children = $1\"" : ()
    inl props_obj : any = real to_any `mut_props new_props
    real create_component' new_cmp props_obj

inl create_native_component
    (cmp : js_function)
    (props_fn : solid_props -> solid_props)
    (children : () -> array jsx_element)
    : jsx_element
    =
    real create_native_component cmp props_fn children

inl on' (deps : () -> array any) (fn : () -> ()) : js_function = real on deps fn
inl create_effect' (on : js_function) : () = real create_effect on
inl create_signal' forall a. (default_value : a) : (() -> a) * (a -> ()) = real create_signal `a default_value
inl merge_props forall t. (source : t) (target : t) : t =
    inl source = mut source
    inl target = mut target
    real real_merge_props `t target source
    *target


inl biRegularDownArrow_ () = real import "BiRegularDownArrow" "solid-icons/bi"
inl biRegularLinkExternal_ () = real import "BiRegularLinkExternal" "solid-icons/bi"
inl biRegularRefresh_ () = real import "BiRegularRefresh" "solid-icons/bi"
inl biRegularUpArrow_ () = real import "BiRegularUpArrow" "solid-icons/bi"
inl biRegularUndo_ () = real import "BiRegularUndo" "solid-icons/bi"
inl biRegularPlus_ () = real import "BiRegularPlus" "solid-icons/bi"
inl biRegularMinus_ () = real import "BiRegularMinus" "solid-icons/bi"

inl hope_ () : js_function = real import "hope" "@hope-ui/solid"
inl iframe props =
    inl hope : js_function = real hope_ ()
    create_native_component $"!hope?iframe" props fun () => ;[]

inl pre props children =
    inl hope : js_function = real hope_ ()
    create_native_component $"!hope?pre" props children

inl anchor_ () = real import "Anchor" "@hope-ui/solid"
inl anchor props children = create_native_component (anchor_ ()) props children

inl box_ () = real import "Box" "@hope-ui/solid"
inl box props children = create_native_component (box_ ()) props children

inl button_ () = real import "Button" "@hope-ui/solid"
inl button props children = create_native_component (button_ ()) props children

inl icon_button_ () = real import "IconButton" "@hope-ui/solid"
inl icon_button props children = create_native_component (icon_button_ ()) props children

inl checkbox_ () = real import "Checkbox" "@hope-ui/solid"
inl checkbox props children = create_native_component (checkbox_ ()) props children


union for_props item_type =
    | Each' : a i32 item_type

inl loop_props forall item_type. (props : list (for_props item_type)) : solid_props -> solid_props =
    fun props' => {props' with
        Each =
            props /. .Each' /?? ((a ;[]) : a i32 item_type)
            |> am.map real to_any `item_type
            |> Some
    }

inl for_ () = real import "For" "solid-js"
inl for' forall item_type. (props : list (for_props item_type)) (children : item_type -> array jsx_element) =
    create_native_component (for_ ()) (loop_props props) ($"!children |> unbox" : () -> array jsx_element)

inl index_ () = real import "Index" "solid-js"
inl index' forall item_type. (props : list (for_props item_type)) (children : (() -> item_type) -> array jsx_element) =
    create_native_component (index_ ()) (loop_props props) ($"!children |> unbox" : () -> array jsx_element)

inl icon_ () = real import "Icon" "@hope-ui/solid"
inl icon props children = create_native_component (icon_ ()) props children

inl input_ () = real import "Input" "@hope-ui/solid"
inl input props children = create_native_component (input_ ()) props children

inl radio_ () = real import "Radio" "@hope-ui/solid"
inl radio props children = create_native_component (radio_ ()) props children

inl radio_group_ () = real import "RadioGroup" "@hope-ui/solid"
inl radio_group props children = create_native_component (radio_group_ ()) props children

inl stack_ () = real import "Stack" "@hope-ui/solid"
inl stack props children = create_native_component (stack_ ()) props children

inl table_ () = real import "Table" "@hope-ui/solid"
inl table props children = create_native_component (table_ ()) props children

inl tbody_ () = real import "Tbody" "@hope-ui/solid"
inl tbody props children = create_native_component (tbody_ ()) props children

inl td_ () = real import "Td" "@hope-ui/solid"
inl td props children = create_native_component (td_ ()) props children

inl tr_ () = real import "Tr" "@hope-ui/solid"
inl tr props children = create_native_component (tr_ ()) props children


inl empty_fragment () : jsx_element =
    $"Html.fragment []"

inl str (str : string) : jsx_element =
    $"Html.fragment [ !str |> unbox<JSX.Element> ]"

inl breakpoints ~{ initial sm } =
    join
        $"{| ````@initial```` = !initial; ````@sm```` = !sm |} |> unbox<string>"

inl children_fragment (children : () -> array jsx_element) : jsx_element =
    $"!children |> unbox<JSX.Element>"

inl show_when cond cmp =
    if cond then cmp else empty_fragment ()

inl props_default_with a fn1 fn2 =
    match a with
    | Some x when fn1 x => fn2 x
    | _ => []

inl props_if a props =
    if a
    then props
    else []


type mut_props = mut_props
