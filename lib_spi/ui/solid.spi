open js
open real_util


nominal jsx_element = $"JSX.Element"

union prop_ =
    | Loaded__ : bool
    | Modal__ : bool
    | OnLoad__ : any -> (any -> ()) -> ()
    | AriaLabel : string
    | As : js_function_
    | BackgroundColor : string
    | Border : string
    | BorderWidth : string
    | BorderBottomWidth : string
    | BorderColor : string
    | Bottom : string
    | Color : string
    | Checked : bool
    | Children : () -> array jsx_element
    | ColorScheme : string
    | Compact : bool
    | Direction : string
    | Display : string
    | External : bool
    | Flex : string
    | FlexDirection : string
    | FontSize : string
    | Height : string
    | Href : string
    | Icon : jsx_element
    | Id : string
    | JustifyContent : string
    | Left : string
    | LeftIcon : any
    | LineHeight : string
    | Margin : string
    | MarginBottom : string
    | MarginTop : string
    | MaxHeight : string
    | OnChange : any -> ()
    | OnClick : () -> ()
    | Outline : string
    | OverflowX : string
    | OverflowY : string
    | Padding : string
    | PaddingTop : string
    | PaddingRight : string
    | PaddingBottom : string
    | PaddingLeft : string
    | Position : string
    | Right : string
    | Size : string
    | Spacing : string
    | Status : bool
    | Striped : string
    | Thickness : string
    | Title : jsx_element
    | Top : string
    | Width : string
    | ZIndex : i32

type props_ =
    {
        Loaded__ : option bool
        Modal__ : option bool
        OnLoad__ : option (any -> (any -> ()) -> ())
        AriaLabel : option string
        As : option js_function_
        BackgroundColor : option string
        Border : option string
        BorderWidth : option string
        BorderBottomWidth : option string
        BorderColor : option string
        Bottom : option string
        Color : option string
        Checked : option bool
        Children : option (() -> array jsx_element)
        ColorScheme : option string
        Compact : option bool
        Direction : option string
        Display : option string
        External : option bool
        Flex : option string
        FlexDirection : option string
        FontSize : option string
        Height : option string
        Href : option string
        Icon : option jsx_element
        Id : option string
        JustifyContent : option string
        Left : option string
        LeftIcon : option any
        LineHeight : option string
        Margin : option string
        MarginBottom : option string
        MarginTop : option string
        MaxHeight : option string
        OnChange : option (any -> ())
        OnClick : option (() -> ())
        Outline : option string
        OverflowX : option string
        OverflowY : option string
        Padding : option string
        PaddingTop : option string
        PaddingRight : option string
        PaddingBottom : option string
        PaddingLeft : option string
        Position : option string
        Right : option string
        Size : option string
        Spacing : option string
        Status : option bool
        Striped : option string
        Thickness : option string
        Title : option jsx_element
        Top : option string
        Width : option string
        ZIndex : option i32
    }

inl prop_keys () =
    {
        Loaded__ = "loaded__"
        Modal__ = "modal__"
        OnLoad__ = "onLoad__"
        AriaLabel = "aria-label"
        As = "as"
        BackgroundColor = "backgroundColor"
        Border = "border"
        BorderWidth = "borderWidth"
        BorderBottomWidth = "borderBottomWidth"
        BorderColor = "borderColor"
        Bottom = "bottom"
        Color = "color"
        Checked = "checked"
        Children = "children"
        ColorScheme = "colorScheme"
        Compact = "compact"
        Direction = "direction"
        Display = "display"
        External = "external"
        Flex = "flex"
        FlexDirection = "flexDirection"
        FontSize = "fontSize"
        Height = "height"
        Href = "href"
        Icon = "icon"
        Id = "id"
        JustifyContent = "justifyContent"
        Left = "left"
        LeftIcon = "leftIcon"
        LineHeight = "lineHeight"
        Margin = "margin"
        MarginBottom = "marginBottom"
        MarginTop = "marginTop"
        MaxHeight = "maxHeight"
        OnChange = "onChange"
        OnClick = "onClick"
        Outline = "outline"
        OverflowX = "overflowX"
        OverflowY = "overflowY"
        Padding = "padding"
        PaddingTop = "paddingTop"
        PaddingRight = "paddingRight"
        PaddingBottom = "paddingBottom"
        PaddingLeft = "paddingLeft"
        Position = "position"
        Right = "right"
        Size = "size"
        Spacing = "spacing"
        Status = "status"
        Striped = "striped"
        Thickness = "thickness"
        Title = "title"
        Top = "top"
        Width = "width"
        ZIndex = "zIndex"
    }

inl typecheck_props () =
    real union_record_check `prop_ `(`(prop_keys ())) {check_length=true; check_type=CheckNone}
    real union_record_check `prop_ `props_ {check_length=true; check_type=CheckOption}


let create_obj_props (props : a i32 (string * any)) : list prop_ =
    inl v' v = $"!v |> unbox"
    props
    |> am.fold (fun (acc : list prop_) (k, v) =>
        if $"!v = JS.undefined" then
            acc
        else
            match k with
            | "loaded__" => Loaded__ (v' v) :: acc
            | "modal__" => Modal__ (v' v) :: acc
            | "onLoad__" => OnLoad__ (v' v) :: acc
            | "aria-label" => AriaLabel (v' v) :: acc
            | "as" => As (v' v) :: acc
            | "backgroundColor" => BackgroundColor (v' v) :: acc
            | "border" => Border (v' v) :: acc
            | "borderWidth" => BorderWidth (v' v) :: acc
            | "borderBottomWidth" => BorderBottomWidth (v' v) :: acc
            | "borderColor" => BorderColor (v' v) :: acc
            | "bottom" => Bottom (v' v) :: acc
            | "color" => Color (v' v) :: acc
            | "checked" => Checked (v' v) :: acc
            | "children" => Children (v' v) :: acc
            | "colorScheme" => ColorScheme (v' v) :: acc
            | "compact" => Compact (v' v) :: acc
            | "direction" => Direction (v' v) :: acc
            | "display" => Display (v' v) :: acc
            | "external" => External (v' v) :: acc
            | "flex" => Flex (v' v) :: acc
            | "flexDirection" => FlexDirection (v' v) :: acc
            | "fontSize" => FontSize (v' v) :: acc
            | "height" => Height (v' v) :: acc
            | "href" => Href (v' v) :: acc
            | "icon" => Icon (v' v) :: acc
            | "id" => Id (v' v) :: acc
            | "justifyContent" => JustifyContent (v' v) :: acc
            | "left" => Left (v' v) :: acc
            | "leftIcon" => LeftIcon (v' v) :: acc
            | "lineHeight" => LineHeight (v' v) :: acc
            | "margin" => Margin (v' v) :: acc
            | "marginBottom" => MarginBottom (v' v) :: acc
            | "marginTop" => MarginTop (v' v) :: acc
            | "maxHeight" => MaxHeight (v' v) :: acc
            | "onChange" => OnChange (v' v) :: acc
            | "onClick" => OnClick (v' v) :: acc
            | "outline" => Outline (v' v) :: acc
            | "overflowX" => OverflowX (v' v) :: acc
            | "overflowY" => OverflowY (v' v) :: acc
            | "padding" => Padding (v' v) :: acc
            | "paddingTop" => PaddingTop (v' v) :: acc
            | "paddingRight" => PaddingRight (v' v) :: acc
            | "paddingBottom" => PaddingBottom (v' v) :: acc
            | "paddingLeft" => PaddingLeft (v' v) :: acc
            | "position" => Position (v' v) :: acc
            | "right" => Right (v' v) :: acc
            | "size" => Size (v' v) :: acc
            | "spacing" => Spacing (v' v) :: acc
            | "status" => Status (v' v) :: acc
            | "striped" => Striped (v' v) :: acc
            | "thickness" => Thickness (v' v) :: acc
            | "title" => Title (v' v) :: acc
            | "top" => Top (v' v) :: acc
            | "width" => Width (v' v) :: acc
            | "zIndex" => ZIndex (v' v) :: acc
            | _ => failwith $"$\"unknown prop: {!k} = {!v}\""
        ) []


inl createComponent_ () = import "createComponent" "solid-js"
inl createEffect_ () = import "createEffect" "solid-js"
inl createSignal_ () = import "createSignal" "solid-js"
inl mergeProps_ ()  = import "mergeProps" "solid-js"
inl on_ ()  = import "on" "solid-js"
inl onCleanup_ ()  = import "onCleanup" "solid-js"


inl unbox_prop (prop : prop_) : js_obj_prop =
    inl prop_keys' = prop_keys ()

    inl result = real
        open real_core
        unbox
            prop
            fun (k, v) => new_js_obj_prop `any (prop_keys' k) ($"!v" : any)

    result

let unbox_props_list (props : list prop_) : a i32 js_obj_prop =
    props
    |> listm.map unbox_prop
    |> listm.toArray


let create_component cmp (props : list prop_) : jsx_element =
    inl createComponent' = createComponent_ ()
    $"!createComponent'.Invoke (!cmp, !props) |> unbox<JSX.Element>"

let create_component_ext (cmp : js_function_) (props : list prop_) : jsx_element =
    inl props =
        props
        |> unbox_props_list
        |> create_obj

    create_component cmp $"!props |> unbox"

inl biRegularDownArrow_ () = import "BiRegularDownArrow" "solid-icons/bi"
inl biRegularDownArrow props = create_component_ext (biRegularDownArrow_ ()) props

inl biRegularLinkExternal_ () = import "BiRegularLinkExternal" "solid-icons/bi"
inl biRegularLinkExternal props = create_component_ext (biRegularLinkExternal_ ()) props

inl biRegularRefresh_ () = import "BiRegularRefresh" "solid-icons/bi"
inl biRegularRefresh props = create_component_ext (biRegularRefresh_ ()) props

inl biRegularUpArrow_ () = import "BiRegularUpArrow" "solid-icons/bi"
inl biRegularUpArrow props = create_component_ext (biRegularUpArrow_ ()) props

inl biRegularUndo_ () = import "BiRegularUndo" "solid-icons/bi"
inl biRegularUndo props = create_component_ext (biRegularUndo_ ()) props

inl anchor_ () = import "Anchor" "@hope-ui/solid"
inl anchor props = create_component_ext (anchor_ ()) props

inl box_ () = import "Box" "@hope-ui/solid"
inl box props = create_component_ext (box_ ()) props

inl button_ () = import "Button" "@hope-ui/solid"
inl button props = create_component_ext (button_ ()) props

inl icon_button_ () = import "IconButton" "@hope-ui/solid"
inl icon_button props = create_component_ext (icon_button_ ()) props

inl checkbox_ () = import "Checkbox" "@hope-ui/solid"
inl checkbox props = create_component_ext (checkbox_ ()) props

inl icon_ () = import "Icon" "@hope-ui/solid"
inl icon props = create_component_ext (icon_ ()) props

inl stack_ () = import "Stack" "@hope-ui/solid"
inl stack props = create_component_ext (stack_ ()) props

inl table_ () = import "Table" "@hope-ui/solid"
inl table props = create_component_ext (table_ ()) props

inl tbody_ () = import "Tbody" "@hope-ui/solid"
inl tbody props = create_component_ext (tbody_ ()) props

inl td_ () = import "Td" "@hope-ui/solid"
inl td props = create_component_ext (td_ ()) props

inl tr_ () = import "Tr" "@hope-ui/solid"
inl tr props = create_component_ext (tr_ ()) props


inl create_effect on : () =
    inl create_effect' = createEffect_ ()
    $"!create_effect'.Invoke !on |> ignore"

inl create_signal forall a. (default_value : a) =
    inl createSignal' = createSignal_ ()
    inl fns : array js_function_ = $"!createSignal'.Invoke !default_value |> unbox<JS.Function[]>"
    inl get = $"!fns.[0] |> unbox" : () -> a
    inl set = $"!fns.[1] |> unbox" : a -> ()
    get, set

inl on deps fn : js_function_ =
    inl on' = on_ ()
    $"!on'.Invoke (!deps, !fn) |> unbox<JS.Function>"

inl on_cleanup fn : () =
    inl fn : () -> () = fn
    inl onCleanup' = onCleanup_ ()
    $"!onCleanup'.Invoke !fn"

inl empty_fragment () : jsx_element =
    $"Html.fragment []"

inl str (str : string) : jsx_element =
    $"Html.fragment [ !str |> unbox<JSX.Element> ]"

inl breakpoints { initial sm } =
    $"{| ````@initial```` = !initial; ````@sm```` = !sm |} |> unbox<string>"

inl children_fragment (children : () -> array jsx_element) : jsx_element =
    $"!children |> unbox<JSX.Element>"
