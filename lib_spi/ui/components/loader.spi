open real_solid
open solid
open state
open real_js
open real_util
open base_button
open base_icon
open hooks.use_store


type loader_props =
    {
        Loaded : bool
        Modal : bool
        OnLoad : option (mut state__ -> ((mut state__ -> mut state__ -> ()) -> ()) -> ())
        OnUnload : option (mut state__ -> ((mut state__ -> mut state__ -> ()) -> ()) -> ())
        Props : solid_props -> solid_props
    }

let loader (props : mut loader_props) =
    inl custom_props = props
    inl props = init_props props.Props

    inl state, dispatch = use_store ()

    inl loader_id : i32 = real random ()

    inl loaded, set_loaded = create_signal' custom_props.Loaded
    inl refreshing, set_refreshing = create_signal' false
    inl modal, set_modal = create_signal' custom_props.Modal

    on'
        fun () => ;[real to_any `bool (refreshing ())]
        fun () => if refreshing () then set_refreshing false
    |> create_effect'

    inl on_unload' () =
        match custom_props.OnUnload with
        | Some on_unload => on_unload state dispatch
        | None => ()

    inl unbind () =
        on_unload' ()
    real on_cleanup unbind

    inl on_load' () =
        match custom_props.OnLoad with
        | Some on_load => on_load state dispatch
        | None => ()

    if custom_props.Loaded = true then on_load' ()

    inl icon_height = "20px"

    box
        fun props' => {props' with
            Id = props.Id
            Display = Some "flex"
            Flex = Some "1"
        }
        fun () => ;[
            if loaded () |> not then
                box
                    fun props' => {props' with
                        Padding = Some "3px 0"
                    }
                    fun () => ;[
                        create_component base_button
                            fun props' => {props' with
                                OnClick = Some fun () =>
                                    on_load' ()
                                    set_loaded true
                            }
                            fun () => ;[
                                str "Load"
                            ]
                    ]
            else
                box
                    fun props' => {props' with
                        ZIndex = if modal () then Some 1 else None
                        Position = if modal () then Some "absolute" else None
                        Top = if modal () then Some "0" else None
                        Right = if modal () then Some "0" else None
                        Bottom = if modal () then Some "0" else None
                        Left = if modal () then Some "0" else None
                        BackgroundColor = if modal () then Some "$bg" else None
                        Display = Some "flex"
                        Flex = Some "1"
                    }
                    fun () => ;[
                        match props.Children with
                        | None => empty_fragment ()
                        | Some children =>
                            box
                                fun props' => {props' with
                                    Position =
                                        if state.ui.modal = None
                                        then Some "relative"
                                        else None
                                    Flex = Some "1"
                                    Display = Some "flex"
                                }
                                fun () => ;[
                                    stack
                                        fun props' => {props' with
                                            Display =
                                                match state.ui.modal with
                                                | Some modal when modal <> loader_id => Some "none"
                                                | _ => None
                                            Direction = Some "row"
                                            Spacing = Some "3px"
                                            Position = Some "absolute"
                                            Top = Some "6px"
                                            Right = Some "6px"
                                            ZIndex = Some 2
                                        }
                                        fun () => ;[
                                            icon_button
                                                fun props' => {props' with
                                                    AriaLabel = Some "Refresh"
                                                    Size = Some "xs"
                                                    Height = Some icon_height
                                                    ColorScheme = Some "neutral"
                                                    OnClick = Some fun () => set_refreshing true
                                                    Icon = Some <|
                                                        create_custom_component base_icon {
                                                            Icon = biRegularRefresh_
                                                            Props = id
                                                            Css = id
                                                        }
                                                }
                                                fun () => ;[]
                                            icon_button
                                                fun props' => {props' with
                                                    AriaLabel = Some (if modal () then "Restore" else "Maximize")
                                                    Size = Some "xs"
                                                    Height = Some icon_height
                                                    ColorScheme = Some "neutral"
                                                    OnClick = Some fun () =>
                                                        inl new_modal = not (modal ())
                                                        set_modal new_modal
                                                        dispatch fun _old_state state =>
                                                            state.ui.modal <- if new_modal then Some loader_id else None
                                                    Icon = Some <|
                                                        create_custom_component base_icon {
                                                            Icon =
                                                                if modal ()
                                                                then biRegularDownArrow_
                                                                else biRegularUpArrow_
                                                            Props = id
                                                            Css = id
                                                        }
                                                    }
                                                fun () => ;[]
                                            icon_button
                                                fun props' => {props' with
                                                    AriaLabel = Some "Unload"
                                                    Size = Some "xs"
                                                    Height = Some icon_height
                                                    ColorScheme = Some "neutral"
                                                    OnClick = Some fun () =>
                                                        console_fsx.inspect "# on_click"
                                                        on_unload' ()
                                                        set_loaded false
                                                    Icon = Some <|
                                                        create_custom_component base_icon {
                                                            Icon = biRegularUndo_
                                                            Props = id
                                                            Css = id
                                                        }
                                                }
                                                fun () => ;[]
                                        ]
                                    if refreshing ()
                                    then empty_fragment ()
                                    else children_fragment children
                                ]
                    ]
        ]
