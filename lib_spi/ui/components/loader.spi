open real_solid
open solid
open state
open real_state
open real_js
open js
open real_util
open base_button
open base_icon


type loader_props =
    {
        Loaded : bool
        Modal : bool
        OnLoad : option (() -> ())
        OnUnload : option (() -> ())
        Props : solid_props -> solid_props
    }

let loader (props : mut loader_props) =
    inl custom_props = props
    inl props = init_props props.Props

    inl loader_id : i32 = real random ()

    inl chain_token, set_chain_token = use_chain_token ()
    inl log_level, set_log_level = use_settings_log_level ()
    inl ui_modal, set_ui_modal = use_settings_ui_modal ()

    inl get_locals () : array any = ;[
        "loader_id:" |> real to_any `string
        loader_id |> real to_any `i32
        "chain_token:" |> real to_any `string
        chain_token () |> real to_any `string
        "log_level:" |> real to_any `string
        log_level () |> real to_any `log_level
        "ui_modal:" |> real to_any `string
        ui_modal () |> real to_any `(option i32)
    ]
    inl log : array any -> () = new_log (fun () => log_level () = Debug) get_locals "#de884c"

    log ;[real to_any `string "> loader ()"]

    inl loaded, set_loaded = create_signal custom_props.Loaded
    inl refreshing, set_refreshing = create_signal false

    create_effect fun () => if custom_props.Modal then set_ui_modal <| Some loader_id
    create_effect fun () => if refreshing () then set_refreshing false

    inl on_unload' () =
        match custom_props.OnUnload with
        | Some on_unload => on_unload ()
        | None => ()
    real on_cleanup on_unload'

    inl on_load' () =
        match custom_props.OnLoad with
        | Some on_load => on_load ()
        | None => ()

    if custom_props.Loaded = true then on_load' ()

    inl icon_height = "20px"

    inl is_modal () = ui_modal () = Some loader_id

    box
        fun props' => {props' with
            Id = props.Id
            Display = Some "flex"
            Flex = Some "1"
        }
        fun () => ;[
            if loaded () |> not then
                box
                    fun props' => {props' with
                        Padding = Some "3px 0"
                    }
                    fun () => ;[
                        create_component base_button
                            fun props' => {props' with
                                OnClick = Some fun () =>
                                    on_load' ()
                                    set_loaded true
                            }
                            fun () => ;[
                                str "Load"
                            ]
                    ]
            else
                box
                    fun props' => {props' with
                        ZIndex = if is_modal () then Some 1 else None
                        Position = if is_modal () then Some "fixed" else None
                        Top = if is_modal () then Some "0" else None
                        Right = if is_modal () then Some "0" else None
                        Bottom = if is_modal () then Some "0" else None
                        Left = if is_modal () then Some "0" else None
                        BackgroundColor = if is_modal () then Some "$bg" else None
                        Display = Some "flex"
                        Flex = Some "1"
                    }
                    fun () => ;[
                        match props.Children with
                        | Some children =>
                            box
                                fun props' => {props' with
                                    Position =
                                        if ui_modal () = None
                                        then Some "relative"
                                        else None
                                    Flex = Some "1"
                                    Display = Some "flex"
                                }
                                fun () => ;[
                                    stack
                                        fun props' => {props' with
                                            Display =
                                                match ui_modal () with
                                                | Some modal when modal <> loader_id => Some "none"
                                                | _ => None
                                            Direction = Some "row"
                                            Spacing = Some "3px"
                                            Position = Some "absolute"
                                            Top = Some "6px"
                                            Right = Some "6px"
                                            ZIndex = Some 2
                                        }
                                        fun () => ;[
                                            icon_button
                                                fun props' => {props' with
                                                    AriaLabel = Some "Refresh"
                                                    Size = Some "xs"
                                                    Height = Some icon_height
                                                    ColorScheme = Some "neutral"
                                                    OnClick = Some fun () => set_refreshing true
                                                    Icon = Some <|
                                                        create_custom_component base_icon {
                                                            Icon = biRegularRefresh_
                                                            Props = id
                                                            Css = id
                                                        }
                                                }
                                                fun () => ;[]
                                            icon_button
                                                fun props' => {props' with
                                                    AriaLabel = Some <| if is_modal () then "Restore" else "Maximize"
                                                    Size = Some "xs"
                                                    Height = Some icon_height
                                                    ColorScheme = Some "neutral"
                                                    OnClick = Some fun () =>
                                                        set_ui_modal
                                                            if is_modal () |> not then Some loader_id else None
                                                    Icon = Some <|
                                                        create_custom_component base_icon {
                                                            Icon =
                                                                if is_modal ()
                                                                then biRegularDownArrow_
                                                                else biRegularUpArrow_
                                                            Props = id
                                                            Css = id
                                                        }
                                                    }
                                                fun () => ;[]
                                            icon_button
                                                fun props' => {props' with
                                                    AriaLabel = Some "Unload"
                                                    Size = Some "xs"
                                                    Height = Some icon_height
                                                    ColorScheme = Some "neutral"
                                                    OnClick = Some fun () =>
                                                        on_unload' ()
                                                        set_loaded false
                                                    Icon = Some <|
                                                        create_custom_component base_icon {
                                                            Icon = biRegularUndo_
                                                            Props = id
                                                            Css = id
                                                        }
                                                }
                                                fun () => ;[]
                                        ]
                                    if refreshing ()
                                    then empty_fragment ()
                                    else children_fragment children
                                ]
                        | None => empty_fragment ()
                    ]
        ]
