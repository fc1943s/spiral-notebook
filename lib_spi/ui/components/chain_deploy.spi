
// import * as store from "../store"
// import * as algo_network from "../../../lib_ts/algo_network"
// import * as tictactoe_pyteal from "../../../lib_ts/tictactoe_pyteal"
// import * as raw from "../raw"
// import { Stack, Box } from "@hope-ui/solid"
// import useFetch from "../hooks/useFetch"
// import useStore from "../hooks/useStore"
// import BaseButton from "./BaseButton"
// import { BiRegularPlus, BiRegularMinus } from "solid-icons/bi"
// import { Index } from "solid-js"
// import BaseTable from "./BaseTable"
// import Row from "./Row"


// function ChainDeploy<State extends store.State>() {
//     const { state } = useStore<State>()

//     const { request, clear } = useFetch<typeof state.profile.tmp.chainDeploy, State>(
//         { contentAddress: `profile/tmp/chainDeploy` },
//         state.profile.tmp.chainDeploy || {},
//         (state, newValue) => ({
//             profile: {
//                 ...state.profile,
//                 tmp: {
//                     ...state.profile.tmp,
//                     chainDeploy: newValue
//                 }
//             }
//         } as State),
//         async (client) => {
//             const address = state.chainAccounts[0]?.address
//             const privateKey = state.chainAccounts[0]?.privateKey
//             if (address && privateKey) {
//                 try {
//                     const output = await algo_network.deployApplication(
//                         client,
//                         address,
//                         privateKey,
//                         raw.applicationStartTeal,
//                         raw.clearProgramTeal,
//                         {
//                             numGlobalByteSlices: tictactoe_pyteal.numGlobalByteSlices,
//                             numGlobalInts: tictactoe_pyteal.numGlobalInts
//                         }
//                     )

//                     return output
//                 } catch (e) {
//                     return e
//                 }
//             } else {
//                 return 'Invalid admin account'
//             }
//         }
//     )


open solid
open row
open base_button
open base_table
open base_icon
open store
open real_util
open real_js
open hooks.use_fetch


let chain_deploy (props : mut solid_props) =
    inl state, dispatch = use_store ()

    inl request, clear =
        use_fetch
            "profile/tmp/chain_deploy"
            state.profile.tmp.chain_deploy
            fun new_state state new_value =>
                new_state.profile.tmp.chain_deploy <- new_value
            fun client => promise ($"()" : any)

    create_custom_component row {
        Status = CheckHidden
        OnLoad = None
        Props = mut <| init_props fun props' => {props' with
            Id = Some <| "deploy"
            Title = Some <|
                stack
                    fun props' => {props' with
                        AlignItems = Some "start"
                        Direction = Some <| breakpoints {initial = "row"; sm = "column"}
                        MarginBottom = Some <| breakpoints {initial = "0"; sm = "8px"}
                        Spacing = Some "7px"
                        Padding = Some "3px"
                    }
                    fun () => ;[
                        box
                            id
                            fun () => ;[
                                str "Chain Deploy"
                            ]
                        create_component base_button
                            fun props' => {props' with
                                LeftIcon = Some <|
                                    create_custom_component base_icon {
                                        Icon = biRegularPlus_
                                        Props = id
                                        Css = fun props' => {props' with
                                            MarginLeft = None
                                        }
                                    }
                                PaddingRight = Some "10px"
                                OnClick = Some request
                            }
                            fun () => ;[
                                str "Request"
                            ]
                        create_component base_button
                            fun props' => {props' with
                                LeftIcon = Some <|
                                    create_custom_component base_icon {
                                        Icon = biRegularMinus_
                                        Props = id
                                        Css = fun props' => {props' with
                                            MarginLeft = None
                                        }
                                    }
                                PaddingRight = Some "10px"
                                OnClick = Some clear
                            }
                            fun () => ;[
                                str "Clear"
                            ]
                    ]
            Children = Some fun () => ;[
                create_component base_table
                    id
                    fun () => ;[
                        index' {
                            Each' = state.profile.tmp.chain_deploy |> am.toList |> listm.rev |> listm.toArray
                        } fun item => ;[
                            create_custom_component row {
                                Status = CheckHidden
                                OnLoad = None
                                Props = mut <| init_props fun props' => {props' with
                                    Title = Some <| str (item () |> fst |> real to_string `i32)
                                    Padding = Some "3px"
                                    Children = Some fun () => ;[
                                        pre
                                            id
                                            fun () => ;[
                                                item ()
                                                |> snd
                                                |> real stringify_fmt `any
                                                |> str
                                            ]
                                    ]
                                }
                            }
                        ]
                    ]
            ]
        }
    }
