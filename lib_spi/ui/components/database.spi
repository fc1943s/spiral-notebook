open real_solid
open js
open solid
open base_checkbox
open base_table
open row
open db_connection
open state
open real_state
open db


type db_client_props =
    {
        ServerType : server_type
        Client : { url : string; db : js.any } -> client
    }


let db_client (props : mut db_client_props) =
    // create_custom_component row {
    //     OnLoad = Some fun () =>
    //         set_db_connection <|
    //             db_connection () /@ a ;[{ db_type = props.DbType; id = props.Id }]

    //         inl subscribe id =
    //             console_fsx.inspect "database_item subscribe"
    //             console_fsx.inspect "id:"
    //             console_fsx.inspect id
    //             ()
    //         inl id = ()
    //         inl timeout = set_timeout (fun () => subscribe id) (get_db_init_timeout ())
    //         console_fsx.inspect "database_item OnLoad"
    //         console_fsx.inspect "timeout:"
    //         console_fsx.inspect timeout
    //         ()
    //     OnUnload = Some fun () =>
    //         set_db_connection <|
    //             db_connection ()
    //             |> am.filter fun db_status => db_status <> props.Status
    //     Status = CheckDisabled
    //     Props = fun props' => { props' with
    //         Id = Some props.Id
    //         Title = Some <| str props.Title
    //         Children = Some fun () => ;[
    //             create_custom_component db_connection {
    //                 DbType = props.DbType
    //             }
    //         ]
    //     }
    // }


    inl db_connections, set_db_connections = use_db_connections ()

    inl new_client : client = props.Client {db = !!""; url = ""}

    create_custom_component base_checkbox {
        Checked = fun () =>
            db_connections ()
            |> am.exists fun connection =>
                connection.server_type = props.ServerType
                && (connection.clients
                    |> am.exists fun client =>
                        client = new_client
                )
        OnChange = fun checked =>
            set_db_connections <|
                db_connections ()
                |> am.map fun connection =>
                    if connection.server_type = props.ServerType then
                        { connection with
                            clients =
                                if checked
                                then connection.clients /@ a ;[new_client]
                                else connection.clients |> am.filter fun client => client <> new_client
                        }
                    else connection
        Props = fun props' => { props' with
            Children = Some <| fun () => ;[
                match new_client with
                | GunRsClient _ => "Gun Rust"
                | GunJsClient _ => "Gun JavaScript"
                |> str
            ]
        }
    }

type db_clients_props =
    {
        ServerType : server_type
    }

let db_clients (props : mut db_clients_props) =
    create_custom_component row {
        OnLoad = None
        OnUnload = None
        Status = CheckHidden
        Props = fun props' => { props' with
            Id = None
            MarginLeft = Some "8px"
            MarginBottom = Some "4px"
            Title = Some <| str "Clients"
            Children = Some fun () => ;[
                create_custom_component db_client {
                    ServerType = props.ServerType
                    Client = GunRsClient >> id
                }
                create_custom_component db_client {
                    ServerType = props.ServerType
                    Client = GunJsClient >> id
                }
            ]
        }
    }

let database (props : mut solid_props) =
    create_component base_table
        id
        fun () => ;[
            create_custom_component row {
                OnLoad = None
                OnUnload = None
                Status = CheckHidden
                Props = fun props' => { props' with
                    Id = None
                    PaddingLeft = Some "0"
                    Title = Some <|
                        create_custom_component row {
                            OnLoad = None
                            OnUnload = None
                            Status = CheckHidden
                            Props = fun props' => { props' with
                                Id = None
                                Title = Some <| str "Gun Rust"
                                Children = Some fun () => ;[
                                    create_custom_component db_connection {
                                        ServerType = GunRsServer
                                    }
                                ]
                            }
                        }
                    Children = Some fun () => ;[
                        create_custom_component db_clients {
                            ServerType = GunRsServer
                        }
                    ]
                }
            }
            create_custom_component row {
                OnLoad = None
                OnUnload = None
                Status = CheckHidden
                Props = fun props' => { props' with
                    Id = None
                    PaddingLeft = Some "0"
                    Title = Some <|
                        create_custom_component row {
                            OnLoad = None
                            OnUnload = None
                            Status = CheckHidden
                            Props = fun props' => { props' with
                                Id = None
                                Title = Some <| str "Gun JavaScript"
                                Children = Some fun () => ;[
                                    create_custom_component db_connection {
                                        ServerType = GunJsServer
                                    }
                                ]
                            }
                        }
                    Children = Some fun () => ;[
                        create_custom_component db_clients {
                            ServerType = GunJsServer
                        }
                    ]
                }
            }
        ]
