// import * as store from "../store"
// import useStore from "../hooks/useStore"
// import { Stack, Box } from '@hope-ui/solid'
// import useFetch from "../hooks/useFetch"
// import { Index } from "solid-js"
// import Row from "./Row"
// import BaseButton from "./BaseButton"
// import BaseTable from "./BaseTable"
// import { BiRegularPlus, BiRegularMinus } from "solid-icons/bi"


// function Counter<State extends store.State>() {
//     const { state } = useStore<State>()

//     const { request, clear } = useFetch<typeof state.profile.tmp.counter, State>(
//         { contentAddress: `profile/tmp/counter` },
//         state.profile.tmp.counter,
//         (state, newValue) => ({
//             profile: {
//                 ...state.profile,
//                 tmp: {
//                     ...state.profile.tmp,
//                     counter: newValue
//                 }
//             }
//         } as State),
//         async (_client) => Object.values(state.profile.tmp.counter || {}).reduce((acc, v) => v === null ? 0 : acc + 1, 0)
//     )


open solid
open row
open base_button
open base_table
open base_icon
open store
open real_util
open real_js


inl counter (props : mut_props) =
    inl state, dispatch = use_store ()

    create_custom_component row {
        Status = CheckHidden
        OnLoad = None
        Props = mut <| init_props fun props' => {props' with
            Id = Some <| "counter"
            Title = Some <|
                stack
                    fun props' => {props' with
                        AlignItems = Some "start"
                        Direction = Some <| breakpoints {initial = "row"; sm = "column"}
                        MarginBottom = Some <| breakpoints {initial = "0"; sm = "8px"}
                        Spacing = Some "7px"
                        Padding = Some "3px"
                    }
                    fun () => ;[
                        box
                            fun props => props
                            fun () => ;[
                                str "Counter"
                            ]
                        create_component base_button
                            fun props =>
                                props.LeftIcon <- Some <|
                                    create_custom_component base_icon {
                                        Icon = biRegularPlus_
                                        Props = id
                                        Css = id
                                    }
                                props.PaddingRight <- Some "10px"
                                props.OnClick <- Some (fun () => ())
                            fun () => ;[
                                str "Request"
                            ]
                        create_component base_button
                            fun props =>
                                props.LeftIcon <- Some <|
                                    create_custom_component base_icon {
                                        Icon = biRegularMinus_
                                        Props = id
                                        Css = id
                                    }
                                props.PaddingRight <- Some "10px"
                                props.OnClick <- Some (fun () => ())
                            fun () => ;[
                                str "Clear"
                            ]
                    ]
            Children = Some fun () => ;[
                create_component base_table
                    fun props => ()
                    fun () => ;[
                        index' [
                            Each' (state.profile.tmp.counter |> am.toList |> listm.rev |> listm.toArray)
                        ] fun item => ;[
                            create_custom_component row {
                                Status = CheckHidden
                                OnLoad = None
                                Props = mut <| init_props fun props' => {props' with
                                    Title = Some <| str (item () |> fst |> real to_string `i32)
                                    Padding = Some "3px"
                                    Children = Some fun () => ;[
                                        pre
                                            id
                                            fun () => ;[
                                                item ()
                                                |> snd
                                                |> real stringify_fmt `i32
                                                |> str
                                            ]
                                    ]
                                }
                            }
                        ]
                    ]
            ]
        }
    }
