open solid
open loader
open state


union row_status =
    | CheckHidden
    | CheckDisabled
    | CheckEnabled

type row_props =
    {
        Status : row_status
        OnLoad : option (mut state__ -> ((mut state__ -> mut state__ -> ()) -> ()) -> ())
        Props : solid_props -> solid_props
    }

let row (props : mut row_props) =
    inl custom_props = props
    inl props = init_props props.Props

    inl checked, set_checked = create_signal' (custom_props.Status <> CheckDisabled)

    tr
        fun props' => {props' with
            Id = props.Id
            Display = Some "flex"
            Flex = Some "1"
            BorderWidth = Some "1px 2px"
            BorderColor = Some "$neutral5"
            FlexDirection = Some <| breakpoints {initial = "column"; sm = "row"}
        }
        fun () => ;[
            match props.Title with
            | Some title =>
                td
                    fun props' => {props' with
                        BorderBottomWidth = Some <|
                            if custom_props.Status = CheckHidden || checked ()
                            then breakpoints {initial = "2px !important"; sm = "0px !important"}
                            else "0px !important"
                        BorderColor = Some "$neutral5"
                        Color = Some "$neutral9"
                        Display = Some "flex"
                        FlexDirection = Some "column"
                        FontSize = Some "$sm"
                        Padding = Some "3px 20px 0 8px"
                    }
                    fun () => ;[
                        match custom_props.Status with
                        | CheckHidden => title
                        | _ =>
                            checkbox
                                fun props' => {props' with
                                    Size = Some "sm"
                                    MarginBottom = Some "2px"
                                    Checked = Some <| checked ()
                                    ColorScheme = Some "neutral"
                                    OnChange = Some fun e => set_checked ($"!e?target?checked" : bool)
                                }
                                fun () => ;[
                                    box
                                        fun props' => {props' with
                                            PaddingTop = Some "2px"
                                        }
                                        fun () => ;[
                                            title
                                        ]
                                ]
                    ]
            | None => empty_fragment ()

            match props.Children with
            | None =>
                td
                    fun props' => {props' with
                        Border = Some "0"
                        Padding = Some "0"
                        LineHeight = Some "9px"
                    }
                    fun () => ;[
                        str "&nbsp;"
                    ]
            | Some children =>
                td
                    fun props' => {props' with
                        Border = Some "0"
                        Outline = Some "0"
                        Margin = Some "0"
                        Padding = Some <| props.Padding /?? "0"
                        Display = Some "flex"
                        Flex = Some "6"
                        LineHeight = Some "$base"
                        FlexDirection = Some "column"
                        FontSize = Some "$sm"
                        MaxHeight = Some "85vh"
                        OverflowY = Some "auto"
                    }
                    fun () => ;[
                        match custom_props.Status with
                        | CheckHidden => children_fragment children
                        | _ =>
                            if checked () then
                                create_custom_component loader {
                                    Loaded = true
                                    Modal = false
                                    OnLoad = custom_props.OnLoad
                                    Props = fun props' => {props' with
                                        Children = Some children
                                    }
                                }
                            else empty_fragment ()
                    ]
        ]
