// import * as db from "../db"
// import * as store from "../store"
// import * as util from "../../../lib_ts/util"
// import { onCleanup } from "solid-js"
// import useStore from "../hooks/useStore"


// function DbListener<State extends db.DbState>() {
//     const { state, dispatch } = useStore<State>()

//     const getLocals = () => ({ ...db.getStateLocals(state) })
//     const log = util.getLog(getLocals, '#cf1100')

//     log('DbListener() 0')

//     const unbind = store.store.on('@changed', (newState, changed, store) => {
//         log('DbListener store.on(@changed) 1', {
//             changed: Object.keys(changed).map((key) => ({
//                 key,
//                 state: db.objectValueCount(state[key as keyof State]),
//                 newState: db.objectValueCount(newState[key as keyof store.State]),
//                 changed: db.objectValueCount(changed[key as keyof store.State]),
//                 store: db.objectValueCount(store.get()[key as keyof store.State]),
//                 rawChanged: changed
//             }))
//         })
//         if (changed.dbStatus || changed.dbConnection) {
    //         const newDbRef = db.getDbIdList(state)[0].reduce((accDb, { dbType, url, id }) => ({
    //             ...accDb,
    //             [id]: accDb[id] || db.newDb(dbType, { url })
    //         }), state.dbRef)

    //         log('DbListener refresh() 1', { newDbRef })

    //         dispatch({ dbRef: newDbRef } as Partial<State>)
    //         }
//     })

open solid
open real_solid
open real_state
open state
open js
open real_js

let db_listener (props : mut ()) =
    inl get_locals () : array any = ;[
    ]
    inl log = use_log get_locals "#cf1100"
    log Debug ;[real to_any `string "> db_listener ()"]

    empty_fragment ()
