// import * as db from "../db"
// import * as store from "../store"
// import * as util from "../../../lib_ts/util"
// import { onCleanup } from "solid-js"
// import useStore from "../hooks/useStore"


// function DbListener<State extends db.DbState>() {
//     const { state, dispatch } = useStore<State>()

//     const getLocals = () => ({ ...db.getStateLocals(state) })
//     const log = util.getLog(getLocals, '#cf1100')

//     log('DbListener() 0')

//     const unbind = store.store.on('@changed', (newState, changed, store) => {
//         log('DbListener store.on(@changed) 1', {
//             changed: Object.keys(changed).map((key) => ({
//                 key,
//                 state: db.objectValueCount(state[key as keyof State]),
//                 newState: db.objectValueCount(newState[key as keyof store.State]),
//                 changed: db.objectValueCount(changed[key as keyof store.State]),
//                 store: db.objectValueCount(store.get()[key as keyof store.State]),
//                 rawChanged: changed
//             }))
//         })
//         if (changed.dbStatus || changed.dbConnection) {
    //         const newDbRef = db.getDbIdList(state)[0].reduce((accDb, { dbType, url, id }) => ({
    //             ...accDb,
    //             [id]: accDb[id] || db.newDb(dbType, { url })
    //         }), state.dbRef)

    //         log('DbListener refresh() 1', { newDbRef })

    //         dispatch({ dbRef: newDbRef } as Partial<State>)
    //         }
//     })

open solid
open real_solid
open real_state
open state
open js
open db

let db_listener (props : mut ()) =
    inl get_locals () : array any = ;[
    ]
    inl log = use_log get_locals "#cf1100"
    log Debug ;[!!"> db_listener ()"]

    inl db_connections, set_db_connections = use_db_connections ()
    inl db_connection_options, set_db_connection_options = use_db_connection_options ()

    inl connections_change { db_connections' db_connection_options' } =
        inl new_connections =
            db_connection_options'
            |> array_collect fun (options : db_connection_options) =>
                options.clients
                |> am.map fun client_type =>
                    db_connections'
                    |> array_find_last fun (connection : db_connection) =>
                        if connection.client_type = client_type && connection.url = options.url
                        then Some connection
                        else None
                    |> function
                    | Some connection => connection
                    | None =>
                        inl url = new_url db_connection_options' options.server_type
                        {
                            client_type
                            db = new_db client_type url
                            url
                        }

        inl connections_hash (connections : a i32 db_connection) =
            connections |> am.map fun { client_type url } => client_type, url

        if connections_hash db_connections' <> connections_hash new_connections then
            log Info ;[
                !!"> db_listener > effect"
                !!("db_connection_options':", db_connection_options')
                !!("db_connections':", db_connections')
                !!("new_connections:", new_connections)
            ]

            set_db_connections new_connections

    inl debounced_connections_change = debounce connections_change 300
    create_effect fun () =>
        inl db_connections' = db_connections ()
        inl db_connection_options' = db_connection_options ()

        debounced_connections_change { db_connections' db_connection_options' }

    inl on_unload' () =
        $"!debounced_connections_change?clear ()" : ()
    real on_cleanup on_unload'

    empty_fragment ()
