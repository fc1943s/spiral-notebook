open real_js
open real_core
open real_util


nominal jsx_element = $"JSX.Element"

type solid_props =
    {
        AlignItems : option string
        AlignSelf : option string
        AriaLabel : option string
        As : option js_function
        BackgroundColor : option string
        Border : option string
        BorderWidth : option string
        BorderBottomWidth : option string
        BorderColor : option string
        Bottom : option string
        Color : option string
        Checked : option bool
        Children : option (() -> array jsx_element)
        ColorScheme : option string
        Compact : option bool
        Css : option any
        DefaultValue : option string
        Direction : option string
        Display : option string
        Each : option (a i32 any)
        External : option bool
        Flex : option string
        FlexDirection : option string
        FlexFlow : option string
        FontSize : option string
        Height : option string
        Href : option string
        Icon : option jsx_element
        Id : option string
        JustifyContent : option string
        Left : option string
        LeftIcon : option jsx_element
        LineHeight : option string
        Margin : option string
        MarginTop : option string
        MarginRight : option string
        MarginBottom : option string
        MarginLeft : option string
        MaxHeight : option string
        MaxWidth : option string
        OnChange : option (any -> ())
        OnClick : option (() -> ())
        OnInput : option (any -> ())
        Outline : option string
        Overflow : option string
        OverflowX : option string
        OverflowY : option string
        Padding : option string
        PaddingTop : option string
        PaddingRight : option string
        PaddingBottom : option string
        PaddingLeft : option string
        Placeholder : option string
        Position : option string
        Right : option string
        Size : option string
        Spacing : option string
        Src : option string
        Striped : option string
        Thickness : option string
        Title : option jsx_element
        Top : option string
        Type : option string
        Value : option any
        When : option any
        Width : option string
        ZIndex : option i32
        Zoom : option string
    }

inl real_empty_props () : solid_props =
    join
        {
            AlignItems = none `string ()
            AlignSelf = none `string ()
            AriaLabel = none `string ()
            As = none `js_function ()
            BackgroundColor = none `string ()
            Border = none `string ()
            BorderWidth = none `string ()
            BorderBottomWidth = none `string ()
            BorderColor = none `string ()
            Bottom = none `string ()
            Color = none `string ()
            Checked = none `bool ()
            Children = none `(() -> array jsx_element) ()
            ColorScheme = none `string ()
            Compact = none `bool ()
            Css = none `any ()
            DefaultValue = none `string ()
            Direction = none `string ()
            Display = none `string ()
            Each = none `(a i32 any) ()
            External = none `bool ()
            Flex = none `string ()
            FlexDirection = none `string ()
            FlexFlow = none `string ()
            FontSize = none `string ()
            Height = none `string ()
            Href = none `string ()
            Icon = none `jsx_element ()
            Id = none `string ()
            JustifyContent = none `string ()
            Left = none `string ()
            LeftIcon = none `jsx_element ()
            LineHeight = none `string ()
            Margin = none `string ()
            MarginTop = none `string ()
            MarginRight = none `string ()
            MarginBottom = none `string ()
            MarginLeft = none `string ()
            MaxHeight = none `string ()
            MaxWidth = none `string ()
            OnChange = none `(any -> ()) ()
            OnClick = none `(() -> ()) ()
            OnInput = none `(any -> ()) ()
            Outline = none `string ()
            Overflow = none `string ()
            OverflowX = none `string ()
            OverflowY = none `string ()
            Padding = none `string ()
            PaddingTop = none `string ()
            PaddingRight = none `string ()
            PaddingBottom = none `string ()
            PaddingLeft = none `string ()
            Placeholder = none `string ()
            Position = none `string ()
            Right = none `string ()
            Size = none `string ()
            Spacing = none `string ()
            Src = none `string ()
            Striped = none `string ()
            Thickness = none `string ()
            Title = none `jsx_element ()
            Top = none `string ()
            Type = none `string ()
            Value = none `any ()
            When = none `any ()
            Width = none `string ()
            ZIndex = none `i32 ()
            Zoom = none `string ()
        }

inl prop_keys () =
    {
        AlignItems = "alignItems"
        AlignSelf = "alignSelf"
        AriaLabel = "aria-label"
        As = "as"
        BackgroundColor = "backgroundColor"
        Border = "border"
        BorderWidth = "borderWidth"
        BorderBottomWidth = "borderBottomWidth"
        BorderColor = "borderColor"
        Bottom = "bottom"
        Color = "color"
        Checked = "checked"
        Children = "children"
        ColorScheme = "colorScheme"
        Compact = "compact"
        Css = "css"
        DefaultValue = "defaultValue"
        Direction = "direction"
        Display = "display"
        Each = "each"
        External = "external"
        Flex = "flex"
        FlexDirection = "flexDirection"
        FlexFlow = "flexFlow"
        FontSize = "fontSize"
        Height = "height"
        Href = "href"
        Icon = "icon"
        Id = "id"
        JustifyContent = "justifyContent"
        Left = "left"
        LeftIcon = "leftIcon"
        LineHeight = "lineHeight"
        Margin = "margin"
        MarginTop = "marginTop"
        MarginRight = "marginRight"
        MarginBottom = "marginBottom"
        MarginLeft = "marginLeft"
        MaxHeight = "maxHeight"
        MaxWidth = "maxWidth"
        OnChange = "onChange"
        OnClick = "onClick"
        OnInput = "onInput"
        Outline = "outline"
        Overflow = "overflow"
        OverflowX = "overflowX"
        OverflowY = "overflowY"
        Padding = "padding"
        PaddingTop = "paddingTop"
        PaddingRight = "paddingRight"
        PaddingBottom = "paddingBottom"
        PaddingLeft = "paddingLeft"
        Placeholder = "placeholder"
        Position = "position"
        Right = "right"
        Size = "size"
        Spacing = "spacing"
        Src = "src"
        Striped = "striped"
        Thickness = "thickness"
        Title = "title"
        Top = "top"
        Type = "type"
        Value = "value"
        When = "when"
        Width = "width"
        ZIndex = "zIndex"
        Zoom = "zoom"
    }


let record_entries (props : solid_props) : a i32 js_obj_prop =
    inl record_fold_item {state key value} =
        inl v =
            unbox
                value
                fun (_k, v) => $"!v" : any

        if is_empty `any v then
            state
        else
            inl k = prop_keys () key
            inl prop = new_js_obj_prop `any k v
            (::) `js_obj_prop prop state

    inl empty_list = empty_list `js_obj_prop ()

    record_fold
        record_fold_item
        empty_list
        props
    |> listm.toArray `a `i32 `js_obj_prop


inl createComponent_ () = import "createComponent" "solid-js"
inl createEffect_ () = import "createEffect" "solid-js"
inl createSignal_ () = import "createSignal" "solid-js"
inl createMemo_ () = import "createMemo" "solid-js"
inl on_ ()  = import "on" "solid-js"
inl onCleanup_ ()  = import "onCleanup" "solid-js"
inl useColorMode_ ()  = import "useColorMode" "@hope-ui/solid"
inl useStoreon_ () : js_function = import "useStoreon" "@storeon/solidjs"

let use_color_mode () =
    inl useColorMode' = useColorMode_ ()
    inl obj : any = $"!useColorMode'.Invoke () |> unbox"
    inl color_mode : () -> string = $"!obj?colorMode |> unbox"
    inl toggle_color_mode : () -> () = $"!obj?toggleColorMode |> unbox"
    color_mode, toggle_color_mode

inl real_create_memo forall a. (fn : () -> a) : () -> a =
    inl create_memo : js_function = createMemo_ ()
    inl create_memo : (() -> a) -> (() -> a) = $"!create_memo |> unbox<(unit -> `a) -> (unit -> `a)>"
    real create_memo fn

inl create_component' forall props_type.
    (cmp : props_type -> jsx_element)
    (props : props_type)
    : jsx_element
    =
    inl createComponent' = createComponent_ ()
    $"!createComponent'.Invoke (!cmp, !props) |> unbox<JSX.Element>" : jsx_element

inl add_children_props
    (children : () -> array jsx_element)
    (props : solid_props)
    :
    solid_props
    =
    {props with Children = children |> some `(() -> array jsx_element)}

inl real_init_props (props_fn : solid_props -> solid_props) : solid_props =
    inl props : solid_props = real_empty_props ()
    props_fn props

let create_native_component
    (cmp : js_function)
    (props_fn : solid_props -> solid_props)
    (children : () -> array jsx_element)
    : jsx_element
    =
    inl props : solid_props = props_fn |> real_init_props |> add_children_props children
    inl new_props_entries : a i32 js_obj_prop = record_entries props
    inl props : any = create_obj new_props_entries
    inl new_cmp : any -> jsx_element = $"!cmp |> unbox<obj -> JSX.Element>"
    create_component' `any new_cmp props

let create_custom_component forall props_type.
    (cmp : mut props_type -> jsx_element)
    (props : props_type)
    : jsx_element
    =
    inl new_props : mut props_type = mut `props_type props
    create_component' `(mut props_type) cmp new_props

let create_component forall solid_props.
    (cmp : mut solid_props -> jsx_element)
    (props_fn : solid_props -> solid_props)
    (children : () -> array jsx_element)
    : jsx_element
    =
    inl props : solid_props = props_fn |> real_init_props |> add_children_props children
    inl new_props : mut solid_props = mut `solid_props props
    $"emitJsExpr (!new_props, !children) \"$0.children = $1\"" : ()
    create_component' `(mut solid_props) cmp new_props

let real_create_signal forall a. (default_value : a) : (() -> a) * (a -> ()) =
    inl createSignal' = createSignal_ ()
    inl fns : array js_function = $"!createSignal'.Invoke !default_value |> unbox<JS.Function[]>"
    inl get = $"!fns.[0] |> unbox" : () -> a
    inl set = $"!fns.[1] |> unbox" : a -> ()
    get, set

let real_create_effect (on : () -> ()) : () =
    inl create_effect' = createEffect_ ()
    $"!create_effect'.Invoke !on |> ignore" : ()

let real_on (deps : () -> array any) (fn : () -> ()) : () -> () =
    inl on' = on_ ()
    $"!on'.Invoke (!deps, !fn) |> unbox<unit -> unit>" : () -> ()

let on_cleanup (fn : () -> ()) =
    inl onCleanup' = onCleanup_ ()
    $"!onCleanup'.Invoke !fn |> ignore" : ()

inl real_merge_props forall props_type. (target : mut props_type) (source : mut props_type) : () =
    join
        inl on_item (key : string) : () =
            if $"emitJsExpr (!source, !key) \"!!!!$0[$1].tag\"" : bool then
                $"emitJsExpr (!target, !key, !source) \"$0[$1] = $2[$1]\"" : ()
        inl keys = object_keys `(mut props_type) target
        am.iter `a `i32 `string on_item keys
