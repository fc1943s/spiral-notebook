
// import * as db from "../db"
// import * as util from "../../../lib_ts/util"
// import * as algo_network from "../../../lib_ts/algo_network"
// import * as chain from "../chain"
// import * as store from "../store"
// import { createSignal, onCleanup } from "solid-js"
// import algosdk from "algosdk"
// import useStore from "./useStore"


// function useFetch<
//     T extends db.Proxy | undefined,
//     State extends chain.ChainState & db.DbState
// >(
//     contentAddress: db.ContentAddress,
//     proxy: T,
//     apply: (state: State, newValue: T) => Partial<State>,
//     requestFn: ((_: algosdk.Algodv2) => Promise<any>)
// ) {
//     const { state, dispatch } = useStore<State>()

//     const [subscriptions, setSubscriptions] = createSignal({} as { [_: string]: db.DbSubscription })

//     const [events, setEvents] = createSignal({} as { [_: string]: { off: () => void } | undefined })
//     const [timers, setTimers] = createSignal({} as { [_: string]: NodeJS.Timer | undefined })
//     const [values, setValues] = createSignal({} as { [_: string]: T })

//     const getLocals = () => ({
//         contentAddress,
//         [`proxy`]: db.objectValueCount(proxy),
//         [`events`]: Object.entries(events()),
//         [`timers`]: Object.entries(timers()),
//         [`values`]: Object.entries(values()).reduce(
//             ([keys, emptyKeys]: (string | any[])[][], [id, value]) =>
//                 !!value
//                     ? [[...keys, [id, db.objectValueCount(value)]], emptyKeys]
//                     : [keys, [...emptyKeys, id]],
//             [[], []]),
//         [`subscriptions`]: Object.entries(subscriptions()).map(([id, { subscription }]) => [id, subscription])
//     })

//     // const randomHexColorString = () => "#" + Math.floor(Math.random() * 16777215).toString(16)

//     const generateSixDigitNumericHashFromString = (text: string) =>
//         [...text].map((c) => c.charCodeAt(0)).reduce((acc, x) => acc + (x * 11), 100000).toString().substring(-6)

//     const log = util.getLog(getLocals, `#${generateSixDigitNumericHashFromString(contentAddress.contentAddress)}`)

//     log('useFetch() 0')

//     const newOnValue = (resub: (_: string) => void) =>
//         async (id: string, hash: string, newValue: T, rawValue: object | undefined) => {
//             const logObj = {
//                 id,
//                 hash,
//                 newValue: db.objectValueCount(newValue),
//                 rawValue: db.objectValueCount(rawValue)
//             }
//             log('useFetch.onValue() 1/2', { ...logObj })

//             if (hash && Object.keys(proxy || {}).length > 0) {
//                 log('useFetch.onValue() 2/2. resub (hash)', { ...logObj })

//                 resub(id)

//                 // const oldSubscriptions = subscriptions()
//                 // setSubscriptions({
//                 //     ...oldSubscriptions,
//                 //     [id]: oldSubscriptions[id]
//                 // })
//             } else {
//                 const oldTimers = { ...timers() }
//                 oldTimers[id] && clearTimeout(oldTimers[id])
//                 delete oldTimers[id]
//                 setTimers(oldTimers)

//                 // Object.values(timers()).forEach(timer => timer && clearInterval(timer))
//                 // setTimers({})

//                 // const newDispatch = dispatch as any as ((event: keyof Events, value: State) => void)
//                 dispatch(apply(state, newValue))

//                 const oldValues = values()
//                 const newValues = { ...oldValues, [id]: newValue }
//                 setValues(newValues)

//                 log('useFetch.onValue() 2/2. set', {
//                     ...logObj,
//                     oldValues: Object.entries(oldValues).map(([id, values]) =>
//                         [id, db.objectValueCount(values)]
//                     ),
//                     newValues: Object.entries(newValues).map(([id, values]) =>
//                         [id, db.objectValueCount(values)]
//                     )
//                 })

//                 if (rawValue
//                     && Object.keys(newValue || {}).length > 0
//                     && JSON.stringify(oldValues[id]) !== JSON.stringify(newValue)) {
//                     await Promise.all(
//                         db.getDbIdList(state)[0]
//                             .filter((dbId) => id !== dbId.id)
//                             .map(async (dbId) => {
//                                 log('useFetch.onValue() 3/2. before put item ###', {
//                                     ...logObj,
//                                     dbId: dbId.id,
//                                     lastSourceOld: db.lastObjectEntry(oldValues[id]),
//                                     lastSource: db.lastObjectEntry(newValues[id]),
//                                     lastTargetOld: db.lastObjectEntry(oldValues[dbId.id]),
//                                     lastTarget: db.lastObjectEntry(newValues[dbId.id])
//                                 })
//                                 db.dbPut(state, dbId, contentAddress, rawValue)
//                             })
//                     )
//                 }
//             }
//         }

//     const unsubscribe = () => {
//         log('useFetch.unsubscribe() 1')

//         Object.entries(subscriptions()).forEach(([id, { type, subscription }]) => {
//             log('useFetch.unsubscribe 2 item', { id, type, subscription })
//             db.dbOff(state, id, contentAddress, subscription)
//         })
//         setSubscriptions({})

//         Object.values(events()).forEach((event) => event?.off())
//         setEvents({} as { [_: string]: any })
//     }

//     const resub = (id: string) => {
//         const oldTimers = timers()
//         oldTimers[id] && clearTimeout(oldTimers[id])

//         log('useFetch.resub() 1', { oldTimers })
//         setTimers({
//             ...oldTimers,
//             [id]: setTimeout(() => {
//                 // const oldSubscriptions = subscriptions()
//                 // const oldSubscription = oldSubscriptions[id]

//                 log('useFetch.resub() inside timeout 2')//, oldSubscription)

//                 // if (oldSubscription) {
//                 //     dbOff(state, id, key, undefined, oldSubscription.subscription)
//                 // }

//                 // dispatch('set', {
//                 //     // db: {
//                 //     //     ...state.db,
//                 //     //     [id]: null as any as Db
//                 //     // },
//                 //     dbEnabled: {
//                 //         ...state.dbEnabled
//                 //     }
//                 // })
//             }, db.DB_RESUB_TIMEOUT)
//         })
//     }

//     const subscribe = (id: db.Id) => {
//         const oldSubscriptions = subscriptions()
//         const oldSubscription = oldSubscriptions[id.id]
//         log('useFetch.subscribe() 1', { oldSubscription })

//         if (proxy && !oldSubscription && state.dbStatus) {
//             const onValue = newOnValue(resub)
//             const newSubscription = db.dbOn(state, proxy, id, contentAddress, onValue)
//             log('useFetch.subscribe() 2', { newSubscription })
//             if (newSubscription) {
//                 setSubscriptions({
//                     ...oldSubscriptions,
//                     [id.id]: { type: id.dbType, subscription: newSubscription }
//                 })
//             }

//             resub(id.id)
//         }
//     }

//     const unbind = store.store.on('@changed', (newState, changed, oldStore) => {
//         if (changed.dbStatus || changed.dbRef) {
//             log('useFetch.store.@changed 1', {
//                 changed: Object.keys(changed).map((key) => ({
//                     key,
//                     state: state[key as keyof State],
//                     newState: newState[key as keyof store.State],
//                     changed: changed[key as keyof store.State],
//                     oldStore: oldStore.get()[key as keyof store.State],
//                 }))
//             })

//             unsubscribe()
//             // setTimeout(() => getEnabledDbIdList(newState).forEach((id) => subscribe(newState, id)), 2000)

//             Object.values(timers()).forEach((timer) => timer && clearTimeout(timer))
//             setTimers(
//                 db.getDbIdList(newState)[0].reduce((accIntervals, id) =>
//                 ({
//                     ...accIntervals,
//                     [id.id]: setTimeout(() => subscribe(id), db.DB_INIT_TIMEOUT)
//                 }), {} as { [_: string]: NodeJS.Timer | undefined })
//             )
//         }
//     })
//     onCleanup(() => {
//         unbind()
//         unsubscribe()
//     })

//     const request = async () => {
//         const client = algo_network.newClient(state.chainToken, state.chainUrl, state.chainPort)
//         let result: {}
//         try {
//             result = await requestFn(client)
//         } catch (e) {
//             result = e as {}
//         }

//         const enabledDbIdList = db.getDbIdList(state)[0]
//         const timestamp = `${new Date().getTime()}`

//         log('useFetch.request() 1', { result, timestamp, enabledDbIdList })

//         if (enabledDbIdList.length === 0) {
//             const newValue = {
//                 ...proxy,
//                 [timestamp]: result
//             }
//             dispatch(apply(state, newValue))
//         } else {
//             await Promise.all(
//                 enabledDbIdList.map((id) =>
//                     db.dbPut(state, id, contentAddress, { [timestamp]: result })
//                 )
//             )

//             Object.values(timers()).forEach((timer) => timer && clearTimeout(timer))
//             setTimers(
//                 enabledDbIdList.reduce((accIntervals, id) =>
//                 ({
//                     ...accIntervals,
//                     [id.id]: setTimeout(() => {
//                         const oldSubscriptions = subscriptions()
//                         const oldSubscription = oldSubscriptions[id.id]

//                         log('useFetch.request() 1 resub timeout', { id: id.id, oldSubscription })

//                         if (oldSubscription) {
//                             db.dbOff(state, id.id, contentAddress, oldSubscription.subscription)
//                         }
//                         const newSubscriptions = { ...subscriptions() }
//                         delete newSubscriptions[id.id]
//                         setSubscriptions(newSubscriptions)

//                         subscribe(id)
//                     }, db.DB_RESUB_TIMEOUT)
//                 }), {} as { [_: string]: NodeJS.Timer | undefined })
//             )
//         }
//     }

//     const clear = async () => {
//         const enabledDbIdList = db.getDbIdList(state)[0]
//         const timestamp = `${new Date().getTime()}`

//         log('useFetch.clear() 1', { timestamp, enabledDbIdList })

//         if (enabledDbIdList.length === 0) {
//             const newValue = {
//                 ...proxy,
//                 [timestamp]: null
//             }
//             dispatch(apply(state, newValue))
//         } else {
//             await Promise.all(
//                 enabledDbIdList.map((id) =>
//                     db.dbPut(state, id, contentAddress, { [timestamp]: null })
//                 )
//             )

//             Object.values(timers()).forEach((timer) => timer && clearTimeout(timer))
//             setTimers(
//                 enabledDbIdList.reduce((accIntervals, id) =>
//                 ({
//                     ...accIntervals,
//                     [id.id]: setTimeout(() => {
//                         log('useFetch.clear() 1 resub timeout', { id: id.id })
//                         subscribe(id)
//                     }, db.DB_RESUB_TIMEOUT)
//                 }), {} as { [_: string]: NodeJS.Timer | undefined })
//             )
//         }
//     }

//     return { request, clear }
// }

// export default useFetch

    // /<row {
    //     OnLoad = Some fun () =>
    //         set_db_connection <|
    //             db_connection () /@ a ;[{ db_type = props.DbType; id = props.Id }]

    //         inl subscribe id =
    //             console_fsx.inspect "database_item subscribe"
    //             console_fsx.inspect "id:"
    //             console_fsx.inspect id
    //             ()
    //         inl id = ()
    //         inl timeout = set_timeout (fun () => subscribe id) (get_db_init_timeout ())
    //         console_fsx.inspect "database_item OnLoad"
    //         console_fsx.inspect "timeout:"
    //         console_fsx.inspect timeout
    //         ()
    //     OnUnload = Some fun () =>
    //         set_db_connection <|
    //             db_connection ()
    //             |> am.filter fun db_status => db_status <> props.Status
    //     Status = CheckDisabled
    //     Props = fun props' => { props' with
    //         Id = Some props.Id
    //         Title = Some <| str props.Title
    //         Children = Some fun () => ;[
    //             /<db_connection {
    //                 DbType = props.DbType
    //             }
    //         ]
    //     }
    // }

open state
open real_solid
open solid
open real_state
open real_js
open real_util
open js
open db


nominal client = any // $a"algosdk.Algodv2"



inl generate_color (text : string) : string =
    inl color = generate_six_digit_numeric_hash_from_string text
    $"$\"#{!color}\""

type subscription =
    {
        client_type : client_type
        subscription : i64
        url : string
    }

type db_value value_type =
    {
        guid : guid
        client_type : client_type
        value : value_type
    }

let use_fetch forall state_type {append} value_type.
    (content_address : string)
    (getter : getter state_type)
    (setter : setter (state_type * db_value value_type))
    (request_fn : client -> promise value_type)
    : (() -> ()) * (() -> ())
    =
    inl log_level, set_log_level = use_settings_log_level ()
    inl db_connections, set_db_connections = use_db_connections ()

    inl events, set_events = create_signal ()
    inl timers, set_timers = create_signal ()
    inl value, set_value = create_signal (None : option (db_value value_type))
    inl subscriptions, set_subscriptions = create_signal (a ;[] : a i32 subscription)

    inl subscriptions_to_string (subscriptions : a i32 subscription) =
        subscriptions |> am.map fun { client_type subscription } => client_type |> to_string, subscription

    inl get_locals () : array any = ;[
        !!("content_address:", content_address)
        !!("getter:", getter ())
        !!("events:", events ())
        !!("timers:", timers ())
        !!("value:", value ())
        !!("subscriptions:", subscriptions () |> subscriptions_to_string)
        !!("db_connections:", db_connections () |> am.map fun { client_type } => client_type |> to_string)
    ]
    inl color = generate_color content_address
    inl log = use_log get_locals color
    log Debug ;[!!"> use_fetch ()"]

    // create_effect fun () =>
    //     inl values' = values ()
    //     inl db_connections' = db_connections ()

    //     log Info ;[
    //         !!">> use_fetch > effect[values'; db_connections']"
    //     ]

    //     db_connections'
    //     |> am.iter fun { client_type url db } =>
    //         inl aux =
    //             values'
    //             |> array_find_last fun {
    //                 timestamp
    //                 client_type = client_type'
    //                 value
    //             } =>
    //                 client_type = client_type'
    //                 && timestamp > 0
    //                 && value <> null
    //         ()
                // |> function
                // | Some subscription => subscription
                // | None =>
                //     {
                //         client_type
                //         url
                //         subscription = db_on log_level db content_address client_type (on_value client_type)
                //     }

            // values'
            // |> am.iter fun { timestamp value } =>
            //     log Info ;[
            //         !!">> use_fetch > effect[values'; db_connections'] > db_put"
            //         !!("timestamp:", timestamp)
            //         !!("value:", value)
            //     ]
            //     db_put db content_address timestamp value


    let on_value
        (client_type : client_type)
        (db_connections' : a i32 db_connection)
        (new_guid', new_value_raw : guid * value_type)
        =
        inl value' = value ()

        inl changed =
            match value' with
            | Some { guid value } when
                $"!value <> !new_value_raw && !ticks_from_guid !new_guid' > !ticks_from_guid !guid" => true
            | None => true
            | _ => false

        if changed then
            inl old_value = getter ()
            inl new_value = {
                client_type
                guid = new_guid'
                value = new_value_raw
            }

            log Info ;[
                !!"> use_fetch > on_value > set ()"
                !!("old_value:", old_value)
                !!("client_type:", client_type |> to_string)
                !!("new_guid':", new_guid')
                !!("new_value_raw:", new_value_raw)
            ]

            setter (old_value, new_value)
            set_value (Some new_value)

            db_connections'
            |> am.iter fun {
                client_type = connection_client_type
                url
                db
            } =>
                if connection_client_type <> client_type then
                    log Info ;[
                        !!"> use_fetch > on_value > set () > db_put"
                        !!("old_value:", old_value)
                        !!("client_type:", client_type |> to_string)
                        !!("new_guid':", new_guid')
                        !!("new_value_raw:", new_value_raw)
                        !!("connection_client_type:", connection_client_type |> to_string)
                    ]
                    db_put db connection_client_type content_address new_value_raw

    inl connections_change (db_connections' : a i32 db_connection) =
        inl subscriptions' = subscriptions ()

        inl new_subscriptions =
            db_connections'
            |> am.map fun { client_type url db } =>
                // log Info ;[
                //     !!"> use_fetch > connections_change > before db_on"
                //     !!("db_connection:", db_connection)
                // ]
                subscriptions'
                |> array_find_last fun subscription =>
                    if subscription.client_type = client_type && subscription.url = url
                    then Some subscription
                    else None
                |> function
                | Some subscription => subscription
                | None =>
                    {
                        client_type
                        url
                        subscription =
                            db_on
                                log_level
                                db
                                content_address
                                client_type
                                (on_value client_type db_connections')
                    }

        inl subscriptions_hash (subscriptions : a i32 subscription) =
            subscriptions |> am.map fun { client_type url } => client_type, url

        if subscriptions_hash subscriptions' <> subscriptions_hash new_subscriptions then
            log Info ;[
                !!"> use_fetch > connections_change"
                !!("new_subscriptions:", new_subscriptions |> subscriptions_to_string)
            ]
            set_subscriptions new_subscriptions

    inl debounced_connections_change = debounce connections_change (get_db_init_timeout ())
    create_effect fun () =>
        inl db_connections' = db_connections ()
        debounced_connections_change db_connections'

    inl unsubscribe () =
        log Debug ;[!!"> use_fetch > unsubscribe () [1]"]

        db.db_off content_address

    inl on_unload' () =
        $"!debounced_connections_change?clear ()" : ()
        unsubscribe ()
    real on_cleanup on_unload'

    inl request () =
        inl db_connections' = db_connections ()

        inl new_guid' = new_guid ()

        request_fn ($"()" : client)
        |> promise_iter fun value => on_value Memory db_connections' (new_guid', value)

    inl clear () =
        log Info ;[
            !!">> use_fetch clear ()"
        ]

        inl db_connections' = db_connections ()

        inl new_guid' = new_guid ()
        on_value Memory db_connections' (new_guid', (js_null ()))
    request, clear
