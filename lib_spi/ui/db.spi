open js
open real_util


// import * as util from "../../lib_ts/util"
// import { Node as GunRS } from "rusty-gun"
// import { IGunInstance as IGunJS, IGunChain } from "gun"
// import GunJS from "gun/gun"

// import "gun/lib/radix"
// import "gun/lib/radisk"
// import "gun/lib/store"
// import "gun/lib/rindexed"

inl gun_rs_ () = import "Node" "rusty-gun"
inl gun_js_ () = import_default "gun/gun"

// inl hub_connection_builder_ () = import "HubConnectionBuilder" "@microsoft/signalr"

inl gun_radix_ () = import_side_effects "gun/lib/radix"
inl gun_radisk_ () = import_side_effects "gun/lib/radisk"
inl gun_store_ () = import_side_effects "gun/lib/store"
inl gun_rindexed_ () = import_side_effects "gun/lib/rindexed"


// const DB_TYPE = ['gun_rs', 'gun_js'] as const

union client_type =
    | SignalRClient
    | GunRsClient
    | GunJsClient
    | Memory

union server_type =
    | SignalRServer
    | GunRsServer
    | GunJsServer


instance to_string client_type = function
    | SignalRClient => "SignalR"
    | GunRsClient => "Gun Rust"
    | GunJsClient => "Gun JavaScript"
    | Memory => "Memory"

instance to_string server_type = function
    | SignalRServer => "SignalR"
    | GunRsServer => "Gun Rust"
    | GunJsServer => "Gun JavaScript"

// export type Db =
//     | { type: 'gun_rs', url: string, db: GunRS }
//     | { type: 'gun_js', url: string, db: IGunJS }
// export type DbType = Db["type"]
// util.assertTypeEquals<DbType, typeof DB_TYPE>(DB_TYPE)


// export type DbSubscription =
//     | { type: 'gun_rs', subscription: number }
//     | { type: 'gun_js', subscription: number }
// type DbSubscriptionType = DbSubscription["type"]
// util.assertTypeEquals<DbSubscriptionType, typeof DB_TYPE>(DB_TYPE)

// type DbNode = IGunChain<any> | GunRS

// export type DbState = {
//     dbConnection: {
//         [_ in DbType]: {
//             url: string,
//             port: number,
//             ws: string
//         }
//     }
//     dbStatus: {
//         [_ in DbType]: {
//             [_ in DbType]: boolean
//         }
//     }
//     dbRef: {
//         [_: string]: Db
//     }
// }

// export const getStateLocals = <TState extends DbState>(state: TState) => {
//     return {
//         // db: Object.entries(state.dbStatus).reduce((accKeys, [dbType, enabledMap]) =>
//         //     Object.entries(enabledMap).reduce((accKeys, [urlType, enabled]) =>
//         //         !enabled
//         //             ? accKeys
//         //             : [
//         //                 ...accKeys,
//         //                 `${dbType}-${urlType}`.replace(/gun_/g, '')
//         //             ],
//         //         accKeys
//         //     ),
//         //     [] as string[]
//         // )
//     }
// }


// type Url = { url: string }

// export const newDb = (type: DbType, { url }: Url): Db | null => {
//     if (type === 'gun_rs') {
//         return { type, url, db: new GunRS(url) }
//     } else if (type === 'gun_js') {
//         return { type, url, db: util.IS_TEST ? new GunJS(url) : new GunJS({ url, localStorage: false, radisk: true }) }
//     }
//     return null
// }

union rec request =
    | Connect : { alias : string }
    | Set : { alias : string; content_address : string; value : string }
    | Get : { alias : string; content_address : string }
    | Keys : { alias : string; collection_path : string }


union rec response =
    | ConnectResult
    | SetResult : { ok : bool }
    | GetResult : { value : option string }
    | GetStream : { alias : string; content_address : string; value : option string }
    | KeysResult : { keys : a i32 string }
    | KeysStream : {
        alias : string
        collection_path : string
        updated_keys : a i32 string
        removed_keys : a i32 string
    }

type hub_connection request response = $"Fable.SignalR.HubConnection<`request, `request, `any, `response, `response>"
type hub_connection_builder request response = $"Fable.SignalR.HubConnectionBuilder<`request, `request, `any, `response, `response>"


inl hub_with_url forall request response.
    (url : string)
    (hub : hub_connection_builder request response)
    : hub_connection_builder request response
    =
    $"!hub.withUrl !url"

inl hub_with_automatic_reconnect forall request response.
    (obj : any)
    (hub : hub_connection_builder request response)
    : hub_connection_builder request response
    =
    $"!hub.withAutomaticReconnect !obj"

inl hub_on_reconnecting forall request response.
    (ex_fn : any -> ())
    (hub : hub_connection_builder request response)
    : hub_connection_builder request response
    =
    $"!hub.onReconnecting !ex_fn"

inl hub_on_reconnected forall request response.
    (ex_fn : any -> ())
    (hub : hub_connection_builder request response)
    : hub_connection_builder request response
    =
    $"!hub.onReconnected !ex_fn"

inl hub_on_close forall request response.
    (ex_fn : any -> ())
    (hub : hub_connection_builder request response)
    : hub_connection_builder request response
    =
    $"!hub.onClose !ex_fn"

inl hub_configure_logging forall request response.
    (logging : $"Fable.SignalR.LogLevel")
    (hub : hub_connection_builder request response)
    : hub_connection_builder request response
    =
    $"!hub.configureLogging !logging"

inl hub_on_message forall request response.
    (msg_fn : response -> ())
    (hub : hub_connection_builder request response)
    : hub_connection_builder request response
    =
    $"!hub.onMessage !msg_fn"

inl hub_on_connect
    (get_log_level : () -> log_level_type)
    (url : string)
    (hub : hub_connection_builder request response)
    : hub_connection_builder request response
    =
    inl log = new_log get_log_level get_locals "#666"
    log Debug ;[!!"> hub_on_connect ()"]

    inl automatic_reconnect =
        a ;[
            new_pair
                "nextRetryDelayInMilliseconds"
                !!(fun (_context : any) =>
                    inl delay = 2000i32
                    log Info ;[
                        !!"> hub_on_connect -> automatic reconnect ()"
                        !!("delay", delay)
                    ]
                    ($"Some !delay |> unbox" : any)
                )
        ]
        |> create_obj
        |> real real_unbox `any `($"Fable.SignalR.RetryPolicy")

    hub
    |> hub_with_url url
    |> hub_with_automatic_reconnect automatic_reconnect
    |> hub_on_reconnecting fun ex =>
        log Info ;[
            !!"> hub_on_connect -> on_reconnecting ()"
            !!("ex", ex)
        ]
    |> hub_on_reconnected fun ex =>
        log Info ;[
            !!"> hub_on_connect -> on_reconnected ()"
            !!("ex", ex)
        ]
    |> hub_on_close fun ex =>
        log Info ;[
            !!"> hub_on_connect -> on_close ()"
            !!("ex", ex)
        ]
    |> hub_configure_logging $"Fable.SignalR.LogLevel.Debug"
    |> hub_on_message fun msg =>
        log Info ;[
            !!"> hub_on_connect -> on_message ()"
            !!("msg", msg)
        ]


// inl hub_with_url (url : string) (hub : any) : any = $"!hub?withUrl !url"
// inl hub_with_automatic_reconnect (obj : any) (hub : any) : any = $"!hub?withAutomaticReconnect !obj"
// inl hub_build (hub : any) : any = $"!hub?build ()"

// inl connection_on (method : string) (send_fn : any -> ()) (connection : any) : () =
//     $"(!connection?on : `js_function).Invoke ($\"{!method}\", !send_fn) |> ignore"
// inl connection_start (connection : any) : () = $"!connection?start () |> ignore"
// inl connection_invoke (method : string) (value : any) (connection : any) : () =
//     $"emitJsExpr () $\"{!connection}.invoke({!method}, ...{!value})\" |> ignore"
// inl connection_send (method : string) (value : any) (connection : any) : () =
//     $"(!connection?send : `js_function).Invoke ($\"{!method}\", !value) |> ignore"


// [<RequireQualifiedAccess>]
// type Request =
//     | Connect of alias: string
//     | Set of alias: string * atomPath: string * value: string
//     | Get of alias: string * atomPath: string
//     | Keys of alias: string * collectionPath: string

// [<RequireQualifiedAccess>]
// type Response =
//     | ConnectResult
//     | SetResult of ok: bool
//     | GetResult of value: string option
//     | GetStream of alias: string * atomPath: string * value: string option
//     | KeysResult of keys: string []
//     | KeysStream of alias: string * collectionPath: string * updatedKeys: string [] * removedKeys: string []

inl new_db
    (get_log_level : () -> log_level_type)
    (client_type : client_type)
    (url : string)
    : any
    =
    match client_type with
    | SignalRClient =>
        // inl hub_connection_builder' = hub_connection_builder_ ()
        // inl hub : any = create_new hub_connection_builder' (undefined ())
        // inl automatic_reconnect = create_obj (a ;[
        //     new_pair
        //         "nextRetryDelayInMilliseconds"
        //         !!(fun (_context : any) =>
        //             console_fsx.inspect "signalr withAutomaticReconnect nextRetryDelayInMilliseconds 2k"
        //             ($"Some 2000 |> unbox" : any)
        //         )
        // ])
        // inl connection =
        //     hub
        //     |> hub_with_url url
        //     |> hub_with_automatic_reconnect automatic_reconnect
        //     |> hub_build

        // connection |> connection_start

        inl connection : hub_connection request response =
            $"Fable.SignalR.SignalR.connect<`request, `request, `any, `response, `response> ((!hub_on_connect !get_log_level !url) |> unbox) |> unbox"
        $"!connection.startNow ()" : ()
        !!connection
    | GunRsClient =>
        inl gun_rs = gun_rs_ ()
        inl args = !!url
        create_new gun_rs args
    | GunJsClient =>
        inl gun_js = gun_js_ ()

        gun_radix_ ()
        gun_radisk_ ()
        gun_store_ ()
        gun_rindexed_ ()

        inl args = create_obj (a ;[
            new_pair "url" !!url
            new_pair "localStorage" !!false
            new_pair "radisk" !!true
        ])
        create_new gun_js args
    | Memory => failwith "new_db Memory"

type db_connection_options =
    {
        server_type : server_type
        url : string
        port : i32
        ws : string
        clients : a i32 client_type
    }

type db_connection =
    {
        client_type : client_type
        url : string
        db : any
    }

// const newUrl = (state: DbState, type: DbType) => {
//     const connection = state.dbConnection[type]
//     const url = `${connection.url}:${connection.port}/${connection.ws}`
//     return url
// }

inl new_url (db_connection_options : a i32 db_connection_options) (server_type : server_type) : string =
    db_connection_options
    |> array_find_last fun db_connection =>
        if db_connection.server_type = server_type
        then Some db_connection
        else None
    |> function
    | Some { url port ws } => $"$\"{!url}:{!port}/{!ws}\""
    | None => ""




// export type Id = { dbType: DbType, urlType: DbType, url: string, id: string }
type id =
    {
        client_type : client_type
        server_type : server_type
        url : string
        id : string
    }

// const newId = (state: DbState, dbType: DbType, urlType: DbType): Id => {
//     const url = newUrl(state, urlType)
//     return {
//         dbType,
//         urlType,
//         url,
//         id: [dbType, url.replace(/\:\/\/localhost/g, '')].toString()
//     }
// }

inl regex (str : string) : string =
    $"Fable.Core.JsInterop.emitJsExpr () $\"{!str}\""

inl string_replace (pattern : string) (replace : string) (str : string) : string =
    $"Fable.Core.JsInterop.emitJsExpr !replace $\"{!str}.replace({!pattern}, $0)\""

inl new_id (client_type : client_type) (url : string) (server_type : server_type) : id =
    inl url_id = url |> string_replace (regex "/\\:\\/\\/localhost/g") ""
    {
        client_type
        server_type
        url
        id = $"$\"{!client_type}-{!url_id}\""
    }

// export const getDbIdList = (state: DbState): Id[][] =>
//     Object.entries(state.dbStatus).reduce(
//         (accKeys, [dbType, enabledMap]) =>
//  i           Object.entries(enabledMap).reduce(
//                 ([accEnabled, accDisabled]: Id[][], [urlType, enabled]) => {
//                     const id = newId(state, dbType as DbType, urlType as DbType)
//                     return enabled
//                         ? [[...accEnabled, id], accDisabled]
//                         : [accEnabled, [...accDisabled, id]]
//                 }, accKeys
//             ), [[], []] as Id[][]
//     )
inl get_db_id_list
    (db_connection_options : a i32 db_connection_options)
    (db_statuses : a i32 (a i32 bool))
    : a i32 (a i32 id)
    =
    a ;[]


// const soul = "tictactoe_spiral"
inl soul () = "tictactoe_spiral"

// const parse = (raw: object) => {
//     const getLocals = () => ({ nRaw: `${raw}`.length })
//     const log = util.getLog(getLocals)
//     log('parse() 0')
//     let data = raw
//     while (typeof data === 'string') {
//         data = JSON.parse(data)
//     }
//     return data
// }

// export const lastObjectEntry = (obj: any) => Object.values(obj || {}).slice(-1)[0]
// // export const objectValueCount = (obj: any) => Object.values(obj || {}).filter((x) => x !== null).length
// export const objectValueCount = (obj: any) => Object.values(obj || {})//.filter((x) => x !== null).length


// export type ContentAddress = { contentAddress: string }
// export type Proxy = { [_: string]: any }

// const newListenerHandler = <TProxy extends Proxy>(
//     proxy: TProxy,
//     id: string,
//     contentAddress: ContentAddress,
//     onValue: (id: string, hash: string, newValue: TProxy, rawValue: object | undefined) => Promise<void>
// ) =>
//     async (v: object, k: any, _msg: any, _ev: any) => {
//         const getLocals = () => ({
//             id,
//             contentAddress,
//             k
//         })
//         const log = util.getLog(getLocals)

//         const { '#': hash, _: { '#': hash2, '>': ptrs, ..._ }, ...value }: { [_: string]: any } = { _: {}, ...parse(v) }

//         const newEntriesRaw = Object.entries(
//             Object.keys(value).reduce((acc, k) => ({
//                 ...acc,
//                 [k]: value[k]
//             }), proxy)
//         )

//         const newValue = Object.fromEntries(newEntriesRaw) as TProxy

//         log('newListenerHandler 1', {
//             vType: typeof v,
//             hash,
//             hash2,
//             _keys: Object.keys(_ || {}),
//             nPtrsKeys: Object.keys(ptrs || {}).length,
//             // nValue: Object.keys(value).length,
//             // nNewValue: Object.keys(newValue).length,
//             value: objectValueCount(value),
//             proxy: objectValueCount(proxy),
//             newValue: objectValueCount(newValue)
//             // nStateKey: Object.keys(state[key] || {}).length
//         })

//         await onValue(id, hash, newValue, Object.keys(value || {}).length > 0 ? value : undefined)
//     }

// const getDbNode = (db: Db, { contentAddress }: ContentAddress): DbNode | undefined => {
//     const getLocals = () => ({
//         soul,
//         db,
//         contentAddress,
//     })
//     const log = util.getLog(getLocals)

//     log('getDbNode() 0')
//     return contentAddress.split('/').reduce((acc, k) => acc.get(k as any), db.db.get(soul))
// }
inl get_db_node (db : any) (content_address : string) : any =
    content_address
    |> string_split '/'
    |> am.fold
        (fun acc k => (js_get acc "get" |> real real_unbox `any `(string -> any)) k)
        ((js_get db "get" |> real real_unbox `any `(string -> any)) (soul ()))

// export const DB_INIT_TIMEOUT = 2500
inl get_db_init_timeout () : i32 = 2500
// export const DB_RESUB_TIMEOUT = 10000
inl get_db_resub_timeout () : i32 = 10000




// export const dbPut = <TState extends DbState, TProxy extends Proxy>(
//     state: TState,
//     id: Id,
//     contentAddress: ContentAddress,
//     newValue: TProxy
// ) => {
//     const getLocals = () => ({
//         id,
//         contentAddress,
//         newValue
//     })
//     const log = util.getLog(getLocals)

//     let db = state.dbRef[id.id]

//     const node = getDbNode(db, contentAddress)

//     log('dbPut() 0', { db, node })
//     if (node) {
//         node.put(newValue)
//     }

//     if (id.dbType === 'gun_js' && id.urlType === 'gun_rs') {
//         const db = newDb('gun_rs', { url: id.url })
//         if (db) {
//             setTimeout(() => {
//                 const node = getDbNode(db, contentAddress)
//                 log('dbPut() 1 (##)', { db, node })
//                 if (node) {
//                     node.put(newValue)
//                 }
//             }, DB_INIT_TIMEOUT)
//         }
//     }
// }

// module Sync =
//    let endpoint = $"/{nameof FsBeacon}"
inl sync_endpoint () = "/peer"

inl db_put forall t.
    (get_log_level : () -> log_level_type)
    (db : any)
    (client_type : client_type)
    // (server_type : server_type)
    (content_address : string)
    (new_value : t)
    : () =
    inl get_locals () = ;[
        !!("content_address:", content_address)
        !!("client_type:", client_type |> to_string)
        !!("new_value:", new_value)
    ]
    inl log = new_log get_log_level get_locals "#666"
    log Debug ;[!!"> db_put ()"]
    match client_type with
    | SignalRClient =>
        inl alias = "alias"
        inl value = real real_unbox `t `string new_value
        inl request' = Set { alias content_address value }
        inl db : hub_connection request response = db |> real real_unbox `any `(hub_connection request response)
        $"!db.invokeAsPromise !request'"
        |> promise_iter fun (response' : response) =>
            log Info ;[
                !!"> db_put > response' ()"
                !!("response':", response' |> json_stringify)
            ]
        // connection
        // |> connection_invoke
        //     "Invoke"
        //     !!((sync_endpoint ()), (Set { alias = "alias"; content_address; value = new_value |> to_string' }))
    | GunRsClient
    | GunJsClient =>
        let node = get_db_node db content_address
        (js_get node "put" |> real real_unbox `any `(t -> ())) new_value
    | Memory => failwith "db_on Memory"
    // if client_type = GunJsClient && server_type = GunRsServer then
    //     let db = new_db GunRsServer ("http://localhost:8765/gun")
    //     if db then
    //         get_db_init_timeout ()
    //         |> setTimeout (fun () =>
    //             let node = get_db_node db content_address
    //             $"!node?put !new_value" : ()
    //         )


// export const dbOn = <TState extends DbState, TProxy extends Proxy>(
//     state: TState,
//     proxy: TProxy,
//     id: Id,
//     contentAddress: ContentAddress,
//     onValue: (id: string, hash: string, newValue: TProxy, rawValue: object | undefined) => Promise<void>
// ): number | undefined => {
//     const { dbType } = id
//     const getLocals = () => ({
//         contentAddress,
//         dbType,
//         id
//     })
//     const log = util.getLog(getLocals)

//     let db = state.dbRef[id.id]
//     const node = getDbNode(db, contentAddress)

//     log('dbOn() 0', { node })
//     if (node) {
//         if (dbType === 'gun_rs') {
//             return node.on(newListenerHandler(proxy, id.id, contentAddress, onValue)) as number
//         } else if (dbType === 'gun_js') {
//             node.on(newListenerHandler(proxy, id.id, contentAddress, onValue))
//             return util.newTimestamp()
//         }
//     }
// }

union subscription_handle =
    | Timestamp : i64
    | Disposable : $"System.IDisposable"

inl db_on forall value_type.
    (get_log_level : () -> log_level_type)
    (db : any)
    (content_address : string)
    (client_type : client_type)
    (on_value : guid * value_type -> ())
    : promise subscription_handle
    =
    inl get_locals () = ;[
        !!("content_address:", content_address)
        !!("client_type:", client_type |> to_string)
    ]
    inl log = new_log get_log_level get_locals "#666"
    log Debug ;[!!"> db_on ()"]

    inl on_value (v : guid * value_type) (k : any) =
        log Info ;[
            !!"> db_on > on_value ()"
            !!("v:", v)
            !!("k:", k)
        ]
        on_value v

    inl handler : any * i32 -> () = $"Fable.Core.JsInterop.emitJsExpr () $\"(v: any, k: any) => {!on_value}(v)(k)\""
    match client_type with
    | SignalRClient =>
        inl alias = "alias"
        inl request' = Get { alias content_address }
        // inl action = fun (response : response) =>
        //     log Info ;[
        //         !!"> db_on > streamFrom action ()"
        //         !!("response:", response)
        //     ]
        inl db : hub_connection request response = db |> real real_unbox `any `(hub_connection request response)
        $"!db.streamFrom !request'"
        |> async_start_as_promise
        |> promise_map fun (stream : $"Fable.SignalR.StreamResult<`response>") =>
            inl context : $"Fable.SignalR.IStreamSubscriber<`response>" =
                a ;[
                    new_pair "next" !!(fun (msg : response) =>
                        log Info ;[
                            !!"> db_on > stream next ()"
                            !!("msg:", msg)
                        ]
                    )
                    new_pair "complete" !!(fun () =>
                        log Info ;[
                            !!"> db_on > stream complete ()"
                        ]
                    )
                    new_pair "error" !!(fun (err : any) =>
                        log Info ;[
                            !!"> db_on > stream err ()"
                            !!("err:", err |> json_stringify)
                        ]
                    )
                ]
                |> create_obj
                |> real real_unbox `any `($"Fable.SignalR.IStreamSubscriber<`response>")

            inl subscription : $"System.IDisposable" =
                $"!stream.subscribe !context"

            log Info ;[
                !!"> db_on > streamFrom subscribe ()"
                !!("stream:", stream |> json_stringify)
                !!("subscription (IDisposable):", subscription)
            ]

            subscription |> Disposable

        // inl connection = db
        // connection
        // |> connection_on "Send" fun _msg =>
        //     log Info ;[
        //         !!"> db_on > signalr on_value ()"
        //         !!("_msg:", _msg)
        //     ]
    | GunRsClient =>
        inl node = get_db_node db content_address
        (js_get node "on" |> real real_unbox `any `((any * i32 -> ()) -> i64)) handler
        |> Timestamp |> promise_lift
    | GunJsClient =>
        inl node = get_db_node db content_address
        (js_get node "on" |> real real_unbox `any `((any * i32 -> ()) -> ())) handler
        ticks () |> Timestamp |> promise_lift
    | Memory => failwith "db_on Memory"


// export const dbOff = <TState extends DbState>(
//     state: TState,
//     id: string,
//     contentAddress: ContentAddress,
//     subscription: number | undefined
// ) => {
//     const getLocals = () => ({
//         id,
//         contentAddress,
//         subscription
//     })
//     const log = util.getLog(getLocals)

//     let db = state.dbRef[id]
//     const node = getDbNode(db, contentAddress)

//     log('dbOff() 0', { node })
//     if (node) {
//         node.off(subscription as any)
//     }
// }
// inl db_off (state: DbState, id: string, content_address: string, subscription: i32) : void = {
//     let db = state.db_ref[id]
//     let node = get_db_node(db, content_address)
//     if (node) {
//         node.off(subscription)
//     }
// }
inl db_off
    (get_log_level : () -> log_level_type)
    (content_address : string)
    =
    inl get_locals () = ;[
        !!("content_address:", content_address)
    ]
    inl log = new_log get_log_level get_locals "#666"
    log Debug ;[!!"> db_off ()"]
