open real_util


nominal unit' = ()
type unativeint = $"unativeint"
nominal option' t = $"Option<`t>"
nominal result' t e = $"Result<`t, `e>"

nominal array' t = $"Types.Array<`t>"
nominal box t = $"Types.Box<`t>"
nominal dyn' t = $"Types.Dyn<`t>"
nominal emit_type t = $"Types.EmitType<`t>"
nominal mut' t = $"Types.Mut<`t>"
nominal ref' t = $"Types.Ref<`t>"
nominal static_ref' t = $"Types.StaticRef<`t>"
nominal str = $"Types.Str"
nominal tuple' a b = $"Types.Tuple<`a, `b>"
nominal vec t = $"Types.Vec<`t>"

nominal cell_ref t = $"Types.std.cell.CellRef<`t>"
nominal ref_cell t = $"Types.std.cell.RefCell<`t>"

nominal vec_deque t = $"Types.std.collections.VecDeque<`t>"

nominal file = $"Types.std.fs.File"

type io_error = $"Types.std.io.Error"

nominal iterator t = $"Types.std.iter.Iterator<`t>"

type ancestors = $"Types.std.path.Ancestors"
nominal path = $"Types.std.path.Path"
nominal path_buf = $"Types.std.path.PathBuf"
type strip_prefix_error = $"Types.std.path.StripPrefixError"

nominal rc t = $"Types.std.rc.Rc<`t>"

nominal std_string = $"Types.std.string.String"

nominal arc t = $"Types.std.sync.Arc<`t>"
nominal mutex t = $"Types.std.sync.Mutex<`t>"

nominal systemtime = $"Types.std.time.SystemTime"

nominal condvar = $"Types.async_std.sync.Condvar"

type utc = $"Types.chrono.Utc"
type local = $"Types.chrono.Local"
type datetime t = $"Types.chrono.DateTime<`t>"

nominal clap_arg = $"Types.clap.builder.Arg"
nominal clap_arg_matches = $"Types.clap.parser.ArgMatches"
nominal clap_command = $"Types.clap.builder.Command"
nominal colored_string = $"Types.colored.ColoredString"

nominal future t = $"Types.core.future.Future<`t>"

nominal request = $"Types.ehttp.Request"
nominal response = $"Types.ehttp.Response"

nominal linereader t = $"Types.linereader.LineReader<`t>"

nominal regex = $"Types.regex.Regex"
nominal regex_builder = $"Types.regex.RegexBuilder"

nominal js_value = $"Types.wasm_bindgen.JsValue"

inl emit_expr forall a t. (args : a) (code : string) : t =
    $"Fable.Core.Rust.emitExpr !args !code"

inl deref forall t u. (x : t) : ref' u =
    emit_expr x "core::ops::Deref::deref($0)"

inl deref' forall t. (x : ref' t) : t =
    emit_expr x "**$0"

inl deref'' forall t. (x : ref' t) : ref' t =
    emit_expr x "&***$0"

inl deref''' forall t. (x : t) : t =
    emit_expr x "**$0"

inl to_std_string (str : string) : std_string =
    emit_expr str "($0).to_string()"

inl to_std_string' (str : string) : std_string =
    emit_expr str "std::string::String::from($0.to_string())"

inl as_ref forall t u. (x : t) : ref' u =
    emit_expr x "($0).as_ref()"

type log_item = emit_type std_string


inl format' forall t. (x : t) (debug : bool) : std_string =
    real
        emit_expr `t `std_string x
            if debug
            then "format!(\"{:?}\", $0)"
            else "format!(\"{}\", $0)"

inl format forall t. (x : t) : std_string =
    real
        inl result : std_string =
            typecase t with
            | string => to_std_string x
            | std_string => x
            | colored_string => format' `t x false
            | log_item => format' `t x false
            | array _ =>
                inl x : ref' any = deref `t `any x
                inl x : ref' any = deref'' `any x
                inl x : ref' any = deref'' `any x
                format' `any x true
            | _ => format' `t x true
        result


let (~!>) forall t. (x : t) : log_item =
    inl str : std_string = format x
    real
        real_unbox `std_string `log_item str

// inl unwrap' x = emit_expr x "$0.unwrap()"
inl unwrap_ref x = emit_expr x "$0.unwrap()"
inl unwrap_as_ref forall t u. (x : t) : u = emit_expr x "*(($0).as_ref()).unwrap()"
inl unwrap_or forall t. (a : t) (b : option' t) : t =
    $"!b |> Option.defaultValue !a"
instance (~!!) path_buf = fun (x : t) => emit_expr x "($0).as_ref().unwrap().to_path_buf()"
instance (~!!) ref' t' = unwrap_ref
instance (~!!) file = unwrap_ref
instance (~!!) emit_type t' = fun (x : t) =>
    real
        // typecase t with
        // | string => emit_expr `std_string `(emit_type t') (format `t x) "$0"
        // | string' => emit_expr `string' `(emit_type t') x "$0"
        // // | string => emit_expr `string' `(emit_type t') (x |> format `t) "$0"
        // | _ =>
            inl x : std_string = format `t x
            real_unbox `std_string `(emit_type t') x
instance (~!!) result' t' e' = fun (x : t) => emit_expr x "($0).as_ref().unwrap().to_path_buf()"
instance (~!!) static_ref' t' = unwrap_ref
// instance (~!!) std_string = fun (x : t) => emit_expr x "($0).as_ref().unwrap().to_string()"
instance (~!!) std_string = fun (x : t) =>
    real
        typecase t with
        | result' _ _ => emit_expr `t `std_string x "($0).as_ref().unwrap().to_string()"
        | _ => emit_expr `t `std_string x "($0).as_ref().to_string()"
inl unwrap_ignore forall t. (x : t) : () = unwrap_as_ref x
instance (~!!) unit' = unwrap_ignore >> fun _ => unit'


inl js_value_from_str (str : string) : any =
    emit_expr str "wasm_bindgen::JsValue::from_str($0)"

inl js_value_from_obj (obj : any) : any =
    emit_expr obj "serde_wasm_bindgen::to_value(&*****$0).unwrap()"

inl console_log (str : string) : () =
    emit_expr (str |> js_value_from_str) "web_sys::console::log_1(&$0)"

inl raw_string_literal (s : string) : ref' str =
    emit_expr () $"$\"r#\\\"{!s}\\\"#\""

inl as_str (s : string) : ref' str =
    emit_expr (join s) "$0.as_str()"

inl as_str' (s : ref' str) : std_string =
    emit_expr s "std::string::String::from(*$0)"

inl to_string'' forall t. (x : t) : string =
    emit_expr x "fable_library_rust::String_::fromStr($0)"

inl to_ref forall t. (x : t) : ref' t = $"!x |> unbox"

inl to_ref' forall t. (x : t) : ref' t =
    emit_expr x "&$0"

inl console_log' (args : a i32 std_string) : () =
    inl args : ref' (vec any) = args |> deref
    inl args : any = args |> to_any |> js_value_from_obj
    emit_expr args "web_sys::console::log(&js_sys::Array::from(&$0))"


inl len forall t. (x : t) : i32 =
    emit_expr x "($0).len().try_into().unwrap()"

// inl new_string (str : static_ref' str) : string =
    // emit_expr str "fable_library_rust::String_::string($0)"


inl substring' (start : i32) (len : i32) (str : string) : string =
    $"!str.Substring (!start, !len)"

inl unativeint forall t{int}. (n : t) : unativeint =
    $"unativeint !n"

inl substring (start : i32) (end : i32) (str : string) : string =
    (emit_expr
        (str |> as_str, start |> unativeint, end |> unativeint)
        "&$0[$1..$2]" : ref' str)
    |> to_string''

inl string_replace (old : string) (new : string) (s : ref' str) : ref' str =
    emit_expr (old |> to_ref, new |> to_ref, s) "&$2.replace(&*$0, &$1)"

inl string_contains (search : string) (s : string) : bool =
    emit_expr (search |> to_ref, s |> to_ref) "($1).contains(&*$0)"

inl new_regex_builder (regex : ref' str) : regex_builder =
    emit_expr regex "regex::RegexBuilder::new($0)"

inl regex_build (regex_builder : regex_builder) : ref' regex =
    emit_expr regex_builder "$0.build().unwrap()"

inl regex_replace_all' (text : string) (replacement : string) (regex : ref' regex) : std_string =
    emit_expr (regex, text |> as_str, replacement |> as_str) "$0.replace_all(&$1, $2).to_string()"

inl regex_replace_all regex replacement text =
    regex
    |> raw_string_literal
    |> new_regex_builder
    |> regex_build
    |> regex_replace_all' text replacement
    |> to_string''

inl from_utf8 (v : vec u8) : std_string =
    emit_expr v "std::string::String::from_utf8(($0).to_owned()).unwrap()"


inl new_clap_arg (name : string) : clap_arg =
    emit_expr (name |> raw_string_literal) "clap::Arg::new($0)"

inl new_clap_command (name : string) : clap_command =
    emit_expr
        (name |> raw_string_literal)
        ("clap::Command::new($0)" +\
            ".propagate_version(true)" +\
            ".subcommand_required(false)" +\
            ".about(\"command about\")" +\
            ".arg_required_else_help(true)")

inl add_clap_arg (arg : clap_arg) (command : clap_command) : clap_command =
    emit_expr (command, arg) "$0.arg($1)"

inl add_clap_subcommand (subcommand : clap_command) (command : clap_command) : clap_command =
    emit_expr (command, subcommand) "$0.subcommand($1)"

inl get_clap_matches (command : clap_command) : ref' clap_arg_matches =
    emit_expr command "$0.get_matches()"

inl matches_subcommand (matches : ref' clap_arg_matches) : ref' (option' (ref' str * ref' clap_arg_matches)) =
    emit_expr matches "$0.subcommand()"

inl get_clap_one (arg : string) (matches : ref' clap_arg_matches) : ref' std_string =
    emit_expr
        (matches, arg |> as_str, ($"\"--\" + !arg + \"=\"" : string) |> as_str)
        "&($0).get_one::<String>($1).unwrap().replace($2, \"\")"


// inl serialize args json : std_string =
//     emit_expr args ("serde_json::json!(" +\ json +\ ")")

// inl json_stringify forall t. (obj : t) : std_string =
//     real
//         typecase t with
//         | array _ => serialize `t obj "****$0"
//         | _ => serialize `t obj "*$0"

inl serialize args json : std_string =
    emit_expr args ("serde_json::json!(" +\ json +\ ").to_string()")


inl hex_to_u8 (hex : string) : u8 =
    emit_expr hex "u8::from_str_radix($0, 16).unwrap()"

inl color_name (name : string) (str : emit_type std_string) : std_string =
    (emit_expr (str, name) "colored::Colorize::color(&*$0, $1.to_string())" : colored_string)
    |> format

inl truecolor (color_hex : string) (str : emit_type std_string) : std_string =
    inl r = color_hex |> substring 0 2 |> hex_to_u8
    inl g = color_hex |> substring 2 4 |> hex_to_u8
    inl b = color_hex |> substring 4 6 |> hex_to_u8
    (emit_expr (str, r, g, b) "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)" : colored_string)
    |> format




inl get_window () : any = emit_expr () "web_sys::window().unwrap()"
inl get_document (window : any) : any = emit_expr window "$0.document().unwrap()"
inl get_body (document : any) : any = emit_expr document "$0.body().unwrap()"
inl create_element (tag : string) (document : any) : any =
    emit_expr (document, tag |> raw_string_literal) "$0.create_element($1).unwrap()"

inl set_attribute (key : string) (value : string) (element : any) : any =
    emit_expr (element, key |> raw_string_literal, value |> raw_string_literal) "$0.set_attribute($1, $2).unwrap()"
    element

inl append_parent (parent : any) (element : any) : () =
    emit_expr (parent, element) "$0.append_child(&$1).unwrap()"

union rust_target =
    | Wasm32
    | UnknownRustTarget

inl get_rust_target () : rust_target =
    if emit_expr () "cfg!(target_arch = \"wasm32\")"
    then Wasm32
    else UnknownRustTarget

// inl box_from forall t. (obj : t) : box' t =
//     emit_expr obj "Box::from($0)"


inl map forall t u. (f : t -> u) (iter : iterator t) : iterator u =
    emit_expr (f |> to_ref, iter) "$1.into_iter().map($0)"

inl find forall t. (f : ref' t -> bool) (iter : iterator t) : option' t =
    emit_expr (f |> to_ref, iter) "$1.into_iter().find($0)"

inl take forall t. (x : unativeint) iter : iterator (ref' t) =
    emit_expr (x, iter) "$1.take($0)"


prototype to_path_buf t : t -> path_buf

// instance to_path_buf str = fun x => emit_expr x "$0.to_path_buf()"

inl to_path_buf' path : path_buf = emit_expr path "std::path::PathBuf::from($0)"

instance to_path_buf static_ref' t = to_path_buf'
instance to_path_buf ref' t = to_path_buf'

inl path_ancestors (x : path_buf) : ref' ancestors =
    emit_expr x "$0.ancestors()"

inl path_join (s : string) (p : ref' path) : path_buf =
    emit_expr (s, p) "$1.join($0.as_str())"

inl path_exists (p : ref' path_buf) : bool =
    emit_expr p "std::path::Path::exists($0)"

inl path_to_str (x : path_buf) : option' (ref' str) =
    emit_expr x "($0).to_str()"

inl env_current_dir () : path_buf =
    !!(emit_expr () "std::env::current_dir()" : result' path_buf io_error)

inl path_canonicalize (path : path_buf) : path_buf =
    !!(emit_expr path "($0).canonicalize()" : result' path_buf io_error)

inl path_parent (path : path_buf) : ref' path =
    !!(emit_expr path "($0).parent()" : option' (ref' path))

inl path_display (path : path_buf) : string =
    // emit_expr path "fable_library_rust::String_::fromStr(Box::leak(format!(\"{:?}\", ($0).strip_prefix(\"\").unwrap().display()).into_boxed_str()))"
    emit_expr path "fable_library_rust::String_::fromStr(&format!(\"{}\", $0.display()))"

inl path_strip_prefix (path : static_ref' str) (base : path_buf) : static_ref' path =
    !!(emit_expr (path, base) "($1).strip_prefix($0)" : result' (static_ref' path) strip_prefix_error)


inl fs_write (path_buf : path_buf) (s : string) : result' unit' io_error =
    emit_expr (path_buf, s) "std::fs::write($0, $1.as_str())"

inl fs_read_to_string (path_buf : path_buf) : result' std_string io_error =
    emit_expr path_buf "std::fs::read_to_string($0)"


inl now () : datetime utc =
    emit_expr () "chrono::Utc::now()"

inl ticks () : ticks =
    emit_expr (now ()) "($0).timestamp()"

inl sleep (ms : u64) : () =
    emit_expr ms "std::thread::sleep(std::time::Duration::from_millis(*$0))"


inl random () : u8 = emit_expr () "rand::random::<u8>()"

inl range forall t {number}. (a : t) (b : t) : a i32 t = $"[| !a..!b |]"










inl as_bytes (x : std_string) : any =
    emit_expr () $"\"!x.as_bytes()\""

inl to_vec forall t. (x : t) : vec t =
    emit_expr () $"\"!x.to_vec()\""

inl none' forall t. =
    $"None |> unbox" : option' t

// inl some' forall t. (x : t) : option' t =
//     new_option' ($"Some !x" : t)

inl is_none forall t. (x : option' t) : bool =
    emit_expr () $"\"!x.is_none()\""

inl clone' forall t. (x : t) : t =
    emit_expr () $"\"!x.clone()\""

inl borrow forall t. (x : ref_cell t) : cell_ref t =
    emit_expr () $"\"!x.borrow()\""

inl borrow_mut forall t. (x : ref_cell t) : t =
    emit_expr () $"\"!x.borrow_mut()\""

inl lock' forall t. (x : arc t) : future (mutex t) =
    emit_expr () $"\"!x.lock()\""

inl lock' forall t. (x : arc t) : future (mutex t) =
    emit_expr () $"\"!x.lock()\""

inl try_lock forall t. (x : cell_ref t) : option' (future (mutex t)) =
    emit_expr () $"\"!x.try_lock()\""

inl wait forall t. (x : mutex t) : mutex t =
    emit_expr () $"\"!x.lock()\""

inl mutex''' forall t. (x : mutex t) : t =
    emit_expr () $"\"!x\""

inl await' forall t. (x : future t) : t =
    emit_expr () $"\"!x.await\""

inl condvar_notify_one (x : mutex condvar) : any =
    emit_expr () $"\"!x.notify_one()\""

inl new_box forall t. (x : t) : box t =
    emit_expr () $"\"Box::new(!x)\""

inl new_tuple forall a b. (a : a) (b : b) : tuple' a b =
    emit_expr () $"\"(!a, !b)\""


inl new_ref_cell forall t. (x : t) : ref_cell t =
    inl x = join x
    emit_expr () $"\"std::cell::RefCell::new(!x)\""

inl new_arc forall t. (x : t) : arc t =
    inl x = join x
    emit_expr () $"\"std::sync::Arc::new(!x)\""

inl new_mutex forall t. (x : t) : mutex t =
    inl x = join x
    emit_expr () $"\"async_std::sync::Mutex::new(!x)\""

// inl new_arc_mutex forall t. (x : t) : arc (mutex (ref' t)) = emit_expr (join x) $"\"std::sync::Arc::new(parking_lot::Mutex::new($0))\""
inl new_arc_mutex forall t. (x : t) : arc (mutex t) =
    x
    |> new_mutex
    |> new_arc

inl new_condvar () : condvar =
    emit_expr () "async_std::sync::Condvar::new()"

inl block_on forall t. (fn : future t) : () =
    emit_expr () $"\"async_std::task::block_on(!fn)\""

inl http_request_get (url : string) : request =
    inl url = url |> to_std_string
    emit_expr url "ehttp::Request::get($0)"

inl http_request_post (url : string) (body : string) : request =
    inl url = url |> to_std_string
    inl body = body |> to_std_string |> as_bytes |> to_vec
    emit_expr (url, body) "ehttp::Request::post($0, $1)"

inl http_fetch (request : request) (on_done : box any) : () =
    emit_expr () $"\"ehttp::fetch(!request, !on_done)\""

inl fetch' request (fn : ref_cell (arc (mutex (option' response))) -> ()) =
    inl pair = new_tuple (new_mutex false) (new_condvar ()) |> new_arc
    inl pair2 = pair |> clone'

    inl response : option' response = none'
    inl response = response |> new_arc_mutex |> new_ref_cell
    inl response' : ref_cell (arc (mutex (option' response))) = response |> clone'

    inl on_done : any =
        emit_expr
            ()
            ($"\"move |x: ehttp::Result<ehttp::Response>| {\"" +\
            $"\"  let r = x.clone().unwrap();\"" +\
            $"\"  *!response.borrow_mut().try_lock().unwrap() = Some(r);\"" +\
            $"\"  async_std::task::block_on(async move {\"" +\
            $"\"    let (lock, cvar) = &*!pair2;\"" +\
            $"\"    let mut started = lock.lock().await;\"" +\
            $"\"    *started = true;\"" +\
            $"\"    cvar.notify_one();\"" +\
            $"\"  });\"" +\
            "}")
    inl on_done : box any = on_done |> new_box
    http_fetch request on_done

    inl fn : future any =
        emit_expr
            ()
            ("async move {" +\
            $"\"  let (lock, cvar) = &*!pair;\"" +\
            $"\"  let mut started = lock.lock().await;\"" +\
            $"\"  while !!*started {\"" +\
            $"\"    started = cvar.wait(started).await;\"" +\
            $"\"  }\"" +\
            $"\"  !fn(!response');\"" +\
            "}")

    block_on fn


inl new_async_move (body : any) : future any =
    emit_expr
        ()
        ($"\"async move {\"" +\
        $"\"  !body;\"" +\
        "}")


type env =
    {
        codespace_name : string
        github_run_id : string
        github_sha : string
        is_test : bool
    }
let get_env () : env =
    inl env : any = !!"" // ($"Fable.Core.JsInterop.emitJsExpr () \"components.env\"" : any)

    inl codespace_name = "" // $"Fable.Core.JsInterop.emitJsExpr !env \"$0.CODESPACE_NAME || \\\"\\\"\"" : string
    inl github_run_id = "" // $"Fable.Core.JsInterop.emitJsExpr !env \"$0.GITHUB_RUN_ID || \\\"\\\"\"" : string
    inl github_sha = "" // $"Fable.Core.JsInterop.emitJsExpr !env \"$0.GITHUB_SHA || \\\"\\\"\"" : string
    inl is_test =
        // inl is_test' : any = js_get env "IS_TEST"
        inl is_test' : bool = false // is_empty is_test'
        not is_test'

    {
        codespace_name
        github_run_id
        github_sha
        is_test
    } : env


inl real_core_union_tag log_level : i32 =
    match log_level with
    | Verbose => -1
    | Debug => 0
    | Info => 1
    | Warn => 2
    | Error => 3

inl new_log
    (get_log_level : () -> log_level_type)
    (ext_locals_fn : () -> array log_item)
    (color : string)
    : log_level_type -> array log_item -> ()
    =
    inl clean_log (text : log_item) : log_item =
        inl text =
            text
            |> format
            |> to_string'
            |> regex_replace_all "\"([^\"]+)\", \"([^\"]+)\"" "$1=$2"
            |> regex_replace_all "\\[\"(.*?)\"\\]" "[$1]"
            |> regex_replace_all "\\\\\"" "\""
            |> regex_replace_all ", " " "
        !>text

    inl env : env = get_env ()
    inl start_timestamp = ticks ()
    fun log_level (args : array log_item) : () =>
        join
            if ((real real_core_union_tag (get_log_level ())) : i32) <= real real_core_union_tag log_level then
                inl new_timestamp () = ticks () - start_timestamp
                inl timestamp : string = new_timestamp () |> to_string'
                inl timestamp : string = pad 6 timestamp
                inl run_id : u8 = random ()
                inl locals = !>(;[
                    !>"timestamp"; !>timestamp
                    !>"run_id"; !>run_id
                    !>"log_level"; !>(log_level |> to_string)
                ])

                inl ext_locals = !!(ext_locals_fn ()) |> clean_log
                inl args = !!args |> clean_log
                inl locals = locals |> clean_log

                match get_rust_target () with
                | Wasm32 =>
                    inl ext_locals = ext_locals |> to_string'
                    inl args = args |> to_string'
                    inl locals = locals |> to_string'
                    console_log' (a ;[
                        !!(ext_locals +\ " %c" +\ args +\ " %c" +\ locals)
                        !!($"$\"color: #{!color};\"" : string)
                        !!"color: #385779;"
                    ])
                | _ =>
                    inl ext_locals = ext_locals
                    inl args = args |> truecolor color
                    inl locals = locals |> truecolor "385779"

                    inl new_args : string = $"$\"{!ext_locals} {!args} {!locals}\""
                    console_fsx.write_line new_args

inl wait_file_change (fsx_path : path_buf) : string =
    inl get_locals () = ;[!>"> wait_file_change ()"]
    inl log = new_log (fun () => Debug) get_locals "387957"

    inl get_last_modified () : systemtime = emit_expr fsx_path "std::fs::metadata($0).unwrap().modified().unwrap()"
    inl start = get_last_modified ()

    log Debug ;[
        !>"fsx_path"; !>(fsx_path |> path_display)
        !>"start"; !>start
    ]

    inl new_fsx =
        range 0i32 50
        |> am.fold
            fun new_fsx i =>
                match new_fsx with
                | Some lines => Some lines
                | None =>
                    inl last_modified = get_last_modified ()
                    log Debug ;[
                        !>"i"; !>i
                        !>"last_modified"; !>last_modified
                    ]
                    if emit_expr (last_modified, start) "$0 > $1" then
                        inl lines : std_string = !!(fsx_path |> fs_read_to_string)
                        Some (lines |> to_string'')
                    else
                        sleep 25
                        None
            None

    new_fsx /?? ""
