type [<Struct>] US0 =
    | US0_0
    | US0_1
and UH0 =
    | UH0_0 of Types.std.string.String * UH0
    | UH0_1
and Mut0 = {mutable l0 : UH0}
and UH1 =
    | UH1_0 of string * UH1
    | UH1_1
let rec method0 () : struct (string * string * string * bool) =
    let v0 : string = ""
    let v1 : obj = v0
    struct (v0, v0, v0, true)
and method1 () : string =
    let v0 : string = "rs-path"
    v0
and method2 (v0 : string) : string =
    v0
and method3 (v0 : int32, v1 : string) : string =
    let v2 : int32 = String.length v1
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : string = $"0{v1}"
        method3(v0, v4)
    else
        v1
and method4 () : string =
    let v0 : string = "$1=$2"
    v0
and method5 () : string =
    let v0 : string = "[$1]"
    v0
and method6 () : string =
    let v0 : string = " "
    v0
and method7 () : string =
    let v0 : string = "387957"
    v0
and method8 () : string =
    let v0 : string = "385779"
    v0
and method9 () : string =
    let v0 : string = "881749"
    v0
and closure1 (v0 : int64, v1 : Mut0) (v2 : Types.Vec<uint8>) : Result<bool, Types.std.io.Error> =
    let v3 : string = "line len"
    let v4 : string = "($0).to_string()"
    let v5 : Types.std.string.String = Fable.Core.Rust.emitExpr v3 v4
    let v6 : Types.EmitType<Types.std.string.String> = v5 |> unbox<Types.EmitType<Types.std.string.String>>
    let v7 : string = "($0).len().try_into().unwrap()"
    let v8 : int32 = Fable.Core.Rust.emitExpr v2 v7
    let v9 : string = "format!(\"{:?}\", $0)"
    let v10 : Types.std.string.String = Fable.Core.Rust.emitExpr v8 v9
    let v11 : Types.EmitType<Types.std.string.String> = v10 |> unbox<Types.EmitType<Types.std.string.String>>
    let v12 : (Types.EmitType<Types.std.string.String> []) = [|v6; v11|]
    let v13 : string = "core::ops::Deref::deref($0)"
    let v14 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v12 v13
    let v15 : string = "&***$0"
    let v16 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v14 v15
    let v17 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v16 v15
    let v18 : Types.std.string.String = Fable.Core.Rust.emitExpr v17 v9
    let v19 : Types.EmitType<Types.std.string.String> = v18 |> unbox<Types.EmitType<Types.std.string.String>>
    let v20 : string = "std::string::String::from_utf8(($0).to_owned()).unwrap()"
    let v21 : Types.std.string.String = Fable.Core.Rust.emitExpr v2 v20
    let v22 : UH0 = v1.l0
    let v23 : UH0 = UH0_0(v21, v22)
    v1.l0 <- v23
    let v24 : Result<bool, Types.std.io.Error> = Ok true
    v24
and method10 (v0 : int64, v1 : Mut0) : (Types.Vec<uint8> -> Result<bool, Types.std.io.Error>) =
    closure1(v0, v1)
and method11 (v0 : UH0, v1 : UH0) : UH0 =
    match v0 with
    | UH0_0(v2, v3) -> (* Cons *)
        let v4 : UH0 = UH0_0(v2, v1)
        method11(v3, v4)
    | UH0_1 -> (* Nil *)
        v1
and method12 (v0 : UH0, v1 : UH1) : UH1 =
    match v0 with
    | UH0_0(v2, v3) -> (* Cons *)
        let v4 : UH1 = method12(v3, v1)
        let v5 : string = "fable_library_rust::String_::fromStr($0)"
        let v6 : string = Fable.Core.Rust.emitExpr v2 v5
        UH1_0(v6, v4)
    | UH0_1 -> (* Nil *)
        v1
and method13 (v0 : UH1, v1 : int32) : int32 =
    match v0 with
    | UH1_0(v2, v3) -> (* Cons *)
        let v4 : int32 = v1 + 1
        method13(v3, v4)
    | UH1_1 -> (* Nil *)
        v1
and method14 (v0 : int64, v1 : UH1, v2 : int32, v3 : UH1) : struct (int32 * UH1) =
    match v1 with
    | UH1_0(v4, v5) -> (* Cons *)
        let v6 : string = "/node_modules/"
        let v7 : Types.Ref<string> = v6 |> unbox
        let v8 : Types.Ref<string> = v4 |> unbox
        let v9 : string = "($1).contains(&*$0)"
        let v10 : bool = Fable.Core.Rust.emitExpr struct (v7, v8) v9
        let struct (v265 : int32, v266 : UH1) =
            if v10 then
                let v11 : string = "found line. removing."
                let v12 : string = "($0).to_string()"
                let v13 : Types.std.string.String = Fable.Core.Rust.emitExpr v11 v12
                let v14 : Types.EmitType<Types.std.string.String> = v13 |> unbox<Types.EmitType<Types.std.string.String>>
                let v15 : string = " line"
                let v16 : Types.std.string.String = Fable.Core.Rust.emitExpr v15 v12
                let v17 : Types.EmitType<Types.std.string.String> = v16 |> unbox<Types.EmitType<Types.std.string.String>>
                let v18 : Types.std.string.String = Fable.Core.Rust.emitExpr v4 v12
                let v19 : Types.EmitType<Types.std.string.String> = v18 |> unbox<Types.EmitType<Types.std.string.String>>
                let v20 : (Types.EmitType<Types.std.string.String> []) = [|v14; v17; v19|]
                let v21 : string = "core::ops::Deref::deref($0)"
                let v22 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v20 v21
                let v23 : string = "&***$0"
                let v24 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v22 v23
                let v25 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v24 v23
                let v26 : string = "format!(\"{:?}\", $0)"
                let v27 : Types.std.string.String = Fable.Core.Rust.emitExpr v25 v26
                let v28 : Types.EmitType<Types.std.string.String> = v27 |> unbox<Types.EmitType<Types.std.string.String>>
                let v29 : string = "chrono::Utc::now()"
                let v30 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v29
                let v31 : string = "($0).timestamp()"
                let v32 : int64 = Fable.Core.Rust.emitExpr v30 v31
                let v33 : int64 = v32 - v0
                let v34 : string = (v33).ToString ()
                let v35 : int32 = 6
                let v36 : string = method3(v35, v34)
                let v37 : string = "rand::random::<u8>()"
                let v38 : uint8 = Fable.Core.Rust.emitExpr () v37
                let v39 : string = "timestamp"
                let v40 : Types.std.string.String = Fable.Core.Rust.emitExpr v39 v12
                let v41 : Types.EmitType<Types.std.string.String> = v40 |> unbox<Types.EmitType<Types.std.string.String>>
                let v42 : Types.std.string.String = Fable.Core.Rust.emitExpr v36 v12
                let v43 : Types.EmitType<Types.std.string.String> = v42 |> unbox<Types.EmitType<Types.std.string.String>>
                let v44 : string = "run_id"
                let v45 : Types.std.string.String = Fable.Core.Rust.emitExpr v44 v12
                let v46 : Types.EmitType<Types.std.string.String> = v45 |> unbox<Types.EmitType<Types.std.string.String>>
                let v47 : Types.std.string.String = Fable.Core.Rust.emitExpr v38 v26
                let v48 : Types.EmitType<Types.std.string.String> = v47 |> unbox<Types.EmitType<Types.std.string.String>>
                let v49 : string = "log_level"
                let v50 : Types.std.string.String = Fable.Core.Rust.emitExpr v49 v12
                let v51 : Types.EmitType<Types.std.string.String> = v50 |> unbox<Types.EmitType<Types.std.string.String>>
                let v52 : string = "Debug"
                let v53 : Types.std.string.String = Fable.Core.Rust.emitExpr v52 v12
                let v54 : Types.EmitType<Types.std.string.String> = v53 |> unbox<Types.EmitType<Types.std.string.String>>
                let v55 : (Types.EmitType<Types.std.string.String> []) = [|v41; v43; v46; v48; v51; v54|]
                let v56 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v55 v21
                let v57 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v56 v23
                let v58 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v57 v23
                let v59 : Types.std.string.String = Fable.Core.Rust.emitExpr v58 v26
                let v60 : Types.EmitType<Types.std.string.String> = v59 |> unbox<Types.EmitType<Types.std.string.String>>
                let v61 : string = "> app ()"
                let v62 : Types.std.string.String = Fable.Core.Rust.emitExpr v61 v12
                let v63 : Types.EmitType<Types.std.string.String> = v62 |> unbox<Types.EmitType<Types.std.string.String>>
                let v64 : (Types.EmitType<Types.std.string.String> []) = [|v63|]
                let v65 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v64 v21
                let v66 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v65 v23
                let v67 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v66 v23
                let v68 : Types.std.string.String = Fable.Core.Rust.emitExpr v67 v26
                let v69 : Types.EmitType<Types.std.string.String> = v68 |> unbox<Types.EmitType<Types.std.string.String>>
                let v70 : string = "format!(\"{}\", $0)"
                let v71 : Types.std.string.String = Fable.Core.Rust.emitExpr v69 v70
                let v72 : string = (v71).ToString ()
                let v73 : string = "\"([^\"]+)\", \"([^\"]+)\""
                let v74 : string = $"r#\"{v73}\"#"
                let v75 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v74
                let v76 : string = "regex::RegexBuilder::new($0)"
                let v77 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v75 v76
                let v78 : string = "$0.build().unwrap()"
                let v79 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v77 v78
                let v80 : string = method2(v72)
                let v81 : string = "$0.as_str()"
                let v82 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v80 v81
                let v83 : string = method4()
                let v84 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v83 v81
                let v85 : string = "$0.replace_all(&$1, $2).to_string()"
                let v86 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v79, v82, v84) v85
                let v87 : string = "fable_library_rust::String_::fromStr($0)"
                let v88 : string = Fable.Core.Rust.emitExpr v86 v87
                let v89 : string = "\\[\"(.*?)\"\\]"
                let v90 : string = $"r#\"{v89}\"#"
                let v91 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v90
                let v92 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v91 v76
                let v93 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v92 v78
                let v94 : string = method2(v88)
                let v95 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v94 v81
                let v96 : string = method5()
                let v97 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v96 v81
                let v98 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v93, v95, v97) v85
                let v99 : string = Fable.Core.Rust.emitExpr v98 v87
                let v100 : string = ", "
                let v101 : string = $"r#\"{v100}\"#"
                let v102 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v101
                let v103 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v102 v76
                let v104 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v103 v78
                let v105 : string = method2(v99)
                let v106 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v105 v81
                let v107 : string = method6()
                let v108 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v107 v81
                let v109 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v104, v106, v108) v85
                let v110 : string = Fable.Core.Rust.emitExpr v109 v87
                let v111 : Types.std.string.String = Fable.Core.Rust.emitExpr v110 v12
                let v112 : Types.EmitType<Types.std.string.String> = v111 |> unbox<Types.EmitType<Types.std.string.String>>
                let v113 : Types.std.string.String = Fable.Core.Rust.emitExpr v28 v70
                let v114 : string = (v113).ToString ()
                let v115 : string = $"r#\"{v73}\"#"
                let v116 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v115
                let v117 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v116 v76
                let v118 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v117 v78
                let v119 : string = method2(v114)
                let v120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v119 v81
                let v121 : string = method4()
                let v122 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v121 v81
                let v123 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v118, v120, v122) v85
                let v124 : string = Fable.Core.Rust.emitExpr v123 v87
                let v125 : string = $"r#\"{v89}\"#"
                let v126 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v125
                let v127 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v126 v76
                let v128 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v127 v78
                let v129 : string = method2(v124)
                let v130 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v129 v81
                let v131 : string = method5()
                let v132 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v131 v81
                let v133 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v128, v130, v132) v85
                let v134 : string = Fable.Core.Rust.emitExpr v133 v87
                let v135 : string = $"r#\"{v100}\"#"
                let v136 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v135
                let v137 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v136 v76
                let v138 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v137 v78
                let v139 : string = method2(v134)
                let v140 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v139 v81
                let v141 : string = method6()
                let v142 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v141 v81
                let v143 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v138, v140, v142) v85
                let v144 : string = Fable.Core.Rust.emitExpr v143 v87
                let v145 : Types.std.string.String = Fable.Core.Rust.emitExpr v144 v12
                let v146 : Types.EmitType<Types.std.string.String> = v145 |> unbox<Types.EmitType<Types.std.string.String>>
                let v147 : Types.std.string.String = Fable.Core.Rust.emitExpr v60 v70
                let v148 : string = (v147).ToString ()
                let v149 : string = $"r#\"{v73}\"#"
                let v150 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v149
                let v151 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v150 v76
                let v152 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v151 v78
                let v153 : string = method2(v148)
                let v154 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v153 v81
                let v155 : string = method4()
                let v156 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v155 v81
                let v157 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v152, v154, v156) v85
                let v158 : string = Fable.Core.Rust.emitExpr v157 v87
                let v159 : string = $"r#\"{v89}\"#"
                let v160 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v159
                let v161 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v160 v76
                let v162 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v161 v78
                let v163 : string = method2(v158)
                let v164 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v163 v81
                let v165 : string = method5()
                let v166 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v165 v81
                let v167 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v162, v164, v166) v85
                let v168 : string = Fable.Core.Rust.emitExpr v167 v87
                let v169 : string = $"r#\"{v100}\"#"
                let v170 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v169
                let v171 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v170 v76
                let v172 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v171 v78
                let v173 : string = method2(v168)
                let v174 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v173 v81
                let v175 : string = method6()
                let v176 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v175 v81
                let v177 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v172, v174, v176) v85
                let v178 : string = Fable.Core.Rust.emitExpr v177 v87
                let v179 : Types.std.string.String = Fable.Core.Rust.emitExpr v178 v12
                let v180 : Types.EmitType<Types.std.string.String> = v179 |> unbox<Types.EmitType<Types.std.string.String>>
                let v181 : string = "cfg!(target_arch = \"wasm32\")"
                let v182 : bool = Fable.Core.Rust.emitExpr () v181
                let v185 : US0 =
                    if v182 then
                        US0_1
                    else
                        US0_0
                match v185 with
                | US0_1 -> (* Wasm32 *)
                    let v186 : string = (v112).ToString ()
                    let v187 : string = (v146).ToString ()
                    let v188 : string = (v180).ToString ()
                    let v189 : string = " %c"
                    let v190 : string = v186 + v189
                    let v191 : string = v190 + v187
                    let v192 : string = v191 + v189
                    let v193 : string = v192 + v188
                    let v194 : string = "($0).as_ref().to_string()"
                    let v195 : Types.std.string.String = Fable.Core.Rust.emitExpr v193 v194
                    let v196 : string = "387957"
                    let v197 : string = $"color: #{v196};"
                    let v198 : Types.std.string.String = Fable.Core.Rust.emitExpr v197 v194
                    let v199 : string = "color: #385779;"
                    let v200 : Types.std.string.String = Fable.Core.Rust.emitExpr v199 v194
                    let v201 : (Types.std.string.String []) = [|v195; v198; v200|]
                    let v202 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v201 v21
                    let v203 : obj = v202
                    let v204 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
                    let v205 : obj = Fable.Core.Rust.emitExpr v203 v204
                    let v206 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
                    Fable.Core.Rust.emitExpr v205 v206
                    ()
                | _ ->
                    let v207 : string = method7()
                    let v208 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v207 v81
                    let v209 : unativeint = unativeint 0
                    let v210 : unativeint = unativeint 2
                    let v211 : string = "&$0[$1..$2]"
                    let v212 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v208, v209, v210) v211
                    let v213 : string = Fable.Core.Rust.emitExpr v212 v87
                    let v214 : string = "u8::from_str_radix($0, 16).unwrap()"
                    let v215 : uint8 = Fable.Core.Rust.emitExpr v213 v214
                    let v216 : string = method7()
                    let v217 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v216 v81
                    let v218 : unativeint = unativeint 2
                    let v219 : unativeint = unativeint 4
                    let v220 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v217, v218, v219) v211
                    let v221 : string = Fable.Core.Rust.emitExpr v220 v87
                    let v222 : uint8 = Fable.Core.Rust.emitExpr v221 v214
                    let v223 : string = method7()
                    let v224 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v223 v81
                    let v225 : unativeint = unativeint 4
                    let v226 : unativeint = unativeint 6
                    let v227 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v224, v225, v226) v211
                    let v228 : string = Fable.Core.Rust.emitExpr v227 v87
                    let v229 : uint8 = Fable.Core.Rust.emitExpr v228 v214
                    let v230 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
                    let v231 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v146, v215, v222, v229) v230
                    let v232 : Types.std.string.String = Fable.Core.Rust.emitExpr v231 v70
                    let v233 : string = method8()
                    let v234 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v233 v81
                    let v235 : unativeint = unativeint 0
                    let v236 : unativeint = unativeint 2
                    let v237 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v234, v235, v236) v211
                    let v238 : string = Fable.Core.Rust.emitExpr v237 v87
                    let v239 : uint8 = Fable.Core.Rust.emitExpr v238 v214
                    let v240 : string = method8()
                    let v241 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v240 v81
                    let v242 : unativeint = unativeint 2
                    let v243 : unativeint = unativeint 4
                    let v244 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v241, v242, v243) v211
                    let v245 : string = Fable.Core.Rust.emitExpr v244 v87
                    let v246 : uint8 = Fable.Core.Rust.emitExpr v245 v214
                    let v247 : string = method8()
                    let v248 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v247 v81
                    let v249 : unativeint = unativeint 4
                    let v250 : unativeint = unativeint 6
                    let v251 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v248, v249, v250) v211
                    let v252 : string = Fable.Core.Rust.emitExpr v251 v87
                    let v253 : uint8 = Fable.Core.Rust.emitExpr v252 v214
                    let v254 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v180, v239, v246, v253) v230
                    let v255 : Types.std.string.String = Fable.Core.Rust.emitExpr v254 v70
                    let v256 : string = $"{v112} {v232} {v255}"
                    System.Console.WriteLine v256
                    ()
                struct (1, v3)
            else
                let v257 : bool = 0 = v2
                if v257 then
                    let v258 : UH1 = UH1_0(v4, v3)
                    struct (0, v258)
                else
                    let v259 : bool = 2 = v2
                    if v259 then
                        struct (0, v3)
                    else
                        let v260 : int32 = v2 + 1
                        struct (v260, v3)
        method14(v0, v5, v265, v266)
    | UH1_1 -> (* Nil *)
        struct (v2, v3)
and method15 (v0 : UH1, v1 : UH1) : UH1 =
    match v0 with
    | UH1_0(v2, v3) -> (* Cons *)
        let v4 : UH1 = UH1_0(v2, v1)
        method15(v3, v4)
    | UH1_1 -> (* Nil *)
        v1
and method16 (v0 : UH1, v1 : string) : string =
    match v0 with
    | UH1_0(v2, v3) -> (* Cons *)
        let v4 : string = v1 + v2
        method16(v3, v4)
    | UH1_1 -> (* Nil *)
        v1
and closure0 () () : int32 =
    let struct (v0 : string, v1 : string, v2 : string, v3 : bool) = method0()
    let v4 : string = "chrono::Utc::now()"
    let v5 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v6 : string = "($0).timestamp()"
    let v7 : int64 = Fable.Core.Rust.emitExpr v5 v6
    let v8 : string = "app1"
    let v9 : string = $"r#\"{v8}\"#"
    let v10 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v9
    let v11 : string = "clap::Command::new($0)"
    let v12 : string = ".propagate_version(true)"
    let v13 : string = v11 + v12
    let v14 : string = ".subcommand_required(false)"
    let v15 : string = v13 + v14
    let v16 : string = ".about(\"command about\")"
    let v17 : string = v15 + v16
    let v18 : string = ".arg_required_else_help(true)"
    let v19 : string = v17 + v18
    let v20 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr v10 v19
    let v21 : string = "PostFsxRsBuild"
    let v22 : string = $"r#\"{v21}\"#"
    let v23 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v22
    let v24 : string = v11 + v12
    let v25 : string = v24 + v14
    let v26 : string = v25 + v16
    let v27 : string = v26 + v18
    let v28 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr v23 v27
    let v29 : string = "rs-path"
    let v30 : string = $"r#\"{v29}\"#"
    let v31 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v30
    let v32 : string = "clap::Arg::new($0)"
    let v33 : Types.clap.builder.Arg = Fable.Core.Rust.emitExpr v31 v32
    let v34 : string = "$0.arg($1)"
    let v35 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr struct (v28, v33) v34
    let v36 : string = "$0.subcommand($1)"
    let v37 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr struct (v20, v35) v36
    let v38 : string = "SpiFsxBuild"
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = v11 + v12
    let v42 : string = v41 + v14
    let v43 : string = v42 + v16
    let v44 : string = v43 + v18
    let v45 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr v40 v44
    let v46 : string = "spi-path"
    let v47 : string = $"r#\"{v46}\"#"
    let v48 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v47
    let v49 : Types.clap.builder.Arg = Fable.Core.Rust.emitExpr v48 v32
    let v50 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr struct (v45, v49) v34
    let v51 : string = "fsx-path"
    let v52 : string = $"r#\"{v51}\"#"
    let v53 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v52
    let v54 : Types.clap.builder.Arg = Fable.Core.Rust.emitExpr v53 v32
    let v55 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr struct (v50, v54) v34
    let v56 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr struct (v37, v55) v36
    let v57 : string = "$0.get_matches()"
    let v58 : Types.Ref<Types.clap.parser.ArgMatches> = Fable.Core.Rust.emitExpr v56 v57
    let v59 : string = "$0.subcommand()"
    let v60 : Types.Ref<Option<struct (Types.Ref<Types.Str> * Types.Ref<Types.clap.parser.ArgMatches>)>> = Fable.Core.Rust.emitExpr v58 v59
    let v61 : string = "*(($0).as_ref()).unwrap()"
    let struct (v62 : Types.Ref<Types.Str>, v63 : Types.Ref<Types.clap.parser.ArgMatches>) = Fable.Core.Rust.emitExpr v60 v61
    let v64 : string = method1()
    let v65 : string = "$0.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v64 v65
    let v67 : string = "--" + v29 + "="
    let v68 : string = method2(v67)
    let v69 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v68 v65
    let v70 : string = "&($0).get_one::<String>($1).unwrap().replace($2, \"\")"
    let v71 : Types.Ref<Types.std.string.String> = Fable.Core.Rust.emitExpr struct (v63, v66, v69) v70
    let v72 : string = "std::path::PathBuf::from($0)"
    let v73 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v71 v72
    let v74 : string = "($0).canonicalize()"
    let v75 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v73 v74
    let v76 : string = "($0).as_ref().unwrap().to_path_buf()"
    let v77 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v75 v76
    let v78 : string = "rs_path_clean"
    let v79 : string = "($0).to_string()"
    let v80 : Types.std.string.String = Fable.Core.Rust.emitExpr v78 v79
    let v81 : Types.EmitType<Types.std.string.String> = v80 |> unbox<Types.EmitType<Types.std.string.String>>
    let v82 : string = "format!(\"{:?}\", $0)"
    let v83 : Types.std.string.String = Fable.Core.Rust.emitExpr v77 v82
    let v84 : Types.EmitType<Types.std.string.String> = v83 |> unbox<Types.EmitType<Types.std.string.String>>
    let v85 : (Types.EmitType<Types.std.string.String> []) = [|v81; v84|]
    let v86 : string = "core::ops::Deref::deref($0)"
    let v87 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v85 v86
    let v88 : string = "&***$0"
    let v89 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v87 v88
    let v90 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v89 v88
    let v91 : Types.std.string.String = Fable.Core.Rust.emitExpr v90 v82
    let v92 : Types.EmitType<Types.std.string.String> = v91 |> unbox<Types.EmitType<Types.std.string.String>>
    let v93 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v94 : int64 = Fable.Core.Rust.emitExpr v93 v6
    let v95 : int64 = v94 - v7
    let v96 : string = (v95).ToString ()
    let v97 : int32 = 6
    let v98 : string = method3(v97, v96)
    let v99 : string = "rand::random::<u8>()"
    let v100 : uint8 = Fable.Core.Rust.emitExpr () v99
    let v101 : string = "timestamp"
    let v102 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v79
    let v103 : Types.EmitType<Types.std.string.String> = v102 |> unbox<Types.EmitType<Types.std.string.String>>
    let v104 : Types.std.string.String = Fable.Core.Rust.emitExpr v98 v79
    let v105 : Types.EmitType<Types.std.string.String> = v104 |> unbox<Types.EmitType<Types.std.string.String>>
    let v106 : string = "run_id"
    let v107 : Types.std.string.String = Fable.Core.Rust.emitExpr v106 v79
    let v108 : Types.EmitType<Types.std.string.String> = v107 |> unbox<Types.EmitType<Types.std.string.String>>
    let v109 : Types.std.string.String = Fable.Core.Rust.emitExpr v100 v82
    let v110 : Types.EmitType<Types.std.string.String> = v109 |> unbox<Types.EmitType<Types.std.string.String>>
    let v111 : string = "log_level"
    let v112 : Types.std.string.String = Fable.Core.Rust.emitExpr v111 v79
    let v113 : Types.EmitType<Types.std.string.String> = v112 |> unbox<Types.EmitType<Types.std.string.String>>
    let v114 : string = "Debug"
    let v115 : Types.std.string.String = Fable.Core.Rust.emitExpr v114 v79
    let v116 : Types.EmitType<Types.std.string.String> = v115 |> unbox<Types.EmitType<Types.std.string.String>>
    let v117 : (Types.EmitType<Types.std.string.String> []) = [|v103; v105; v108; v110; v113; v116|]
    let v118 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v117 v86
    let v119 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v118 v88
    let v120 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v119 v88
    let v121 : Types.std.string.String = Fable.Core.Rust.emitExpr v120 v82
    let v122 : Types.EmitType<Types.std.string.String> = v121 |> unbox<Types.EmitType<Types.std.string.String>>
    let v123 : string = "> app ()"
    let v124 : Types.std.string.String = Fable.Core.Rust.emitExpr v123 v79
    let v125 : Types.EmitType<Types.std.string.String> = v124 |> unbox<Types.EmitType<Types.std.string.String>>
    let v126 : (Types.EmitType<Types.std.string.String> []) = [|v125|]
    let v127 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v126 v86
    let v128 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v127 v88
    let v129 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v128 v88
    let v130 : Types.std.string.String = Fable.Core.Rust.emitExpr v129 v82
    let v131 : Types.EmitType<Types.std.string.String> = v130 |> unbox<Types.EmitType<Types.std.string.String>>
    let v132 : string = "format!(\"{}\", $0)"
    let v133 : Types.std.string.String = Fable.Core.Rust.emitExpr v131 v132
    let v134 : string = (v133).ToString ()
    let v135 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v136 : string = $"r#\"{v135}\"#"
    let v137 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v136
    let v138 : string = "regex::RegexBuilder::new($0)"
    let v139 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v137 v138
    let v140 : string = "$0.build().unwrap()"
    let v141 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v139 v140
    let v142 : string = method2(v134)
    let v143 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v142 v65
    let v144 : string = method4()
    let v145 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v144 v65
    let v146 : string = "$0.replace_all(&$1, $2).to_string()"
    let v147 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v141, v143, v145) v146
    let v148 : string = "fable_library_rust::String_::fromStr($0)"
    let v149 : string = Fable.Core.Rust.emitExpr v147 v148
    let v150 : string = "\\[\"(.*?)\"\\]"
    let v151 : string = $"r#\"{v150}\"#"
    let v152 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v151
    let v153 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v152 v138
    let v154 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v153 v140
    let v155 : string = method2(v149)
    let v156 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v155 v65
    let v157 : string = method5()
    let v158 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v157 v65
    let v159 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v154, v156, v158) v146
    let v160 : string = Fable.Core.Rust.emitExpr v159 v148
    let v161 : string = ", "
    let v162 : string = $"r#\"{v161}\"#"
    let v163 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v162
    let v164 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v163 v138
    let v165 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v164 v140
    let v166 : string = method2(v160)
    let v167 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v166 v65
    let v168 : string = method6()
    let v169 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v168 v65
    let v170 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v165, v167, v169) v146
    let v171 : string = Fable.Core.Rust.emitExpr v170 v148
    let v172 : Types.std.string.String = Fable.Core.Rust.emitExpr v171 v79
    let v173 : Types.EmitType<Types.std.string.String> = v172 |> unbox<Types.EmitType<Types.std.string.String>>
    let v174 : Types.std.string.String = Fable.Core.Rust.emitExpr v92 v132
    let v175 : string = (v174).ToString ()
    let v176 : string = $"r#\"{v135}\"#"
    let v177 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v176
    let v178 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v177 v138
    let v179 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v178 v140
    let v180 : string = method2(v175)
    let v181 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v180 v65
    let v182 : string = method4()
    let v183 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v182 v65
    let v184 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v179, v181, v183) v146
    let v185 : string = Fable.Core.Rust.emitExpr v184 v148
    let v186 : string = $"r#\"{v150}\"#"
    let v187 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v186
    let v188 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v187 v138
    let v189 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v188 v140
    let v190 : string = method2(v185)
    let v191 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v190 v65
    let v192 : string = method5()
    let v193 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v192 v65
    let v194 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v189, v191, v193) v146
    let v195 : string = Fable.Core.Rust.emitExpr v194 v148
    let v196 : string = $"r#\"{v161}\"#"
    let v197 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v196
    let v198 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v197 v138
    let v199 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v198 v140
    let v200 : string = method2(v195)
    let v201 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v200 v65
    let v202 : string = method6()
    let v203 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v202 v65
    let v204 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v199, v201, v203) v146
    let v205 : string = Fable.Core.Rust.emitExpr v204 v148
    let v206 : Types.std.string.String = Fable.Core.Rust.emitExpr v205 v79
    let v207 : Types.EmitType<Types.std.string.String> = v206 |> unbox<Types.EmitType<Types.std.string.String>>
    let v208 : Types.std.string.String = Fable.Core.Rust.emitExpr v122 v132
    let v209 : string = (v208).ToString ()
    let v210 : string = $"r#\"{v135}\"#"
    let v211 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v210
    let v212 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v211 v138
    let v213 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v212 v140
    let v214 : string = method2(v209)
    let v215 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v214 v65
    let v216 : string = method4()
    let v217 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v216 v65
    let v218 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v213, v215, v217) v146
    let v219 : string = Fable.Core.Rust.emitExpr v218 v148
    let v220 : string = $"r#\"{v150}\"#"
    let v221 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v220
    let v222 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v221 v138
    let v223 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v222 v140
    let v224 : string = method2(v219)
    let v225 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v224 v65
    let v226 : string = method5()
    let v227 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v226 v65
    let v228 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v223, v225, v227) v146
    let v229 : string = Fable.Core.Rust.emitExpr v228 v148
    let v230 : string = $"r#\"{v161}\"#"
    let v231 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v230
    let v232 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v231 v138
    let v233 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v232 v140
    let v234 : string = method2(v229)
    let v235 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v234 v65
    let v236 : string = method6()
    let v237 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v236 v65
    let v238 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v233, v235, v237) v146
    let v239 : string = Fable.Core.Rust.emitExpr v238 v148
    let v240 : Types.std.string.String = Fable.Core.Rust.emitExpr v239 v79
    let v241 : Types.EmitType<Types.std.string.String> = v240 |> unbox<Types.EmitType<Types.std.string.String>>
    let v242 : string = "cfg!(target_arch = \"wasm32\")"
    let v243 : bool = Fable.Core.Rust.emitExpr () v242
    let v246 : US0 =
        if v243 then
            US0_1
        else
            US0_0
    match v246 with
    | US0_1 -> (* Wasm32 *)
        let v247 : string = (v173).ToString ()
        let v248 : string = (v207).ToString ()
        let v249 : string = (v241).ToString ()
        let v250 : string = " %c"
        let v251 : string = v247 + v250
        let v252 : string = v251 + v248
        let v253 : string = v252 + v250
        let v254 : string = v253 + v249
        let v255 : string = "($0).as_ref().to_string()"
        let v256 : Types.std.string.String = Fable.Core.Rust.emitExpr v254 v255
        let v257 : string = "387957"
        let v258 : string = $"color: #{v257};"
        let v259 : Types.std.string.String = Fable.Core.Rust.emitExpr v258 v255
        let v260 : string = "color: #385779;"
        let v261 : Types.std.string.String = Fable.Core.Rust.emitExpr v260 v255
        let v262 : (Types.std.string.String []) = [|v256; v259; v261|]
        let v263 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v262 v86
        let v264 : obj = v263
        let v265 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v266 : obj = Fable.Core.Rust.emitExpr v264 v265
        let v267 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v266 v267
        ()
    | _ ->
        let v268 : string = method7()
        let v269 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v268 v65
        let v270 : unativeint = unativeint 0
        let v271 : unativeint = unativeint 2
        let v272 : string = "&$0[$1..$2]"
        let v273 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v269, v270, v271) v272
        let v274 : string = Fable.Core.Rust.emitExpr v273 v148
        let v275 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v276 : uint8 = Fable.Core.Rust.emitExpr v274 v275
        let v277 : string = method7()
        let v278 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v277 v65
        let v279 : unativeint = unativeint 2
        let v280 : unativeint = unativeint 4
        let v281 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v278, v279, v280) v272
        let v282 : string = Fable.Core.Rust.emitExpr v281 v148
        let v283 : uint8 = Fable.Core.Rust.emitExpr v282 v275
        let v284 : string = method7()
        let v285 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v284 v65
        let v286 : unativeint = unativeint 4
        let v287 : unativeint = unativeint 6
        let v288 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v285, v286, v287) v272
        let v289 : string = Fable.Core.Rust.emitExpr v288 v148
        let v290 : uint8 = Fable.Core.Rust.emitExpr v289 v275
        let v291 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v292 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v207, v276, v283, v290) v291
        let v293 : Types.std.string.String = Fable.Core.Rust.emitExpr v292 v132
        let v294 : string = method8()
        let v295 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v294 v65
        let v296 : unativeint = unativeint 0
        let v297 : unativeint = unativeint 2
        let v298 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v295, v296, v297) v272
        let v299 : string = Fable.Core.Rust.emitExpr v298 v148
        let v300 : uint8 = Fable.Core.Rust.emitExpr v299 v275
        let v301 : string = method8()
        let v302 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v301 v65
        let v303 : unativeint = unativeint 2
        let v304 : unativeint = unativeint 4
        let v305 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v302, v303, v304) v272
        let v306 : string = Fable.Core.Rust.emitExpr v305 v148
        let v307 : uint8 = Fable.Core.Rust.emitExpr v306 v275
        let v308 : string = method8()
        let v309 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v308 v65
        let v310 : unativeint = unativeint 4
        let v311 : unativeint = unativeint 6
        let v312 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v309, v310, v311) v272
        let v313 : string = Fable.Core.Rust.emitExpr v312 v148
        let v314 : uint8 = Fable.Core.Rust.emitExpr v313 v275
        let v315 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v241, v300, v307, v314) v291
        let v316 : Types.std.string.String = Fable.Core.Rust.emitExpr v315 v132
        let v317 : string = $"{v173} {v293} {v316}"
        System.Console.WriteLine v317
        ()
    let struct (v318 : string, v319 : string, v320 : string, v321 : bool) = method0()
    let v322 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v323 : int64 = Fable.Core.Rust.emitExpr v322 v6
    let v324 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v77 v74
    let v325 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v324 v76
    let v326 : string = "path_clean"
    let v327 : Types.std.string.String = Fable.Core.Rust.emitExpr v326 v79
    let v328 : Types.EmitType<Types.std.string.String> = v327 |> unbox<Types.EmitType<Types.std.string.String>>
    let v329 : string = "fable_library_rust::String_::fromStr(&format!(\"{}\", $0.display()))"
    let v330 : string = Fable.Core.Rust.emitExpr v325 v329
    let v331 : Types.std.string.String = Fable.Core.Rust.emitExpr v330 v79
    let v332 : Types.EmitType<Types.std.string.String> = v331 |> unbox<Types.EmitType<Types.std.string.String>>
    let v333 : (Types.EmitType<Types.std.string.String> []) = [|v328; v332|]
    let v334 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v333 v86
    let v335 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v334 v88
    let v336 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v335 v88
    let v337 : Types.std.string.String = Fable.Core.Rust.emitExpr v336 v82
    let v338 : Types.EmitType<Types.std.string.String> = v337 |> unbox<Types.EmitType<Types.std.string.String>>
    let v339 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v340 : int64 = Fable.Core.Rust.emitExpr v339 v6
    let v341 : int64 = v340 - v323
    let v342 : string = (v341).ToString ()
    let v343 : int32 = 6
    let v344 : string = method3(v343, v342)
    let v345 : uint8 = Fable.Core.Rust.emitExpr () v99
    let v346 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v79
    let v347 : Types.EmitType<Types.std.string.String> = v346 |> unbox<Types.EmitType<Types.std.string.String>>
    let v348 : Types.std.string.String = Fable.Core.Rust.emitExpr v344 v79
    let v349 : Types.EmitType<Types.std.string.String> = v348 |> unbox<Types.EmitType<Types.std.string.String>>
    let v350 : Types.std.string.String = Fable.Core.Rust.emitExpr v106 v79
    let v351 : Types.EmitType<Types.std.string.String> = v350 |> unbox<Types.EmitType<Types.std.string.String>>
    let v352 : Types.std.string.String = Fable.Core.Rust.emitExpr v345 v82
    let v353 : Types.EmitType<Types.std.string.String> = v352 |> unbox<Types.EmitType<Types.std.string.String>>
    let v354 : Types.std.string.String = Fable.Core.Rust.emitExpr v111 v79
    let v355 : Types.EmitType<Types.std.string.String> = v354 |> unbox<Types.EmitType<Types.std.string.String>>
    let v356 : Types.std.string.String = Fable.Core.Rust.emitExpr v114 v79
    let v357 : Types.EmitType<Types.std.string.String> = v356 |> unbox<Types.EmitType<Types.std.string.String>>
    let v358 : (Types.EmitType<Types.std.string.String> []) = [|v347; v349; v351; v353; v355; v357|]
    let v359 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v358 v86
    let v360 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v359 v88
    let v361 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v360 v88
    let v362 : Types.std.string.String = Fable.Core.Rust.emitExpr v361 v82
    let v363 : Types.EmitType<Types.std.string.String> = v362 |> unbox<Types.EmitType<Types.std.string.String>>
    let v364 : string = "> read_lines ()"
    let v365 : Types.std.string.String = Fable.Core.Rust.emitExpr v364 v79
    let v366 : Types.EmitType<Types.std.string.String> = v365 |> unbox<Types.EmitType<Types.std.string.String>>
    let v367 : (Types.EmitType<Types.std.string.String> []) = [|v366|]
    let v368 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v367 v86
    let v369 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v368 v88
    let v370 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v369 v88
    let v371 : Types.std.string.String = Fable.Core.Rust.emitExpr v370 v82
    let v372 : Types.EmitType<Types.std.string.String> = v371 |> unbox<Types.EmitType<Types.std.string.String>>
    let v373 : Types.std.string.String = Fable.Core.Rust.emitExpr v372 v132
    let v374 : string = (v373).ToString ()
    let v375 : string = $"r#\"{v135}\"#"
    let v376 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v375
    let v377 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v376 v138
    let v378 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v377 v140
    let v379 : string = method2(v374)
    let v380 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v379 v65
    let v381 : string = method4()
    let v382 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v381 v65
    let v383 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v378, v380, v382) v146
    let v384 : string = Fable.Core.Rust.emitExpr v383 v148
    let v385 : string = $"r#\"{v150}\"#"
    let v386 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v385
    let v387 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v386 v138
    let v388 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v387 v140
    let v389 : string = method2(v384)
    let v390 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v389 v65
    let v391 : string = method5()
    let v392 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v391 v65
    let v393 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v388, v390, v392) v146
    let v394 : string = Fable.Core.Rust.emitExpr v393 v148
    let v395 : string = $"r#\"{v161}\"#"
    let v396 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v395
    let v397 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v396 v138
    let v398 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v397 v140
    let v399 : string = method2(v394)
    let v400 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v399 v65
    let v401 : string = method6()
    let v402 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v401 v65
    let v403 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v398, v400, v402) v146
    let v404 : string = Fable.Core.Rust.emitExpr v403 v148
    let v405 : Types.std.string.String = Fable.Core.Rust.emitExpr v404 v79
    let v406 : Types.EmitType<Types.std.string.String> = v405 |> unbox<Types.EmitType<Types.std.string.String>>
    let v407 : Types.std.string.String = Fable.Core.Rust.emitExpr v338 v132
    let v408 : string = (v407).ToString ()
    let v409 : string = $"r#\"{v135}\"#"
    let v410 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v409
    let v411 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v410 v138
    let v412 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v411 v140
    let v413 : string = method2(v408)
    let v414 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v413 v65
    let v415 : string = method4()
    let v416 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v415 v65
    let v417 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v412, v414, v416) v146
    let v418 : string = Fable.Core.Rust.emitExpr v417 v148
    let v419 : string = $"r#\"{v150}\"#"
    let v420 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v419
    let v421 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v420 v138
    let v422 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v421 v140
    let v423 : string = method2(v418)
    let v424 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v423 v65
    let v425 : string = method5()
    let v426 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v425 v65
    let v427 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v422, v424, v426) v146
    let v428 : string = Fable.Core.Rust.emitExpr v427 v148
    let v429 : string = $"r#\"{v161}\"#"
    let v430 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v429
    let v431 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v430 v138
    let v432 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v431 v140
    let v433 : string = method2(v428)
    let v434 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v433 v65
    let v435 : string = method6()
    let v436 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v435 v65
    let v437 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v432, v434, v436) v146
    let v438 : string = Fable.Core.Rust.emitExpr v437 v148
    let v439 : Types.std.string.String = Fable.Core.Rust.emitExpr v438 v79
    let v440 : Types.EmitType<Types.std.string.String> = v439 |> unbox<Types.EmitType<Types.std.string.String>>
    let v441 : Types.std.string.String = Fable.Core.Rust.emitExpr v363 v132
    let v442 : string = (v441).ToString ()
    let v443 : string = $"r#\"{v135}\"#"
    let v444 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v443
    let v445 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v444 v138
    let v446 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v445 v140
    let v447 : string = method2(v442)
    let v448 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v447 v65
    let v449 : string = method4()
    let v450 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v449 v65
    let v451 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v446, v448, v450) v146
    let v452 : string = Fable.Core.Rust.emitExpr v451 v148
    let v453 : string = $"r#\"{v150}\"#"
    let v454 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v453
    let v455 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v454 v138
    let v456 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v455 v140
    let v457 : string = method2(v452)
    let v458 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v457 v65
    let v459 : string = method5()
    let v460 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v459 v65
    let v461 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v456, v458, v460) v146
    let v462 : string = Fable.Core.Rust.emitExpr v461 v148
    let v463 : string = $"r#\"{v161}\"#"
    let v464 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v463
    let v465 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v464 v138
    let v466 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v465 v140
    let v467 : string = method2(v462)
    let v468 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v467 v65
    let v469 : string = method6()
    let v470 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v469 v65
    let v471 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v466, v468, v470) v146
    let v472 : string = Fable.Core.Rust.emitExpr v471 v148
    let v473 : Types.std.string.String = Fable.Core.Rust.emitExpr v472 v79
    let v474 : Types.EmitType<Types.std.string.String> = v473 |> unbox<Types.EmitType<Types.std.string.String>>
    let v475 : bool = Fable.Core.Rust.emitExpr () v242
    let v478 : US0 =
        if v475 then
            US0_1
        else
            US0_0
    match v478 with
    | US0_1 -> (* Wasm32 *)
        let v479 : string = (v406).ToString ()
        let v480 : string = (v440).ToString ()
        let v481 : string = (v474).ToString ()
        let v482 : string = " %c"
        let v483 : string = v479 + v482
        let v484 : string = v483 + v480
        let v485 : string = v484 + v482
        let v486 : string = v485 + v481
        let v487 : string = "($0).as_ref().to_string()"
        let v488 : Types.std.string.String = Fable.Core.Rust.emitExpr v486 v487
        let v489 : string = "881749"
        let v490 : string = $"color: #{v489};"
        let v491 : Types.std.string.String = Fable.Core.Rust.emitExpr v490 v487
        let v492 : string = "color: #385779;"
        let v493 : Types.std.string.String = Fable.Core.Rust.emitExpr v492 v487
        let v494 : (Types.std.string.String []) = [|v488; v491; v493|]
        let v495 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v494 v86
        let v496 : obj = v495
        let v497 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v498 : obj = Fable.Core.Rust.emitExpr v496 v497
        let v499 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v498 v499
        ()
    | _ ->
        let v500 : string = method9()
        let v501 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v500 v65
        let v502 : unativeint = unativeint 0
        let v503 : unativeint = unativeint 2
        let v504 : string = "&$0[$1..$2]"
        let v505 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v501, v502, v503) v504
        let v506 : string = Fable.Core.Rust.emitExpr v505 v148
        let v507 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v508 : uint8 = Fable.Core.Rust.emitExpr v506 v507
        let v509 : string = method9()
        let v510 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v509 v65
        let v511 : unativeint = unativeint 2
        let v512 : unativeint = unativeint 4
        let v513 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v510, v511, v512) v504
        let v514 : string = Fable.Core.Rust.emitExpr v513 v148
        let v515 : uint8 = Fable.Core.Rust.emitExpr v514 v507
        let v516 : string = method9()
        let v517 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v516 v65
        let v518 : unativeint = unativeint 4
        let v519 : unativeint = unativeint 6
        let v520 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v517, v518, v519) v504
        let v521 : string = Fable.Core.Rust.emitExpr v520 v148
        let v522 : uint8 = Fable.Core.Rust.emitExpr v521 v507
        let v523 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v524 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v440, v508, v515, v522) v523
        let v525 : Types.std.string.String = Fable.Core.Rust.emitExpr v524 v132
        let v526 : string = method8()
        let v527 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v526 v65
        let v528 : unativeint = unativeint 0
        let v529 : unativeint = unativeint 2
        let v530 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v527, v528, v529) v504
        let v531 : string = Fable.Core.Rust.emitExpr v530 v148
        let v532 : uint8 = Fable.Core.Rust.emitExpr v531 v507
        let v533 : string = method8()
        let v534 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v533 v65
        let v535 : unativeint = unativeint 2
        let v536 : unativeint = unativeint 4
        let v537 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v534, v535, v536) v504
        let v538 : string = Fable.Core.Rust.emitExpr v537 v148
        let v539 : uint8 = Fable.Core.Rust.emitExpr v538 v507
        let v540 : string = method8()
        let v541 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v540 v65
        let v542 : unativeint = unativeint 4
        let v543 : unativeint = unativeint 6
        let v544 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v541, v542, v543) v504
        let v545 : string = Fable.Core.Rust.emitExpr v544 v148
        let v546 : uint8 = Fable.Core.Rust.emitExpr v545 v507
        let v547 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v474, v532, v539, v546) v523
        let v548 : Types.std.string.String = Fable.Core.Rust.emitExpr v547 v132
        let v549 : string = $"{v406} {v525} {v548}"
        System.Console.WriteLine v549
        ()
    let v550 : string = "std::fs::File::open($0)"
    let v551 : Result<Types.std.fs.File, Types.std.io.Error> = Fable.Core.Rust.emitExpr v325 v550
    let v552 : string = "$0.unwrap()"
    let v553 : Types.Ref<Types.std.fs.File> = Fable.Core.Rust.emitExpr v551 v552
    let v554 : string = "std::cell::RefCell::new(linereader::LineReader::new($0))"
    let v555 : Types.std.cell.RefCell<Types.linereader.LineReader<Types.Ref<Types.std.fs.File>>> = Fable.Core.Rust.emitExpr v553 v554
    let v556 : string = "reader"
    let v557 : Types.std.string.String = Fable.Core.Rust.emitExpr v556 v79
    let v558 : Types.EmitType<Types.std.string.String> = v557 |> unbox<Types.EmitType<Types.std.string.String>>
    let v559 : Types.std.string.String = Fable.Core.Rust.emitExpr v555 v82
    let v560 : Types.EmitType<Types.std.string.String> = v559 |> unbox<Types.EmitType<Types.std.string.String>>
    let v561 : (Types.EmitType<Types.std.string.String> []) = [|v558; v560|]
    let v562 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v561 v86
    let v563 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v562 v88
    let v564 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v563 v88
    let v565 : Types.std.string.String = Fable.Core.Rust.emitExpr v564 v82
    let v566 : Types.EmitType<Types.std.string.String> = v565 |> unbox<Types.EmitType<Types.std.string.String>>
    let v567 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v568 : int64 = Fable.Core.Rust.emitExpr v567 v6
    let v569 : int64 = v568 - v323
    let v570 : string = (v569).ToString ()
    let v571 : int32 = 6
    let v572 : string = method3(v571, v570)
    let v573 : uint8 = Fable.Core.Rust.emitExpr () v99
    let v574 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v79
    let v575 : Types.EmitType<Types.std.string.String> = v574 |> unbox<Types.EmitType<Types.std.string.String>>
    let v576 : Types.std.string.String = Fable.Core.Rust.emitExpr v572 v79
    let v577 : Types.EmitType<Types.std.string.String> = v576 |> unbox<Types.EmitType<Types.std.string.String>>
    let v578 : Types.std.string.String = Fable.Core.Rust.emitExpr v106 v79
    let v579 : Types.EmitType<Types.std.string.String> = v578 |> unbox<Types.EmitType<Types.std.string.String>>
    let v580 : Types.std.string.String = Fable.Core.Rust.emitExpr v573 v82
    let v581 : Types.EmitType<Types.std.string.String> = v580 |> unbox<Types.EmitType<Types.std.string.String>>
    let v582 : Types.std.string.String = Fable.Core.Rust.emitExpr v111 v79
    let v583 : Types.EmitType<Types.std.string.String> = v582 |> unbox<Types.EmitType<Types.std.string.String>>
    let v584 : Types.std.string.String = Fable.Core.Rust.emitExpr v114 v79
    let v585 : Types.EmitType<Types.std.string.String> = v584 |> unbox<Types.EmitType<Types.std.string.String>>
    let v586 : (Types.EmitType<Types.std.string.String> []) = [|v575; v577; v579; v581; v583; v585|]
    let v587 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v586 v86
    let v588 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v587 v88
    let v589 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v588 v88
    let v590 : Types.std.string.String = Fable.Core.Rust.emitExpr v589 v82
    let v591 : Types.EmitType<Types.std.string.String> = v590 |> unbox<Types.EmitType<Types.std.string.String>>
    let v592 : Types.std.string.String = Fable.Core.Rust.emitExpr v364 v79
    let v593 : Types.EmitType<Types.std.string.String> = v592 |> unbox<Types.EmitType<Types.std.string.String>>
    let v594 : (Types.EmitType<Types.std.string.String> []) = [|v593|]
    let v595 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v594 v86
    let v596 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v595 v88
    let v597 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v596 v88
    let v598 : Types.std.string.String = Fable.Core.Rust.emitExpr v597 v82
    let v599 : Types.EmitType<Types.std.string.String> = v598 |> unbox<Types.EmitType<Types.std.string.String>>
    let v600 : Types.std.string.String = Fable.Core.Rust.emitExpr v599 v132
    let v601 : string = (v600).ToString ()
    let v602 : string = $"r#\"{v135}\"#"
    let v603 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v602
    let v604 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v603 v138
    let v605 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v604 v140
    let v606 : string = method2(v601)
    let v607 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v606 v65
    let v608 : string = method4()
    let v609 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v608 v65
    let v610 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v605, v607, v609) v146
    let v611 : string = Fable.Core.Rust.emitExpr v610 v148
    let v612 : string = $"r#\"{v150}\"#"
    let v613 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v612
    let v614 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v613 v138
    let v615 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v614 v140
    let v616 : string = method2(v611)
    let v617 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v616 v65
    let v618 : string = method5()
    let v619 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v618 v65
    let v620 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v615, v617, v619) v146
    let v621 : string = Fable.Core.Rust.emitExpr v620 v148
    let v622 : string = $"r#\"{v161}\"#"
    let v623 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v622
    let v624 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v623 v138
    let v625 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v624 v140
    let v626 : string = method2(v621)
    let v627 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v626 v65
    let v628 : string = method6()
    let v629 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v628 v65
    let v630 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v625, v627, v629) v146
    let v631 : string = Fable.Core.Rust.emitExpr v630 v148
    let v632 : Types.std.string.String = Fable.Core.Rust.emitExpr v631 v79
    let v633 : Types.EmitType<Types.std.string.String> = v632 |> unbox<Types.EmitType<Types.std.string.String>>
    let v634 : Types.std.string.String = Fable.Core.Rust.emitExpr v566 v132
    let v635 : string = (v634).ToString ()
    let v636 : string = $"r#\"{v135}\"#"
    let v637 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v636
    let v638 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v637 v138
    let v639 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v638 v140
    let v640 : string = method2(v635)
    let v641 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v640 v65
    let v642 : string = method4()
    let v643 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v642 v65
    let v644 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v639, v641, v643) v146
    let v645 : string = Fable.Core.Rust.emitExpr v644 v148
    let v646 : string = $"r#\"{v150}\"#"
    let v647 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v646
    let v648 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v647 v138
    let v649 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v648 v140
    let v650 : string = method2(v645)
    let v651 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v650 v65
    let v652 : string = method5()
    let v653 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v652 v65
    let v654 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v649, v651, v653) v146
    let v655 : string = Fable.Core.Rust.emitExpr v654 v148
    let v656 : string = $"r#\"{v161}\"#"
    let v657 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v656
    let v658 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v657 v138
    let v659 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v658 v140
    let v660 : string = method2(v655)
    let v661 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v660 v65
    let v662 : string = method6()
    let v663 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v662 v65
    let v664 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v659, v661, v663) v146
    let v665 : string = Fable.Core.Rust.emitExpr v664 v148
    let v666 : Types.std.string.String = Fable.Core.Rust.emitExpr v665 v79
    let v667 : Types.EmitType<Types.std.string.String> = v666 |> unbox<Types.EmitType<Types.std.string.String>>
    let v668 : Types.std.string.String = Fable.Core.Rust.emitExpr v591 v132
    let v669 : string = (v668).ToString ()
    let v670 : string = $"r#\"{v135}\"#"
    let v671 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v670
    let v672 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v671 v138
    let v673 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v672 v140
    let v674 : string = method2(v669)
    let v675 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v674 v65
    let v676 : string = method4()
    let v677 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v676 v65
    let v678 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v673, v675, v677) v146
    let v679 : string = Fable.Core.Rust.emitExpr v678 v148
    let v680 : string = $"r#\"{v150}\"#"
    let v681 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v680
    let v682 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v681 v138
    let v683 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v682 v140
    let v684 : string = method2(v679)
    let v685 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v684 v65
    let v686 : string = method5()
    let v687 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v686 v65
    let v688 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v683, v685, v687) v146
    let v689 : string = Fable.Core.Rust.emitExpr v688 v148
    let v690 : string = $"r#\"{v161}\"#"
    let v691 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v690
    let v692 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v691 v138
    let v693 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v692 v140
    let v694 : string = method2(v689)
    let v695 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v694 v65
    let v696 : string = method6()
    let v697 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v696 v65
    let v698 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v693, v695, v697) v146
    let v699 : string = Fable.Core.Rust.emitExpr v698 v148
    let v700 : Types.std.string.String = Fable.Core.Rust.emitExpr v699 v79
    let v701 : Types.EmitType<Types.std.string.String> = v700 |> unbox<Types.EmitType<Types.std.string.String>>
    let v702 : bool = Fable.Core.Rust.emitExpr () v242
    let v705 : US0 =
        if v702 then
            US0_1
        else
            US0_0
    match v705 with
    | US0_1 -> (* Wasm32 *)
        let v706 : string = (v633).ToString ()
        let v707 : string = (v667).ToString ()
        let v708 : string = (v701).ToString ()
        let v709 : string = " %c"
        let v710 : string = v706 + v709
        let v711 : string = v710 + v707
        let v712 : string = v711 + v709
        let v713 : string = v712 + v708
        let v714 : string = "($0).as_ref().to_string()"
        let v715 : Types.std.string.String = Fable.Core.Rust.emitExpr v713 v714
        let v716 : string = "881749"
        let v717 : string = $"color: #{v716};"
        let v718 : Types.std.string.String = Fable.Core.Rust.emitExpr v717 v714
        let v719 : string = "color: #385779;"
        let v720 : Types.std.string.String = Fable.Core.Rust.emitExpr v719 v714
        let v721 : (Types.std.string.String []) = [|v715; v718; v720|]
        let v722 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v721 v86
        let v723 : obj = v722
        let v724 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v725 : obj = Fable.Core.Rust.emitExpr v723 v724
        let v726 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v725 v726
        ()
    | _ ->
        let v727 : string = method9()
        let v728 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v727 v65
        let v729 : unativeint = unativeint 0
        let v730 : unativeint = unativeint 2
        let v731 : string = "&$0[$1..$2]"
        let v732 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v728, v729, v730) v731
        let v733 : string = Fable.Core.Rust.emitExpr v732 v148
        let v734 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v735 : uint8 = Fable.Core.Rust.emitExpr v733 v734
        let v736 : string = method9()
        let v737 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v736 v65
        let v738 : unativeint = unativeint 2
        let v739 : unativeint = unativeint 4
        let v740 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v737, v738, v739) v731
        let v741 : string = Fable.Core.Rust.emitExpr v740 v148
        let v742 : uint8 = Fable.Core.Rust.emitExpr v741 v734
        let v743 : string = method9()
        let v744 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v743 v65
        let v745 : unativeint = unativeint 4
        let v746 : unativeint = unativeint 6
        let v747 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v744, v745, v746) v731
        let v748 : string = Fable.Core.Rust.emitExpr v747 v148
        let v749 : uint8 = Fable.Core.Rust.emitExpr v748 v734
        let v750 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v751 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v667, v735, v742, v749) v750
        let v752 : Types.std.string.String = Fable.Core.Rust.emitExpr v751 v132
        let v753 : string = method8()
        let v754 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v753 v65
        let v755 : unativeint = unativeint 0
        let v756 : unativeint = unativeint 2
        let v757 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v754, v755, v756) v731
        let v758 : string = Fable.Core.Rust.emitExpr v757 v148
        let v759 : uint8 = Fable.Core.Rust.emitExpr v758 v734
        let v760 : string = method8()
        let v761 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v760 v65
        let v762 : unativeint = unativeint 2
        let v763 : unativeint = unativeint 4
        let v764 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v761, v762, v763) v731
        let v765 : string = Fable.Core.Rust.emitExpr v764 v148
        let v766 : uint8 = Fable.Core.Rust.emitExpr v765 v734
        let v767 : string = method8()
        let v768 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v767 v65
        let v769 : unativeint = unativeint 4
        let v770 : unativeint = unativeint 6
        let v771 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v768, v769, v770) v731
        let v772 : string = Fable.Core.Rust.emitExpr v771 v148
        let v773 : uint8 = Fable.Core.Rust.emitExpr v772 v734
        let v774 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v701, v759, v766, v773) v750
        let v775 : Types.std.string.String = Fable.Core.Rust.emitExpr v774 v132
        let v776 : string = $"{v633} {v752} {v775}"
        System.Console.WriteLine v776
        ()
    let v777 : UH0 = UH0_1
    let v778 : Mut0 = {l0 = v777} : Mut0
    let v779 : (Types.Vec<uint8> -> Result<bool, Types.std.io.Error>) = method10(v323, v778)
    let v780 : string = "($0).borrow_mut().for_each(move |x| $1(x.to_vec()))"
    let v781 : Result<unit, Types.std.io.Error> = Fable.Core.Rust.emitExpr struct (v555, v779) v780
    Fable.Core.Rust.emitExpr v781 v61
    let v782 : UH0 = v778.l0
    let v783 : UH0 = UH0_1
    let v784 : UH0 = method11(v782, v783)
    let v785 : UH1 = UH1_1
    let v786 : UH1 = method12(v784, v785)
    let v787 : string = "lines len"
    let v788 : Types.std.string.String = Fable.Core.Rust.emitExpr v787 v79
    let v789 : Types.EmitType<Types.std.string.String> = v788 |> unbox<Types.EmitType<Types.std.string.String>>
    let v790 : int32 = 0
    let v791 : int32 = method13(v786, v790)
    let v792 : Types.std.string.String = Fable.Core.Rust.emitExpr v791 v82
    let v793 : Types.EmitType<Types.std.string.String> = v792 |> unbox<Types.EmitType<Types.std.string.String>>
    let v794 : (Types.EmitType<Types.std.string.String> []) = [|v789; v793|]
    let v795 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v794 v86
    let v796 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v795 v88
    let v797 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v796 v88
    let v798 : Types.std.string.String = Fable.Core.Rust.emitExpr v797 v82
    let v799 : Types.EmitType<Types.std.string.String> = v798 |> unbox<Types.EmitType<Types.std.string.String>>
    let v800 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v801 : int64 = Fable.Core.Rust.emitExpr v800 v6
    let v802 : int64 = v801 - v323
    let v803 : string = (v802).ToString ()
    let v804 : int32 = 6
    let v805 : string = method3(v804, v803)
    let v806 : uint8 = Fable.Core.Rust.emitExpr () v99
    let v807 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v79
    let v808 : Types.EmitType<Types.std.string.String> = v807 |> unbox<Types.EmitType<Types.std.string.String>>
    let v809 : Types.std.string.String = Fable.Core.Rust.emitExpr v805 v79
    let v810 : Types.EmitType<Types.std.string.String> = v809 |> unbox<Types.EmitType<Types.std.string.String>>
    let v811 : Types.std.string.String = Fable.Core.Rust.emitExpr v106 v79
    let v812 : Types.EmitType<Types.std.string.String> = v811 |> unbox<Types.EmitType<Types.std.string.String>>
    let v813 : Types.std.string.String = Fable.Core.Rust.emitExpr v806 v82
    let v814 : Types.EmitType<Types.std.string.String> = v813 |> unbox<Types.EmitType<Types.std.string.String>>
    let v815 : Types.std.string.String = Fable.Core.Rust.emitExpr v111 v79
    let v816 : Types.EmitType<Types.std.string.String> = v815 |> unbox<Types.EmitType<Types.std.string.String>>
    let v817 : Types.std.string.String = Fable.Core.Rust.emitExpr v114 v79
    let v818 : Types.EmitType<Types.std.string.String> = v817 |> unbox<Types.EmitType<Types.std.string.String>>
    let v819 : (Types.EmitType<Types.std.string.String> []) = [|v808; v810; v812; v814; v816; v818|]
    let v820 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v819 v86
    let v821 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v820 v88
    let v822 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v821 v88
    let v823 : Types.std.string.String = Fable.Core.Rust.emitExpr v822 v82
    let v824 : Types.EmitType<Types.std.string.String> = v823 |> unbox<Types.EmitType<Types.std.string.String>>
    let v825 : Types.std.string.String = Fable.Core.Rust.emitExpr v364 v79
    let v826 : Types.EmitType<Types.std.string.String> = v825 |> unbox<Types.EmitType<Types.std.string.String>>
    let v827 : (Types.EmitType<Types.std.string.String> []) = [|v826|]
    let v828 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v827 v86
    let v829 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v828 v88
    let v830 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v829 v88
    let v831 : Types.std.string.String = Fable.Core.Rust.emitExpr v830 v82
    let v832 : Types.EmitType<Types.std.string.String> = v831 |> unbox<Types.EmitType<Types.std.string.String>>
    let v833 : Types.std.string.String = Fable.Core.Rust.emitExpr v832 v132
    let v834 : string = (v833).ToString ()
    let v835 : string = $"r#\"{v135}\"#"
    let v836 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v835
    let v837 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v836 v138
    let v838 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v837 v140
    let v839 : string = method2(v834)
    let v840 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v839 v65
    let v841 : string = method4()
    let v842 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v841 v65
    let v843 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v838, v840, v842) v146
    let v844 : string = Fable.Core.Rust.emitExpr v843 v148
    let v845 : string = $"r#\"{v150}\"#"
    let v846 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v845
    let v847 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v846 v138
    let v848 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v847 v140
    let v849 : string = method2(v844)
    let v850 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v849 v65
    let v851 : string = method5()
    let v852 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v851 v65
    let v853 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v848, v850, v852) v146
    let v854 : string = Fable.Core.Rust.emitExpr v853 v148
    let v855 : string = $"r#\"{v161}\"#"
    let v856 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v855
    let v857 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v856 v138
    let v858 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v857 v140
    let v859 : string = method2(v854)
    let v860 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v859 v65
    let v861 : string = method6()
    let v862 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v861 v65
    let v863 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v858, v860, v862) v146
    let v864 : string = Fable.Core.Rust.emitExpr v863 v148
    let v865 : Types.std.string.String = Fable.Core.Rust.emitExpr v864 v79
    let v866 : Types.EmitType<Types.std.string.String> = v865 |> unbox<Types.EmitType<Types.std.string.String>>
    let v867 : Types.std.string.String = Fable.Core.Rust.emitExpr v799 v132
    let v868 : string = (v867).ToString ()
    let v869 : string = $"r#\"{v135}\"#"
    let v870 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v869
    let v871 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v870 v138
    let v872 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v871 v140
    let v873 : string = method2(v868)
    let v874 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v873 v65
    let v875 : string = method4()
    let v876 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v875 v65
    let v877 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v872, v874, v876) v146
    let v878 : string = Fable.Core.Rust.emitExpr v877 v148
    let v879 : string = $"r#\"{v150}\"#"
    let v880 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v879
    let v881 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v880 v138
    let v882 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v881 v140
    let v883 : string = method2(v878)
    let v884 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v883 v65
    let v885 : string = method5()
    let v886 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v885 v65
    let v887 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v882, v884, v886) v146
    let v888 : string = Fable.Core.Rust.emitExpr v887 v148
    let v889 : string = $"r#\"{v161}\"#"
    let v890 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v889
    let v891 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v890 v138
    let v892 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v891 v140
    let v893 : string = method2(v888)
    let v894 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v893 v65
    let v895 : string = method6()
    let v896 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v895 v65
    let v897 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v892, v894, v896) v146
    let v898 : string = Fable.Core.Rust.emitExpr v897 v148
    let v899 : Types.std.string.String = Fable.Core.Rust.emitExpr v898 v79
    let v900 : Types.EmitType<Types.std.string.String> = v899 |> unbox<Types.EmitType<Types.std.string.String>>
    let v901 : Types.std.string.String = Fable.Core.Rust.emitExpr v824 v132
    let v902 : string = (v901).ToString ()
    let v903 : string = $"r#\"{v135}\"#"
    let v904 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v903
    let v905 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v904 v138
    let v906 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v905 v140
    let v907 : string = method2(v902)
    let v908 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v907 v65
    let v909 : string = method4()
    let v910 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v909 v65
    let v911 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v906, v908, v910) v146
    let v912 : string = Fable.Core.Rust.emitExpr v911 v148
    let v913 : string = $"r#\"{v150}\"#"
    let v914 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v913
    let v915 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v914 v138
    let v916 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v915 v140
    let v917 : string = method2(v912)
    let v918 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v917 v65
    let v919 : string = method5()
    let v920 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v919 v65
    let v921 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v916, v918, v920) v146
    let v922 : string = Fable.Core.Rust.emitExpr v921 v148
    let v923 : string = $"r#\"{v161}\"#"
    let v924 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v923
    let v925 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v924 v138
    let v926 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v925 v140
    let v927 : string = method2(v922)
    let v928 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v927 v65
    let v929 : string = method6()
    let v930 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v929 v65
    let v931 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v926, v928, v930) v146
    let v932 : string = Fable.Core.Rust.emitExpr v931 v148
    let v933 : Types.std.string.String = Fable.Core.Rust.emitExpr v932 v79
    let v934 : Types.EmitType<Types.std.string.String> = v933 |> unbox<Types.EmitType<Types.std.string.String>>
    let v935 : bool = Fable.Core.Rust.emitExpr () v242
    let v938 : US0 =
        if v935 then
            US0_1
        else
            US0_0
    match v938 with
    | US0_1 -> (* Wasm32 *)
        let v939 : string = (v866).ToString ()
        let v940 : string = (v900).ToString ()
        let v941 : string = (v934).ToString ()
        let v942 : string = " %c"
        let v943 : string = v939 + v942
        let v944 : string = v943 + v940
        let v945 : string = v944 + v942
        let v946 : string = v945 + v941
        let v947 : string = "($0).as_ref().to_string()"
        let v948 : Types.std.string.String = Fable.Core.Rust.emitExpr v946 v947
        let v949 : string = "881749"
        let v950 : string = $"color: #{v949};"
        let v951 : Types.std.string.String = Fable.Core.Rust.emitExpr v950 v947
        let v952 : string = "color: #385779;"
        let v953 : Types.std.string.String = Fable.Core.Rust.emitExpr v952 v947
        let v954 : (Types.std.string.String []) = [|v948; v951; v953|]
        let v955 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v954 v86
        let v956 : obj = v955
        let v957 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v958 : obj = Fable.Core.Rust.emitExpr v956 v957
        let v959 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v958 v959
        ()
    | _ ->
        let v960 : string = method9()
        let v961 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v960 v65
        let v962 : unativeint = unativeint 0
        let v963 : unativeint = unativeint 2
        let v964 : string = "&$0[$1..$2]"
        let v965 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v961, v962, v963) v964
        let v966 : string = Fable.Core.Rust.emitExpr v965 v148
        let v967 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v968 : uint8 = Fable.Core.Rust.emitExpr v966 v967
        let v969 : string = method9()
        let v970 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v969 v65
        let v971 : unativeint = unativeint 2
        let v972 : unativeint = unativeint 4
        let v973 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v970, v971, v972) v964
        let v974 : string = Fable.Core.Rust.emitExpr v973 v148
        let v975 : uint8 = Fable.Core.Rust.emitExpr v974 v967
        let v976 : string = method9()
        let v977 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v976 v65
        let v978 : unativeint = unativeint 4
        let v979 : unativeint = unativeint 6
        let v980 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v977, v978, v979) v964
        let v981 : string = Fable.Core.Rust.emitExpr v980 v148
        let v982 : uint8 = Fable.Core.Rust.emitExpr v981 v967
        let v983 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v984 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v900, v968, v975, v982) v983
        let v985 : Types.std.string.String = Fable.Core.Rust.emitExpr v984 v132
        let v986 : string = method8()
        let v987 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v986 v65
        let v988 : unativeint = unativeint 0
        let v989 : unativeint = unativeint 2
        let v990 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v987, v988, v989) v964
        let v991 : string = Fable.Core.Rust.emitExpr v990 v148
        let v992 : uint8 = Fable.Core.Rust.emitExpr v991 v967
        let v993 : string = method8()
        let v994 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v993 v65
        let v995 : unativeint = unativeint 2
        let v996 : unativeint = unativeint 4
        let v997 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v994, v995, v996) v964
        let v998 : string = Fable.Core.Rust.emitExpr v997 v148
        let v999 : uint8 = Fable.Core.Rust.emitExpr v998 v967
        let v1000 : string = method8()
        let v1001 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1000 v65
        let v1002 : unativeint = unativeint 4
        let v1003 : unativeint = unativeint 6
        let v1004 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1001, v1002, v1003) v964
        let v1005 : string = Fable.Core.Rust.emitExpr v1004 v148
        let v1006 : uint8 = Fable.Core.Rust.emitExpr v1005 v967
        let v1007 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v934, v992, v999, v1006) v983
        let v1008 : Types.std.string.String = Fable.Core.Rust.emitExpr v1007 v132
        let v1009 : string = $"{v866} {v985} {v1008}"
        System.Console.WriteLine v1009
        ()
    let v1010 : int32 = 0
    let v1011 : UH1 = UH1_1
    let struct (v1012 : int32, v1013 : UH1) = method14(v7, v786, v1010, v1011)
    let v1014 : UH1 = UH1_1
    let v1015 : UH1 = method15(v1013, v1014)
    let v1016 : string = ""
    let v1017 : string = method16(v1015, v1016)
    let v1018 : string = "text len"
    let v1019 : Types.std.string.String = Fable.Core.Rust.emitExpr v1018 v79
    let v1020 : Types.EmitType<Types.std.string.String> = v1019 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1021 : string = "($0).len().try_into().unwrap()"
    let v1022 : int32 = Fable.Core.Rust.emitExpr v1017 v1021
    let v1023 : Types.std.string.String = Fable.Core.Rust.emitExpr v1022 v82
    let v1024 : Types.EmitType<Types.std.string.String> = v1023 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1025 : (Types.EmitType<Types.std.string.String> []) = [|v1020; v1024|]
    let v1026 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1025 v86
    let v1027 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1026 v88
    let v1028 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1027 v88
    let v1029 : Types.std.string.String = Fable.Core.Rust.emitExpr v1028 v82
    let v1030 : Types.EmitType<Types.std.string.String> = v1029 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1031 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v1032 : int64 = Fable.Core.Rust.emitExpr v1031 v6
    let v1033 : int64 = v1032 - v7
    let v1034 : string = (v1033).ToString ()
    let v1035 : int32 = 6
    let v1036 : string = method3(v1035, v1034)
    let v1037 : uint8 = Fable.Core.Rust.emitExpr () v99
    let v1038 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v79
    let v1039 : Types.EmitType<Types.std.string.String> = v1038 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1040 : Types.std.string.String = Fable.Core.Rust.emitExpr v1036 v79
    let v1041 : Types.EmitType<Types.std.string.String> = v1040 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1042 : Types.std.string.String = Fable.Core.Rust.emitExpr v106 v79
    let v1043 : Types.EmitType<Types.std.string.String> = v1042 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1044 : Types.std.string.String = Fable.Core.Rust.emitExpr v1037 v82
    let v1045 : Types.EmitType<Types.std.string.String> = v1044 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1046 : Types.std.string.String = Fable.Core.Rust.emitExpr v111 v79
    let v1047 : Types.EmitType<Types.std.string.String> = v1046 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1048 : Types.std.string.String = Fable.Core.Rust.emitExpr v114 v79
    let v1049 : Types.EmitType<Types.std.string.String> = v1048 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1050 : (Types.EmitType<Types.std.string.String> []) = [|v1039; v1041; v1043; v1045; v1047; v1049|]
    let v1051 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1050 v86
    let v1052 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1051 v88
    let v1053 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1052 v88
    let v1054 : Types.std.string.String = Fable.Core.Rust.emitExpr v1053 v82
    let v1055 : Types.EmitType<Types.std.string.String> = v1054 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1056 : Types.std.string.String = Fable.Core.Rust.emitExpr v123 v79
    let v1057 : Types.EmitType<Types.std.string.String> = v1056 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1058 : (Types.EmitType<Types.std.string.String> []) = [|v1057|]
    let v1059 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1058 v86
    let v1060 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1059 v88
    let v1061 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1060 v88
    let v1062 : Types.std.string.String = Fable.Core.Rust.emitExpr v1061 v82
    let v1063 : Types.EmitType<Types.std.string.String> = v1062 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1064 : Types.std.string.String = Fable.Core.Rust.emitExpr v1063 v132
    let v1065 : string = (v1064).ToString ()
    let v1066 : string = $"r#\"{v135}\"#"
    let v1067 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1066
    let v1068 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1067 v138
    let v1069 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1068 v140
    let v1070 : string = method2(v1065)
    let v1071 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1070 v65
    let v1072 : string = method4()
    let v1073 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1072 v65
    let v1074 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1069, v1071, v1073) v146
    let v1075 : string = Fable.Core.Rust.emitExpr v1074 v148
    let v1076 : string = $"r#\"{v150}\"#"
    let v1077 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1076
    let v1078 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1077 v138
    let v1079 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1078 v140
    let v1080 : string = method2(v1075)
    let v1081 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1080 v65
    let v1082 : string = method5()
    let v1083 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1082 v65
    let v1084 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1079, v1081, v1083) v146
    let v1085 : string = Fable.Core.Rust.emitExpr v1084 v148
    let v1086 : string = $"r#\"{v161}\"#"
    let v1087 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1086
    let v1088 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1087 v138
    let v1089 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1088 v140
    let v1090 : string = method2(v1085)
    let v1091 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1090 v65
    let v1092 : string = method6()
    let v1093 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1092 v65
    let v1094 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1089, v1091, v1093) v146
    let v1095 : string = Fable.Core.Rust.emitExpr v1094 v148
    let v1096 : Types.std.string.String = Fable.Core.Rust.emitExpr v1095 v79
    let v1097 : Types.EmitType<Types.std.string.String> = v1096 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1098 : Types.std.string.String = Fable.Core.Rust.emitExpr v1030 v132
    let v1099 : string = (v1098).ToString ()
    let v1100 : string = $"r#\"{v135}\"#"
    let v1101 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1100
    let v1102 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1101 v138
    let v1103 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1102 v140
    let v1104 : string = method2(v1099)
    let v1105 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1104 v65
    let v1106 : string = method4()
    let v1107 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1106 v65
    let v1108 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1103, v1105, v1107) v146
    let v1109 : string = Fable.Core.Rust.emitExpr v1108 v148
    let v1110 : string = $"r#\"{v150}\"#"
    let v1111 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1110
    let v1112 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1111 v138
    let v1113 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1112 v140
    let v1114 : string = method2(v1109)
    let v1115 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1114 v65
    let v1116 : string = method5()
    let v1117 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1116 v65
    let v1118 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1113, v1115, v1117) v146
    let v1119 : string = Fable.Core.Rust.emitExpr v1118 v148
    let v1120 : string = $"r#\"{v161}\"#"
    let v1121 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1120
    let v1122 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1121 v138
    let v1123 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1122 v140
    let v1124 : string = method2(v1119)
    let v1125 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1124 v65
    let v1126 : string = method6()
    let v1127 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1126 v65
    let v1128 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1123, v1125, v1127) v146
    let v1129 : string = Fable.Core.Rust.emitExpr v1128 v148
    let v1130 : Types.std.string.String = Fable.Core.Rust.emitExpr v1129 v79
    let v1131 : Types.EmitType<Types.std.string.String> = v1130 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1132 : Types.std.string.String = Fable.Core.Rust.emitExpr v1055 v132
    let v1133 : string = (v1132).ToString ()
    let v1134 : string = $"r#\"{v135}\"#"
    let v1135 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1134
    let v1136 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1135 v138
    let v1137 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1136 v140
    let v1138 : string = method2(v1133)
    let v1139 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1138 v65
    let v1140 : string = method4()
    let v1141 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1140 v65
    let v1142 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1137, v1139, v1141) v146
    let v1143 : string = Fable.Core.Rust.emitExpr v1142 v148
    let v1144 : string = $"r#\"{v150}\"#"
    let v1145 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1144
    let v1146 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1145 v138
    let v1147 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1146 v140
    let v1148 : string = method2(v1143)
    let v1149 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1148 v65
    let v1150 : string = method5()
    let v1151 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1150 v65
    let v1152 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1147, v1149, v1151) v146
    let v1153 : string = Fable.Core.Rust.emitExpr v1152 v148
    let v1154 : string = $"r#\"{v161}\"#"
    let v1155 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1154
    let v1156 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1155 v138
    let v1157 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1156 v140
    let v1158 : string = method2(v1153)
    let v1159 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1158 v65
    let v1160 : string = method6()
    let v1161 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1160 v65
    let v1162 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1157, v1159, v1161) v146
    let v1163 : string = Fable.Core.Rust.emitExpr v1162 v148
    let v1164 : Types.std.string.String = Fable.Core.Rust.emitExpr v1163 v79
    let v1165 : Types.EmitType<Types.std.string.String> = v1164 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1166 : bool = Fable.Core.Rust.emitExpr () v242
    let v1169 : US0 =
        if v1166 then
            US0_1
        else
            US0_0
    match v1169 with
    | US0_1 -> (* Wasm32 *)
        let v1170 : string = (v1097).ToString ()
        let v1171 : string = (v1131).ToString ()
        let v1172 : string = (v1165).ToString ()
        let v1173 : string = " %c"
        let v1174 : string = v1170 + v1173
        let v1175 : string = v1174 + v1171
        let v1176 : string = v1175 + v1173
        let v1177 : string = v1176 + v1172
        let v1178 : string = "($0).as_ref().to_string()"
        let v1179 : Types.std.string.String = Fable.Core.Rust.emitExpr v1177 v1178
        let v1180 : string = "387957"
        let v1181 : string = $"color: #{v1180};"
        let v1182 : Types.std.string.String = Fable.Core.Rust.emitExpr v1181 v1178
        let v1183 : string = "color: #385779;"
        let v1184 : Types.std.string.String = Fable.Core.Rust.emitExpr v1183 v1178
        let v1185 : (Types.std.string.String []) = [|v1179; v1182; v1184|]
        let v1186 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v1185 v86
        let v1187 : obj = v1186
        let v1188 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v1189 : obj = Fable.Core.Rust.emitExpr v1187 v1188
        let v1190 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v1189 v1190
        ()
    | _ ->
        let v1191 : string = method7()
        let v1192 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1191 v65
        let v1193 : unativeint = unativeint 0
        let v1194 : unativeint = unativeint 2
        let v1195 : string = "&$0[$1..$2]"
        let v1196 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1192, v1193, v1194) v1195
        let v1197 : string = Fable.Core.Rust.emitExpr v1196 v148
        let v1198 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v1199 : uint8 = Fable.Core.Rust.emitExpr v1197 v1198
        let v1200 : string = method7()
        let v1201 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1200 v65
        let v1202 : unativeint = unativeint 2
        let v1203 : unativeint = unativeint 4
        let v1204 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1201, v1202, v1203) v1195
        let v1205 : string = Fable.Core.Rust.emitExpr v1204 v148
        let v1206 : uint8 = Fable.Core.Rust.emitExpr v1205 v1198
        let v1207 : string = method7()
        let v1208 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1207 v65
        let v1209 : unativeint = unativeint 4
        let v1210 : unativeint = unativeint 6
        let v1211 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1208, v1209, v1210) v1195
        let v1212 : string = Fable.Core.Rust.emitExpr v1211 v148
        let v1213 : uint8 = Fable.Core.Rust.emitExpr v1212 v1198
        let v1214 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v1215 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1131, v1199, v1206, v1213) v1214
        let v1216 : Types.std.string.String = Fable.Core.Rust.emitExpr v1215 v132
        let v1217 : string = method8()
        let v1218 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1217 v65
        let v1219 : unativeint = unativeint 0
        let v1220 : unativeint = unativeint 2
        let v1221 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1218, v1219, v1220) v1195
        let v1222 : string = Fable.Core.Rust.emitExpr v1221 v148
        let v1223 : uint8 = Fable.Core.Rust.emitExpr v1222 v1198
        let v1224 : string = method8()
        let v1225 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1224 v65
        let v1226 : unativeint = unativeint 2
        let v1227 : unativeint = unativeint 4
        let v1228 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1225, v1226, v1227) v1195
        let v1229 : string = Fable.Core.Rust.emitExpr v1228 v148
        let v1230 : uint8 = Fable.Core.Rust.emitExpr v1229 v1198
        let v1231 : string = method8()
        let v1232 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1231 v65
        let v1233 : unativeint = unativeint 4
        let v1234 : unativeint = unativeint 6
        let v1235 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1232, v1233, v1234) v1195
        let v1236 : string = Fable.Core.Rust.emitExpr v1235 v148
        let v1237 : uint8 = Fable.Core.Rust.emitExpr v1236 v1198
        let v1238 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1165, v1223, v1230, v1237) v1214
        let v1239 : Types.std.string.String = Fable.Core.Rust.emitExpr v1238 v132
        let v1240 : string = $"{v1097} {v1216} {v1239}"
        System.Console.WriteLine v1240
        ()
    let v1241 : string = "std::fs::write($0, $1.as_str())"
    let v1242 : Result<unit, Types.std.io.Error> = Fable.Core.Rust.emitExpr struct (v77, v1017) v1241
    Fable.Core.Rust.emitExpr v1242 v61
    let v1243 : string = "> fs_write rs_path_clean text; ok"
    let v1244 : Types.std.string.String = Fable.Core.Rust.emitExpr v1243 v79
    let v1245 : Types.EmitType<Types.std.string.String> = v1244 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1246 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v1247 : int64 = Fable.Core.Rust.emitExpr v1246 v6
    let v1248 : int64 = v1247 - v7
    let v1249 : string = (v1248).ToString ()
    let v1250 : int32 = 6
    let v1251 : string = method3(v1250, v1249)
    let v1252 : uint8 = Fable.Core.Rust.emitExpr () v99
    let v1253 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v79
    let v1254 : Types.EmitType<Types.std.string.String> = v1253 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1255 : Types.std.string.String = Fable.Core.Rust.emitExpr v1251 v79
    let v1256 : Types.EmitType<Types.std.string.String> = v1255 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1257 : Types.std.string.String = Fable.Core.Rust.emitExpr v106 v79
    let v1258 : Types.EmitType<Types.std.string.String> = v1257 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1259 : Types.std.string.String = Fable.Core.Rust.emitExpr v1252 v82
    let v1260 : Types.EmitType<Types.std.string.String> = v1259 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1261 : Types.std.string.String = Fable.Core.Rust.emitExpr v111 v79
    let v1262 : Types.EmitType<Types.std.string.String> = v1261 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1263 : Types.std.string.String = Fable.Core.Rust.emitExpr v114 v79
    let v1264 : Types.EmitType<Types.std.string.String> = v1263 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1265 : (Types.EmitType<Types.std.string.String> []) = [|v1254; v1256; v1258; v1260; v1262; v1264|]
    let v1266 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1265 v86
    let v1267 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1266 v88
    let v1268 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1267 v88
    let v1269 : Types.std.string.String = Fable.Core.Rust.emitExpr v1268 v82
    let v1270 : Types.EmitType<Types.std.string.String> = v1269 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1271 : Types.std.string.String = Fable.Core.Rust.emitExpr v123 v79
    let v1272 : Types.EmitType<Types.std.string.String> = v1271 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1273 : (Types.EmitType<Types.std.string.String> []) = [|v1272|]
    let v1274 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1273 v86
    let v1275 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1274 v88
    let v1276 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1275 v88
    let v1277 : Types.std.string.String = Fable.Core.Rust.emitExpr v1276 v82
    let v1278 : Types.EmitType<Types.std.string.String> = v1277 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1279 : Types.std.string.String = Fable.Core.Rust.emitExpr v1278 v132
    let v1280 : string = (v1279).ToString ()
    let v1281 : string = $"r#\"{v135}\"#"
    let v1282 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1281
    let v1283 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1282 v138
    let v1284 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1283 v140
    let v1285 : string = method2(v1280)
    let v1286 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1285 v65
    let v1287 : string = method4()
    let v1288 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1287 v65
    let v1289 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1284, v1286, v1288) v146
    let v1290 : string = Fable.Core.Rust.emitExpr v1289 v148
    let v1291 : string = $"r#\"{v150}\"#"
    let v1292 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1291
    let v1293 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1292 v138
    let v1294 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1293 v140
    let v1295 : string = method2(v1290)
    let v1296 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1295 v65
    let v1297 : string = method5()
    let v1298 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1297 v65
    let v1299 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1294, v1296, v1298) v146
    let v1300 : string = Fable.Core.Rust.emitExpr v1299 v148
    let v1301 : string = $"r#\"{v161}\"#"
    let v1302 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1301
    let v1303 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1302 v138
    let v1304 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1303 v140
    let v1305 : string = method2(v1300)
    let v1306 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1305 v65
    let v1307 : string = method6()
    let v1308 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1307 v65
    let v1309 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1304, v1306, v1308) v146
    let v1310 : string = Fable.Core.Rust.emitExpr v1309 v148
    let v1311 : Types.std.string.String = Fable.Core.Rust.emitExpr v1310 v79
    let v1312 : Types.EmitType<Types.std.string.String> = v1311 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1313 : Types.std.string.String = Fable.Core.Rust.emitExpr v1245 v132
    let v1314 : string = (v1313).ToString ()
    let v1315 : string = $"r#\"{v135}\"#"
    let v1316 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1315
    let v1317 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1316 v138
    let v1318 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1317 v140
    let v1319 : string = method2(v1314)
    let v1320 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1319 v65
    let v1321 : string = method4()
    let v1322 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1321 v65
    let v1323 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1318, v1320, v1322) v146
    let v1324 : string = Fable.Core.Rust.emitExpr v1323 v148
    let v1325 : string = $"r#\"{v150}\"#"
    let v1326 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1325
    let v1327 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1326 v138
    let v1328 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1327 v140
    let v1329 : string = method2(v1324)
    let v1330 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1329 v65
    let v1331 : string = method5()
    let v1332 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1331 v65
    let v1333 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1328, v1330, v1332) v146
    let v1334 : string = Fable.Core.Rust.emitExpr v1333 v148
    let v1335 : string = $"r#\"{v161}\"#"
    let v1336 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1335
    let v1337 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1336 v138
    let v1338 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1337 v140
    let v1339 : string = method2(v1334)
    let v1340 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1339 v65
    let v1341 : string = method6()
    let v1342 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1341 v65
    let v1343 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1338, v1340, v1342) v146
    let v1344 : string = Fable.Core.Rust.emitExpr v1343 v148
    let v1345 : Types.std.string.String = Fable.Core.Rust.emitExpr v1344 v79
    let v1346 : Types.EmitType<Types.std.string.String> = v1345 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1347 : Types.std.string.String = Fable.Core.Rust.emitExpr v1270 v132
    let v1348 : string = (v1347).ToString ()
    let v1349 : string = $"r#\"{v135}\"#"
    let v1350 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1349
    let v1351 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1350 v138
    let v1352 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1351 v140
    let v1353 : string = method2(v1348)
    let v1354 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1353 v65
    let v1355 : string = method4()
    let v1356 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1355 v65
    let v1357 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1352, v1354, v1356) v146
    let v1358 : string = Fable.Core.Rust.emitExpr v1357 v148
    let v1359 : string = $"r#\"{v150}\"#"
    let v1360 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1359
    let v1361 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1360 v138
    let v1362 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1361 v140
    let v1363 : string = method2(v1358)
    let v1364 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1363 v65
    let v1365 : string = method5()
    let v1366 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1365 v65
    let v1367 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1362, v1364, v1366) v146
    let v1368 : string = Fable.Core.Rust.emitExpr v1367 v148
    let v1369 : string = $"r#\"{v161}\"#"
    let v1370 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1369
    let v1371 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1370 v138
    let v1372 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1371 v140
    let v1373 : string = method2(v1368)
    let v1374 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1373 v65
    let v1375 : string = method6()
    let v1376 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1375 v65
    let v1377 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1372, v1374, v1376) v146
    let v1378 : string = Fable.Core.Rust.emitExpr v1377 v148
    let v1379 : Types.std.string.String = Fable.Core.Rust.emitExpr v1378 v79
    let v1380 : Types.EmitType<Types.std.string.String> = v1379 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1381 : bool = Fable.Core.Rust.emitExpr () v242
    let v1384 : US0 =
        if v1381 then
            US0_1
        else
            US0_0
    match v1384 with
    | US0_1 -> (* Wasm32 *)
        let v1385 : string = (v1312).ToString ()
        let v1386 : string = (v1346).ToString ()
        let v1387 : string = (v1380).ToString ()
        let v1388 : string = " %c"
        let v1389 : string = v1385 + v1388
        let v1390 : string = v1389 + v1386
        let v1391 : string = v1390 + v1388
        let v1392 : string = v1391 + v1387
        let v1393 : string = "($0).as_ref().to_string()"
        let v1394 : Types.std.string.String = Fable.Core.Rust.emitExpr v1392 v1393
        let v1395 : string = "387957"
        let v1396 : string = $"color: #{v1395};"
        let v1397 : Types.std.string.String = Fable.Core.Rust.emitExpr v1396 v1393
        let v1398 : string = "color: #385779;"
        let v1399 : Types.std.string.String = Fable.Core.Rust.emitExpr v1398 v1393
        let v1400 : (Types.std.string.String []) = [|v1394; v1397; v1399|]
        let v1401 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v1400 v86
        let v1402 : obj = v1401
        let v1403 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v1404 : obj = Fable.Core.Rust.emitExpr v1402 v1403
        let v1405 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v1404 v1405
        ()
    | _ ->
        let v1406 : string = method7()
        let v1407 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1406 v65
        let v1408 : unativeint = unativeint 0
        let v1409 : unativeint = unativeint 2
        let v1410 : string = "&$0[$1..$2]"
        let v1411 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1407, v1408, v1409) v1410
        let v1412 : string = Fable.Core.Rust.emitExpr v1411 v148
        let v1413 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v1414 : uint8 = Fable.Core.Rust.emitExpr v1412 v1413
        let v1415 : string = method7()
        let v1416 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1415 v65
        let v1417 : unativeint = unativeint 2
        let v1418 : unativeint = unativeint 4
        let v1419 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1416, v1417, v1418) v1410
        let v1420 : string = Fable.Core.Rust.emitExpr v1419 v148
        let v1421 : uint8 = Fable.Core.Rust.emitExpr v1420 v1413
        let v1422 : string = method7()
        let v1423 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1422 v65
        let v1424 : unativeint = unativeint 4
        let v1425 : unativeint = unativeint 6
        let v1426 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1423, v1424, v1425) v1410
        let v1427 : string = Fable.Core.Rust.emitExpr v1426 v148
        let v1428 : uint8 = Fable.Core.Rust.emitExpr v1427 v1413
        let v1429 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v1430 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1346, v1414, v1421, v1428) v1429
        let v1431 : Types.std.string.String = Fable.Core.Rust.emitExpr v1430 v132
        let v1432 : string = method8()
        let v1433 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1432 v65
        let v1434 : unativeint = unativeint 0
        let v1435 : unativeint = unativeint 2
        let v1436 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1433, v1434, v1435) v1410
        let v1437 : string = Fable.Core.Rust.emitExpr v1436 v148
        let v1438 : uint8 = Fable.Core.Rust.emitExpr v1437 v1413
        let v1439 : string = method8()
        let v1440 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1439 v65
        let v1441 : unativeint = unativeint 2
        let v1442 : unativeint = unativeint 4
        let v1443 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1440, v1441, v1442) v1410
        let v1444 : string = Fable.Core.Rust.emitExpr v1443 v148
        let v1445 : uint8 = Fable.Core.Rust.emitExpr v1444 v1413
        let v1446 : string = method8()
        let v1447 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1446 v65
        let v1448 : unativeint = unativeint 4
        let v1449 : unativeint = unativeint 6
        let v1450 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1447, v1448, v1449) v1410
        let v1451 : string = Fable.Core.Rust.emitExpr v1450 v148
        let v1452 : uint8 = Fable.Core.Rust.emitExpr v1451 v1413
        let v1453 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1380, v1438, v1445, v1452) v1429
        let v1454 : Types.std.string.String = Fable.Core.Rust.emitExpr v1453 v132
        let v1455 : string = $"{v1312} {v1431} {v1454}"
        System.Console.WriteLine v1455
        ()
    0
let v0 : (unit -> int32) = closure0()
()
