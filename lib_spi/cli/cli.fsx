type UH0 =
    | UH0_0 of Types.std.string.String * UH0
    | UH0_1
and Mut0 = {mutable l0 : UH0}
and UH1 =
    | UH1_0 of string * UH1
    | UH1_1
let rec method0 () : struct (string * string * string * bool) =
    let v0 : string = ""
    let v1 : obj = v0
    struct (v0, v0, v0, true)
and method1 () : string =
    let v0 : string = "rs-path"
    v0
and method2 (v0 : string) : string =
    v0
and method3 (v0 : int32, v1 : string) : string =
    let v2 : int32 = String.length v1
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : string = $"0{v1}"
        method3(v0, v4)
    else
        v1
and method4 () : string =
    let v0 : string = "$1=$2"
    v0
and method5 () : string =
    let v0 : string = "[$1]"
    v0
and method6 () : string =
    let v0 : string = " "
    v0
and method7 () : string =
    let v0 : string = "666666"
    v0
and method8 () : string =
    let v0 : string = "222222"
    v0
and closure1 (v0 : int64, v1 : Mut0) (v2 : Types.Vec<uint8>) : Result<bool, Types.std.io.Error> =
    let v3 : string = "line len"
    let v4 : string = "($0).to_string()"
    let v5 : Types.std.string.String = Fable.Core.Rust.emitExpr v3 v4
    let v6 : Types.EmitType<Types.std.string.String> = v5 |> unbox<Types.EmitType<Types.std.string.String>>
    let v7 : string = "($0).len().try_into().unwrap()"
    let v8 : int32 = Fable.Core.Rust.emitExpr v2 v7
    let v9 : string = "format!(\"{:?}\", $0)"
    let v10 : Types.std.string.String = Fable.Core.Rust.emitExpr v8 v9
    let v11 : Types.EmitType<Types.std.string.String> = v10 |> unbox<Types.EmitType<Types.std.string.String>>
    let v12 : (Types.EmitType<Types.std.string.String> []) = [|v6; v11|]
    let v13 : string = "core::ops::Deref::deref($0)"
    let v14 : obj = Fable.Core.Rust.emitExpr v12 v13
    let v15 : string = "format!(\"{:?}\", ***$0)"
    let v16 : Types.std.string.String = Fable.Core.Rust.emitExpr v14 v15
    let v17 : Types.EmitType<Types.std.string.String> = v16 |> unbox<Types.EmitType<Types.std.string.String>>
    let v18 : string = "std::string::String::from_utf8(($0).to_owned()).unwrap()"
    let v19 : Types.std.string.String = Fable.Core.Rust.emitExpr v2 v18
    let v20 : UH0 = v1.l0
    let v21 : UH0 = UH0_0(v19, v20)
    v1.l0 <- v21
    let v22 : Result<bool, Types.std.io.Error> = Ok true
    v22
and method9 (v0 : int64, v1 : Mut0) : (Types.Vec<uint8> -> Result<bool, Types.std.io.Error>) =
    closure1(v0, v1)
and method10 (v0 : UH0, v1 : UH0) : UH0 =
    match v0 with
    | UH0_0(v2, v3) -> (* Cons *)
        let v4 : UH0 = UH0_0(v2, v1)
        method10(v3, v4)
    | UH0_1 -> (* Nil *)
        v1
and method11 (v0 : UH0, v1 : UH1) : UH1 =
    match v0 with
    | UH0_0(v2, v3) -> (* Cons *)
        let v4 : UH1 = method11(v3, v1)
        let v5 : string = "fable_library_rust::String_::fromStr($0)"
        let v6 : string = Fable.Core.Rust.emitExpr v2 v5
        UH1_0(v6, v4)
    | UH0_1 -> (* Nil *)
        v1
and method12 (v0 : UH1, v1 : int32) : int32 =
    match v0 with
    | UH1_0(v2, v3) -> (* Cons *)
        let v4 : int32 = v1 + 1
        method12(v3, v4)
    | UH1_1 -> (* Nil *)
        v1
and method13 (v0 : int64, v1 : UH1, v2 : int32, v3 : UH1) : struct (int32 * UH1) =
    match v1 with
    | UH1_0(v4, v5) -> (* Cons *)
        let v6 : string = "/node_modules/"
        let v7 : Types.Ref<string> = v6 |> unbox
        let v8 : Types.Ref<string> = v4 |> unbox
        let v9 : string = "($1).contains(&*$0)"
        let v10 : bool = Fable.Core.Rust.emitExpr struct (v7, v8) v9
        let struct (v237 : int32, v238 : UH1) =
            if v10 then
                let v11 : string = "found line. removing."
                let v12 : string = "($0).to_string()"
                let v13 : Types.std.string.String = Fable.Core.Rust.emitExpr v11 v12
                let v14 : Types.EmitType<Types.std.string.String> = v13 |> unbox<Types.EmitType<Types.std.string.String>>
                let v15 : string = " line"
                let v16 : Types.std.string.String = Fable.Core.Rust.emitExpr v15 v12
                let v17 : Types.EmitType<Types.std.string.String> = v16 |> unbox<Types.EmitType<Types.std.string.String>>
                let v18 : Types.std.string.String = Fable.Core.Rust.emitExpr v4 v12
                let v19 : Types.EmitType<Types.std.string.String> = v18 |> unbox<Types.EmitType<Types.std.string.String>>
                let v20 : (Types.EmitType<Types.std.string.String> []) = [|v14; v17; v19|]
                let v21 : string = "core::ops::Deref::deref($0)"
                let v22 : obj = Fable.Core.Rust.emitExpr v20 v21
                let v23 : string = "format!(\"{:?}\", ***$0)"
                let v24 : Types.std.string.String = Fable.Core.Rust.emitExpr v22 v23
                let v25 : Types.EmitType<Types.std.string.String> = v24 |> unbox<Types.EmitType<Types.std.string.String>>
                let v26 : string = "chrono::Utc::now()"
                let v27 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v26
                let v28 : string = "($0).timestamp()"
                let v29 : int64 = Fable.Core.Rust.emitExpr v27 v28
                let v30 : int64 = v29 - v0
                let v31 : string = (v30).ToString ()
                let v32 : int32 = 6
                let v33 : string = method3(v32, v31)
                let v34 : string = "rand::random::<u8>()"
                let v35 : uint8 = Fable.Core.Rust.emitExpr () v34
                let v36 : string = "timestamp"
                let v37 : Types.std.string.String = Fable.Core.Rust.emitExpr v36 v12
                let v38 : Types.EmitType<Types.std.string.String> = v37 |> unbox<Types.EmitType<Types.std.string.String>>
                let v39 : Types.std.string.String = Fable.Core.Rust.emitExpr v33 v12
                let v40 : Types.EmitType<Types.std.string.String> = v39 |> unbox<Types.EmitType<Types.std.string.String>>
                let v41 : string = "run_id"
                let v42 : Types.std.string.String = Fable.Core.Rust.emitExpr v41 v12
                let v43 : Types.EmitType<Types.std.string.String> = v42 |> unbox<Types.EmitType<Types.std.string.String>>
                let v44 : string = "format!(\"{:?}\", $0)"
                let v45 : Types.std.string.String = Fable.Core.Rust.emitExpr v35 v44
                let v46 : Types.EmitType<Types.std.string.String> = v45 |> unbox<Types.EmitType<Types.std.string.String>>
                let v47 : string = "log_level"
                let v48 : Types.std.string.String = Fable.Core.Rust.emitExpr v47 v12
                let v49 : Types.EmitType<Types.std.string.String> = v48 |> unbox<Types.EmitType<Types.std.string.String>>
                let v50 : string = "Debug"
                let v51 : Types.std.string.String = Fable.Core.Rust.emitExpr v50 v12
                let v52 : Types.EmitType<Types.std.string.String> = v51 |> unbox<Types.EmitType<Types.std.string.String>>
                let v53 : (Types.EmitType<Types.std.string.String> []) = [|v38; v40; v43; v46; v49; v52|]
                let v54 : obj = Fable.Core.Rust.emitExpr v53 v21
                let v55 : Types.std.string.String = Fable.Core.Rust.emitExpr v54 v23
                let v56 : Types.EmitType<Types.std.string.String> = v55 |> unbox<Types.EmitType<Types.std.string.String>>
                let v57 : string = "> app ()"
                let v58 : Types.std.string.String = Fable.Core.Rust.emitExpr v57 v12
                let v59 : Types.EmitType<Types.std.string.String> = v58 |> unbox<Types.EmitType<Types.std.string.String>>
                let v60 : (Types.EmitType<Types.std.string.String> []) = [|v59|]
                let v61 : obj = Fable.Core.Rust.emitExpr v60 v21
                let v62 : Types.std.string.String = Fable.Core.Rust.emitExpr v61 v23
                let v63 : Types.EmitType<Types.std.string.String> = v62 |> unbox<Types.EmitType<Types.std.string.String>>
                let v64 : Types.std.string.String = v63 |> unbox
                let v65 : string = "fable_library_rust::String_::fromStr($0)"
                let v66 : string = Fable.Core.Rust.emitExpr v64 v65
                let v67 : string = "\"([^\"]+)\", \"([^\"]+)\""
                let v68 : string = $"r#\"{v67}\"#"
                let v69 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v68
                let v70 : string = "regex::RegexBuilder::new($0)"
                let v71 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v69 v70
                let v72 : string = "$0.build().unwrap()"
                let v73 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v71 v72
                let v74 : string = method2(v66)
                let v75 : string = "$0.as_str()"
                let v76 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v74 v75
                let v77 : string = method4()
                let v78 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v77 v75
                let v79 : string = "$0.replace_all(&$1, $2).to_string()"
                let v80 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v73, v76, v78) v79
                let v81 : string = Fable.Core.Rust.emitExpr v80 v65
                let v82 : string = "\\[\"(.*?)\"\\]"
                let v83 : string = $"r#\"{v82}\"#"
                let v84 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v83
                let v85 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v84 v70
                let v86 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v85 v72
                let v87 : string = method2(v81)
                let v88 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v87 v75
                let v89 : string = method5()
                let v90 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v89 v75
                let v91 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v86, v88, v90) v79
                let v92 : string = Fable.Core.Rust.emitExpr v91 v65
                let v93 : string = ", "
                let v94 : string = $"r#\"{v93}\"#"
                let v95 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v94
                let v96 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v95 v70
                let v97 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v96 v72
                let v98 : string = method2(v92)
                let v99 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v98 v75
                let v100 : string = method6()
                let v101 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v100 v75
                let v102 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v97, v99, v101) v79
                let v103 : string = Fable.Core.Rust.emitExpr v102 v65
                let v104 : Types.std.string.String = Fable.Core.Rust.emitExpr v103 v12
                let v105 : Types.EmitType<Types.std.string.String> = v104 |> unbox<Types.EmitType<Types.std.string.String>>
                let v106 : string = "purple"
                let v107 : string = "colored::Colorize::color(&*$0, $1.to_string())"
                let v108 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v105, v106) v107
                let v109 : string = "format!(\"{}\", $0)"
                let v110 : Types.std.string.String = Fable.Core.Rust.emitExpr v108 v109
                let v111 : Types.std.string.String = v25 |> unbox
                let v112 : string = Fable.Core.Rust.emitExpr v111 v65
                let v113 : string = $"r#\"{v67}\"#"
                let v114 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v113
                let v115 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v114 v70
                let v116 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v115 v72
                let v117 : string = method2(v112)
                let v118 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v117 v75
                let v119 : string = method4()
                let v120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v119 v75
                let v121 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v116, v118, v120) v79
                let v122 : string = Fable.Core.Rust.emitExpr v121 v65
                let v123 : string = $"r#\"{v82}\"#"
                let v124 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v123
                let v125 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v124 v70
                let v126 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v125 v72
                let v127 : string = method2(v122)
                let v128 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v127 v75
                let v129 : string = method5()
                let v130 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v129 v75
                let v131 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v126, v128, v130) v79
                let v132 : string = Fable.Core.Rust.emitExpr v131 v65
                let v133 : string = $"r#\"{v93}\"#"
                let v134 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v133
                let v135 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v134 v70
                let v136 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v135 v72
                let v137 : string = method2(v132)
                let v138 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v137 v75
                let v139 : string = method6()
                let v140 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v139 v75
                let v141 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v136, v138, v140) v79
                let v142 : string = Fable.Core.Rust.emitExpr v141 v65
                let v143 : Types.std.string.String = Fable.Core.Rust.emitExpr v142 v12
                let v144 : Types.EmitType<Types.std.string.String> = v143 |> unbox<Types.EmitType<Types.std.string.String>>
                let v145 : string = method7()
                let v146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v145 v75
                let v147 : unativeint = unativeint 0
                let v148 : unativeint = unativeint 2
                let v149 : string = "&$0[$1..$2]"
                let v150 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v146, v147, v148) v149
                let v151 : string = Fable.Core.Rust.emitExpr v150 v65
                let v152 : string = "u8::from_str_radix($0, 16).unwrap()"
                let v153 : uint8 = Fable.Core.Rust.emitExpr v151 v152
                let v154 : string = method7()
                let v155 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v154 v75
                let v156 : unativeint = unativeint 2
                let v157 : unativeint = unativeint 4
                let v158 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v155, v156, v157) v149
                let v159 : string = Fable.Core.Rust.emitExpr v158 v65
                let v160 : uint8 = Fable.Core.Rust.emitExpr v159 v152
                let v161 : string = method7()
                let v162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v161 v75
                let v163 : unativeint = unativeint 4
                let v164 : unativeint = unativeint 6
                let v165 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v162, v163, v164) v149
                let v166 : string = Fable.Core.Rust.emitExpr v165 v65
                let v167 : uint8 = Fable.Core.Rust.emitExpr v166 v152
                let v168 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
                let v169 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v144, v153, v160, v167) v168
                let v170 : Types.std.string.String = Fable.Core.Rust.emitExpr v169 v109
                let v171 : Types.std.string.String = v56 |> unbox
                let v172 : string = Fable.Core.Rust.emitExpr v171 v65
                let v173 : string = $"r#\"{v67}\"#"
                let v174 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v173
                let v175 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v174 v70
                let v176 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v175 v72
                let v177 : string = method2(v172)
                let v178 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v177 v75
                let v179 : string = method4()
                let v180 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v179 v75
                let v181 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v176, v178, v180) v79
                let v182 : string = Fable.Core.Rust.emitExpr v181 v65
                let v183 : string = $"r#\"{v82}\"#"
                let v184 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v183
                let v185 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v184 v70
                let v186 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v185 v72
                let v187 : string = method2(v182)
                let v188 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v187 v75
                let v189 : string = method5()
                let v190 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v189 v75
                let v191 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v186, v188, v190) v79
                let v192 : string = Fable.Core.Rust.emitExpr v191 v65
                let v193 : string = $"r#\"{v93}\"#"
                let v194 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v193
                let v195 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v194 v70
                let v196 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v195 v72
                let v197 : string = method2(v192)
                let v198 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v197 v75
                let v199 : string = method6()
                let v200 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v199 v75
                let v201 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v196, v198, v200) v79
                let v202 : string = Fable.Core.Rust.emitExpr v201 v65
                let v203 : Types.std.string.String = Fable.Core.Rust.emitExpr v202 v12
                let v204 : Types.EmitType<Types.std.string.String> = v203 |> unbox<Types.EmitType<Types.std.string.String>>
                let v205 : string = method8()
                let v206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v205 v75
                let v207 : unativeint = unativeint 0
                let v208 : unativeint = unativeint 2
                let v209 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v206, v207, v208) v149
                let v210 : string = Fable.Core.Rust.emitExpr v209 v65
                let v211 : uint8 = Fable.Core.Rust.emitExpr v210 v152
                let v212 : string = method8()
                let v213 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v212 v75
                let v214 : unativeint = unativeint 2
                let v215 : unativeint = unativeint 4
                let v216 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v213, v214, v215) v149
                let v217 : string = Fable.Core.Rust.emitExpr v216 v65
                let v218 : uint8 = Fable.Core.Rust.emitExpr v217 v152
                let v219 : string = method8()
                let v220 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v219 v75
                let v221 : unativeint = unativeint 4
                let v222 : unativeint = unativeint 6
                let v223 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v220, v221, v222) v149
                let v224 : string = Fable.Core.Rust.emitExpr v223 v65
                let v225 : uint8 = Fable.Core.Rust.emitExpr v224 v152
                let v226 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v204, v211, v218, v225) v168
                let v227 : Types.std.string.String = Fable.Core.Rust.emitExpr v226 v109
                let v228 : string = $"{v110} {v170} {v227}"
                System.Console.WriteLine v228
                struct (1, v3)
            else
                let v229 : bool = 0 = v2
                if v229 then
                    let v230 : UH1 = UH1_0(v4, v3)
                    struct (0, v230)
                else
                    let v231 : bool = 2 = v2
                    if v231 then
                        struct (0, v3)
                    else
                        let v232 : int32 = v2 + 1
                        struct (v232, v3)
        method13(v0, v5, v237, v238)
    | UH1_1 -> (* Nil *)
        struct (v2, v3)
and method14 (v0 : UH1, v1 : UH1) : UH1 =
    match v0 with
    | UH1_0(v2, v3) -> (* Cons *)
        let v4 : UH1 = UH1_0(v2, v1)
        method14(v3, v4)
    | UH1_1 -> (* Nil *)
        v1
and method15 (v0 : UH1, v1 : string) : string =
    match v0 with
    | UH1_0(v2, v3) -> (* Cons *)
        let v4 : string = v1 + v2
        method15(v3, v4)
    | UH1_1 -> (* Nil *)
        v1
and closure0 () () : int32 =
    let struct (v0 : string, v1 : string, v2 : string, v3 : bool) = method0()
    let v4 : string = "chrono::Utc::now()"
    let v5 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v6 : string = "($0).timestamp()"
    let v7 : int64 = Fable.Core.Rust.emitExpr v5 v6
    let v8 : string = "app1"
    let v9 : string = $"r#\"{v8}\"#"
    let v10 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v9
    let v11 : string = "clap::Command::new($0)"
    let v12 : string = ".propagate_version(true)"
    let v13 : string = v11 + v12
    let v14 : string = ".subcommand_required(false)"
    let v15 : string = v13 + v14
    let v16 : string = ".about(\"command about\")"
    let v17 : string = v15 + v16
    let v18 : string = ".arg_required_else_help(true)"
    let v19 : string = v17 + v18
    let v20 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr v10 v19
    let v21 : string = "PostFsxRsBuild"
    let v22 : string = $"r#\"{v21}\"#"
    let v23 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v22
    let v24 : string = v11 + v12
    let v25 : string = v24 + v14
    let v26 : string = v25 + v16
    let v27 : string = v26 + v18
    let v28 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr v23 v27
    let v29 : string = "rs-path"
    let v30 : string = $"r#\"{v29}\"#"
    let v31 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v30
    let v32 : string = "clap::Arg::new($0)"
    let v33 : Types.clap.builder.Arg = Fable.Core.Rust.emitExpr v31 v32
    let v34 : string = "$0.arg($1)"
    let v35 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr struct (v28, v33) v34
    let v36 : string = "$0.subcommand($1)"
    let v37 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr struct (v20, v35) v36
    let v38 : string = "SpiFsxBuild"
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = v11 + v12
    let v42 : string = v41 + v14
    let v43 : string = v42 + v16
    let v44 : string = v43 + v18
    let v45 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr v40 v44
    let v46 : string = "spi-path"
    let v47 : string = $"r#\"{v46}\"#"
    let v48 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v47
    let v49 : Types.clap.builder.Arg = Fable.Core.Rust.emitExpr v48 v32
    let v50 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr struct (v45, v49) v34
    let v51 : string = "fsx-path"
    let v52 : string = $"r#\"{v51}\"#"
    let v53 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v52
    let v54 : Types.clap.builder.Arg = Fable.Core.Rust.emitExpr v53 v32
    let v55 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr struct (v50, v54) v34
    let v56 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr struct (v37, v55) v36
    let v57 : string = "$0.get_matches()"
    let v58 : Types.Ref<Types.clap.parser.ArgMatches> = Fable.Core.Rust.emitExpr v56 v57
    let v59 : string = "$0.subcommand()"
    let v60 : Types.Ref<Option<struct (Types.Ref<Types.Str> * Types.Ref<Types.clap.parser.ArgMatches>)>> = Fable.Core.Rust.emitExpr v58 v59
    let v61 : string = "*(($0).as_ref()).unwrap()"
    let struct (v62 : Types.Ref<Types.Str>, v63 : Types.Ref<Types.clap.parser.ArgMatches>) = Fable.Core.Rust.emitExpr v60 v61
    let v64 : string = method1()
    let v65 : string = "$0.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v64 v65
    let v67 : string = "--" + v29 + "="
    let v68 : string = method2(v67)
    let v69 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v68 v65
    let v70 : string = "&($0).get_one::<String>($1).unwrap().replace($2, \"\")"
    let v71 : Types.Ref<Types.std.string.String> = Fable.Core.Rust.emitExpr struct (v63, v66, v69) v70
    let v72 : string = "std::path::PathBuf::from($0)"
    let v73 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v71 v72
    let v74 : string = "($0).canonicalize()"
    let v75 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v73 v74
    let v76 : string = "($0).as_ref().unwrap().to_path_buf()"
    let v77 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v75 v76
    let v78 : string = "rs_path_clean"
    let v79 : string = "($0).to_string()"
    let v80 : Types.std.string.String = Fable.Core.Rust.emitExpr v78 v79
    let v81 : Types.EmitType<Types.std.string.String> = v80 |> unbox<Types.EmitType<Types.std.string.String>>
    let v82 : string = "format!(\"{:?}\", $0)"
    let v83 : Types.std.string.String = Fable.Core.Rust.emitExpr v77 v82
    let v84 : Types.EmitType<Types.std.string.String> = v83 |> unbox<Types.EmitType<Types.std.string.String>>
    let v85 : (Types.EmitType<Types.std.string.String> []) = [|v81; v84|]
    let v86 : string = "core::ops::Deref::deref($0)"
    let v87 : obj = Fable.Core.Rust.emitExpr v85 v86
    let v88 : string = "format!(\"{:?}\", ***$0)"
    let v89 : Types.std.string.String = Fable.Core.Rust.emitExpr v87 v88
    let v90 : Types.EmitType<Types.std.string.String> = v89 |> unbox<Types.EmitType<Types.std.string.String>>
    let v91 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v92 : int64 = Fable.Core.Rust.emitExpr v91 v6
    let v93 : int64 = v92 - v7
    let v94 : string = (v93).ToString ()
    let v95 : int32 = 6
    let v96 : string = method3(v95, v94)
    let v97 : string = "rand::random::<u8>()"
    let v98 : uint8 = Fable.Core.Rust.emitExpr () v97
    let v99 : string = "timestamp"
    let v100 : Types.std.string.String = Fable.Core.Rust.emitExpr v99 v79
    let v101 : Types.EmitType<Types.std.string.String> = v100 |> unbox<Types.EmitType<Types.std.string.String>>
    let v102 : Types.std.string.String = Fable.Core.Rust.emitExpr v96 v79
    let v103 : Types.EmitType<Types.std.string.String> = v102 |> unbox<Types.EmitType<Types.std.string.String>>
    let v104 : string = "run_id"
    let v105 : Types.std.string.String = Fable.Core.Rust.emitExpr v104 v79
    let v106 : Types.EmitType<Types.std.string.String> = v105 |> unbox<Types.EmitType<Types.std.string.String>>
    let v107 : Types.std.string.String = Fable.Core.Rust.emitExpr v98 v82
    let v108 : Types.EmitType<Types.std.string.String> = v107 |> unbox<Types.EmitType<Types.std.string.String>>
    let v109 : string = "log_level"
    let v110 : Types.std.string.String = Fable.Core.Rust.emitExpr v109 v79
    let v111 : Types.EmitType<Types.std.string.String> = v110 |> unbox<Types.EmitType<Types.std.string.String>>
    let v112 : string = "Debug"
    let v113 : Types.std.string.String = Fable.Core.Rust.emitExpr v112 v79
    let v114 : Types.EmitType<Types.std.string.String> = v113 |> unbox<Types.EmitType<Types.std.string.String>>
    let v115 : (Types.EmitType<Types.std.string.String> []) = [|v101; v103; v106; v108; v111; v114|]
    let v116 : obj = Fable.Core.Rust.emitExpr v115 v86
    let v117 : Types.std.string.String = Fable.Core.Rust.emitExpr v116 v88
    let v118 : Types.EmitType<Types.std.string.String> = v117 |> unbox<Types.EmitType<Types.std.string.String>>
    let v119 : string = "> app ()"
    let v120 : Types.std.string.String = Fable.Core.Rust.emitExpr v119 v79
    let v121 : Types.EmitType<Types.std.string.String> = v120 |> unbox<Types.EmitType<Types.std.string.String>>
    let v122 : (Types.EmitType<Types.std.string.String> []) = [|v121|]
    let v123 : obj = Fable.Core.Rust.emitExpr v122 v86
    let v124 : Types.std.string.String = Fable.Core.Rust.emitExpr v123 v88
    let v125 : Types.EmitType<Types.std.string.String> = v124 |> unbox<Types.EmitType<Types.std.string.String>>
    let v126 : Types.std.string.String = v125 |> unbox
    let v127 : string = "fable_library_rust::String_::fromStr($0)"
    let v128 : string = Fable.Core.Rust.emitExpr v126 v127
    let v129 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v130 : string = $"r#\"{v129}\"#"
    let v131 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v130
    let v132 : string = "regex::RegexBuilder::new($0)"
    let v133 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v131 v132
    let v134 : string = "$0.build().unwrap()"
    let v135 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v133 v134
    let v136 : string = method2(v128)
    let v137 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v136 v65
    let v138 : string = method4()
    let v139 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v138 v65
    let v140 : string = "$0.replace_all(&$1, $2).to_string()"
    let v141 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v135, v137, v139) v140
    let v142 : string = Fable.Core.Rust.emitExpr v141 v127
    let v143 : string = "\\[\"(.*?)\"\\]"
    let v144 : string = $"r#\"{v143}\"#"
    let v145 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v144
    let v146 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v145 v132
    let v147 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v146 v134
    let v148 : string = method2(v142)
    let v149 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v148 v65
    let v150 : string = method5()
    let v151 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v150 v65
    let v152 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v147, v149, v151) v140
    let v153 : string = Fable.Core.Rust.emitExpr v152 v127
    let v154 : string = ", "
    let v155 : string = $"r#\"{v154}\"#"
    let v156 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v155
    let v157 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v156 v132
    let v158 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v157 v134
    let v159 : string = method2(v153)
    let v160 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v159 v65
    let v161 : string = method6()
    let v162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v161 v65
    let v163 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v158, v160, v162) v140
    let v164 : string = Fable.Core.Rust.emitExpr v163 v127
    let v165 : Types.std.string.String = Fable.Core.Rust.emitExpr v164 v79
    let v166 : Types.EmitType<Types.std.string.String> = v165 |> unbox<Types.EmitType<Types.std.string.String>>
    let v167 : string = "purple"
    let v168 : string = "colored::Colorize::color(&*$0, $1.to_string())"
    let v169 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v166, v167) v168
    let v170 : string = "format!(\"{}\", $0)"
    let v171 : Types.std.string.String = Fable.Core.Rust.emitExpr v169 v170
    let v172 : Types.std.string.String = v90 |> unbox
    let v173 : string = Fable.Core.Rust.emitExpr v172 v127
    let v174 : string = $"r#\"{v129}\"#"
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v174
    let v176 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v175 v132
    let v177 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v176 v134
    let v178 : string = method2(v173)
    let v179 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v178 v65
    let v180 : string = method4()
    let v181 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v180 v65
    let v182 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v177, v179, v181) v140
    let v183 : string = Fable.Core.Rust.emitExpr v182 v127
    let v184 : string = $"r#\"{v143}\"#"
    let v185 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v184
    let v186 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v185 v132
    let v187 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v186 v134
    let v188 : string = method2(v183)
    let v189 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v188 v65
    let v190 : string = method5()
    let v191 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v190 v65
    let v192 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v187, v189, v191) v140
    let v193 : string = Fable.Core.Rust.emitExpr v192 v127
    let v194 : string = $"r#\"{v154}\"#"
    let v195 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v194
    let v196 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v195 v132
    let v197 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v196 v134
    let v198 : string = method2(v193)
    let v199 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v198 v65
    let v200 : string = method6()
    let v201 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v200 v65
    let v202 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v197, v199, v201) v140
    let v203 : string = Fable.Core.Rust.emitExpr v202 v127
    let v204 : Types.std.string.String = Fable.Core.Rust.emitExpr v203 v79
    let v205 : Types.EmitType<Types.std.string.String> = v204 |> unbox<Types.EmitType<Types.std.string.String>>
    let v206 : string = method7()
    let v207 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v206 v65
    let v208 : unativeint = unativeint 0
    let v209 : unativeint = unativeint 2
    let v210 : string = "&$0[$1..$2]"
    let v211 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v207, v208, v209) v210
    let v212 : string = Fable.Core.Rust.emitExpr v211 v127
    let v213 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v214 : uint8 = Fable.Core.Rust.emitExpr v212 v213
    let v215 : string = method7()
    let v216 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v215 v65
    let v217 : unativeint = unativeint 2
    let v218 : unativeint = unativeint 4
    let v219 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v216, v217, v218) v210
    let v220 : string = Fable.Core.Rust.emitExpr v219 v127
    let v221 : uint8 = Fable.Core.Rust.emitExpr v220 v213
    let v222 : string = method7()
    let v223 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v222 v65
    let v224 : unativeint = unativeint 4
    let v225 : unativeint = unativeint 6
    let v226 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v223, v224, v225) v210
    let v227 : string = Fable.Core.Rust.emitExpr v226 v127
    let v228 : uint8 = Fable.Core.Rust.emitExpr v227 v213
    let v229 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v230 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v205, v214, v221, v228) v229
    let v231 : Types.std.string.String = Fable.Core.Rust.emitExpr v230 v170
    let v232 : Types.std.string.String = v118 |> unbox
    let v233 : string = Fable.Core.Rust.emitExpr v232 v127
    let v234 : string = $"r#\"{v129}\"#"
    let v235 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v234
    let v236 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v235 v132
    let v237 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v236 v134
    let v238 : string = method2(v233)
    let v239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v238 v65
    let v240 : string = method4()
    let v241 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v240 v65
    let v242 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v237, v239, v241) v140
    let v243 : string = Fable.Core.Rust.emitExpr v242 v127
    let v244 : string = $"r#\"{v143}\"#"
    let v245 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v244
    let v246 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v245 v132
    let v247 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v246 v134
    let v248 : string = method2(v243)
    let v249 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v248 v65
    let v250 : string = method5()
    let v251 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v250 v65
    let v252 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v247, v249, v251) v140
    let v253 : string = Fable.Core.Rust.emitExpr v252 v127
    let v254 : string = $"r#\"{v154}\"#"
    let v255 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v254
    let v256 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v255 v132
    let v257 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v256 v134
    let v258 : string = method2(v253)
    let v259 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v258 v65
    let v260 : string = method6()
    let v261 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v260 v65
    let v262 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v257, v259, v261) v140
    let v263 : string = Fable.Core.Rust.emitExpr v262 v127
    let v264 : Types.std.string.String = Fable.Core.Rust.emitExpr v263 v79
    let v265 : Types.EmitType<Types.std.string.String> = v264 |> unbox<Types.EmitType<Types.std.string.String>>
    let v266 : string = method8()
    let v267 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v266 v65
    let v268 : unativeint = unativeint 0
    let v269 : unativeint = unativeint 2
    let v270 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v267, v268, v269) v210
    let v271 : string = Fable.Core.Rust.emitExpr v270 v127
    let v272 : uint8 = Fable.Core.Rust.emitExpr v271 v213
    let v273 : string = method8()
    let v274 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v273 v65
    let v275 : unativeint = unativeint 2
    let v276 : unativeint = unativeint 4
    let v277 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v274, v275, v276) v210
    let v278 : string = Fable.Core.Rust.emitExpr v277 v127
    let v279 : uint8 = Fable.Core.Rust.emitExpr v278 v213
    let v280 : string = method8()
    let v281 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v280 v65
    let v282 : unativeint = unativeint 4
    let v283 : unativeint = unativeint 6
    let v284 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v281, v282, v283) v210
    let v285 : string = Fable.Core.Rust.emitExpr v284 v127
    let v286 : uint8 = Fable.Core.Rust.emitExpr v285 v213
    let v287 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v265, v272, v279, v286) v229
    let v288 : Types.std.string.String = Fable.Core.Rust.emitExpr v287 v170
    let v289 : string = $"{v171} {v231} {v288}"
    System.Console.WriteLine v289
    let struct (v290 : string, v291 : string, v292 : string, v293 : bool) = method0()
    let v294 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v295 : int64 = Fable.Core.Rust.emitExpr v294 v6
    let v296 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v77 v74
    let v297 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v296 v76
    let v298 : string = "path_clean"
    let v299 : Types.std.string.String = Fable.Core.Rust.emitExpr v298 v79
    let v300 : Types.EmitType<Types.std.string.String> = v299 |> unbox<Types.EmitType<Types.std.string.String>>
    let v301 : string = "fable_library_rust::String_::fromStr(&format!(\"{}\", $0.display()))"
    let v302 : string = Fable.Core.Rust.emitExpr v297 v301
    let v303 : Types.std.string.String = Fable.Core.Rust.emitExpr v302 v79
    let v304 : Types.EmitType<Types.std.string.String> = v303 |> unbox<Types.EmitType<Types.std.string.String>>
    let v305 : (Types.EmitType<Types.std.string.String> []) = [|v300; v304|]
    let v306 : obj = Fable.Core.Rust.emitExpr v305 v86
    let v307 : Types.std.string.String = Fable.Core.Rust.emitExpr v306 v88
    let v308 : Types.EmitType<Types.std.string.String> = v307 |> unbox<Types.EmitType<Types.std.string.String>>
    let v309 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v310 : int64 = Fable.Core.Rust.emitExpr v309 v6
    let v311 : int64 = v310 - v295
    let v312 : string = (v311).ToString ()
    let v313 : int32 = 6
    let v314 : string = method3(v313, v312)
    let v315 : uint8 = Fable.Core.Rust.emitExpr () v97
    let v316 : Types.std.string.String = Fable.Core.Rust.emitExpr v99 v79
    let v317 : Types.EmitType<Types.std.string.String> = v316 |> unbox<Types.EmitType<Types.std.string.String>>
    let v318 : Types.std.string.String = Fable.Core.Rust.emitExpr v314 v79
    let v319 : Types.EmitType<Types.std.string.String> = v318 |> unbox<Types.EmitType<Types.std.string.String>>
    let v320 : Types.std.string.String = Fable.Core.Rust.emitExpr v104 v79
    let v321 : Types.EmitType<Types.std.string.String> = v320 |> unbox<Types.EmitType<Types.std.string.String>>
    let v322 : Types.std.string.String = Fable.Core.Rust.emitExpr v315 v82
    let v323 : Types.EmitType<Types.std.string.String> = v322 |> unbox<Types.EmitType<Types.std.string.String>>
    let v324 : Types.std.string.String = Fable.Core.Rust.emitExpr v109 v79
    let v325 : Types.EmitType<Types.std.string.String> = v324 |> unbox<Types.EmitType<Types.std.string.String>>
    let v326 : Types.std.string.String = Fable.Core.Rust.emitExpr v112 v79
    let v327 : Types.EmitType<Types.std.string.String> = v326 |> unbox<Types.EmitType<Types.std.string.String>>
    let v328 : (Types.EmitType<Types.std.string.String> []) = [|v317; v319; v321; v323; v325; v327|]
    let v329 : obj = Fable.Core.Rust.emitExpr v328 v86
    let v330 : Types.std.string.String = Fable.Core.Rust.emitExpr v329 v88
    let v331 : Types.EmitType<Types.std.string.String> = v330 |> unbox<Types.EmitType<Types.std.string.String>>
    let v332 : string = "> read_lines ()"
    let v333 : Types.std.string.String = Fable.Core.Rust.emitExpr v332 v79
    let v334 : Types.EmitType<Types.std.string.String> = v333 |> unbox<Types.EmitType<Types.std.string.String>>
    let v335 : (Types.EmitType<Types.std.string.String> []) = [|v334|]
    let v336 : obj = Fable.Core.Rust.emitExpr v335 v86
    let v337 : Types.std.string.String = Fable.Core.Rust.emitExpr v336 v88
    let v338 : Types.EmitType<Types.std.string.String> = v337 |> unbox<Types.EmitType<Types.std.string.String>>
    let v339 : Types.std.string.String = v338 |> unbox
    let v340 : string = Fable.Core.Rust.emitExpr v339 v127
    let v341 : string = $"r#\"{v129}\"#"
    let v342 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v341
    let v343 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v342 v132
    let v344 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v343 v134
    let v345 : string = method2(v340)
    let v346 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v345 v65
    let v347 : string = method4()
    let v348 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v347 v65
    let v349 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v344, v346, v348) v140
    let v350 : string = Fable.Core.Rust.emitExpr v349 v127
    let v351 : string = $"r#\"{v143}\"#"
    let v352 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v351
    let v353 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v352 v132
    let v354 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v353 v134
    let v355 : string = method2(v350)
    let v356 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v355 v65
    let v357 : string = method5()
    let v358 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v357 v65
    let v359 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v354, v356, v358) v140
    let v360 : string = Fable.Core.Rust.emitExpr v359 v127
    let v361 : string = $"r#\"{v154}\"#"
    let v362 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v361
    let v363 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v362 v132
    let v364 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v363 v134
    let v365 : string = method2(v360)
    let v366 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v365 v65
    let v367 : string = method6()
    let v368 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v367 v65
    let v369 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v364, v366, v368) v140
    let v370 : string = Fable.Core.Rust.emitExpr v369 v127
    let v371 : Types.std.string.String = Fable.Core.Rust.emitExpr v370 v79
    let v372 : Types.EmitType<Types.std.string.String> = v371 |> unbox<Types.EmitType<Types.std.string.String>>
    let v373 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v372, v167) v168
    let v374 : Types.std.string.String = Fable.Core.Rust.emitExpr v373 v170
    let v375 : Types.std.string.String = v308 |> unbox
    let v376 : string = Fable.Core.Rust.emitExpr v375 v127
    let v377 : string = $"r#\"{v129}\"#"
    let v378 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v377
    let v379 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v378 v132
    let v380 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v379 v134
    let v381 : string = method2(v376)
    let v382 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v381 v65
    let v383 : string = method4()
    let v384 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v383 v65
    let v385 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v380, v382, v384) v140
    let v386 : string = Fable.Core.Rust.emitExpr v385 v127
    let v387 : string = $"r#\"{v143}\"#"
    let v388 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v387
    let v389 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v388 v132
    let v390 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v389 v134
    let v391 : string = method2(v386)
    let v392 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v391 v65
    let v393 : string = method5()
    let v394 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v393 v65
    let v395 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v390, v392, v394) v140
    let v396 : string = Fable.Core.Rust.emitExpr v395 v127
    let v397 : string = $"r#\"{v154}\"#"
    let v398 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v397
    let v399 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v398 v132
    let v400 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v399 v134
    let v401 : string = method2(v396)
    let v402 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v401 v65
    let v403 : string = method6()
    let v404 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v403 v65
    let v405 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v400, v402, v404) v140
    let v406 : string = Fable.Core.Rust.emitExpr v405 v127
    let v407 : Types.std.string.String = Fable.Core.Rust.emitExpr v406 v79
    let v408 : Types.EmitType<Types.std.string.String> = v407 |> unbox<Types.EmitType<Types.std.string.String>>
    let v409 : string = method7()
    let v410 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v409 v65
    let v411 : unativeint = unativeint 0
    let v412 : unativeint = unativeint 2
    let v413 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v410, v411, v412) v210
    let v414 : string = Fable.Core.Rust.emitExpr v413 v127
    let v415 : uint8 = Fable.Core.Rust.emitExpr v414 v213
    let v416 : string = method7()
    let v417 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v416 v65
    let v418 : unativeint = unativeint 2
    let v419 : unativeint = unativeint 4
    let v420 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v417, v418, v419) v210
    let v421 : string = Fable.Core.Rust.emitExpr v420 v127
    let v422 : uint8 = Fable.Core.Rust.emitExpr v421 v213
    let v423 : string = method7()
    let v424 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v423 v65
    let v425 : unativeint = unativeint 4
    let v426 : unativeint = unativeint 6
    let v427 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v424, v425, v426) v210
    let v428 : string = Fable.Core.Rust.emitExpr v427 v127
    let v429 : uint8 = Fable.Core.Rust.emitExpr v428 v213
    let v430 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v408, v415, v422, v429) v229
    let v431 : Types.std.string.String = Fable.Core.Rust.emitExpr v430 v170
    let v432 : Types.std.string.String = v331 |> unbox
    let v433 : string = Fable.Core.Rust.emitExpr v432 v127
    let v434 : string = $"r#\"{v129}\"#"
    let v435 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v434
    let v436 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v435 v132
    let v437 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v436 v134
    let v438 : string = method2(v433)
    let v439 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v438 v65
    let v440 : string = method4()
    let v441 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v440 v65
    let v442 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v437, v439, v441) v140
    let v443 : string = Fable.Core.Rust.emitExpr v442 v127
    let v444 : string = $"r#\"{v143}\"#"
    let v445 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v444
    let v446 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v445 v132
    let v447 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v446 v134
    let v448 : string = method2(v443)
    let v449 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v448 v65
    let v450 : string = method5()
    let v451 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v450 v65
    let v452 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v447, v449, v451) v140
    let v453 : string = Fable.Core.Rust.emitExpr v452 v127
    let v454 : string = $"r#\"{v154}\"#"
    let v455 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v454
    let v456 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v455 v132
    let v457 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v456 v134
    let v458 : string = method2(v453)
    let v459 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v458 v65
    let v460 : string = method6()
    let v461 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v460 v65
    let v462 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v457, v459, v461) v140
    let v463 : string = Fable.Core.Rust.emitExpr v462 v127
    let v464 : Types.std.string.String = Fable.Core.Rust.emitExpr v463 v79
    let v465 : Types.EmitType<Types.std.string.String> = v464 |> unbox<Types.EmitType<Types.std.string.String>>
    let v466 : string = method8()
    let v467 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v466 v65
    let v468 : unativeint = unativeint 0
    let v469 : unativeint = unativeint 2
    let v470 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v467, v468, v469) v210
    let v471 : string = Fable.Core.Rust.emitExpr v470 v127
    let v472 : uint8 = Fable.Core.Rust.emitExpr v471 v213
    let v473 : string = method8()
    let v474 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v473 v65
    let v475 : unativeint = unativeint 2
    let v476 : unativeint = unativeint 4
    let v477 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v474, v475, v476) v210
    let v478 : string = Fable.Core.Rust.emitExpr v477 v127
    let v479 : uint8 = Fable.Core.Rust.emitExpr v478 v213
    let v480 : string = method8()
    let v481 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v480 v65
    let v482 : unativeint = unativeint 4
    let v483 : unativeint = unativeint 6
    let v484 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v481, v482, v483) v210
    let v485 : string = Fable.Core.Rust.emitExpr v484 v127
    let v486 : uint8 = Fable.Core.Rust.emitExpr v485 v213
    let v487 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v465, v472, v479, v486) v229
    let v488 : Types.std.string.String = Fable.Core.Rust.emitExpr v487 v170
    let v489 : string = $"{v374} {v431} {v488}"
    System.Console.WriteLine v489
    let v490 : string = "std::fs::File::open($0)"
    let v491 : Result<Types.std.fs.File, Types.std.io.Error> = Fable.Core.Rust.emitExpr v297 v490
    let v492 : string = "$0.unwrap()"
    let v493 : Types.Ref<Types.std.fs.File> = Fable.Core.Rust.emitExpr v491 v492
    let v494 : string = "std::cell::RefCell::new(linereader::LineReader::new($0))"
    let v495 : Types.std.cell.RefCell<Types.linereader.LineReader<Types.Ref<Types.std.fs.File>>> = Fable.Core.Rust.emitExpr v493 v494
    let v496 : string = "reader"
    let v497 : Types.std.string.String = Fable.Core.Rust.emitExpr v496 v79
    let v498 : Types.EmitType<Types.std.string.String> = v497 |> unbox<Types.EmitType<Types.std.string.String>>
    let v499 : Types.std.string.String = Fable.Core.Rust.emitExpr v495 v82
    let v500 : Types.EmitType<Types.std.string.String> = v499 |> unbox<Types.EmitType<Types.std.string.String>>
    let v501 : (Types.EmitType<Types.std.string.String> []) = [|v498; v500|]
    let v502 : obj = Fable.Core.Rust.emitExpr v501 v86
    let v503 : Types.std.string.String = Fable.Core.Rust.emitExpr v502 v88
    let v504 : Types.EmitType<Types.std.string.String> = v503 |> unbox<Types.EmitType<Types.std.string.String>>
    let v505 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v506 : int64 = Fable.Core.Rust.emitExpr v505 v6
    let v507 : int64 = v506 - v295
    let v508 : string = (v507).ToString ()
    let v509 : int32 = 6
    let v510 : string = method3(v509, v508)
    let v511 : uint8 = Fable.Core.Rust.emitExpr () v97
    let v512 : Types.std.string.String = Fable.Core.Rust.emitExpr v99 v79
    let v513 : Types.EmitType<Types.std.string.String> = v512 |> unbox<Types.EmitType<Types.std.string.String>>
    let v514 : Types.std.string.String = Fable.Core.Rust.emitExpr v510 v79
    let v515 : Types.EmitType<Types.std.string.String> = v514 |> unbox<Types.EmitType<Types.std.string.String>>
    let v516 : Types.std.string.String = Fable.Core.Rust.emitExpr v104 v79
    let v517 : Types.EmitType<Types.std.string.String> = v516 |> unbox<Types.EmitType<Types.std.string.String>>
    let v518 : Types.std.string.String = Fable.Core.Rust.emitExpr v511 v82
    let v519 : Types.EmitType<Types.std.string.String> = v518 |> unbox<Types.EmitType<Types.std.string.String>>
    let v520 : Types.std.string.String = Fable.Core.Rust.emitExpr v109 v79
    let v521 : Types.EmitType<Types.std.string.String> = v520 |> unbox<Types.EmitType<Types.std.string.String>>
    let v522 : Types.std.string.String = Fable.Core.Rust.emitExpr v112 v79
    let v523 : Types.EmitType<Types.std.string.String> = v522 |> unbox<Types.EmitType<Types.std.string.String>>
    let v524 : (Types.EmitType<Types.std.string.String> []) = [|v513; v515; v517; v519; v521; v523|]
    let v525 : obj = Fable.Core.Rust.emitExpr v524 v86
    let v526 : Types.std.string.String = Fable.Core.Rust.emitExpr v525 v88
    let v527 : Types.EmitType<Types.std.string.String> = v526 |> unbox<Types.EmitType<Types.std.string.String>>
    let v528 : Types.std.string.String = Fable.Core.Rust.emitExpr v332 v79
    let v529 : Types.EmitType<Types.std.string.String> = v528 |> unbox<Types.EmitType<Types.std.string.String>>
    let v530 : (Types.EmitType<Types.std.string.String> []) = [|v529|]
    let v531 : obj = Fable.Core.Rust.emitExpr v530 v86
    let v532 : Types.std.string.String = Fable.Core.Rust.emitExpr v531 v88
    let v533 : Types.EmitType<Types.std.string.String> = v532 |> unbox<Types.EmitType<Types.std.string.String>>
    let v534 : Types.std.string.String = v533 |> unbox
    let v535 : string = Fable.Core.Rust.emitExpr v534 v127
    let v536 : string = $"r#\"{v129}\"#"
    let v537 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v536
    let v538 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v537 v132
    let v539 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v538 v134
    let v540 : string = method2(v535)
    let v541 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v540 v65
    let v542 : string = method4()
    let v543 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v542 v65
    let v544 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v539, v541, v543) v140
    let v545 : string = Fable.Core.Rust.emitExpr v544 v127
    let v546 : string = $"r#\"{v143}\"#"
    let v547 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v546
    let v548 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v547 v132
    let v549 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v548 v134
    let v550 : string = method2(v545)
    let v551 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v550 v65
    let v552 : string = method5()
    let v553 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v552 v65
    let v554 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v549, v551, v553) v140
    let v555 : string = Fable.Core.Rust.emitExpr v554 v127
    let v556 : string = $"r#\"{v154}\"#"
    let v557 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v556
    let v558 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v557 v132
    let v559 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v558 v134
    let v560 : string = method2(v555)
    let v561 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v560 v65
    let v562 : string = method6()
    let v563 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v562 v65
    let v564 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v559, v561, v563) v140
    let v565 : string = Fable.Core.Rust.emitExpr v564 v127
    let v566 : Types.std.string.String = Fable.Core.Rust.emitExpr v565 v79
    let v567 : Types.EmitType<Types.std.string.String> = v566 |> unbox<Types.EmitType<Types.std.string.String>>
    let v568 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v567, v167) v168
    let v569 : Types.std.string.String = Fable.Core.Rust.emitExpr v568 v170
    let v570 : Types.std.string.String = v504 |> unbox
    let v571 : string = Fable.Core.Rust.emitExpr v570 v127
    let v572 : string = $"r#\"{v129}\"#"
    let v573 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v572
    let v574 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v573 v132
    let v575 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v574 v134
    let v576 : string = method2(v571)
    let v577 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v576 v65
    let v578 : string = method4()
    let v579 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v578 v65
    let v580 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v575, v577, v579) v140
    let v581 : string = Fable.Core.Rust.emitExpr v580 v127
    let v582 : string = $"r#\"{v143}\"#"
    let v583 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v582
    let v584 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v583 v132
    let v585 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v584 v134
    let v586 : string = method2(v581)
    let v587 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v586 v65
    let v588 : string = method5()
    let v589 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v588 v65
    let v590 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v585, v587, v589) v140
    let v591 : string = Fable.Core.Rust.emitExpr v590 v127
    let v592 : string = $"r#\"{v154}\"#"
    let v593 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v592
    let v594 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v593 v132
    let v595 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v594 v134
    let v596 : string = method2(v591)
    let v597 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v596 v65
    let v598 : string = method6()
    let v599 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v598 v65
    let v600 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v595, v597, v599) v140
    let v601 : string = Fable.Core.Rust.emitExpr v600 v127
    let v602 : Types.std.string.String = Fable.Core.Rust.emitExpr v601 v79
    let v603 : Types.EmitType<Types.std.string.String> = v602 |> unbox<Types.EmitType<Types.std.string.String>>
    let v604 : string = method7()
    let v605 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v604 v65
    let v606 : unativeint = unativeint 0
    let v607 : unativeint = unativeint 2
    let v608 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v605, v606, v607) v210
    let v609 : string = Fable.Core.Rust.emitExpr v608 v127
    let v610 : uint8 = Fable.Core.Rust.emitExpr v609 v213
    let v611 : string = method7()
    let v612 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v611 v65
    let v613 : unativeint = unativeint 2
    let v614 : unativeint = unativeint 4
    let v615 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v612, v613, v614) v210
    let v616 : string = Fable.Core.Rust.emitExpr v615 v127
    let v617 : uint8 = Fable.Core.Rust.emitExpr v616 v213
    let v618 : string = method7()
    let v619 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v618 v65
    let v620 : unativeint = unativeint 4
    let v621 : unativeint = unativeint 6
    let v622 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v619, v620, v621) v210
    let v623 : string = Fable.Core.Rust.emitExpr v622 v127
    let v624 : uint8 = Fable.Core.Rust.emitExpr v623 v213
    let v625 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v603, v610, v617, v624) v229
    let v626 : Types.std.string.String = Fable.Core.Rust.emitExpr v625 v170
    let v627 : Types.std.string.String = v527 |> unbox
    let v628 : string = Fable.Core.Rust.emitExpr v627 v127
    let v629 : string = $"r#\"{v129}\"#"
    let v630 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v629
    let v631 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v630 v132
    let v632 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v631 v134
    let v633 : string = method2(v628)
    let v634 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v633 v65
    let v635 : string = method4()
    let v636 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v635 v65
    let v637 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v632, v634, v636) v140
    let v638 : string = Fable.Core.Rust.emitExpr v637 v127
    let v639 : string = $"r#\"{v143}\"#"
    let v640 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v639
    let v641 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v640 v132
    let v642 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v641 v134
    let v643 : string = method2(v638)
    let v644 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v643 v65
    let v645 : string = method5()
    let v646 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v645 v65
    let v647 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v642, v644, v646) v140
    let v648 : string = Fable.Core.Rust.emitExpr v647 v127
    let v649 : string = $"r#\"{v154}\"#"
    let v650 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v649
    let v651 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v650 v132
    let v652 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v651 v134
    let v653 : string = method2(v648)
    let v654 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v653 v65
    let v655 : string = method6()
    let v656 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v655 v65
    let v657 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v652, v654, v656) v140
    let v658 : string = Fable.Core.Rust.emitExpr v657 v127
    let v659 : Types.std.string.String = Fable.Core.Rust.emitExpr v658 v79
    let v660 : Types.EmitType<Types.std.string.String> = v659 |> unbox<Types.EmitType<Types.std.string.String>>
    let v661 : string = method8()
    let v662 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v661 v65
    let v663 : unativeint = unativeint 0
    let v664 : unativeint = unativeint 2
    let v665 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v662, v663, v664) v210
    let v666 : string = Fable.Core.Rust.emitExpr v665 v127
    let v667 : uint8 = Fable.Core.Rust.emitExpr v666 v213
    let v668 : string = method8()
    let v669 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v668 v65
    let v670 : unativeint = unativeint 2
    let v671 : unativeint = unativeint 4
    let v672 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v669, v670, v671) v210
    let v673 : string = Fable.Core.Rust.emitExpr v672 v127
    let v674 : uint8 = Fable.Core.Rust.emitExpr v673 v213
    let v675 : string = method8()
    let v676 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v675 v65
    let v677 : unativeint = unativeint 4
    let v678 : unativeint = unativeint 6
    let v679 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v676, v677, v678) v210
    let v680 : string = Fable.Core.Rust.emitExpr v679 v127
    let v681 : uint8 = Fable.Core.Rust.emitExpr v680 v213
    let v682 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v660, v667, v674, v681) v229
    let v683 : Types.std.string.String = Fable.Core.Rust.emitExpr v682 v170
    let v684 : string = $"{v569} {v626} {v683}"
    System.Console.WriteLine v684
    let v685 : UH0 = UH0_1
    let v686 : Mut0 = {l0 = v685} : Mut0
    let v687 : (Types.Vec<uint8> -> Result<bool, Types.std.io.Error>) = method9(v295, v686)
    let v688 : string = "($0).borrow_mut().for_each(move |x| $1(x.to_vec()))"
    let v689 : Result<unit, Types.std.io.Error> = Fable.Core.Rust.emitExpr struct (v495, v687) v688
    Fable.Core.Rust.emitExpr v689 v61
    let v690 : UH0 = v686.l0
    let v691 : UH0 = UH0_1
    let v692 : UH0 = method10(v690, v691)
    let v693 : UH1 = UH1_1
    let v694 : UH1 = method11(v692, v693)
    let v695 : string = "lines len"
    let v696 : Types.std.string.String = Fable.Core.Rust.emitExpr v695 v79
    let v697 : Types.EmitType<Types.std.string.String> = v696 |> unbox<Types.EmitType<Types.std.string.String>>
    let v698 : int32 = 0
    let v699 : int32 = method12(v694, v698)
    let v700 : Types.std.string.String = Fable.Core.Rust.emitExpr v699 v82
    let v701 : Types.EmitType<Types.std.string.String> = v700 |> unbox<Types.EmitType<Types.std.string.String>>
    let v702 : (Types.EmitType<Types.std.string.String> []) = [|v697; v701|]
    let v703 : obj = Fable.Core.Rust.emitExpr v702 v86
    let v704 : Types.std.string.String = Fable.Core.Rust.emitExpr v703 v88
    let v705 : Types.EmitType<Types.std.string.String> = v704 |> unbox<Types.EmitType<Types.std.string.String>>
    let v706 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v707 : int64 = Fable.Core.Rust.emitExpr v706 v6
    let v708 : int64 = v707 - v295
    let v709 : string = (v708).ToString ()
    let v710 : int32 = 6
    let v711 : string = method3(v710, v709)
    let v712 : uint8 = Fable.Core.Rust.emitExpr () v97
    let v713 : Types.std.string.String = Fable.Core.Rust.emitExpr v99 v79
    let v714 : Types.EmitType<Types.std.string.String> = v713 |> unbox<Types.EmitType<Types.std.string.String>>
    let v715 : Types.std.string.String = Fable.Core.Rust.emitExpr v711 v79
    let v716 : Types.EmitType<Types.std.string.String> = v715 |> unbox<Types.EmitType<Types.std.string.String>>
    let v717 : Types.std.string.String = Fable.Core.Rust.emitExpr v104 v79
    let v718 : Types.EmitType<Types.std.string.String> = v717 |> unbox<Types.EmitType<Types.std.string.String>>
    let v719 : Types.std.string.String = Fable.Core.Rust.emitExpr v712 v82
    let v720 : Types.EmitType<Types.std.string.String> = v719 |> unbox<Types.EmitType<Types.std.string.String>>
    let v721 : Types.std.string.String = Fable.Core.Rust.emitExpr v109 v79
    let v722 : Types.EmitType<Types.std.string.String> = v721 |> unbox<Types.EmitType<Types.std.string.String>>
    let v723 : Types.std.string.String = Fable.Core.Rust.emitExpr v112 v79
    let v724 : Types.EmitType<Types.std.string.String> = v723 |> unbox<Types.EmitType<Types.std.string.String>>
    let v725 : (Types.EmitType<Types.std.string.String> []) = [|v714; v716; v718; v720; v722; v724|]
    let v726 : obj = Fable.Core.Rust.emitExpr v725 v86
    let v727 : Types.std.string.String = Fable.Core.Rust.emitExpr v726 v88
    let v728 : Types.EmitType<Types.std.string.String> = v727 |> unbox<Types.EmitType<Types.std.string.String>>
    let v729 : Types.std.string.String = Fable.Core.Rust.emitExpr v332 v79
    let v730 : Types.EmitType<Types.std.string.String> = v729 |> unbox<Types.EmitType<Types.std.string.String>>
    let v731 : (Types.EmitType<Types.std.string.String> []) = [|v730|]
    let v732 : obj = Fable.Core.Rust.emitExpr v731 v86
    let v733 : Types.std.string.String = Fable.Core.Rust.emitExpr v732 v88
    let v734 : Types.EmitType<Types.std.string.String> = v733 |> unbox<Types.EmitType<Types.std.string.String>>
    let v735 : Types.std.string.String = v734 |> unbox
    let v736 : string = Fable.Core.Rust.emitExpr v735 v127
    let v737 : string = $"r#\"{v129}\"#"
    let v738 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v737
    let v739 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v738 v132
    let v740 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v739 v134
    let v741 : string = method2(v736)
    let v742 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v741 v65
    let v743 : string = method4()
    let v744 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v743 v65
    let v745 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v740, v742, v744) v140
    let v746 : string = Fable.Core.Rust.emitExpr v745 v127
    let v747 : string = $"r#\"{v143}\"#"
    let v748 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v747
    let v749 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v748 v132
    let v750 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v749 v134
    let v751 : string = method2(v746)
    let v752 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v751 v65
    let v753 : string = method5()
    let v754 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v753 v65
    let v755 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v750, v752, v754) v140
    let v756 : string = Fable.Core.Rust.emitExpr v755 v127
    let v757 : string = $"r#\"{v154}\"#"
    let v758 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v757
    let v759 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v758 v132
    let v760 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v759 v134
    let v761 : string = method2(v756)
    let v762 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v761 v65
    let v763 : string = method6()
    let v764 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v763 v65
    let v765 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v760, v762, v764) v140
    let v766 : string = Fable.Core.Rust.emitExpr v765 v127
    let v767 : Types.std.string.String = Fable.Core.Rust.emitExpr v766 v79
    let v768 : Types.EmitType<Types.std.string.String> = v767 |> unbox<Types.EmitType<Types.std.string.String>>
    let v769 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v768, v167) v168
    let v770 : Types.std.string.String = Fable.Core.Rust.emitExpr v769 v170
    let v771 : Types.std.string.String = v705 |> unbox
    let v772 : string = Fable.Core.Rust.emitExpr v771 v127
    let v773 : string = $"r#\"{v129}\"#"
    let v774 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v773
    let v775 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v774 v132
    let v776 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v775 v134
    let v777 : string = method2(v772)
    let v778 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v777 v65
    let v779 : string = method4()
    let v780 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v779 v65
    let v781 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v776, v778, v780) v140
    let v782 : string = Fable.Core.Rust.emitExpr v781 v127
    let v783 : string = $"r#\"{v143}\"#"
    let v784 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v783
    let v785 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v784 v132
    let v786 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v785 v134
    let v787 : string = method2(v782)
    let v788 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v787 v65
    let v789 : string = method5()
    let v790 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v789 v65
    let v791 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v786, v788, v790) v140
    let v792 : string = Fable.Core.Rust.emitExpr v791 v127
    let v793 : string = $"r#\"{v154}\"#"
    let v794 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v793
    let v795 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v794 v132
    let v796 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v795 v134
    let v797 : string = method2(v792)
    let v798 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v797 v65
    let v799 : string = method6()
    let v800 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v799 v65
    let v801 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v796, v798, v800) v140
    let v802 : string = Fable.Core.Rust.emitExpr v801 v127
    let v803 : Types.std.string.String = Fable.Core.Rust.emitExpr v802 v79
    let v804 : Types.EmitType<Types.std.string.String> = v803 |> unbox<Types.EmitType<Types.std.string.String>>
    let v805 : string = method7()
    let v806 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v805 v65
    let v807 : unativeint = unativeint 0
    let v808 : unativeint = unativeint 2
    let v809 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v806, v807, v808) v210
    let v810 : string = Fable.Core.Rust.emitExpr v809 v127
    let v811 : uint8 = Fable.Core.Rust.emitExpr v810 v213
    let v812 : string = method7()
    let v813 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v812 v65
    let v814 : unativeint = unativeint 2
    let v815 : unativeint = unativeint 4
    let v816 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v813, v814, v815) v210
    let v817 : string = Fable.Core.Rust.emitExpr v816 v127
    let v818 : uint8 = Fable.Core.Rust.emitExpr v817 v213
    let v819 : string = method7()
    let v820 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v819 v65
    let v821 : unativeint = unativeint 4
    let v822 : unativeint = unativeint 6
    let v823 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v820, v821, v822) v210
    let v824 : string = Fable.Core.Rust.emitExpr v823 v127
    let v825 : uint8 = Fable.Core.Rust.emitExpr v824 v213
    let v826 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v804, v811, v818, v825) v229
    let v827 : Types.std.string.String = Fable.Core.Rust.emitExpr v826 v170
    let v828 : Types.std.string.String = v728 |> unbox
    let v829 : string = Fable.Core.Rust.emitExpr v828 v127
    let v830 : string = $"r#\"{v129}\"#"
    let v831 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v830
    let v832 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v831 v132
    let v833 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v832 v134
    let v834 : string = method2(v829)
    let v835 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v834 v65
    let v836 : string = method4()
    let v837 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v836 v65
    let v838 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v833, v835, v837) v140
    let v839 : string = Fable.Core.Rust.emitExpr v838 v127
    let v840 : string = $"r#\"{v143}\"#"
    let v841 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v840
    let v842 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v841 v132
    let v843 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v842 v134
    let v844 : string = method2(v839)
    let v845 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v844 v65
    let v846 : string = method5()
    let v847 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v846 v65
    let v848 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v843, v845, v847) v140
    let v849 : string = Fable.Core.Rust.emitExpr v848 v127
    let v850 : string = $"r#\"{v154}\"#"
    let v851 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v850
    let v852 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v851 v132
    let v853 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v852 v134
    let v854 : string = method2(v849)
    let v855 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v854 v65
    let v856 : string = method6()
    let v857 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v856 v65
    let v858 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v853, v855, v857) v140
    let v859 : string = Fable.Core.Rust.emitExpr v858 v127
    let v860 : Types.std.string.String = Fable.Core.Rust.emitExpr v859 v79
    let v861 : Types.EmitType<Types.std.string.String> = v860 |> unbox<Types.EmitType<Types.std.string.String>>
    let v862 : string = method8()
    let v863 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v862 v65
    let v864 : unativeint = unativeint 0
    let v865 : unativeint = unativeint 2
    let v866 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v863, v864, v865) v210
    let v867 : string = Fable.Core.Rust.emitExpr v866 v127
    let v868 : uint8 = Fable.Core.Rust.emitExpr v867 v213
    let v869 : string = method8()
    let v870 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v869 v65
    let v871 : unativeint = unativeint 2
    let v872 : unativeint = unativeint 4
    let v873 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v870, v871, v872) v210
    let v874 : string = Fable.Core.Rust.emitExpr v873 v127
    let v875 : uint8 = Fable.Core.Rust.emitExpr v874 v213
    let v876 : string = method8()
    let v877 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v876 v65
    let v878 : unativeint = unativeint 4
    let v879 : unativeint = unativeint 6
    let v880 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v877, v878, v879) v210
    let v881 : string = Fable.Core.Rust.emitExpr v880 v127
    let v882 : uint8 = Fable.Core.Rust.emitExpr v881 v213
    let v883 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v861, v868, v875, v882) v229
    let v884 : Types.std.string.String = Fable.Core.Rust.emitExpr v883 v170
    let v885 : string = $"{v770} {v827} {v884}"
    System.Console.WriteLine v885
    let v886 : int32 = 0
    let v887 : UH1 = UH1_1
    let struct (v888 : int32, v889 : UH1) = method13(v7, v694, v886, v887)
    let v890 : UH1 = UH1_1
    let v891 : UH1 = method14(v889, v890)
    let v892 : string = ""
    let v893 : string = method15(v891, v892)
    let v894 : string = "text len"
    let v895 : Types.std.string.String = Fable.Core.Rust.emitExpr v894 v79
    let v896 : Types.EmitType<Types.std.string.String> = v895 |> unbox<Types.EmitType<Types.std.string.String>>
    let v897 : string = "($0).len().try_into().unwrap()"
    let v898 : int32 = Fable.Core.Rust.emitExpr v893 v897
    let v899 : Types.std.string.String = Fable.Core.Rust.emitExpr v898 v82
    let v900 : Types.EmitType<Types.std.string.String> = v899 |> unbox<Types.EmitType<Types.std.string.String>>
    let v901 : (Types.EmitType<Types.std.string.String> []) = [|v896; v900|]
    let v902 : obj = Fable.Core.Rust.emitExpr v901 v86
    let v903 : Types.std.string.String = Fable.Core.Rust.emitExpr v902 v88
    let v904 : Types.EmitType<Types.std.string.String> = v903 |> unbox<Types.EmitType<Types.std.string.String>>
    let v905 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v906 : int64 = Fable.Core.Rust.emitExpr v905 v6
    let v907 : int64 = v906 - v7
    let v908 : string = (v907).ToString ()
    let v909 : int32 = 6
    let v910 : string = method3(v909, v908)
    let v911 : uint8 = Fable.Core.Rust.emitExpr () v97
    let v912 : Types.std.string.String = Fable.Core.Rust.emitExpr v99 v79
    let v913 : Types.EmitType<Types.std.string.String> = v912 |> unbox<Types.EmitType<Types.std.string.String>>
    let v914 : Types.std.string.String = Fable.Core.Rust.emitExpr v910 v79
    let v915 : Types.EmitType<Types.std.string.String> = v914 |> unbox<Types.EmitType<Types.std.string.String>>
    let v916 : Types.std.string.String = Fable.Core.Rust.emitExpr v104 v79
    let v917 : Types.EmitType<Types.std.string.String> = v916 |> unbox<Types.EmitType<Types.std.string.String>>
    let v918 : Types.std.string.String = Fable.Core.Rust.emitExpr v911 v82
    let v919 : Types.EmitType<Types.std.string.String> = v918 |> unbox<Types.EmitType<Types.std.string.String>>
    let v920 : Types.std.string.String = Fable.Core.Rust.emitExpr v109 v79
    let v921 : Types.EmitType<Types.std.string.String> = v920 |> unbox<Types.EmitType<Types.std.string.String>>
    let v922 : Types.std.string.String = Fable.Core.Rust.emitExpr v112 v79
    let v923 : Types.EmitType<Types.std.string.String> = v922 |> unbox<Types.EmitType<Types.std.string.String>>
    let v924 : (Types.EmitType<Types.std.string.String> []) = [|v913; v915; v917; v919; v921; v923|]
    let v925 : obj = Fable.Core.Rust.emitExpr v924 v86
    let v926 : Types.std.string.String = Fable.Core.Rust.emitExpr v925 v88
    let v927 : Types.EmitType<Types.std.string.String> = v926 |> unbox<Types.EmitType<Types.std.string.String>>
    let v928 : Types.std.string.String = Fable.Core.Rust.emitExpr v119 v79
    let v929 : Types.EmitType<Types.std.string.String> = v928 |> unbox<Types.EmitType<Types.std.string.String>>
    let v930 : (Types.EmitType<Types.std.string.String> []) = [|v929|]
    let v931 : obj = Fable.Core.Rust.emitExpr v930 v86
    let v932 : Types.std.string.String = Fable.Core.Rust.emitExpr v931 v88
    let v933 : Types.EmitType<Types.std.string.String> = v932 |> unbox<Types.EmitType<Types.std.string.String>>
    let v934 : Types.std.string.String = v933 |> unbox
    let v935 : string = Fable.Core.Rust.emitExpr v934 v127
    let v936 : string = $"r#\"{v129}\"#"
    let v937 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v936
    let v938 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v937 v132
    let v939 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v938 v134
    let v940 : string = method2(v935)
    let v941 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v940 v65
    let v942 : string = method4()
    let v943 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v942 v65
    let v944 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v939, v941, v943) v140
    let v945 : string = Fable.Core.Rust.emitExpr v944 v127
    let v946 : string = $"r#\"{v143}\"#"
    let v947 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v946
    let v948 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v947 v132
    let v949 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v948 v134
    let v950 : string = method2(v945)
    let v951 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v950 v65
    let v952 : string = method5()
    let v953 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v952 v65
    let v954 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v949, v951, v953) v140
    let v955 : string = Fable.Core.Rust.emitExpr v954 v127
    let v956 : string = $"r#\"{v154}\"#"
    let v957 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v956
    let v958 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v957 v132
    let v959 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v958 v134
    let v960 : string = method2(v955)
    let v961 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v960 v65
    let v962 : string = method6()
    let v963 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v962 v65
    let v964 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v959, v961, v963) v140
    let v965 : string = Fable.Core.Rust.emitExpr v964 v127
    let v966 : Types.std.string.String = Fable.Core.Rust.emitExpr v965 v79
    let v967 : Types.EmitType<Types.std.string.String> = v966 |> unbox<Types.EmitType<Types.std.string.String>>
    let v968 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v967, v167) v168
    let v969 : Types.std.string.String = Fable.Core.Rust.emitExpr v968 v170
    let v970 : Types.std.string.String = v904 |> unbox
    let v971 : string = Fable.Core.Rust.emitExpr v970 v127
    let v972 : string = $"r#\"{v129}\"#"
    let v973 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v972
    let v974 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v973 v132
    let v975 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v974 v134
    let v976 : string = method2(v971)
    let v977 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v976 v65
    let v978 : string = method4()
    let v979 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v978 v65
    let v980 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v975, v977, v979) v140
    let v981 : string = Fable.Core.Rust.emitExpr v980 v127
    let v982 : string = $"r#\"{v143}\"#"
    let v983 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v982
    let v984 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v983 v132
    let v985 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v984 v134
    let v986 : string = method2(v981)
    let v987 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v986 v65
    let v988 : string = method5()
    let v989 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v988 v65
    let v990 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v985, v987, v989) v140
    let v991 : string = Fable.Core.Rust.emitExpr v990 v127
    let v992 : string = $"r#\"{v154}\"#"
    let v993 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v992
    let v994 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v993 v132
    let v995 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v994 v134
    let v996 : string = method2(v991)
    let v997 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v996 v65
    let v998 : string = method6()
    let v999 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v998 v65
    let v1000 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v995, v997, v999) v140
    let v1001 : string = Fable.Core.Rust.emitExpr v1000 v127
    let v1002 : Types.std.string.String = Fable.Core.Rust.emitExpr v1001 v79
    let v1003 : Types.EmitType<Types.std.string.String> = v1002 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1004 : string = method7()
    let v1005 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1004 v65
    let v1006 : unativeint = unativeint 0
    let v1007 : unativeint = unativeint 2
    let v1008 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1005, v1006, v1007) v210
    let v1009 : string = Fable.Core.Rust.emitExpr v1008 v127
    let v1010 : uint8 = Fable.Core.Rust.emitExpr v1009 v213
    let v1011 : string = method7()
    let v1012 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1011 v65
    let v1013 : unativeint = unativeint 2
    let v1014 : unativeint = unativeint 4
    let v1015 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1012, v1013, v1014) v210
    let v1016 : string = Fable.Core.Rust.emitExpr v1015 v127
    let v1017 : uint8 = Fable.Core.Rust.emitExpr v1016 v213
    let v1018 : string = method7()
    let v1019 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1018 v65
    let v1020 : unativeint = unativeint 4
    let v1021 : unativeint = unativeint 6
    let v1022 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1019, v1020, v1021) v210
    let v1023 : string = Fable.Core.Rust.emitExpr v1022 v127
    let v1024 : uint8 = Fable.Core.Rust.emitExpr v1023 v213
    let v1025 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1003, v1010, v1017, v1024) v229
    let v1026 : Types.std.string.String = Fable.Core.Rust.emitExpr v1025 v170
    let v1027 : Types.std.string.String = v927 |> unbox
    let v1028 : string = Fable.Core.Rust.emitExpr v1027 v127
    let v1029 : string = $"r#\"{v129}\"#"
    let v1030 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1029
    let v1031 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1030 v132
    let v1032 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1031 v134
    let v1033 : string = method2(v1028)
    let v1034 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1033 v65
    let v1035 : string = method4()
    let v1036 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1035 v65
    let v1037 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1032, v1034, v1036) v140
    let v1038 : string = Fable.Core.Rust.emitExpr v1037 v127
    let v1039 : string = $"r#\"{v143}\"#"
    let v1040 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1039
    let v1041 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1040 v132
    let v1042 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1041 v134
    let v1043 : string = method2(v1038)
    let v1044 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1043 v65
    let v1045 : string = method5()
    let v1046 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1045 v65
    let v1047 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1042, v1044, v1046) v140
    let v1048 : string = Fable.Core.Rust.emitExpr v1047 v127
    let v1049 : string = $"r#\"{v154}\"#"
    let v1050 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1049
    let v1051 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1050 v132
    let v1052 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1051 v134
    let v1053 : string = method2(v1048)
    let v1054 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1053 v65
    let v1055 : string = method6()
    let v1056 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1055 v65
    let v1057 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1052, v1054, v1056) v140
    let v1058 : string = Fable.Core.Rust.emitExpr v1057 v127
    let v1059 : Types.std.string.String = Fable.Core.Rust.emitExpr v1058 v79
    let v1060 : Types.EmitType<Types.std.string.String> = v1059 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1061 : string = method8()
    let v1062 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1061 v65
    let v1063 : unativeint = unativeint 0
    let v1064 : unativeint = unativeint 2
    let v1065 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1062, v1063, v1064) v210
    let v1066 : string = Fable.Core.Rust.emitExpr v1065 v127
    let v1067 : uint8 = Fable.Core.Rust.emitExpr v1066 v213
    let v1068 : string = method8()
    let v1069 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1068 v65
    let v1070 : unativeint = unativeint 2
    let v1071 : unativeint = unativeint 4
    let v1072 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1069, v1070, v1071) v210
    let v1073 : string = Fable.Core.Rust.emitExpr v1072 v127
    let v1074 : uint8 = Fable.Core.Rust.emitExpr v1073 v213
    let v1075 : string = method8()
    let v1076 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1075 v65
    let v1077 : unativeint = unativeint 4
    let v1078 : unativeint = unativeint 6
    let v1079 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1076, v1077, v1078) v210
    let v1080 : string = Fable.Core.Rust.emitExpr v1079 v127
    let v1081 : uint8 = Fable.Core.Rust.emitExpr v1080 v213
    let v1082 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1060, v1067, v1074, v1081) v229
    let v1083 : Types.std.string.String = Fable.Core.Rust.emitExpr v1082 v170
    let v1084 : string = $"{v969} {v1026} {v1083}"
    System.Console.WriteLine v1084
    let v1085 : string = "std::fs::write($0, $1.as_str())"
    let v1086 : Result<unit, Types.std.io.Error> = Fable.Core.Rust.emitExpr struct (v77, v893) v1085
    Fable.Core.Rust.emitExpr v1086 v61
    let v1087 : string = "> fs_write rs_path_clean text; ok"
    let v1088 : Types.std.string.String = Fable.Core.Rust.emitExpr v1087 v79
    let v1089 : Types.EmitType<Types.std.string.String> = v1088 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1090 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v1091 : int64 = Fable.Core.Rust.emitExpr v1090 v6
    let v1092 : int64 = v1091 - v7
    let v1093 : string = (v1092).ToString ()
    let v1094 : int32 = 6
    let v1095 : string = method3(v1094, v1093)
    let v1096 : uint8 = Fable.Core.Rust.emitExpr () v97
    let v1097 : Types.std.string.String = Fable.Core.Rust.emitExpr v99 v79
    let v1098 : Types.EmitType<Types.std.string.String> = v1097 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1099 : Types.std.string.String = Fable.Core.Rust.emitExpr v1095 v79
    let v1100 : Types.EmitType<Types.std.string.String> = v1099 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1101 : Types.std.string.String = Fable.Core.Rust.emitExpr v104 v79
    let v1102 : Types.EmitType<Types.std.string.String> = v1101 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1103 : Types.std.string.String = Fable.Core.Rust.emitExpr v1096 v82
    let v1104 : Types.EmitType<Types.std.string.String> = v1103 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1105 : Types.std.string.String = Fable.Core.Rust.emitExpr v109 v79
    let v1106 : Types.EmitType<Types.std.string.String> = v1105 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1107 : Types.std.string.String = Fable.Core.Rust.emitExpr v112 v79
    let v1108 : Types.EmitType<Types.std.string.String> = v1107 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1109 : (Types.EmitType<Types.std.string.String> []) = [|v1098; v1100; v1102; v1104; v1106; v1108|]
    let v1110 : obj = Fable.Core.Rust.emitExpr v1109 v86
    let v1111 : Types.std.string.String = Fable.Core.Rust.emitExpr v1110 v88
    let v1112 : Types.EmitType<Types.std.string.String> = v1111 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1113 : Types.std.string.String = Fable.Core.Rust.emitExpr v119 v79
    let v1114 : Types.EmitType<Types.std.string.String> = v1113 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1115 : (Types.EmitType<Types.std.string.String> []) = [|v1114|]
    let v1116 : obj = Fable.Core.Rust.emitExpr v1115 v86
    let v1117 : Types.std.string.String = Fable.Core.Rust.emitExpr v1116 v88
    let v1118 : Types.EmitType<Types.std.string.String> = v1117 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1119 : Types.std.string.String = v1118 |> unbox
    let v1120 : string = Fable.Core.Rust.emitExpr v1119 v127
    let v1121 : string = $"r#\"{v129}\"#"
    let v1122 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1121
    let v1123 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1122 v132
    let v1124 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1123 v134
    let v1125 : string = method2(v1120)
    let v1126 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1125 v65
    let v1127 : string = method4()
    let v1128 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1127 v65
    let v1129 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1124, v1126, v1128) v140
    let v1130 : string = Fable.Core.Rust.emitExpr v1129 v127
    let v1131 : string = $"r#\"{v143}\"#"
    let v1132 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1131
    let v1133 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1132 v132
    let v1134 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1133 v134
    let v1135 : string = method2(v1130)
    let v1136 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1135 v65
    let v1137 : string = method5()
    let v1138 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1137 v65
    let v1139 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1134, v1136, v1138) v140
    let v1140 : string = Fable.Core.Rust.emitExpr v1139 v127
    let v1141 : string = $"r#\"{v154}\"#"
    let v1142 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1141
    let v1143 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1142 v132
    let v1144 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1143 v134
    let v1145 : string = method2(v1140)
    let v1146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1145 v65
    let v1147 : string = method6()
    let v1148 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1147 v65
    let v1149 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1144, v1146, v1148) v140
    let v1150 : string = Fable.Core.Rust.emitExpr v1149 v127
    let v1151 : Types.std.string.String = Fable.Core.Rust.emitExpr v1150 v79
    let v1152 : Types.EmitType<Types.std.string.String> = v1151 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1153 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1152, v167) v168
    let v1154 : Types.std.string.String = Fable.Core.Rust.emitExpr v1153 v170
    let v1155 : Types.std.string.String = v1089 |> unbox
    let v1156 : string = Fable.Core.Rust.emitExpr v1155 v127
    let v1157 : string = $"r#\"{v129}\"#"
    let v1158 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1157
    let v1159 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1158 v132
    let v1160 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1159 v134
    let v1161 : string = method2(v1156)
    let v1162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1161 v65
    let v1163 : string = method4()
    let v1164 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1163 v65
    let v1165 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1160, v1162, v1164) v140
    let v1166 : string = Fable.Core.Rust.emitExpr v1165 v127
    let v1167 : string = $"r#\"{v143}\"#"
    let v1168 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1167
    let v1169 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1168 v132
    let v1170 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1169 v134
    let v1171 : string = method2(v1166)
    let v1172 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1171 v65
    let v1173 : string = method5()
    let v1174 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1173 v65
    let v1175 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1170, v1172, v1174) v140
    let v1176 : string = Fable.Core.Rust.emitExpr v1175 v127
    let v1177 : string = $"r#\"{v154}\"#"
    let v1178 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1177
    let v1179 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1178 v132
    let v1180 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1179 v134
    let v1181 : string = method2(v1176)
    let v1182 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1181 v65
    let v1183 : string = method6()
    let v1184 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1183 v65
    let v1185 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1180, v1182, v1184) v140
    let v1186 : string = Fable.Core.Rust.emitExpr v1185 v127
    let v1187 : Types.std.string.String = Fable.Core.Rust.emitExpr v1186 v79
    let v1188 : Types.EmitType<Types.std.string.String> = v1187 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1189 : string = method7()
    let v1190 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1189 v65
    let v1191 : unativeint = unativeint 0
    let v1192 : unativeint = unativeint 2
    let v1193 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1190, v1191, v1192) v210
    let v1194 : string = Fable.Core.Rust.emitExpr v1193 v127
    let v1195 : uint8 = Fable.Core.Rust.emitExpr v1194 v213
    let v1196 : string = method7()
    let v1197 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1196 v65
    let v1198 : unativeint = unativeint 2
    let v1199 : unativeint = unativeint 4
    let v1200 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1197, v1198, v1199) v210
    let v1201 : string = Fable.Core.Rust.emitExpr v1200 v127
    let v1202 : uint8 = Fable.Core.Rust.emitExpr v1201 v213
    let v1203 : string = method7()
    let v1204 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1203 v65
    let v1205 : unativeint = unativeint 4
    let v1206 : unativeint = unativeint 6
    let v1207 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1204, v1205, v1206) v210
    let v1208 : string = Fable.Core.Rust.emitExpr v1207 v127
    let v1209 : uint8 = Fable.Core.Rust.emitExpr v1208 v213
    let v1210 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1188, v1195, v1202, v1209) v229
    let v1211 : Types.std.string.String = Fable.Core.Rust.emitExpr v1210 v170
    let v1212 : Types.std.string.String = v1112 |> unbox
    let v1213 : string = Fable.Core.Rust.emitExpr v1212 v127
    let v1214 : string = $"r#\"{v129}\"#"
    let v1215 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1214
    let v1216 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1215 v132
    let v1217 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1216 v134
    let v1218 : string = method2(v1213)
    let v1219 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1218 v65
    let v1220 : string = method4()
    let v1221 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1220 v65
    let v1222 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1217, v1219, v1221) v140
    let v1223 : string = Fable.Core.Rust.emitExpr v1222 v127
    let v1224 : string = $"r#\"{v143}\"#"
    let v1225 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1224
    let v1226 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1225 v132
    let v1227 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1226 v134
    let v1228 : string = method2(v1223)
    let v1229 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1228 v65
    let v1230 : string = method5()
    let v1231 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1230 v65
    let v1232 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1227, v1229, v1231) v140
    let v1233 : string = Fable.Core.Rust.emitExpr v1232 v127
    let v1234 : string = $"r#\"{v154}\"#"
    let v1235 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1234
    let v1236 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1235 v132
    let v1237 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1236 v134
    let v1238 : string = method2(v1233)
    let v1239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1238 v65
    let v1240 : string = method6()
    let v1241 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1240 v65
    let v1242 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1237, v1239, v1241) v140
    let v1243 : string = Fable.Core.Rust.emitExpr v1242 v127
    let v1244 : Types.std.string.String = Fable.Core.Rust.emitExpr v1243 v79
    let v1245 : Types.EmitType<Types.std.string.String> = v1244 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1246 : string = method8()
    let v1247 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1246 v65
    let v1248 : unativeint = unativeint 0
    let v1249 : unativeint = unativeint 2
    let v1250 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1247, v1248, v1249) v210
    let v1251 : string = Fable.Core.Rust.emitExpr v1250 v127
    let v1252 : uint8 = Fable.Core.Rust.emitExpr v1251 v213
    let v1253 : string = method8()
    let v1254 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1253 v65
    let v1255 : unativeint = unativeint 2
    let v1256 : unativeint = unativeint 4
    let v1257 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1254, v1255, v1256) v210
    let v1258 : string = Fable.Core.Rust.emitExpr v1257 v127
    let v1259 : uint8 = Fable.Core.Rust.emitExpr v1258 v213
    let v1260 : string = method8()
    let v1261 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1260 v65
    let v1262 : unativeint = unativeint 4
    let v1263 : unativeint = unativeint 6
    let v1264 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1261, v1262, v1263) v210
    let v1265 : string = Fable.Core.Rust.emitExpr v1264 v127
    let v1266 : uint8 = Fable.Core.Rust.emitExpr v1265 v213
    let v1267 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1245, v1252, v1259, v1266) v229
    let v1268 : Types.std.string.String = Fable.Core.Rust.emitExpr v1267 v170
    let v1269 : string = $"{v1154} {v1211} {v1268}"
    System.Console.WriteLine v1269
    0
let v0 : (unit -> int32) = closure0()
()
