type [<Struct>] US0 =
    | US0_0
    | US0_1
and UH0 =
    | UH0_0 of Types.std.string.String * UH0
    | UH0_1
and Mut0 = {mutable l0 : UH0}
and UH1 =
    | UH1_0 of string * UH1
    | UH1_1
let rec method0 () : struct (string * string * string * bool) =
    let v0 : string = ""
    let v1 : obj = v0
    struct (v0, v0, v0, true)
and method1 () : string =
    let v0 : string = "rs-path"
    v0
and method2 (v0 : string) : string =
    v0
and method3 (v0 : int32, v1 : string) : string =
    let v2 : int32 = String.length v1
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : string = $"0{v1}"
        method3(v0, v4)
    else
        v1
and method4 () : string =
    let v0 : string = "$1=$2"
    v0
and method5 () : string =
    let v0 : string = "[$1]"
    v0
and method6 () : string =
    let v0 : string = " "
    v0
and method7 () : string =
    let v0 : string = "666666"
    v0
and method8 () : string =
    let v0 : string = "222222"
    v0
and closure1 (v0 : int64, v1 : Mut0) (v2 : Types.Vec<uint8>) : Result<bool, Types.std.io.Error> =
    let v3 : string = "line len"
    let v4 : string = "($0).to_string()"
    let v5 : Types.std.string.String = Fable.Core.Rust.emitExpr v3 v4
    let v6 : Types.EmitType<Types.std.string.String> = v5 |> unbox<Types.EmitType<Types.std.string.String>>
    let v7 : string = "($0).len().try_into().unwrap()"
    let v8 : int32 = Fable.Core.Rust.emitExpr v2 v7
    let v9 : string = "format!(\"{:?}\", $0)"
    let v10 : Types.std.string.String = Fable.Core.Rust.emitExpr v8 v9
    let v11 : Types.EmitType<Types.std.string.String> = v10 |> unbox<Types.EmitType<Types.std.string.String>>
    let v12 : (Types.EmitType<Types.std.string.String> []) = [|v6; v11|]
    let v13 : string = "core::ops::Deref::deref($0)"
    let v14 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v12 v13
    let v15 : string = "&***$0"
    let v16 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v14 v15
    let v17 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v16 v15
    let v18 : Types.std.string.String = Fable.Core.Rust.emitExpr v17 v9
    let v19 : Types.EmitType<Types.std.string.String> = v18 |> unbox<Types.EmitType<Types.std.string.String>>
    let v20 : string = "std::string::String::from_utf8(($0).to_owned()).unwrap()"
    let v21 : Types.std.string.String = Fable.Core.Rust.emitExpr v2 v20
    let v22 : UH0 = v1.l0
    let v23 : UH0 = UH0_0(v21, v22)
    v1.l0 <- v23
    let v24 : Result<bool, Types.std.io.Error> = Ok true
    v24
and method9 (v0 : int64, v1 : Mut0) : (Types.Vec<uint8> -> Result<bool, Types.std.io.Error>) =
    closure1(v0, v1)
and method10 (v0 : UH0, v1 : UH0) : UH0 =
    match v0 with
    | UH0_0(v2, v3) -> (* Cons *)
        let v4 : UH0 = UH0_0(v2, v1)
        method10(v3, v4)
    | UH0_1 -> (* Nil *)
        v1
and method11 (v0 : UH0, v1 : UH1) : UH1 =
    match v0 with
    | UH0_0(v2, v3) -> (* Cons *)
        let v4 : UH1 = method11(v3, v1)
        let v5 : string = "fable_library_rust::String_::fromStr($0)"
        let v6 : string = Fable.Core.Rust.emitExpr v2 v5
        UH1_0(v6, v4)
    | UH0_1 -> (* Nil *)
        v1
and method12 (v0 : UH1, v1 : int32) : int32 =
    match v0 with
    | UH1_0(v2, v3) -> (* Cons *)
        let v4 : int32 = v1 + 1
        method12(v3, v4)
    | UH1_1 -> (* Nil *)
        v1
and method13 (v0 : int64, v1 : UH1, v2 : int32, v3 : UH1) : struct (int32 * UH1) =
    match v1 with
    | UH1_0(v4, v5) -> (* Cons *)
        let v6 : string = "/node_modules/"
        let v7 : Types.Ref<string> = v6 |> unbox
        let v8 : Types.Ref<string> = v4 |> unbox
        let v9 : string = "($1).contains(&*$0)"
        let v10 : bool = Fable.Core.Rust.emitExpr struct (v7, v8) v9
        let struct (v270 : int32, v271 : UH1) =
            if v10 then
                let v11 : string = "found line. removing."
                let v12 : string = "($0).to_string()"
                let v13 : Types.std.string.String = Fable.Core.Rust.emitExpr v11 v12
                let v14 : Types.EmitType<Types.std.string.String> = v13 |> unbox<Types.EmitType<Types.std.string.String>>
                let v15 : string = " line"
                let v16 : Types.std.string.String = Fable.Core.Rust.emitExpr v15 v12
                let v17 : Types.EmitType<Types.std.string.String> = v16 |> unbox<Types.EmitType<Types.std.string.String>>
                let v18 : Types.std.string.String = Fable.Core.Rust.emitExpr v4 v12
                let v19 : Types.EmitType<Types.std.string.String> = v18 |> unbox<Types.EmitType<Types.std.string.String>>
                let v20 : (Types.EmitType<Types.std.string.String> []) = [|v14; v17; v19|]
                let v21 : string = "core::ops::Deref::deref($0)"
                let v22 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v20 v21
                let v23 : string = "&***$0"
                let v24 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v22 v23
                let v25 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v24 v23
                let v26 : string = "format!(\"{:?}\", $0)"
                let v27 : Types.std.string.String = Fable.Core.Rust.emitExpr v25 v26
                let v28 : Types.EmitType<Types.std.string.String> = v27 |> unbox<Types.EmitType<Types.std.string.String>>
                let v29 : string = "chrono::Utc::now()"
                let v30 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v29
                let v31 : string = "($0).timestamp()"
                let v32 : int64 = Fable.Core.Rust.emitExpr v30 v31
                let v33 : int64 = v32 - v0
                let v34 : string = (v33).ToString ()
                let v35 : int32 = 6
                let v36 : string = method3(v35, v34)
                let v37 : string = "rand::random::<u8>()"
                let v38 : uint8 = Fable.Core.Rust.emitExpr () v37
                let v39 : string = "timestamp"
                let v40 : Types.std.string.String = Fable.Core.Rust.emitExpr v39 v12
                let v41 : Types.EmitType<Types.std.string.String> = v40 |> unbox<Types.EmitType<Types.std.string.String>>
                let v42 : Types.std.string.String = Fable.Core.Rust.emitExpr v36 v12
                let v43 : Types.EmitType<Types.std.string.String> = v42 |> unbox<Types.EmitType<Types.std.string.String>>
                let v44 : string = "run_id"
                let v45 : Types.std.string.String = Fable.Core.Rust.emitExpr v44 v12
                let v46 : Types.EmitType<Types.std.string.String> = v45 |> unbox<Types.EmitType<Types.std.string.String>>
                let v47 : Types.std.string.String = Fable.Core.Rust.emitExpr v38 v26
                let v48 : Types.EmitType<Types.std.string.String> = v47 |> unbox<Types.EmitType<Types.std.string.String>>
                let v49 : string = "log_level"
                let v50 : Types.std.string.String = Fable.Core.Rust.emitExpr v49 v12
                let v51 : Types.EmitType<Types.std.string.String> = v50 |> unbox<Types.EmitType<Types.std.string.String>>
                let v52 : string = "Debug"
                let v53 : Types.std.string.String = Fable.Core.Rust.emitExpr v52 v12
                let v54 : Types.EmitType<Types.std.string.String> = v53 |> unbox<Types.EmitType<Types.std.string.String>>
                let v55 : (Types.EmitType<Types.std.string.String> []) = [|v41; v43; v46; v48; v51; v54|]
                let v56 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v55 v21
                let v57 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v56 v23
                let v58 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v57 v23
                let v59 : Types.std.string.String = Fable.Core.Rust.emitExpr v58 v26
                let v60 : Types.EmitType<Types.std.string.String> = v59 |> unbox<Types.EmitType<Types.std.string.String>>
                let v61 : string = "> app ()"
                let v62 : Types.std.string.String = Fable.Core.Rust.emitExpr v61 v12
                let v63 : Types.EmitType<Types.std.string.String> = v62 |> unbox<Types.EmitType<Types.std.string.String>>
                let v64 : (Types.EmitType<Types.std.string.String> []) = [|v63|]
                let v65 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v64 v21
                let v66 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v65 v23
                let v67 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v66 v23
                let v68 : Types.std.string.String = Fable.Core.Rust.emitExpr v67 v26
                let v69 : Types.EmitType<Types.std.string.String> = v68 |> unbox<Types.EmitType<Types.std.string.String>>
                let v70 : string = "format!(\"{}\", $0)"
                let v71 : Types.std.string.String = Fable.Core.Rust.emitExpr v69 v70
                let v72 : string = (v71).ToString ()
                let v73 : string = "\"([^\"]+)\", \"([^\"]+)\""
                let v74 : string = $"r#\"{v73}\"#"
                let v75 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v74
                let v76 : string = "regex::RegexBuilder::new($0)"
                let v77 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v75 v76
                let v78 : string = "$0.build().unwrap()"
                let v79 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v77 v78
                let v80 : string = method2(v72)
                let v81 : string = "$0.as_str()"
                let v82 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v80 v81
                let v83 : string = method4()
                let v84 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v83 v81
                let v85 : string = "$0.replace_all(&$1, $2).to_string()"
                let v86 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v79, v82, v84) v85
                let v87 : string = "fable_library_rust::String_::fromStr($0)"
                let v88 : string = Fable.Core.Rust.emitExpr v86 v87
                let v89 : string = "\\[\"(.*?)\"\\]"
                let v90 : string = $"r#\"{v89}\"#"
                let v91 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v90
                let v92 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v91 v76
                let v93 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v92 v78
                let v94 : string = method2(v88)
                let v95 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v94 v81
                let v96 : string = method5()
                let v97 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v96 v81
                let v98 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v93, v95, v97) v85
                let v99 : string = Fable.Core.Rust.emitExpr v98 v87
                let v100 : string = ", "
                let v101 : string = $"r#\"{v100}\"#"
                let v102 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v101
                let v103 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v102 v76
                let v104 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v103 v78
                let v105 : string = method2(v99)
                let v106 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v105 v81
                let v107 : string = method6()
                let v108 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v107 v81
                let v109 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v104, v106, v108) v85
                let v110 : string = Fable.Core.Rust.emitExpr v109 v87
                let v111 : Types.std.string.String = Fable.Core.Rust.emitExpr v110 v12
                let v112 : Types.EmitType<Types.std.string.String> = v111 |> unbox<Types.EmitType<Types.std.string.String>>
                let v113 : Types.std.string.String = Fable.Core.Rust.emitExpr v28 v70
                let v114 : string = (v113).ToString ()
                let v115 : string = $"r#\"{v73}\"#"
                let v116 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v115
                let v117 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v116 v76
                let v118 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v117 v78
                let v119 : string = method2(v114)
                let v120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v119 v81
                let v121 : string = method4()
                let v122 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v121 v81
                let v123 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v118, v120, v122) v85
                let v124 : string = Fable.Core.Rust.emitExpr v123 v87
                let v125 : string = $"r#\"{v89}\"#"
                let v126 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v125
                let v127 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v126 v76
                let v128 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v127 v78
                let v129 : string = method2(v124)
                let v130 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v129 v81
                let v131 : string = method5()
                let v132 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v131 v81
                let v133 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v128, v130, v132) v85
                let v134 : string = Fable.Core.Rust.emitExpr v133 v87
                let v135 : string = $"r#\"{v100}\"#"
                let v136 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v135
                let v137 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v136 v76
                let v138 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v137 v78
                let v139 : string = method2(v134)
                let v140 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v139 v81
                let v141 : string = method6()
                let v142 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v141 v81
                let v143 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v138, v140, v142) v85
                let v144 : string = Fable.Core.Rust.emitExpr v143 v87
                let v145 : Types.std.string.String = Fable.Core.Rust.emitExpr v144 v12
                let v146 : Types.EmitType<Types.std.string.String> = v145 |> unbox<Types.EmitType<Types.std.string.String>>
                let v147 : Types.std.string.String = Fable.Core.Rust.emitExpr v60 v70
                let v148 : string = (v147).ToString ()
                let v149 : string = $"r#\"{v73}\"#"
                let v150 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v149
                let v151 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v150 v76
                let v152 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v151 v78
                let v153 : string = method2(v148)
                let v154 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v153 v81
                let v155 : string = method4()
                let v156 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v155 v81
                let v157 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v152, v154, v156) v85
                let v158 : string = Fable.Core.Rust.emitExpr v157 v87
                let v159 : string = $"r#\"{v89}\"#"
                let v160 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v159
                let v161 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v160 v76
                let v162 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v161 v78
                let v163 : string = method2(v158)
                let v164 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v163 v81
                let v165 : string = method5()
                let v166 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v165 v81
                let v167 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v162, v164, v166) v85
                let v168 : string = Fable.Core.Rust.emitExpr v167 v87
                let v169 : string = $"r#\"{v100}\"#"
                let v170 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v169
                let v171 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v170 v76
                let v172 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v171 v78
                let v173 : string = method2(v168)
                let v174 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v173 v81
                let v175 : string = method6()
                let v176 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v175 v81
                let v177 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v172, v174, v176) v85
                let v178 : string = Fable.Core.Rust.emitExpr v177 v87
                let v179 : Types.std.string.String = Fable.Core.Rust.emitExpr v178 v12
                let v180 : Types.EmitType<Types.std.string.String> = v179 |> unbox<Types.EmitType<Types.std.string.String>>
                let v181 : string = "cfg!(target_arch = \"wasm32\")"
                let v182 : bool = Fable.Core.Rust.emitExpr () v181
                let v185 : US0 =
                    if v182 then
                        US0_1
                    else
                        US0_0
                match v185 with
                | US0_1 -> (* Wasm32 *)
                    let v186 : string = "%c%s %c%s %c%s"
                    let v187 : string = "($0).as_ref().to_string()"
                    let v188 : Types.std.string.String = Fable.Core.Rust.emitExpr v186 v187
                    let v189 : string = "color: purple"
                    let v190 : Types.std.string.String = Fable.Core.Rust.emitExpr v189 v187
                    let v191 : string = $"{v112}"
                    let v192 : Types.std.string.String = Fable.Core.Rust.emitExpr v191 v187
                    let v193 : string = "666666"
                    let v194 : string = $"color: {v193}"
                    let v195 : Types.std.string.String = Fable.Core.Rust.emitExpr v194 v187
                    let v196 : string = $"{v146} {v180}"
                    let v197 : Types.std.string.String = Fable.Core.Rust.emitExpr v196 v187
                    let v198 : string = "color: #222222"
                    let v199 : Types.std.string.String = Fable.Core.Rust.emitExpr v198 v187
                    let v200 : string = $"{v180}"
                    let v201 : Types.std.string.String = Fable.Core.Rust.emitExpr v200 v187
                    let v202 : (Types.std.string.String []) = [|v188; v190; v192; v195; v197; v199; v201|]
                    let v203 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v202 v21
                    let v204 : obj = v203
                    let v205 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
                    let v206 : obj = Fable.Core.Rust.emitExpr v204 v205
                    let v207 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
                    Fable.Core.Rust.emitExpr v206 v207
                    ()
                | _ ->
                    let v208 : string = "purple"
                    let v209 : string = "colored::Colorize::color(&*$0, $1.to_string())"
                    let v210 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v112, v208) v209
                    let v211 : Types.std.string.String = Fable.Core.Rust.emitExpr v210 v70
                    let v212 : string = method7()
                    let v213 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v212 v81
                    let v214 : unativeint = unativeint 0
                    let v215 : unativeint = unativeint 2
                    let v216 : string = "&$0[$1..$2]"
                    let v217 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v213, v214, v215) v216
                    let v218 : string = Fable.Core.Rust.emitExpr v217 v87
                    let v219 : string = "u8::from_str_radix($0, 16).unwrap()"
                    let v220 : uint8 = Fable.Core.Rust.emitExpr v218 v219
                    let v221 : string = method7()
                    let v222 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v221 v81
                    let v223 : unativeint = unativeint 2
                    let v224 : unativeint = unativeint 4
                    let v225 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v222, v223, v224) v216
                    let v226 : string = Fable.Core.Rust.emitExpr v225 v87
                    let v227 : uint8 = Fable.Core.Rust.emitExpr v226 v219
                    let v228 : string = method7()
                    let v229 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v228 v81
                    let v230 : unativeint = unativeint 4
                    let v231 : unativeint = unativeint 6
                    let v232 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v229, v230, v231) v216
                    let v233 : string = Fable.Core.Rust.emitExpr v232 v87
                    let v234 : uint8 = Fable.Core.Rust.emitExpr v233 v219
                    let v235 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
                    let v236 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v146, v220, v227, v234) v235
                    let v237 : Types.std.string.String = Fable.Core.Rust.emitExpr v236 v70
                    let v238 : string = method8()
                    let v239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v238 v81
                    let v240 : unativeint = unativeint 0
                    let v241 : unativeint = unativeint 2
                    let v242 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v239, v240, v241) v216
                    let v243 : string = Fable.Core.Rust.emitExpr v242 v87
                    let v244 : uint8 = Fable.Core.Rust.emitExpr v243 v219
                    let v245 : string = method8()
                    let v246 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v245 v81
                    let v247 : unativeint = unativeint 2
                    let v248 : unativeint = unativeint 4
                    let v249 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v246, v247, v248) v216
                    let v250 : string = Fable.Core.Rust.emitExpr v249 v87
                    let v251 : uint8 = Fable.Core.Rust.emitExpr v250 v219
                    let v252 : string = method8()
                    let v253 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v252 v81
                    let v254 : unativeint = unativeint 4
                    let v255 : unativeint = unativeint 6
                    let v256 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v253, v254, v255) v216
                    let v257 : string = Fable.Core.Rust.emitExpr v256 v87
                    let v258 : uint8 = Fable.Core.Rust.emitExpr v257 v219
                    let v259 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v180, v244, v251, v258) v235
                    let v260 : Types.std.string.String = Fable.Core.Rust.emitExpr v259 v70
                    let v261 : string = $"{v211} {v237} {v260}"
                    System.Console.WriteLine v261
                    ()
                struct (1, v3)
            else
                let v262 : bool = 0 = v2
                if v262 then
                    let v263 : UH1 = UH1_0(v4, v3)
                    struct (0, v263)
                else
                    let v264 : bool = 2 = v2
                    if v264 then
                        struct (0, v3)
                    else
                        let v265 : int32 = v2 + 1
                        struct (v265, v3)
        method13(v0, v5, v270, v271)
    | UH1_1 -> (* Nil *)
        struct (v2, v3)
and method14 (v0 : UH1, v1 : UH1) : UH1 =
    match v0 with
    | UH1_0(v2, v3) -> (* Cons *)
        let v4 : UH1 = UH1_0(v2, v1)
        method14(v3, v4)
    | UH1_1 -> (* Nil *)
        v1
and method15 (v0 : UH1, v1 : string) : string =
    match v0 with
    | UH1_0(v2, v3) -> (* Cons *)
        let v4 : string = v1 + v2
        method15(v3, v4)
    | UH1_1 -> (* Nil *)
        v1
and closure0 () () : int32 =
    let struct (v0 : string, v1 : string, v2 : string, v3 : bool) = method0()
    let v4 : string = "chrono::Utc::now()"
    let v5 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v6 : string = "($0).timestamp()"
    let v7 : int64 = Fable.Core.Rust.emitExpr v5 v6
    let v8 : string = "app1"
    let v9 : string = $"r#\"{v8}\"#"
    let v10 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v9
    let v11 : string = "clap::Command::new($0)"
    let v12 : string = ".propagate_version(true)"
    let v13 : string = v11 + v12
    let v14 : string = ".subcommand_required(false)"
    let v15 : string = v13 + v14
    let v16 : string = ".about(\"command about\")"
    let v17 : string = v15 + v16
    let v18 : string = ".arg_required_else_help(true)"
    let v19 : string = v17 + v18
    let v20 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr v10 v19
    let v21 : string = "PostFsxRsBuild"
    let v22 : string = $"r#\"{v21}\"#"
    let v23 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v22
    let v24 : string = v11 + v12
    let v25 : string = v24 + v14
    let v26 : string = v25 + v16
    let v27 : string = v26 + v18
    let v28 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr v23 v27
    let v29 : string = "rs-path"
    let v30 : string = $"r#\"{v29}\"#"
    let v31 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v30
    let v32 : string = "clap::Arg::new($0)"
    let v33 : Types.clap.builder.Arg = Fable.Core.Rust.emitExpr v31 v32
    let v34 : string = "$0.arg($1)"
    let v35 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr struct (v28, v33) v34
    let v36 : string = "$0.subcommand($1)"
    let v37 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr struct (v20, v35) v36
    let v38 : string = "SpiFsxBuild"
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = v11 + v12
    let v42 : string = v41 + v14
    let v43 : string = v42 + v16
    let v44 : string = v43 + v18
    let v45 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr v40 v44
    let v46 : string = "spi-path"
    let v47 : string = $"r#\"{v46}\"#"
    let v48 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v47
    let v49 : Types.clap.builder.Arg = Fable.Core.Rust.emitExpr v48 v32
    let v50 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr struct (v45, v49) v34
    let v51 : string = "fsx-path"
    let v52 : string = $"r#\"{v51}\"#"
    let v53 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v52
    let v54 : Types.clap.builder.Arg = Fable.Core.Rust.emitExpr v53 v32
    let v55 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr struct (v50, v54) v34
    let v56 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr struct (v37, v55) v36
    let v57 : string = "$0.get_matches()"
    let v58 : Types.Ref<Types.clap.parser.ArgMatches> = Fable.Core.Rust.emitExpr v56 v57
    let v59 : string = "$0.subcommand()"
    let v60 : Types.Ref<Option<struct (Types.Ref<Types.Str> * Types.Ref<Types.clap.parser.ArgMatches>)>> = Fable.Core.Rust.emitExpr v58 v59
    let v61 : string = "*(($0).as_ref()).unwrap()"
    let struct (v62 : Types.Ref<Types.Str>, v63 : Types.Ref<Types.clap.parser.ArgMatches>) = Fable.Core.Rust.emitExpr v60 v61
    let v64 : string = method1()
    let v65 : string = "$0.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v64 v65
    let v67 : string = "--" + v29 + "="
    let v68 : string = method2(v67)
    let v69 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v68 v65
    let v70 : string = "&($0).get_one::<String>($1).unwrap().replace($2, \"\")"
    let v71 : Types.Ref<Types.std.string.String> = Fable.Core.Rust.emitExpr struct (v63, v66, v69) v70
    let v72 : string = "std::path::PathBuf::from($0)"
    let v73 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v71 v72
    let v74 : string = "($0).canonicalize()"
    let v75 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v73 v74
    let v76 : string = "($0).as_ref().unwrap().to_path_buf()"
    let v77 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v75 v76
    let v78 : string = "rs_path_clean"
    let v79 : string = "($0).to_string()"
    let v80 : Types.std.string.String = Fable.Core.Rust.emitExpr v78 v79
    let v81 : Types.EmitType<Types.std.string.String> = v80 |> unbox<Types.EmitType<Types.std.string.String>>
    let v82 : string = "format!(\"{:?}\", $0)"
    let v83 : Types.std.string.String = Fable.Core.Rust.emitExpr v77 v82
    let v84 : Types.EmitType<Types.std.string.String> = v83 |> unbox<Types.EmitType<Types.std.string.String>>
    let v85 : (Types.EmitType<Types.std.string.String> []) = [|v81; v84|]
    let v86 : string = "core::ops::Deref::deref($0)"
    let v87 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v85 v86
    let v88 : string = "&***$0"
    let v89 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v87 v88
    let v90 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v89 v88
    let v91 : Types.std.string.String = Fable.Core.Rust.emitExpr v90 v82
    let v92 : Types.EmitType<Types.std.string.String> = v91 |> unbox<Types.EmitType<Types.std.string.String>>
    let v93 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v94 : int64 = Fable.Core.Rust.emitExpr v93 v6
    let v95 : int64 = v94 - v7
    let v96 : string = (v95).ToString ()
    let v97 : int32 = 6
    let v98 : string = method3(v97, v96)
    let v99 : string = "rand::random::<u8>()"
    let v100 : uint8 = Fable.Core.Rust.emitExpr () v99
    let v101 : string = "timestamp"
    let v102 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v79
    let v103 : Types.EmitType<Types.std.string.String> = v102 |> unbox<Types.EmitType<Types.std.string.String>>
    let v104 : Types.std.string.String = Fable.Core.Rust.emitExpr v98 v79
    let v105 : Types.EmitType<Types.std.string.String> = v104 |> unbox<Types.EmitType<Types.std.string.String>>
    let v106 : string = "run_id"
    let v107 : Types.std.string.String = Fable.Core.Rust.emitExpr v106 v79
    let v108 : Types.EmitType<Types.std.string.String> = v107 |> unbox<Types.EmitType<Types.std.string.String>>
    let v109 : Types.std.string.String = Fable.Core.Rust.emitExpr v100 v82
    let v110 : Types.EmitType<Types.std.string.String> = v109 |> unbox<Types.EmitType<Types.std.string.String>>
    let v111 : string = "log_level"
    let v112 : Types.std.string.String = Fable.Core.Rust.emitExpr v111 v79
    let v113 : Types.EmitType<Types.std.string.String> = v112 |> unbox<Types.EmitType<Types.std.string.String>>
    let v114 : string = "Debug"
    let v115 : Types.std.string.String = Fable.Core.Rust.emitExpr v114 v79
    let v116 : Types.EmitType<Types.std.string.String> = v115 |> unbox<Types.EmitType<Types.std.string.String>>
    let v117 : (Types.EmitType<Types.std.string.String> []) = [|v103; v105; v108; v110; v113; v116|]
    let v118 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v117 v86
    let v119 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v118 v88
    let v120 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v119 v88
    let v121 : Types.std.string.String = Fable.Core.Rust.emitExpr v120 v82
    let v122 : Types.EmitType<Types.std.string.String> = v121 |> unbox<Types.EmitType<Types.std.string.String>>
    let v123 : string = "> app ()"
    let v124 : Types.std.string.String = Fable.Core.Rust.emitExpr v123 v79
    let v125 : Types.EmitType<Types.std.string.String> = v124 |> unbox<Types.EmitType<Types.std.string.String>>
    let v126 : (Types.EmitType<Types.std.string.String> []) = [|v125|]
    let v127 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v126 v86
    let v128 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v127 v88
    let v129 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v128 v88
    let v130 : Types.std.string.String = Fable.Core.Rust.emitExpr v129 v82
    let v131 : Types.EmitType<Types.std.string.String> = v130 |> unbox<Types.EmitType<Types.std.string.String>>
    let v132 : string = "format!(\"{}\", $0)"
    let v133 : Types.std.string.String = Fable.Core.Rust.emitExpr v131 v132
    let v134 : string = (v133).ToString ()
    let v135 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v136 : string = $"r#\"{v135}\"#"
    let v137 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v136
    let v138 : string = "regex::RegexBuilder::new($0)"
    let v139 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v137 v138
    let v140 : string = "$0.build().unwrap()"
    let v141 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v139 v140
    let v142 : string = method2(v134)
    let v143 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v142 v65
    let v144 : string = method4()
    let v145 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v144 v65
    let v146 : string = "$0.replace_all(&$1, $2).to_string()"
    let v147 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v141, v143, v145) v146
    let v148 : string = "fable_library_rust::String_::fromStr($0)"
    let v149 : string = Fable.Core.Rust.emitExpr v147 v148
    let v150 : string = "\\[\"(.*?)\"\\]"
    let v151 : string = $"r#\"{v150}\"#"
    let v152 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v151
    let v153 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v152 v138
    let v154 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v153 v140
    let v155 : string = method2(v149)
    let v156 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v155 v65
    let v157 : string = method5()
    let v158 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v157 v65
    let v159 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v154, v156, v158) v146
    let v160 : string = Fable.Core.Rust.emitExpr v159 v148
    let v161 : string = ", "
    let v162 : string = $"r#\"{v161}\"#"
    let v163 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v162
    let v164 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v163 v138
    let v165 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v164 v140
    let v166 : string = method2(v160)
    let v167 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v166 v65
    let v168 : string = method6()
    let v169 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v168 v65
    let v170 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v165, v167, v169) v146
    let v171 : string = Fable.Core.Rust.emitExpr v170 v148
    let v172 : Types.std.string.String = Fable.Core.Rust.emitExpr v171 v79
    let v173 : Types.EmitType<Types.std.string.String> = v172 |> unbox<Types.EmitType<Types.std.string.String>>
    let v174 : Types.std.string.String = Fable.Core.Rust.emitExpr v92 v132
    let v175 : string = (v174).ToString ()
    let v176 : string = $"r#\"{v135}\"#"
    let v177 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v176
    let v178 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v177 v138
    let v179 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v178 v140
    let v180 : string = method2(v175)
    let v181 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v180 v65
    let v182 : string = method4()
    let v183 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v182 v65
    let v184 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v179, v181, v183) v146
    let v185 : string = Fable.Core.Rust.emitExpr v184 v148
    let v186 : string = $"r#\"{v150}\"#"
    let v187 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v186
    let v188 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v187 v138
    let v189 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v188 v140
    let v190 : string = method2(v185)
    let v191 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v190 v65
    let v192 : string = method5()
    let v193 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v192 v65
    let v194 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v189, v191, v193) v146
    let v195 : string = Fable.Core.Rust.emitExpr v194 v148
    let v196 : string = $"r#\"{v161}\"#"
    let v197 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v196
    let v198 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v197 v138
    let v199 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v198 v140
    let v200 : string = method2(v195)
    let v201 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v200 v65
    let v202 : string = method6()
    let v203 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v202 v65
    let v204 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v199, v201, v203) v146
    let v205 : string = Fable.Core.Rust.emitExpr v204 v148
    let v206 : Types.std.string.String = Fable.Core.Rust.emitExpr v205 v79
    let v207 : Types.EmitType<Types.std.string.String> = v206 |> unbox<Types.EmitType<Types.std.string.String>>
    let v208 : Types.std.string.String = Fable.Core.Rust.emitExpr v122 v132
    let v209 : string = (v208).ToString ()
    let v210 : string = $"r#\"{v135}\"#"
    let v211 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v210
    let v212 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v211 v138
    let v213 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v212 v140
    let v214 : string = method2(v209)
    let v215 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v214 v65
    let v216 : string = method4()
    let v217 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v216 v65
    let v218 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v213, v215, v217) v146
    let v219 : string = Fable.Core.Rust.emitExpr v218 v148
    let v220 : string = $"r#\"{v150}\"#"
    let v221 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v220
    let v222 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v221 v138
    let v223 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v222 v140
    let v224 : string = method2(v219)
    let v225 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v224 v65
    let v226 : string = method5()
    let v227 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v226 v65
    let v228 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v223, v225, v227) v146
    let v229 : string = Fable.Core.Rust.emitExpr v228 v148
    let v230 : string = $"r#\"{v161}\"#"
    let v231 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v230
    let v232 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v231 v138
    let v233 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v232 v140
    let v234 : string = method2(v229)
    let v235 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v234 v65
    let v236 : string = method6()
    let v237 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v236 v65
    let v238 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v233, v235, v237) v146
    let v239 : string = Fable.Core.Rust.emitExpr v238 v148
    let v240 : Types.std.string.String = Fable.Core.Rust.emitExpr v239 v79
    let v241 : Types.EmitType<Types.std.string.String> = v240 |> unbox<Types.EmitType<Types.std.string.String>>
    let v242 : string = "cfg!(target_arch = \"wasm32\")"
    let v243 : bool = Fable.Core.Rust.emitExpr () v242
    let v246 : US0 =
        if v243 then
            US0_1
        else
            US0_0
    match v246 with
    | US0_1 -> (* Wasm32 *)
        let v247 : string = "%c%s %c%s %c%s"
        let v248 : string = "($0).as_ref().to_string()"
        let v249 : Types.std.string.String = Fable.Core.Rust.emitExpr v247 v248
        let v250 : string = "color: purple"
        let v251 : Types.std.string.String = Fable.Core.Rust.emitExpr v250 v248
        let v252 : string = $"{v173}"
        let v253 : Types.std.string.String = Fable.Core.Rust.emitExpr v252 v248
        let v254 : string = "666666"
        let v255 : string = $"color: {v254}"
        let v256 : Types.std.string.String = Fable.Core.Rust.emitExpr v255 v248
        let v257 : string = $"{v207} {v241}"
        let v258 : Types.std.string.String = Fable.Core.Rust.emitExpr v257 v248
        let v259 : string = "color: #222222"
        let v260 : Types.std.string.String = Fable.Core.Rust.emitExpr v259 v248
        let v261 : string = $"{v241}"
        let v262 : Types.std.string.String = Fable.Core.Rust.emitExpr v261 v248
        let v263 : (Types.std.string.String []) = [|v249; v251; v253; v256; v258; v260; v262|]
        let v264 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v263 v86
        let v265 : obj = v264
        let v266 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v267 : obj = Fable.Core.Rust.emitExpr v265 v266
        let v268 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v267 v268
        ()
    | _ ->
        let v269 : string = "purple"
        let v270 : string = "colored::Colorize::color(&*$0, $1.to_string())"
        let v271 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v173, v269) v270
        let v272 : Types.std.string.String = Fable.Core.Rust.emitExpr v271 v132
        let v273 : string = method7()
        let v274 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v273 v65
        let v275 : unativeint = unativeint 0
        let v276 : unativeint = unativeint 2
        let v277 : string = "&$0[$1..$2]"
        let v278 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v274, v275, v276) v277
        let v279 : string = Fable.Core.Rust.emitExpr v278 v148
        let v280 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v281 : uint8 = Fable.Core.Rust.emitExpr v279 v280
        let v282 : string = method7()
        let v283 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v282 v65
        let v284 : unativeint = unativeint 2
        let v285 : unativeint = unativeint 4
        let v286 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v283, v284, v285) v277
        let v287 : string = Fable.Core.Rust.emitExpr v286 v148
        let v288 : uint8 = Fable.Core.Rust.emitExpr v287 v280
        let v289 : string = method7()
        let v290 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v289 v65
        let v291 : unativeint = unativeint 4
        let v292 : unativeint = unativeint 6
        let v293 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v290, v291, v292) v277
        let v294 : string = Fable.Core.Rust.emitExpr v293 v148
        let v295 : uint8 = Fable.Core.Rust.emitExpr v294 v280
        let v296 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v297 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v207, v281, v288, v295) v296
        let v298 : Types.std.string.String = Fable.Core.Rust.emitExpr v297 v132
        let v299 : string = method8()
        let v300 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v299 v65
        let v301 : unativeint = unativeint 0
        let v302 : unativeint = unativeint 2
        let v303 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v300, v301, v302) v277
        let v304 : string = Fable.Core.Rust.emitExpr v303 v148
        let v305 : uint8 = Fable.Core.Rust.emitExpr v304 v280
        let v306 : string = method8()
        let v307 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v306 v65
        let v308 : unativeint = unativeint 2
        let v309 : unativeint = unativeint 4
        let v310 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v307, v308, v309) v277
        let v311 : string = Fable.Core.Rust.emitExpr v310 v148
        let v312 : uint8 = Fable.Core.Rust.emitExpr v311 v280
        let v313 : string = method8()
        let v314 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v313 v65
        let v315 : unativeint = unativeint 4
        let v316 : unativeint = unativeint 6
        let v317 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v314, v315, v316) v277
        let v318 : string = Fable.Core.Rust.emitExpr v317 v148
        let v319 : uint8 = Fable.Core.Rust.emitExpr v318 v280
        let v320 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v241, v305, v312, v319) v296
        let v321 : Types.std.string.String = Fable.Core.Rust.emitExpr v320 v132
        let v322 : string = $"{v272} {v298} {v321}"
        System.Console.WriteLine v322
        ()
    let struct (v323 : string, v324 : string, v325 : string, v326 : bool) = method0()
    let v327 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v328 : int64 = Fable.Core.Rust.emitExpr v327 v6
    let v329 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v77 v74
    let v330 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v329 v76
    let v331 : string = "path_clean"
    let v332 : Types.std.string.String = Fable.Core.Rust.emitExpr v331 v79
    let v333 : Types.EmitType<Types.std.string.String> = v332 |> unbox<Types.EmitType<Types.std.string.String>>
    let v334 : string = "fable_library_rust::String_::fromStr(&format!(\"{}\", $0.display()))"
    let v335 : string = Fable.Core.Rust.emitExpr v330 v334
    let v336 : Types.std.string.String = Fable.Core.Rust.emitExpr v335 v79
    let v337 : Types.EmitType<Types.std.string.String> = v336 |> unbox<Types.EmitType<Types.std.string.String>>
    let v338 : (Types.EmitType<Types.std.string.String> []) = [|v333; v337|]
    let v339 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v338 v86
    let v340 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v339 v88
    let v341 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v340 v88
    let v342 : Types.std.string.String = Fable.Core.Rust.emitExpr v341 v82
    let v343 : Types.EmitType<Types.std.string.String> = v342 |> unbox<Types.EmitType<Types.std.string.String>>
    let v344 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v345 : int64 = Fable.Core.Rust.emitExpr v344 v6
    let v346 : int64 = v345 - v328
    let v347 : string = (v346).ToString ()
    let v348 : int32 = 6
    let v349 : string = method3(v348, v347)
    let v350 : uint8 = Fable.Core.Rust.emitExpr () v99
    let v351 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v79
    let v352 : Types.EmitType<Types.std.string.String> = v351 |> unbox<Types.EmitType<Types.std.string.String>>
    let v353 : Types.std.string.String = Fable.Core.Rust.emitExpr v349 v79
    let v354 : Types.EmitType<Types.std.string.String> = v353 |> unbox<Types.EmitType<Types.std.string.String>>
    let v355 : Types.std.string.String = Fable.Core.Rust.emitExpr v106 v79
    let v356 : Types.EmitType<Types.std.string.String> = v355 |> unbox<Types.EmitType<Types.std.string.String>>
    let v357 : Types.std.string.String = Fable.Core.Rust.emitExpr v350 v82
    let v358 : Types.EmitType<Types.std.string.String> = v357 |> unbox<Types.EmitType<Types.std.string.String>>
    let v359 : Types.std.string.String = Fable.Core.Rust.emitExpr v111 v79
    let v360 : Types.EmitType<Types.std.string.String> = v359 |> unbox<Types.EmitType<Types.std.string.String>>
    let v361 : Types.std.string.String = Fable.Core.Rust.emitExpr v114 v79
    let v362 : Types.EmitType<Types.std.string.String> = v361 |> unbox<Types.EmitType<Types.std.string.String>>
    let v363 : (Types.EmitType<Types.std.string.String> []) = [|v352; v354; v356; v358; v360; v362|]
    let v364 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v363 v86
    let v365 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v364 v88
    let v366 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v365 v88
    let v367 : Types.std.string.String = Fable.Core.Rust.emitExpr v366 v82
    let v368 : Types.EmitType<Types.std.string.String> = v367 |> unbox<Types.EmitType<Types.std.string.String>>
    let v369 : string = "> read_lines ()"
    let v370 : Types.std.string.String = Fable.Core.Rust.emitExpr v369 v79
    let v371 : Types.EmitType<Types.std.string.String> = v370 |> unbox<Types.EmitType<Types.std.string.String>>
    let v372 : (Types.EmitType<Types.std.string.String> []) = [|v371|]
    let v373 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v372 v86
    let v374 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v373 v88
    let v375 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v374 v88
    let v376 : Types.std.string.String = Fable.Core.Rust.emitExpr v375 v82
    let v377 : Types.EmitType<Types.std.string.String> = v376 |> unbox<Types.EmitType<Types.std.string.String>>
    let v378 : Types.std.string.String = Fable.Core.Rust.emitExpr v377 v132
    let v379 : string = (v378).ToString ()
    let v380 : string = $"r#\"{v135}\"#"
    let v381 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v380
    let v382 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v381 v138
    let v383 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v382 v140
    let v384 : string = method2(v379)
    let v385 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v384 v65
    let v386 : string = method4()
    let v387 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v386 v65
    let v388 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v383, v385, v387) v146
    let v389 : string = Fable.Core.Rust.emitExpr v388 v148
    let v390 : string = $"r#\"{v150}\"#"
    let v391 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v390
    let v392 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v391 v138
    let v393 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v392 v140
    let v394 : string = method2(v389)
    let v395 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v394 v65
    let v396 : string = method5()
    let v397 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v396 v65
    let v398 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v393, v395, v397) v146
    let v399 : string = Fable.Core.Rust.emitExpr v398 v148
    let v400 : string = $"r#\"{v161}\"#"
    let v401 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v400
    let v402 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v401 v138
    let v403 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v402 v140
    let v404 : string = method2(v399)
    let v405 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v404 v65
    let v406 : string = method6()
    let v407 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v406 v65
    let v408 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v403, v405, v407) v146
    let v409 : string = Fable.Core.Rust.emitExpr v408 v148
    let v410 : Types.std.string.String = Fable.Core.Rust.emitExpr v409 v79
    let v411 : Types.EmitType<Types.std.string.String> = v410 |> unbox<Types.EmitType<Types.std.string.String>>
    let v412 : Types.std.string.String = Fable.Core.Rust.emitExpr v343 v132
    let v413 : string = (v412).ToString ()
    let v414 : string = $"r#\"{v135}\"#"
    let v415 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v414
    let v416 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v415 v138
    let v417 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v416 v140
    let v418 : string = method2(v413)
    let v419 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v418 v65
    let v420 : string = method4()
    let v421 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v420 v65
    let v422 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v417, v419, v421) v146
    let v423 : string = Fable.Core.Rust.emitExpr v422 v148
    let v424 : string = $"r#\"{v150}\"#"
    let v425 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v424
    let v426 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v425 v138
    let v427 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v426 v140
    let v428 : string = method2(v423)
    let v429 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v428 v65
    let v430 : string = method5()
    let v431 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v430 v65
    let v432 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v427, v429, v431) v146
    let v433 : string = Fable.Core.Rust.emitExpr v432 v148
    let v434 : string = $"r#\"{v161}\"#"
    let v435 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v434
    let v436 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v435 v138
    let v437 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v436 v140
    let v438 : string = method2(v433)
    let v439 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v438 v65
    let v440 : string = method6()
    let v441 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v440 v65
    let v442 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v437, v439, v441) v146
    let v443 : string = Fable.Core.Rust.emitExpr v442 v148
    let v444 : Types.std.string.String = Fable.Core.Rust.emitExpr v443 v79
    let v445 : Types.EmitType<Types.std.string.String> = v444 |> unbox<Types.EmitType<Types.std.string.String>>
    let v446 : Types.std.string.String = Fable.Core.Rust.emitExpr v368 v132
    let v447 : string = (v446).ToString ()
    let v448 : string = $"r#\"{v135}\"#"
    let v449 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v448
    let v450 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v449 v138
    let v451 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v450 v140
    let v452 : string = method2(v447)
    let v453 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v452 v65
    let v454 : string = method4()
    let v455 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v454 v65
    let v456 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v451, v453, v455) v146
    let v457 : string = Fable.Core.Rust.emitExpr v456 v148
    let v458 : string = $"r#\"{v150}\"#"
    let v459 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v458
    let v460 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v459 v138
    let v461 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v460 v140
    let v462 : string = method2(v457)
    let v463 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v462 v65
    let v464 : string = method5()
    let v465 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v464 v65
    let v466 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v461, v463, v465) v146
    let v467 : string = Fable.Core.Rust.emitExpr v466 v148
    let v468 : string = $"r#\"{v161}\"#"
    let v469 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v468
    let v470 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v469 v138
    let v471 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v470 v140
    let v472 : string = method2(v467)
    let v473 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v472 v65
    let v474 : string = method6()
    let v475 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v474 v65
    let v476 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v471, v473, v475) v146
    let v477 : string = Fable.Core.Rust.emitExpr v476 v148
    let v478 : Types.std.string.String = Fable.Core.Rust.emitExpr v477 v79
    let v479 : Types.EmitType<Types.std.string.String> = v478 |> unbox<Types.EmitType<Types.std.string.String>>
    let v480 : bool = Fable.Core.Rust.emitExpr () v242
    let v483 : US0 =
        if v480 then
            US0_1
        else
            US0_0
    match v483 with
    | US0_1 -> (* Wasm32 *)
        let v484 : string = "%c%s %c%s %c%s"
        let v485 : string = "($0).as_ref().to_string()"
        let v486 : Types.std.string.String = Fable.Core.Rust.emitExpr v484 v485
        let v487 : string = "color: purple"
        let v488 : Types.std.string.String = Fable.Core.Rust.emitExpr v487 v485
        let v489 : string = $"{v411}"
        let v490 : Types.std.string.String = Fable.Core.Rust.emitExpr v489 v485
        let v491 : string = "666666"
        let v492 : string = $"color: {v491}"
        let v493 : Types.std.string.String = Fable.Core.Rust.emitExpr v492 v485
        let v494 : string = $"{v445} {v479}"
        let v495 : Types.std.string.String = Fable.Core.Rust.emitExpr v494 v485
        let v496 : string = "color: #222222"
        let v497 : Types.std.string.String = Fable.Core.Rust.emitExpr v496 v485
        let v498 : string = $"{v479}"
        let v499 : Types.std.string.String = Fable.Core.Rust.emitExpr v498 v485
        let v500 : (Types.std.string.String []) = [|v486; v488; v490; v493; v495; v497; v499|]
        let v501 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v500 v86
        let v502 : obj = v501
        let v503 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v504 : obj = Fable.Core.Rust.emitExpr v502 v503
        let v505 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v504 v505
        ()
    | _ ->
        let v506 : string = "purple"
        let v507 : string = "colored::Colorize::color(&*$0, $1.to_string())"
        let v508 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v411, v506) v507
        let v509 : Types.std.string.String = Fable.Core.Rust.emitExpr v508 v132
        let v510 : string = method7()
        let v511 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v510 v65
        let v512 : unativeint = unativeint 0
        let v513 : unativeint = unativeint 2
        let v514 : string = "&$0[$1..$2]"
        let v515 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v511, v512, v513) v514
        let v516 : string = Fable.Core.Rust.emitExpr v515 v148
        let v517 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v518 : uint8 = Fable.Core.Rust.emitExpr v516 v517
        let v519 : string = method7()
        let v520 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v519 v65
        let v521 : unativeint = unativeint 2
        let v522 : unativeint = unativeint 4
        let v523 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v520, v521, v522) v514
        let v524 : string = Fable.Core.Rust.emitExpr v523 v148
        let v525 : uint8 = Fable.Core.Rust.emitExpr v524 v517
        let v526 : string = method7()
        let v527 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v526 v65
        let v528 : unativeint = unativeint 4
        let v529 : unativeint = unativeint 6
        let v530 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v527, v528, v529) v514
        let v531 : string = Fable.Core.Rust.emitExpr v530 v148
        let v532 : uint8 = Fable.Core.Rust.emitExpr v531 v517
        let v533 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v534 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v445, v518, v525, v532) v533
        let v535 : Types.std.string.String = Fable.Core.Rust.emitExpr v534 v132
        let v536 : string = method8()
        let v537 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v536 v65
        let v538 : unativeint = unativeint 0
        let v539 : unativeint = unativeint 2
        let v540 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v537, v538, v539) v514
        let v541 : string = Fable.Core.Rust.emitExpr v540 v148
        let v542 : uint8 = Fable.Core.Rust.emitExpr v541 v517
        let v543 : string = method8()
        let v544 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v543 v65
        let v545 : unativeint = unativeint 2
        let v546 : unativeint = unativeint 4
        let v547 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v544, v545, v546) v514
        let v548 : string = Fable.Core.Rust.emitExpr v547 v148
        let v549 : uint8 = Fable.Core.Rust.emitExpr v548 v517
        let v550 : string = method8()
        let v551 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v550 v65
        let v552 : unativeint = unativeint 4
        let v553 : unativeint = unativeint 6
        let v554 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v551, v552, v553) v514
        let v555 : string = Fable.Core.Rust.emitExpr v554 v148
        let v556 : uint8 = Fable.Core.Rust.emitExpr v555 v517
        let v557 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v479, v542, v549, v556) v533
        let v558 : Types.std.string.String = Fable.Core.Rust.emitExpr v557 v132
        let v559 : string = $"{v509} {v535} {v558}"
        System.Console.WriteLine v559
        ()
    let v560 : string = "std::fs::File::open($0)"
    let v561 : Result<Types.std.fs.File, Types.std.io.Error> = Fable.Core.Rust.emitExpr v330 v560
    let v562 : string = "$0.unwrap()"
    let v563 : Types.Ref<Types.std.fs.File> = Fable.Core.Rust.emitExpr v561 v562
    let v564 : string = "std::cell::RefCell::new(linereader::LineReader::new($0))"
    let v565 : Types.std.cell.RefCell<Types.linereader.LineReader<Types.Ref<Types.std.fs.File>>> = Fable.Core.Rust.emitExpr v563 v564
    let v566 : string = "reader"
    let v567 : Types.std.string.String = Fable.Core.Rust.emitExpr v566 v79
    let v568 : Types.EmitType<Types.std.string.String> = v567 |> unbox<Types.EmitType<Types.std.string.String>>
    let v569 : Types.std.string.String = Fable.Core.Rust.emitExpr v565 v82
    let v570 : Types.EmitType<Types.std.string.String> = v569 |> unbox<Types.EmitType<Types.std.string.String>>
    let v571 : (Types.EmitType<Types.std.string.String> []) = [|v568; v570|]
    let v572 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v571 v86
    let v573 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v572 v88
    let v574 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v573 v88
    let v575 : Types.std.string.String = Fable.Core.Rust.emitExpr v574 v82
    let v576 : Types.EmitType<Types.std.string.String> = v575 |> unbox<Types.EmitType<Types.std.string.String>>
    let v577 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v578 : int64 = Fable.Core.Rust.emitExpr v577 v6
    let v579 : int64 = v578 - v328
    let v580 : string = (v579).ToString ()
    let v581 : int32 = 6
    let v582 : string = method3(v581, v580)
    let v583 : uint8 = Fable.Core.Rust.emitExpr () v99
    let v584 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v79
    let v585 : Types.EmitType<Types.std.string.String> = v584 |> unbox<Types.EmitType<Types.std.string.String>>
    let v586 : Types.std.string.String = Fable.Core.Rust.emitExpr v582 v79
    let v587 : Types.EmitType<Types.std.string.String> = v586 |> unbox<Types.EmitType<Types.std.string.String>>
    let v588 : Types.std.string.String = Fable.Core.Rust.emitExpr v106 v79
    let v589 : Types.EmitType<Types.std.string.String> = v588 |> unbox<Types.EmitType<Types.std.string.String>>
    let v590 : Types.std.string.String = Fable.Core.Rust.emitExpr v583 v82
    let v591 : Types.EmitType<Types.std.string.String> = v590 |> unbox<Types.EmitType<Types.std.string.String>>
    let v592 : Types.std.string.String = Fable.Core.Rust.emitExpr v111 v79
    let v593 : Types.EmitType<Types.std.string.String> = v592 |> unbox<Types.EmitType<Types.std.string.String>>
    let v594 : Types.std.string.String = Fable.Core.Rust.emitExpr v114 v79
    let v595 : Types.EmitType<Types.std.string.String> = v594 |> unbox<Types.EmitType<Types.std.string.String>>
    let v596 : (Types.EmitType<Types.std.string.String> []) = [|v585; v587; v589; v591; v593; v595|]
    let v597 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v596 v86
    let v598 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v597 v88
    let v599 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v598 v88
    let v600 : Types.std.string.String = Fable.Core.Rust.emitExpr v599 v82
    let v601 : Types.EmitType<Types.std.string.String> = v600 |> unbox<Types.EmitType<Types.std.string.String>>
    let v602 : Types.std.string.String = Fable.Core.Rust.emitExpr v369 v79
    let v603 : Types.EmitType<Types.std.string.String> = v602 |> unbox<Types.EmitType<Types.std.string.String>>
    let v604 : (Types.EmitType<Types.std.string.String> []) = [|v603|]
    let v605 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v604 v86
    let v606 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v605 v88
    let v607 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v606 v88
    let v608 : Types.std.string.String = Fable.Core.Rust.emitExpr v607 v82
    let v609 : Types.EmitType<Types.std.string.String> = v608 |> unbox<Types.EmitType<Types.std.string.String>>
    let v610 : Types.std.string.String = Fable.Core.Rust.emitExpr v609 v132
    let v611 : string = (v610).ToString ()
    let v612 : string = $"r#\"{v135}\"#"
    let v613 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v612
    let v614 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v613 v138
    let v615 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v614 v140
    let v616 : string = method2(v611)
    let v617 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v616 v65
    let v618 : string = method4()
    let v619 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v618 v65
    let v620 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v615, v617, v619) v146
    let v621 : string = Fable.Core.Rust.emitExpr v620 v148
    let v622 : string = $"r#\"{v150}\"#"
    let v623 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v622
    let v624 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v623 v138
    let v625 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v624 v140
    let v626 : string = method2(v621)
    let v627 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v626 v65
    let v628 : string = method5()
    let v629 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v628 v65
    let v630 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v625, v627, v629) v146
    let v631 : string = Fable.Core.Rust.emitExpr v630 v148
    let v632 : string = $"r#\"{v161}\"#"
    let v633 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v632
    let v634 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v633 v138
    let v635 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v634 v140
    let v636 : string = method2(v631)
    let v637 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v636 v65
    let v638 : string = method6()
    let v639 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v638 v65
    let v640 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v635, v637, v639) v146
    let v641 : string = Fable.Core.Rust.emitExpr v640 v148
    let v642 : Types.std.string.String = Fable.Core.Rust.emitExpr v641 v79
    let v643 : Types.EmitType<Types.std.string.String> = v642 |> unbox<Types.EmitType<Types.std.string.String>>
    let v644 : Types.std.string.String = Fable.Core.Rust.emitExpr v576 v132
    let v645 : string = (v644).ToString ()
    let v646 : string = $"r#\"{v135}\"#"
    let v647 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v646
    let v648 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v647 v138
    let v649 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v648 v140
    let v650 : string = method2(v645)
    let v651 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v650 v65
    let v652 : string = method4()
    let v653 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v652 v65
    let v654 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v649, v651, v653) v146
    let v655 : string = Fable.Core.Rust.emitExpr v654 v148
    let v656 : string = $"r#\"{v150}\"#"
    let v657 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v656
    let v658 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v657 v138
    let v659 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v658 v140
    let v660 : string = method2(v655)
    let v661 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v660 v65
    let v662 : string = method5()
    let v663 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v662 v65
    let v664 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v659, v661, v663) v146
    let v665 : string = Fable.Core.Rust.emitExpr v664 v148
    let v666 : string = $"r#\"{v161}\"#"
    let v667 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v666
    let v668 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v667 v138
    let v669 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v668 v140
    let v670 : string = method2(v665)
    let v671 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v670 v65
    let v672 : string = method6()
    let v673 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v672 v65
    let v674 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v669, v671, v673) v146
    let v675 : string = Fable.Core.Rust.emitExpr v674 v148
    let v676 : Types.std.string.String = Fable.Core.Rust.emitExpr v675 v79
    let v677 : Types.EmitType<Types.std.string.String> = v676 |> unbox<Types.EmitType<Types.std.string.String>>
    let v678 : Types.std.string.String = Fable.Core.Rust.emitExpr v601 v132
    let v679 : string = (v678).ToString ()
    let v680 : string = $"r#\"{v135}\"#"
    let v681 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v680
    let v682 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v681 v138
    let v683 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v682 v140
    let v684 : string = method2(v679)
    let v685 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v684 v65
    let v686 : string = method4()
    let v687 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v686 v65
    let v688 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v683, v685, v687) v146
    let v689 : string = Fable.Core.Rust.emitExpr v688 v148
    let v690 : string = $"r#\"{v150}\"#"
    let v691 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v690
    let v692 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v691 v138
    let v693 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v692 v140
    let v694 : string = method2(v689)
    let v695 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v694 v65
    let v696 : string = method5()
    let v697 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v696 v65
    let v698 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v693, v695, v697) v146
    let v699 : string = Fable.Core.Rust.emitExpr v698 v148
    let v700 : string = $"r#\"{v161}\"#"
    let v701 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v700
    let v702 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v701 v138
    let v703 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v702 v140
    let v704 : string = method2(v699)
    let v705 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v704 v65
    let v706 : string = method6()
    let v707 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v706 v65
    let v708 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v703, v705, v707) v146
    let v709 : string = Fable.Core.Rust.emitExpr v708 v148
    let v710 : Types.std.string.String = Fable.Core.Rust.emitExpr v709 v79
    let v711 : Types.EmitType<Types.std.string.String> = v710 |> unbox<Types.EmitType<Types.std.string.String>>
    let v712 : bool = Fable.Core.Rust.emitExpr () v242
    let v715 : US0 =
        if v712 then
            US0_1
        else
            US0_0
    match v715 with
    | US0_1 -> (* Wasm32 *)
        let v716 : string = "%c%s %c%s %c%s"
        let v717 : string = "($0).as_ref().to_string()"
        let v718 : Types.std.string.String = Fable.Core.Rust.emitExpr v716 v717
        let v719 : string = "color: purple"
        let v720 : Types.std.string.String = Fable.Core.Rust.emitExpr v719 v717
        let v721 : string = $"{v643}"
        let v722 : Types.std.string.String = Fable.Core.Rust.emitExpr v721 v717
        let v723 : string = "666666"
        let v724 : string = $"color: {v723}"
        let v725 : Types.std.string.String = Fable.Core.Rust.emitExpr v724 v717
        let v726 : string = $"{v677} {v711}"
        let v727 : Types.std.string.String = Fable.Core.Rust.emitExpr v726 v717
        let v728 : string = "color: #222222"
        let v729 : Types.std.string.String = Fable.Core.Rust.emitExpr v728 v717
        let v730 : string = $"{v711}"
        let v731 : Types.std.string.String = Fable.Core.Rust.emitExpr v730 v717
        let v732 : (Types.std.string.String []) = [|v718; v720; v722; v725; v727; v729; v731|]
        let v733 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v732 v86
        let v734 : obj = v733
        let v735 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v736 : obj = Fable.Core.Rust.emitExpr v734 v735
        let v737 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v736 v737
        ()
    | _ ->
        let v738 : string = "purple"
        let v739 : string = "colored::Colorize::color(&*$0, $1.to_string())"
        let v740 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v643, v738) v739
        let v741 : Types.std.string.String = Fable.Core.Rust.emitExpr v740 v132
        let v742 : string = method7()
        let v743 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v742 v65
        let v744 : unativeint = unativeint 0
        let v745 : unativeint = unativeint 2
        let v746 : string = "&$0[$1..$2]"
        let v747 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v743, v744, v745) v746
        let v748 : string = Fable.Core.Rust.emitExpr v747 v148
        let v749 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v750 : uint8 = Fable.Core.Rust.emitExpr v748 v749
        let v751 : string = method7()
        let v752 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v751 v65
        let v753 : unativeint = unativeint 2
        let v754 : unativeint = unativeint 4
        let v755 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v752, v753, v754) v746
        let v756 : string = Fable.Core.Rust.emitExpr v755 v148
        let v757 : uint8 = Fable.Core.Rust.emitExpr v756 v749
        let v758 : string = method7()
        let v759 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v758 v65
        let v760 : unativeint = unativeint 4
        let v761 : unativeint = unativeint 6
        let v762 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v759, v760, v761) v746
        let v763 : string = Fable.Core.Rust.emitExpr v762 v148
        let v764 : uint8 = Fable.Core.Rust.emitExpr v763 v749
        let v765 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v766 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v677, v750, v757, v764) v765
        let v767 : Types.std.string.String = Fable.Core.Rust.emitExpr v766 v132
        let v768 : string = method8()
        let v769 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v768 v65
        let v770 : unativeint = unativeint 0
        let v771 : unativeint = unativeint 2
        let v772 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v769, v770, v771) v746
        let v773 : string = Fable.Core.Rust.emitExpr v772 v148
        let v774 : uint8 = Fable.Core.Rust.emitExpr v773 v749
        let v775 : string = method8()
        let v776 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v775 v65
        let v777 : unativeint = unativeint 2
        let v778 : unativeint = unativeint 4
        let v779 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v776, v777, v778) v746
        let v780 : string = Fable.Core.Rust.emitExpr v779 v148
        let v781 : uint8 = Fable.Core.Rust.emitExpr v780 v749
        let v782 : string = method8()
        let v783 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v782 v65
        let v784 : unativeint = unativeint 4
        let v785 : unativeint = unativeint 6
        let v786 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v783, v784, v785) v746
        let v787 : string = Fable.Core.Rust.emitExpr v786 v148
        let v788 : uint8 = Fable.Core.Rust.emitExpr v787 v749
        let v789 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v711, v774, v781, v788) v765
        let v790 : Types.std.string.String = Fable.Core.Rust.emitExpr v789 v132
        let v791 : string = $"{v741} {v767} {v790}"
        System.Console.WriteLine v791
        ()
    let v792 : UH0 = UH0_1
    let v793 : Mut0 = {l0 = v792} : Mut0
    let v794 : (Types.Vec<uint8> -> Result<bool, Types.std.io.Error>) = method9(v328, v793)
    let v795 : string = "($0).borrow_mut().for_each(move |x| $1(x.to_vec()))"
    let v796 : Result<unit, Types.std.io.Error> = Fable.Core.Rust.emitExpr struct (v565, v794) v795
    Fable.Core.Rust.emitExpr v796 v61
    let v797 : UH0 = v793.l0
    let v798 : UH0 = UH0_1
    let v799 : UH0 = method10(v797, v798)
    let v800 : UH1 = UH1_1
    let v801 : UH1 = method11(v799, v800)
    let v802 : string = "lines len"
    let v803 : Types.std.string.String = Fable.Core.Rust.emitExpr v802 v79
    let v804 : Types.EmitType<Types.std.string.String> = v803 |> unbox<Types.EmitType<Types.std.string.String>>
    let v805 : int32 = 0
    let v806 : int32 = method12(v801, v805)
    let v807 : Types.std.string.String = Fable.Core.Rust.emitExpr v806 v82
    let v808 : Types.EmitType<Types.std.string.String> = v807 |> unbox<Types.EmitType<Types.std.string.String>>
    let v809 : (Types.EmitType<Types.std.string.String> []) = [|v804; v808|]
    let v810 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v809 v86
    let v811 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v810 v88
    let v812 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v811 v88
    let v813 : Types.std.string.String = Fable.Core.Rust.emitExpr v812 v82
    let v814 : Types.EmitType<Types.std.string.String> = v813 |> unbox<Types.EmitType<Types.std.string.String>>
    let v815 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v816 : int64 = Fable.Core.Rust.emitExpr v815 v6
    let v817 : int64 = v816 - v328
    let v818 : string = (v817).ToString ()
    let v819 : int32 = 6
    let v820 : string = method3(v819, v818)
    let v821 : uint8 = Fable.Core.Rust.emitExpr () v99
    let v822 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v79
    let v823 : Types.EmitType<Types.std.string.String> = v822 |> unbox<Types.EmitType<Types.std.string.String>>
    let v824 : Types.std.string.String = Fable.Core.Rust.emitExpr v820 v79
    let v825 : Types.EmitType<Types.std.string.String> = v824 |> unbox<Types.EmitType<Types.std.string.String>>
    let v826 : Types.std.string.String = Fable.Core.Rust.emitExpr v106 v79
    let v827 : Types.EmitType<Types.std.string.String> = v826 |> unbox<Types.EmitType<Types.std.string.String>>
    let v828 : Types.std.string.String = Fable.Core.Rust.emitExpr v821 v82
    let v829 : Types.EmitType<Types.std.string.String> = v828 |> unbox<Types.EmitType<Types.std.string.String>>
    let v830 : Types.std.string.String = Fable.Core.Rust.emitExpr v111 v79
    let v831 : Types.EmitType<Types.std.string.String> = v830 |> unbox<Types.EmitType<Types.std.string.String>>
    let v832 : Types.std.string.String = Fable.Core.Rust.emitExpr v114 v79
    let v833 : Types.EmitType<Types.std.string.String> = v832 |> unbox<Types.EmitType<Types.std.string.String>>
    let v834 : (Types.EmitType<Types.std.string.String> []) = [|v823; v825; v827; v829; v831; v833|]
    let v835 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v834 v86
    let v836 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v835 v88
    let v837 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v836 v88
    let v838 : Types.std.string.String = Fable.Core.Rust.emitExpr v837 v82
    let v839 : Types.EmitType<Types.std.string.String> = v838 |> unbox<Types.EmitType<Types.std.string.String>>
    let v840 : Types.std.string.String = Fable.Core.Rust.emitExpr v369 v79
    let v841 : Types.EmitType<Types.std.string.String> = v840 |> unbox<Types.EmitType<Types.std.string.String>>
    let v842 : (Types.EmitType<Types.std.string.String> []) = [|v841|]
    let v843 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v842 v86
    let v844 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v843 v88
    let v845 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v844 v88
    let v846 : Types.std.string.String = Fable.Core.Rust.emitExpr v845 v82
    let v847 : Types.EmitType<Types.std.string.String> = v846 |> unbox<Types.EmitType<Types.std.string.String>>
    let v848 : Types.std.string.String = Fable.Core.Rust.emitExpr v847 v132
    let v849 : string = (v848).ToString ()
    let v850 : string = $"r#\"{v135}\"#"
    let v851 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v850
    let v852 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v851 v138
    let v853 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v852 v140
    let v854 : string = method2(v849)
    let v855 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v854 v65
    let v856 : string = method4()
    let v857 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v856 v65
    let v858 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v853, v855, v857) v146
    let v859 : string = Fable.Core.Rust.emitExpr v858 v148
    let v860 : string = $"r#\"{v150}\"#"
    let v861 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v860
    let v862 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v861 v138
    let v863 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v862 v140
    let v864 : string = method2(v859)
    let v865 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v864 v65
    let v866 : string = method5()
    let v867 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v866 v65
    let v868 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v863, v865, v867) v146
    let v869 : string = Fable.Core.Rust.emitExpr v868 v148
    let v870 : string = $"r#\"{v161}\"#"
    let v871 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v870
    let v872 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v871 v138
    let v873 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v872 v140
    let v874 : string = method2(v869)
    let v875 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v874 v65
    let v876 : string = method6()
    let v877 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v876 v65
    let v878 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v873, v875, v877) v146
    let v879 : string = Fable.Core.Rust.emitExpr v878 v148
    let v880 : Types.std.string.String = Fable.Core.Rust.emitExpr v879 v79
    let v881 : Types.EmitType<Types.std.string.String> = v880 |> unbox<Types.EmitType<Types.std.string.String>>
    let v882 : Types.std.string.String = Fable.Core.Rust.emitExpr v814 v132
    let v883 : string = (v882).ToString ()
    let v884 : string = $"r#\"{v135}\"#"
    let v885 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v884
    let v886 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v885 v138
    let v887 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v886 v140
    let v888 : string = method2(v883)
    let v889 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v888 v65
    let v890 : string = method4()
    let v891 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v890 v65
    let v892 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v887, v889, v891) v146
    let v893 : string = Fable.Core.Rust.emitExpr v892 v148
    let v894 : string = $"r#\"{v150}\"#"
    let v895 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v894
    let v896 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v895 v138
    let v897 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v896 v140
    let v898 : string = method2(v893)
    let v899 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v898 v65
    let v900 : string = method5()
    let v901 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v900 v65
    let v902 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v897, v899, v901) v146
    let v903 : string = Fable.Core.Rust.emitExpr v902 v148
    let v904 : string = $"r#\"{v161}\"#"
    let v905 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v904
    let v906 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v905 v138
    let v907 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v906 v140
    let v908 : string = method2(v903)
    let v909 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v908 v65
    let v910 : string = method6()
    let v911 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v910 v65
    let v912 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v907, v909, v911) v146
    let v913 : string = Fable.Core.Rust.emitExpr v912 v148
    let v914 : Types.std.string.String = Fable.Core.Rust.emitExpr v913 v79
    let v915 : Types.EmitType<Types.std.string.String> = v914 |> unbox<Types.EmitType<Types.std.string.String>>
    let v916 : Types.std.string.String = Fable.Core.Rust.emitExpr v839 v132
    let v917 : string = (v916).ToString ()
    let v918 : string = $"r#\"{v135}\"#"
    let v919 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v918
    let v920 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v919 v138
    let v921 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v920 v140
    let v922 : string = method2(v917)
    let v923 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v922 v65
    let v924 : string = method4()
    let v925 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v924 v65
    let v926 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v921, v923, v925) v146
    let v927 : string = Fable.Core.Rust.emitExpr v926 v148
    let v928 : string = $"r#\"{v150}\"#"
    let v929 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v928
    let v930 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v929 v138
    let v931 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v930 v140
    let v932 : string = method2(v927)
    let v933 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v932 v65
    let v934 : string = method5()
    let v935 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v934 v65
    let v936 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v931, v933, v935) v146
    let v937 : string = Fable.Core.Rust.emitExpr v936 v148
    let v938 : string = $"r#\"{v161}\"#"
    let v939 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v938
    let v940 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v939 v138
    let v941 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v940 v140
    let v942 : string = method2(v937)
    let v943 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v942 v65
    let v944 : string = method6()
    let v945 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v944 v65
    let v946 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v941, v943, v945) v146
    let v947 : string = Fable.Core.Rust.emitExpr v946 v148
    let v948 : Types.std.string.String = Fable.Core.Rust.emitExpr v947 v79
    let v949 : Types.EmitType<Types.std.string.String> = v948 |> unbox<Types.EmitType<Types.std.string.String>>
    let v950 : bool = Fable.Core.Rust.emitExpr () v242
    let v953 : US0 =
        if v950 then
            US0_1
        else
            US0_0
    match v953 with
    | US0_1 -> (* Wasm32 *)
        let v954 : string = "%c%s %c%s %c%s"
        let v955 : string = "($0).as_ref().to_string()"
        let v956 : Types.std.string.String = Fable.Core.Rust.emitExpr v954 v955
        let v957 : string = "color: purple"
        let v958 : Types.std.string.String = Fable.Core.Rust.emitExpr v957 v955
        let v959 : string = $"{v881}"
        let v960 : Types.std.string.String = Fable.Core.Rust.emitExpr v959 v955
        let v961 : string = "666666"
        let v962 : string = $"color: {v961}"
        let v963 : Types.std.string.String = Fable.Core.Rust.emitExpr v962 v955
        let v964 : string = $"{v915} {v949}"
        let v965 : Types.std.string.String = Fable.Core.Rust.emitExpr v964 v955
        let v966 : string = "color: #222222"
        let v967 : Types.std.string.String = Fable.Core.Rust.emitExpr v966 v955
        let v968 : string = $"{v949}"
        let v969 : Types.std.string.String = Fable.Core.Rust.emitExpr v968 v955
        let v970 : (Types.std.string.String []) = [|v956; v958; v960; v963; v965; v967; v969|]
        let v971 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v970 v86
        let v972 : obj = v971
        let v973 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v974 : obj = Fable.Core.Rust.emitExpr v972 v973
        let v975 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v974 v975
        ()
    | _ ->
        let v976 : string = "purple"
        let v977 : string = "colored::Colorize::color(&*$0, $1.to_string())"
        let v978 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v881, v976) v977
        let v979 : Types.std.string.String = Fable.Core.Rust.emitExpr v978 v132
        let v980 : string = method7()
        let v981 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v980 v65
        let v982 : unativeint = unativeint 0
        let v983 : unativeint = unativeint 2
        let v984 : string = "&$0[$1..$2]"
        let v985 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v981, v982, v983) v984
        let v986 : string = Fable.Core.Rust.emitExpr v985 v148
        let v987 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v988 : uint8 = Fable.Core.Rust.emitExpr v986 v987
        let v989 : string = method7()
        let v990 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v989 v65
        let v991 : unativeint = unativeint 2
        let v992 : unativeint = unativeint 4
        let v993 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v990, v991, v992) v984
        let v994 : string = Fable.Core.Rust.emitExpr v993 v148
        let v995 : uint8 = Fable.Core.Rust.emitExpr v994 v987
        let v996 : string = method7()
        let v997 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v996 v65
        let v998 : unativeint = unativeint 4
        let v999 : unativeint = unativeint 6
        let v1000 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v997, v998, v999) v984
        let v1001 : string = Fable.Core.Rust.emitExpr v1000 v148
        let v1002 : uint8 = Fable.Core.Rust.emitExpr v1001 v987
        let v1003 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v1004 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v915, v988, v995, v1002) v1003
        let v1005 : Types.std.string.String = Fable.Core.Rust.emitExpr v1004 v132
        let v1006 : string = method8()
        let v1007 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1006 v65
        let v1008 : unativeint = unativeint 0
        let v1009 : unativeint = unativeint 2
        let v1010 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1007, v1008, v1009) v984
        let v1011 : string = Fable.Core.Rust.emitExpr v1010 v148
        let v1012 : uint8 = Fable.Core.Rust.emitExpr v1011 v987
        let v1013 : string = method8()
        let v1014 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1013 v65
        let v1015 : unativeint = unativeint 2
        let v1016 : unativeint = unativeint 4
        let v1017 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1014, v1015, v1016) v984
        let v1018 : string = Fable.Core.Rust.emitExpr v1017 v148
        let v1019 : uint8 = Fable.Core.Rust.emitExpr v1018 v987
        let v1020 : string = method8()
        let v1021 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1020 v65
        let v1022 : unativeint = unativeint 4
        let v1023 : unativeint = unativeint 6
        let v1024 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1021, v1022, v1023) v984
        let v1025 : string = Fable.Core.Rust.emitExpr v1024 v148
        let v1026 : uint8 = Fable.Core.Rust.emitExpr v1025 v987
        let v1027 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v949, v1012, v1019, v1026) v1003
        let v1028 : Types.std.string.String = Fable.Core.Rust.emitExpr v1027 v132
        let v1029 : string = $"{v979} {v1005} {v1028}"
        System.Console.WriteLine v1029
        ()
    let v1030 : int32 = 0
    let v1031 : UH1 = UH1_1
    let struct (v1032 : int32, v1033 : UH1) = method13(v7, v801, v1030, v1031)
    let v1034 : UH1 = UH1_1
    let v1035 : UH1 = method14(v1033, v1034)
    let v1036 : string = ""
    let v1037 : string = method15(v1035, v1036)
    let v1038 : string = "text len"
    let v1039 : Types.std.string.String = Fable.Core.Rust.emitExpr v1038 v79
    let v1040 : Types.EmitType<Types.std.string.String> = v1039 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1041 : string = "($0).len().try_into().unwrap()"
    let v1042 : int32 = Fable.Core.Rust.emitExpr v1037 v1041
    let v1043 : Types.std.string.String = Fable.Core.Rust.emitExpr v1042 v82
    let v1044 : Types.EmitType<Types.std.string.String> = v1043 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1045 : (Types.EmitType<Types.std.string.String> []) = [|v1040; v1044|]
    let v1046 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1045 v86
    let v1047 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1046 v88
    let v1048 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1047 v88
    let v1049 : Types.std.string.String = Fable.Core.Rust.emitExpr v1048 v82
    let v1050 : Types.EmitType<Types.std.string.String> = v1049 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1051 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v1052 : int64 = Fable.Core.Rust.emitExpr v1051 v6
    let v1053 : int64 = v1052 - v7
    let v1054 : string = (v1053).ToString ()
    let v1055 : int32 = 6
    let v1056 : string = method3(v1055, v1054)
    let v1057 : uint8 = Fable.Core.Rust.emitExpr () v99
    let v1058 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v79
    let v1059 : Types.EmitType<Types.std.string.String> = v1058 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1060 : Types.std.string.String = Fable.Core.Rust.emitExpr v1056 v79
    let v1061 : Types.EmitType<Types.std.string.String> = v1060 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1062 : Types.std.string.String = Fable.Core.Rust.emitExpr v106 v79
    let v1063 : Types.EmitType<Types.std.string.String> = v1062 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1064 : Types.std.string.String = Fable.Core.Rust.emitExpr v1057 v82
    let v1065 : Types.EmitType<Types.std.string.String> = v1064 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1066 : Types.std.string.String = Fable.Core.Rust.emitExpr v111 v79
    let v1067 : Types.EmitType<Types.std.string.String> = v1066 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1068 : Types.std.string.String = Fable.Core.Rust.emitExpr v114 v79
    let v1069 : Types.EmitType<Types.std.string.String> = v1068 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1070 : (Types.EmitType<Types.std.string.String> []) = [|v1059; v1061; v1063; v1065; v1067; v1069|]
    let v1071 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1070 v86
    let v1072 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1071 v88
    let v1073 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1072 v88
    let v1074 : Types.std.string.String = Fable.Core.Rust.emitExpr v1073 v82
    let v1075 : Types.EmitType<Types.std.string.String> = v1074 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1076 : Types.std.string.String = Fable.Core.Rust.emitExpr v123 v79
    let v1077 : Types.EmitType<Types.std.string.String> = v1076 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1078 : (Types.EmitType<Types.std.string.String> []) = [|v1077|]
    let v1079 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1078 v86
    let v1080 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1079 v88
    let v1081 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1080 v88
    let v1082 : Types.std.string.String = Fable.Core.Rust.emitExpr v1081 v82
    let v1083 : Types.EmitType<Types.std.string.String> = v1082 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1084 : Types.std.string.String = Fable.Core.Rust.emitExpr v1083 v132
    let v1085 : string = (v1084).ToString ()
    let v1086 : string = $"r#\"{v135}\"#"
    let v1087 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1086
    let v1088 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1087 v138
    let v1089 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1088 v140
    let v1090 : string = method2(v1085)
    let v1091 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1090 v65
    let v1092 : string = method4()
    let v1093 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1092 v65
    let v1094 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1089, v1091, v1093) v146
    let v1095 : string = Fable.Core.Rust.emitExpr v1094 v148
    let v1096 : string = $"r#\"{v150}\"#"
    let v1097 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1096
    let v1098 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1097 v138
    let v1099 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1098 v140
    let v1100 : string = method2(v1095)
    let v1101 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1100 v65
    let v1102 : string = method5()
    let v1103 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1102 v65
    let v1104 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1099, v1101, v1103) v146
    let v1105 : string = Fable.Core.Rust.emitExpr v1104 v148
    let v1106 : string = $"r#\"{v161}\"#"
    let v1107 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1106
    let v1108 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1107 v138
    let v1109 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1108 v140
    let v1110 : string = method2(v1105)
    let v1111 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1110 v65
    let v1112 : string = method6()
    let v1113 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1112 v65
    let v1114 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1109, v1111, v1113) v146
    let v1115 : string = Fable.Core.Rust.emitExpr v1114 v148
    let v1116 : Types.std.string.String = Fable.Core.Rust.emitExpr v1115 v79
    let v1117 : Types.EmitType<Types.std.string.String> = v1116 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1118 : Types.std.string.String = Fable.Core.Rust.emitExpr v1050 v132
    let v1119 : string = (v1118).ToString ()
    let v1120 : string = $"r#\"{v135}\"#"
    let v1121 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1120
    let v1122 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1121 v138
    let v1123 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1122 v140
    let v1124 : string = method2(v1119)
    let v1125 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1124 v65
    let v1126 : string = method4()
    let v1127 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1126 v65
    let v1128 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1123, v1125, v1127) v146
    let v1129 : string = Fable.Core.Rust.emitExpr v1128 v148
    let v1130 : string = $"r#\"{v150}\"#"
    let v1131 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1130
    let v1132 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1131 v138
    let v1133 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1132 v140
    let v1134 : string = method2(v1129)
    let v1135 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1134 v65
    let v1136 : string = method5()
    let v1137 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1136 v65
    let v1138 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1133, v1135, v1137) v146
    let v1139 : string = Fable.Core.Rust.emitExpr v1138 v148
    let v1140 : string = $"r#\"{v161}\"#"
    let v1141 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1140
    let v1142 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1141 v138
    let v1143 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1142 v140
    let v1144 : string = method2(v1139)
    let v1145 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1144 v65
    let v1146 : string = method6()
    let v1147 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1146 v65
    let v1148 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1143, v1145, v1147) v146
    let v1149 : string = Fable.Core.Rust.emitExpr v1148 v148
    let v1150 : Types.std.string.String = Fable.Core.Rust.emitExpr v1149 v79
    let v1151 : Types.EmitType<Types.std.string.String> = v1150 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1152 : Types.std.string.String = Fable.Core.Rust.emitExpr v1075 v132
    let v1153 : string = (v1152).ToString ()
    let v1154 : string = $"r#\"{v135}\"#"
    let v1155 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1154
    let v1156 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1155 v138
    let v1157 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1156 v140
    let v1158 : string = method2(v1153)
    let v1159 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1158 v65
    let v1160 : string = method4()
    let v1161 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1160 v65
    let v1162 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1157, v1159, v1161) v146
    let v1163 : string = Fable.Core.Rust.emitExpr v1162 v148
    let v1164 : string = $"r#\"{v150}\"#"
    let v1165 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1164
    let v1166 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1165 v138
    let v1167 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1166 v140
    let v1168 : string = method2(v1163)
    let v1169 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1168 v65
    let v1170 : string = method5()
    let v1171 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1170 v65
    let v1172 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1167, v1169, v1171) v146
    let v1173 : string = Fable.Core.Rust.emitExpr v1172 v148
    let v1174 : string = $"r#\"{v161}\"#"
    let v1175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1174
    let v1176 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1175 v138
    let v1177 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1176 v140
    let v1178 : string = method2(v1173)
    let v1179 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1178 v65
    let v1180 : string = method6()
    let v1181 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1180 v65
    let v1182 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1177, v1179, v1181) v146
    let v1183 : string = Fable.Core.Rust.emitExpr v1182 v148
    let v1184 : Types.std.string.String = Fable.Core.Rust.emitExpr v1183 v79
    let v1185 : Types.EmitType<Types.std.string.String> = v1184 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1186 : bool = Fable.Core.Rust.emitExpr () v242
    let v1189 : US0 =
        if v1186 then
            US0_1
        else
            US0_0
    match v1189 with
    | US0_1 -> (* Wasm32 *)
        let v1190 : string = "%c%s %c%s %c%s"
        let v1191 : string = "($0).as_ref().to_string()"
        let v1192 : Types.std.string.String = Fable.Core.Rust.emitExpr v1190 v1191
        let v1193 : string = "color: purple"
        let v1194 : Types.std.string.String = Fable.Core.Rust.emitExpr v1193 v1191
        let v1195 : string = $"{v1117}"
        let v1196 : Types.std.string.String = Fable.Core.Rust.emitExpr v1195 v1191
        let v1197 : string = "666666"
        let v1198 : string = $"color: {v1197}"
        let v1199 : Types.std.string.String = Fable.Core.Rust.emitExpr v1198 v1191
        let v1200 : string = $"{v1151} {v1185}"
        let v1201 : Types.std.string.String = Fable.Core.Rust.emitExpr v1200 v1191
        let v1202 : string = "color: #222222"
        let v1203 : Types.std.string.String = Fable.Core.Rust.emitExpr v1202 v1191
        let v1204 : string = $"{v1185}"
        let v1205 : Types.std.string.String = Fable.Core.Rust.emitExpr v1204 v1191
        let v1206 : (Types.std.string.String []) = [|v1192; v1194; v1196; v1199; v1201; v1203; v1205|]
        let v1207 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v1206 v86
        let v1208 : obj = v1207
        let v1209 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v1210 : obj = Fable.Core.Rust.emitExpr v1208 v1209
        let v1211 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v1210 v1211
        ()
    | _ ->
        let v1212 : string = "purple"
        let v1213 : string = "colored::Colorize::color(&*$0, $1.to_string())"
        let v1214 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1117, v1212) v1213
        let v1215 : Types.std.string.String = Fable.Core.Rust.emitExpr v1214 v132
        let v1216 : string = method7()
        let v1217 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1216 v65
        let v1218 : unativeint = unativeint 0
        let v1219 : unativeint = unativeint 2
        let v1220 : string = "&$0[$1..$2]"
        let v1221 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1217, v1218, v1219) v1220
        let v1222 : string = Fable.Core.Rust.emitExpr v1221 v148
        let v1223 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v1224 : uint8 = Fable.Core.Rust.emitExpr v1222 v1223
        let v1225 : string = method7()
        let v1226 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1225 v65
        let v1227 : unativeint = unativeint 2
        let v1228 : unativeint = unativeint 4
        let v1229 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1226, v1227, v1228) v1220
        let v1230 : string = Fable.Core.Rust.emitExpr v1229 v148
        let v1231 : uint8 = Fable.Core.Rust.emitExpr v1230 v1223
        let v1232 : string = method7()
        let v1233 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1232 v65
        let v1234 : unativeint = unativeint 4
        let v1235 : unativeint = unativeint 6
        let v1236 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1233, v1234, v1235) v1220
        let v1237 : string = Fable.Core.Rust.emitExpr v1236 v148
        let v1238 : uint8 = Fable.Core.Rust.emitExpr v1237 v1223
        let v1239 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v1240 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1151, v1224, v1231, v1238) v1239
        let v1241 : Types.std.string.String = Fable.Core.Rust.emitExpr v1240 v132
        let v1242 : string = method8()
        let v1243 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1242 v65
        let v1244 : unativeint = unativeint 0
        let v1245 : unativeint = unativeint 2
        let v1246 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1243, v1244, v1245) v1220
        let v1247 : string = Fable.Core.Rust.emitExpr v1246 v148
        let v1248 : uint8 = Fable.Core.Rust.emitExpr v1247 v1223
        let v1249 : string = method8()
        let v1250 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1249 v65
        let v1251 : unativeint = unativeint 2
        let v1252 : unativeint = unativeint 4
        let v1253 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1250, v1251, v1252) v1220
        let v1254 : string = Fable.Core.Rust.emitExpr v1253 v148
        let v1255 : uint8 = Fable.Core.Rust.emitExpr v1254 v1223
        let v1256 : string = method8()
        let v1257 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1256 v65
        let v1258 : unativeint = unativeint 4
        let v1259 : unativeint = unativeint 6
        let v1260 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1257, v1258, v1259) v1220
        let v1261 : string = Fable.Core.Rust.emitExpr v1260 v148
        let v1262 : uint8 = Fable.Core.Rust.emitExpr v1261 v1223
        let v1263 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1185, v1248, v1255, v1262) v1239
        let v1264 : Types.std.string.String = Fable.Core.Rust.emitExpr v1263 v132
        let v1265 : string = $"{v1215} {v1241} {v1264}"
        System.Console.WriteLine v1265
        ()
    let v1266 : string = "std::fs::write($0, $1.as_str())"
    let v1267 : Result<unit, Types.std.io.Error> = Fable.Core.Rust.emitExpr struct (v77, v1037) v1266
    Fable.Core.Rust.emitExpr v1267 v61
    let v1268 : string = "> fs_write rs_path_clean text; ok"
    let v1269 : Types.std.string.String = Fable.Core.Rust.emitExpr v1268 v79
    let v1270 : Types.EmitType<Types.std.string.String> = v1269 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1271 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v1272 : int64 = Fable.Core.Rust.emitExpr v1271 v6
    let v1273 : int64 = v1272 - v7
    let v1274 : string = (v1273).ToString ()
    let v1275 : int32 = 6
    let v1276 : string = method3(v1275, v1274)
    let v1277 : uint8 = Fable.Core.Rust.emitExpr () v99
    let v1278 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v79
    let v1279 : Types.EmitType<Types.std.string.String> = v1278 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1280 : Types.std.string.String = Fable.Core.Rust.emitExpr v1276 v79
    let v1281 : Types.EmitType<Types.std.string.String> = v1280 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1282 : Types.std.string.String = Fable.Core.Rust.emitExpr v106 v79
    let v1283 : Types.EmitType<Types.std.string.String> = v1282 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1284 : Types.std.string.String = Fable.Core.Rust.emitExpr v1277 v82
    let v1285 : Types.EmitType<Types.std.string.String> = v1284 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1286 : Types.std.string.String = Fable.Core.Rust.emitExpr v111 v79
    let v1287 : Types.EmitType<Types.std.string.String> = v1286 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1288 : Types.std.string.String = Fable.Core.Rust.emitExpr v114 v79
    let v1289 : Types.EmitType<Types.std.string.String> = v1288 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1290 : (Types.EmitType<Types.std.string.String> []) = [|v1279; v1281; v1283; v1285; v1287; v1289|]
    let v1291 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1290 v86
    let v1292 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1291 v88
    let v1293 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1292 v88
    let v1294 : Types.std.string.String = Fable.Core.Rust.emitExpr v1293 v82
    let v1295 : Types.EmitType<Types.std.string.String> = v1294 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1296 : Types.std.string.String = Fable.Core.Rust.emitExpr v123 v79
    let v1297 : Types.EmitType<Types.std.string.String> = v1296 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1298 : (Types.EmitType<Types.std.string.String> []) = [|v1297|]
    let v1299 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1298 v86
    let v1300 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1299 v88
    let v1301 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1300 v88
    let v1302 : Types.std.string.String = Fable.Core.Rust.emitExpr v1301 v82
    let v1303 : Types.EmitType<Types.std.string.String> = v1302 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1304 : Types.std.string.String = Fable.Core.Rust.emitExpr v1303 v132
    let v1305 : string = (v1304).ToString ()
    let v1306 : string = $"r#\"{v135}\"#"
    let v1307 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1306
    let v1308 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1307 v138
    let v1309 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1308 v140
    let v1310 : string = method2(v1305)
    let v1311 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1310 v65
    let v1312 : string = method4()
    let v1313 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1312 v65
    let v1314 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1309, v1311, v1313) v146
    let v1315 : string = Fable.Core.Rust.emitExpr v1314 v148
    let v1316 : string = $"r#\"{v150}\"#"
    let v1317 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1316
    let v1318 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1317 v138
    let v1319 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1318 v140
    let v1320 : string = method2(v1315)
    let v1321 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1320 v65
    let v1322 : string = method5()
    let v1323 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1322 v65
    let v1324 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1319, v1321, v1323) v146
    let v1325 : string = Fable.Core.Rust.emitExpr v1324 v148
    let v1326 : string = $"r#\"{v161}\"#"
    let v1327 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1326
    let v1328 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1327 v138
    let v1329 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1328 v140
    let v1330 : string = method2(v1325)
    let v1331 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1330 v65
    let v1332 : string = method6()
    let v1333 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1332 v65
    let v1334 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1329, v1331, v1333) v146
    let v1335 : string = Fable.Core.Rust.emitExpr v1334 v148
    let v1336 : Types.std.string.String = Fable.Core.Rust.emitExpr v1335 v79
    let v1337 : Types.EmitType<Types.std.string.String> = v1336 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1338 : Types.std.string.String = Fable.Core.Rust.emitExpr v1270 v132
    let v1339 : string = (v1338).ToString ()
    let v1340 : string = $"r#\"{v135}\"#"
    let v1341 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1340
    let v1342 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1341 v138
    let v1343 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1342 v140
    let v1344 : string = method2(v1339)
    let v1345 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1344 v65
    let v1346 : string = method4()
    let v1347 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1346 v65
    let v1348 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1343, v1345, v1347) v146
    let v1349 : string = Fable.Core.Rust.emitExpr v1348 v148
    let v1350 : string = $"r#\"{v150}\"#"
    let v1351 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1350
    let v1352 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1351 v138
    let v1353 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1352 v140
    let v1354 : string = method2(v1349)
    let v1355 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1354 v65
    let v1356 : string = method5()
    let v1357 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1356 v65
    let v1358 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1353, v1355, v1357) v146
    let v1359 : string = Fable.Core.Rust.emitExpr v1358 v148
    let v1360 : string = $"r#\"{v161}\"#"
    let v1361 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1360
    let v1362 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1361 v138
    let v1363 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1362 v140
    let v1364 : string = method2(v1359)
    let v1365 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1364 v65
    let v1366 : string = method6()
    let v1367 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1366 v65
    let v1368 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1363, v1365, v1367) v146
    let v1369 : string = Fable.Core.Rust.emitExpr v1368 v148
    let v1370 : Types.std.string.String = Fable.Core.Rust.emitExpr v1369 v79
    let v1371 : Types.EmitType<Types.std.string.String> = v1370 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1372 : Types.std.string.String = Fable.Core.Rust.emitExpr v1295 v132
    let v1373 : string = (v1372).ToString ()
    let v1374 : string = $"r#\"{v135}\"#"
    let v1375 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1374
    let v1376 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1375 v138
    let v1377 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1376 v140
    let v1378 : string = method2(v1373)
    let v1379 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1378 v65
    let v1380 : string = method4()
    let v1381 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1380 v65
    let v1382 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1377, v1379, v1381) v146
    let v1383 : string = Fable.Core.Rust.emitExpr v1382 v148
    let v1384 : string = $"r#\"{v150}\"#"
    let v1385 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1384
    let v1386 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1385 v138
    let v1387 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1386 v140
    let v1388 : string = method2(v1383)
    let v1389 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1388 v65
    let v1390 : string = method5()
    let v1391 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1390 v65
    let v1392 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1387, v1389, v1391) v146
    let v1393 : string = Fable.Core.Rust.emitExpr v1392 v148
    let v1394 : string = $"r#\"{v161}\"#"
    let v1395 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1394
    let v1396 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1395 v138
    let v1397 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1396 v140
    let v1398 : string = method2(v1393)
    let v1399 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1398 v65
    let v1400 : string = method6()
    let v1401 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1400 v65
    let v1402 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1397, v1399, v1401) v146
    let v1403 : string = Fable.Core.Rust.emitExpr v1402 v148
    let v1404 : Types.std.string.String = Fable.Core.Rust.emitExpr v1403 v79
    let v1405 : Types.EmitType<Types.std.string.String> = v1404 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1406 : bool = Fable.Core.Rust.emitExpr () v242
    let v1409 : US0 =
        if v1406 then
            US0_1
        else
            US0_0
    match v1409 with
    | US0_1 -> (* Wasm32 *)
        let v1410 : string = "%c%s %c%s %c%s"
        let v1411 : string = "($0).as_ref().to_string()"
        let v1412 : Types.std.string.String = Fable.Core.Rust.emitExpr v1410 v1411
        let v1413 : string = "color: purple"
        let v1414 : Types.std.string.String = Fable.Core.Rust.emitExpr v1413 v1411
        let v1415 : string = $"{v1337}"
        let v1416 : Types.std.string.String = Fable.Core.Rust.emitExpr v1415 v1411
        let v1417 : string = "666666"
        let v1418 : string = $"color: {v1417}"
        let v1419 : Types.std.string.String = Fable.Core.Rust.emitExpr v1418 v1411
        let v1420 : string = $"{v1371} {v1405}"
        let v1421 : Types.std.string.String = Fable.Core.Rust.emitExpr v1420 v1411
        let v1422 : string = "color: #222222"
        let v1423 : Types.std.string.String = Fable.Core.Rust.emitExpr v1422 v1411
        let v1424 : string = $"{v1405}"
        let v1425 : Types.std.string.String = Fable.Core.Rust.emitExpr v1424 v1411
        let v1426 : (Types.std.string.String []) = [|v1412; v1414; v1416; v1419; v1421; v1423; v1425|]
        let v1427 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v1426 v86
        let v1428 : obj = v1427
        let v1429 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v1430 : obj = Fable.Core.Rust.emitExpr v1428 v1429
        let v1431 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v1430 v1431
        ()
    | _ ->
        let v1432 : string = "purple"
        let v1433 : string = "colored::Colorize::color(&*$0, $1.to_string())"
        let v1434 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1337, v1432) v1433
        let v1435 : Types.std.string.String = Fable.Core.Rust.emitExpr v1434 v132
        let v1436 : string = method7()
        let v1437 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1436 v65
        let v1438 : unativeint = unativeint 0
        let v1439 : unativeint = unativeint 2
        let v1440 : string = "&$0[$1..$2]"
        let v1441 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1437, v1438, v1439) v1440
        let v1442 : string = Fable.Core.Rust.emitExpr v1441 v148
        let v1443 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v1444 : uint8 = Fable.Core.Rust.emitExpr v1442 v1443
        let v1445 : string = method7()
        let v1446 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1445 v65
        let v1447 : unativeint = unativeint 2
        let v1448 : unativeint = unativeint 4
        let v1449 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1446, v1447, v1448) v1440
        let v1450 : string = Fable.Core.Rust.emitExpr v1449 v148
        let v1451 : uint8 = Fable.Core.Rust.emitExpr v1450 v1443
        let v1452 : string = method7()
        let v1453 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1452 v65
        let v1454 : unativeint = unativeint 4
        let v1455 : unativeint = unativeint 6
        let v1456 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1453, v1454, v1455) v1440
        let v1457 : string = Fable.Core.Rust.emitExpr v1456 v148
        let v1458 : uint8 = Fable.Core.Rust.emitExpr v1457 v1443
        let v1459 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v1460 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1371, v1444, v1451, v1458) v1459
        let v1461 : Types.std.string.String = Fable.Core.Rust.emitExpr v1460 v132
        let v1462 : string = method8()
        let v1463 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1462 v65
        let v1464 : unativeint = unativeint 0
        let v1465 : unativeint = unativeint 2
        let v1466 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1463, v1464, v1465) v1440
        let v1467 : string = Fable.Core.Rust.emitExpr v1466 v148
        let v1468 : uint8 = Fable.Core.Rust.emitExpr v1467 v1443
        let v1469 : string = method8()
        let v1470 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1469 v65
        let v1471 : unativeint = unativeint 2
        let v1472 : unativeint = unativeint 4
        let v1473 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1470, v1471, v1472) v1440
        let v1474 : string = Fable.Core.Rust.emitExpr v1473 v148
        let v1475 : uint8 = Fable.Core.Rust.emitExpr v1474 v1443
        let v1476 : string = method8()
        let v1477 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1476 v65
        let v1478 : unativeint = unativeint 4
        let v1479 : unativeint = unativeint 6
        let v1480 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1477, v1478, v1479) v1440
        let v1481 : string = Fable.Core.Rust.emitExpr v1480 v148
        let v1482 : uint8 = Fable.Core.Rust.emitExpr v1481 v1443
        let v1483 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1405, v1468, v1475, v1482) v1459
        let v1484 : Types.std.string.String = Fable.Core.Rust.emitExpr v1483 v132
        let v1485 : string = $"{v1435} {v1461} {v1484}"
        System.Console.WriteLine v1485
        ()
    0
let v0 : (unit -> int32) = closure0()
()
