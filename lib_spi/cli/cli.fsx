type UH0 =
    | UH0_0 of Types.std.string.String * UH0
    | UH0_1
and Mut0 = {mutable l0 : UH0}
and UH1 =
    | UH1_0 of string * UH1
    | UH1_1
let rec method0 () : struct (string * string * string * bool) =
    let v0 : string = ""
    let v1 : obj = v0
    struct (v0, v0, v0, true)
and method1 () : string =
    let v0 : string = "rs-path"
    v0
and method2 (v0 : string) : string =
    v0
and method3 (v0 : int32, v1 : string) : string =
    let v2 : int32 = String.length v1
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : string = $"0{v1}"
        method3(v0, v4)
    else
        v1
and method4 () : string =
    let v0 : string = "$1=$2"
    v0
and method5 () : string =
    let v0 : string = "[$1]"
    v0
and method6 () : string =
    let v0 : string = " "
    v0
and closure1 (v0 : int64, v1 : Mut0) (v2 : Types.Vec<uint8>) : Result<bool, Types.std.io.Error> =
    let v3 : string = "line len"
    let v4 : string = "($0).to_string()"
    let v5 : Types.std.string.String = Fable.Core.Rust.emitExpr v3 v4
    let v6 : Types.EmitType<Types.std.string.String> = v5 |> unbox<Types.EmitType<Types.std.string.String>>
    let v7 : string = "($0).len().try_into().unwrap()"
    let v8 : int32 = Fable.Core.Rust.emitExpr v2 v7
    let v9 : string = "format!(\"{:?}\", $0)"
    let v10 : Types.std.string.String = Fable.Core.Rust.emitExpr v8 v9
    let v11 : Types.EmitType<Types.std.string.String> = v10 |> unbox<Types.EmitType<Types.std.string.String>>
    let v12 : (Types.EmitType<Types.std.string.String> []) = [|v6; v11|]
    let v13 : string = "core::ops::Deref::deref($0)"
    let v14 : obj = Fable.Core.Rust.emitExpr v12 v13
    let v15 : string = "format!(\"{:?}\", ***$0)"
    let v16 : Types.std.string.String = Fable.Core.Rust.emitExpr v14 v15
    let v17 : Types.EmitType<Types.std.string.String> = v16 |> unbox<Types.EmitType<Types.std.string.String>>
    let v18 : string = "std::string::String::from_utf8(($0).to_owned()).unwrap()"
    let v19 : Types.std.string.String = Fable.Core.Rust.emitExpr v2 v18
    let v20 : UH0 = v1.l0
    let v21 : UH0 = UH0_0(v19, v20)
    v1.l0 <- v21
    let v22 : Result<bool, Types.std.io.Error> = Ok true
    v22
and method7 (v0 : int64, v1 : Mut0) : (Types.Vec<uint8> -> Result<bool, Types.std.io.Error>) =
    closure1(v0, v1)
and method8 (v0 : UH0, v1 : UH0) : UH0 =
    match v0 with
    | UH0_0(v2, v3) -> (* Cons *)
        let v4 : UH0 = UH0_0(v2, v1)
        method8(v3, v4)
    | UH0_1 -> (* Nil *)
        v1
and method9 (v0 : UH0, v1 : UH1) : UH1 =
    match v0 with
    | UH0_0(v2, v3) -> (* Cons *)
        let v4 : UH1 = method9(v3, v1)
        let v5 : string = "fable_library_rust::String_::fromStr($0)"
        let v6 : string = Fable.Core.Rust.emitExpr v2 v5
        UH1_0(v6, v4)
    | UH0_1 -> (* Nil *)
        v1
and method10 (v0 : UH1, v1 : int32) : int32 =
    match v0 with
    | UH1_0(v2, v3) -> (* Cons *)
        let v4 : int32 = v1 + 1
        method10(v3, v4)
    | UH1_1 -> (* Nil *)
        v1
and method11 (v0 : UH1, v1 : int32, v2 : UH1) : struct (int32 * UH1) =
    match v0 with
    | UH1_0(v3, v4) -> (* Cons *)
        let v5 : string = "/node_modules/"
        let v6 : Types.Ref<string> = v5 |> unbox
        let v7 : Types.Ref<string> = v3 |> unbox
        let v8 : string = "($1).contains(&*$0)"
        let v9 : bool = Fable.Core.Rust.emitExpr struct (v6, v7) v8
        let struct (v18 : int32, v19 : UH1) =
            if v9 then
                struct (1, v2)
            else
                let v10 : bool = 0 = v1
                if v10 then
                    let v11 : UH1 = UH1_0(v3, v2)
                    struct (0, v11)
                else
                    let v12 : bool = 2 = v1
                    if v12 then
                        struct (0, v2)
                    else
                        let v13 : int32 = v1 + 1
                        struct (v13, v2)
        method11(v4, v18, v19)
    | UH1_1 -> (* Nil *)
        struct (v1, v2)
and method12 (v0 : UH1, v1 : UH1) : UH1 =
    match v0 with
    | UH1_0(v2, v3) -> (* Cons *)
        let v4 : UH1 = UH1_0(v2, v1)
        method12(v3, v4)
    | UH1_1 -> (* Nil *)
        v1
and method13 (v0 : UH1, v1 : string) : string =
    match v0 with
    | UH1_0(v2, v3) -> (* Cons *)
        let v4 : string = v1 + v2
        method13(v3, v4)
    | UH1_1 -> (* Nil *)
        v1
and closure0 () () : int32 =
    let struct (v0 : string, v1 : string, v2 : string, v3 : bool) = method0()
    let v4 : string = "chrono::Utc::now()"
    let v5 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v6 : string = "($0).timestamp()"
    let v7 : int64 = Fable.Core.Rust.emitExpr v5 v6
    let v8 : string = "command"
    let v9 : string = $"r#\"{v8}\"#"
    let v10 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v9
    let v11 : string = "clap::Command::new($0)"
    let v12 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr v10 v11
    let v13 : string = "rs-path"
    let v14 : string = $"r#\"{v13}\"#"
    let v15 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v14
    let v16 : string = "clap::Arg::new($0)"
    let v17 : Types.clap.builder.Arg = Fable.Core.Rust.emitExpr v15 v16
    let v18 : string = "$0.arg($1)"
    let v19 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr struct (v12, v17) v18
    let v20 : string = "$0.get_matches()"
    let v21 : Types.Ref<Types.clap.parser.ArgMatches> = Fable.Core.Rust.emitExpr v19 v20
    let v22 : string = method1()
    let v23 : string = "$0.as_str()"
    let v24 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v22 v23
    let v25 : string = "--" + v13 + "="
    let v26 : string = method2(v25)
    let v27 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v26 v23
    let v28 : string = "&($0).get_one::<String>($1).unwrap().replace($2, \"\")"
    let v29 : Types.Ref<Types.std.string.String> = Fable.Core.Rust.emitExpr struct (v21, v24, v27) v28
    let v30 : string = "std::path::PathBuf::from($0)"
    let v31 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v29 v30
    let v32 : string = "($0).canonicalize()"
    let v33 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v31 v32
    let v34 : string = "($0).as_ref().unwrap().to_path_buf()"
    let v35 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v33 v34
    let v36 : string = "rs_path_clean"
    let v37 : string = "($0).to_string()"
    let v38 : Types.std.string.String = Fable.Core.Rust.emitExpr v36 v37
    let v39 : Types.EmitType<Types.std.string.String> = v38 |> unbox<Types.EmitType<Types.std.string.String>>
    let v40 : string = "format!(\"{:?}\", $0)"
    let v41 : Types.std.string.String = Fable.Core.Rust.emitExpr v35 v40
    let v42 : Types.EmitType<Types.std.string.String> = v41 |> unbox<Types.EmitType<Types.std.string.String>>
    let v43 : (Types.EmitType<Types.std.string.String> []) = [|v39; v42|]
    let v44 : string = "core::ops::Deref::deref($0)"
    let v45 : obj = Fable.Core.Rust.emitExpr v43 v44
    let v46 : string = "format!(\"{:?}\", ***$0)"
    let v47 : Types.std.string.String = Fable.Core.Rust.emitExpr v45 v46
    let v48 : Types.EmitType<Types.std.string.String> = v47 |> unbox<Types.EmitType<Types.std.string.String>>
    let v49 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v50 : int64 = Fable.Core.Rust.emitExpr v49 v6
    let v51 : int64 = v50 - v7
    let v52 : string = (v51).ToString ()
    let v53 : int32 = 6
    let v54 : string = method3(v53, v52)
    let v55 : string = "rand::random::<u8>()"
    let v56 : uint8 = Fable.Core.Rust.emitExpr () v55
    let v57 : string = "timestamp"
    let v58 : Types.std.string.String = Fable.Core.Rust.emitExpr v57 v37
    let v59 : Types.EmitType<Types.std.string.String> = v58 |> unbox<Types.EmitType<Types.std.string.String>>
    let v60 : Types.std.string.String = Fable.Core.Rust.emitExpr v54 v37
    let v61 : Types.EmitType<Types.std.string.String> = v60 |> unbox<Types.EmitType<Types.std.string.String>>
    let v62 : string = "run_id"
    let v63 : Types.std.string.String = Fable.Core.Rust.emitExpr v62 v37
    let v64 : Types.EmitType<Types.std.string.String> = v63 |> unbox<Types.EmitType<Types.std.string.String>>
    let v65 : Types.std.string.String = Fable.Core.Rust.emitExpr v56 v40
    let v66 : Types.EmitType<Types.std.string.String> = v65 |> unbox<Types.EmitType<Types.std.string.String>>
    let v67 : string = "log_level"
    let v68 : Types.std.string.String = Fable.Core.Rust.emitExpr v67 v37
    let v69 : Types.EmitType<Types.std.string.String> = v68 |> unbox<Types.EmitType<Types.std.string.String>>
    let v70 : string = "Debug"
    let v71 : Types.std.string.String = Fable.Core.Rust.emitExpr v70 v37
    let v72 : Types.EmitType<Types.std.string.String> = v71 |> unbox<Types.EmitType<Types.std.string.String>>
    let v73 : (Types.EmitType<Types.std.string.String> []) = [|v59; v61; v64; v66; v69; v72|]
    let v74 : obj = Fable.Core.Rust.emitExpr v73 v44
    let v75 : Types.std.string.String = Fable.Core.Rust.emitExpr v74 v46
    let v76 : Types.EmitType<Types.std.string.String> = v75 |> unbox<Types.EmitType<Types.std.string.String>>
    let v77 : string = "> app ()"
    let v78 : Types.std.string.String = Fable.Core.Rust.emitExpr v77 v37
    let v79 : Types.EmitType<Types.std.string.String> = v78 |> unbox<Types.EmitType<Types.std.string.String>>
    let v80 : (Types.EmitType<Types.std.string.String> []) = [|v79|]
    let v81 : obj = Fable.Core.Rust.emitExpr v80 v44
    let v82 : Types.std.string.String = Fable.Core.Rust.emitExpr v81 v46
    let v83 : Types.EmitType<Types.std.string.String> = v82 |> unbox<Types.EmitType<Types.std.string.String>>
    let v84 : Types.std.string.String = v83 |> unbox
    let v85 : string = "fable_library_rust::String_::fromStr($0)"
    let v86 : string = Fable.Core.Rust.emitExpr v84 v85
    let v87 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v88 : string = $"r#\"{v87}\"#"
    let v89 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v88
    let v90 : string = "regex::RegexBuilder::new($0)"
    let v91 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v89 v90
    let v92 : string = "$0.build().unwrap()"
    let v93 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v91 v92
    let v94 : string = method2(v86)
    let v95 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v94 v23
    let v96 : string = method4()
    let v97 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v96 v23
    let v98 : string = "$0.replace_all(&$1, $2).to_string()"
    let v99 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v93, v95, v97) v98
    let v100 : string = Fable.Core.Rust.emitExpr v99 v85
    let v101 : string = "\\[\"(.*?)\"\\]"
    let v102 : string = $"r#\"{v101}\"#"
    let v103 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v102
    let v104 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v103 v90
    let v105 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v104 v92
    let v106 : string = method2(v100)
    let v107 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v106 v23
    let v108 : string = method5()
    let v109 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v108 v23
    let v110 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v105, v107, v109) v98
    let v111 : string = Fable.Core.Rust.emitExpr v110 v85
    let v112 : string = ", "
    let v113 : string = $"r#\"{v112}\"#"
    let v114 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v113
    let v115 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v114 v90
    let v116 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v115 v92
    let v117 : string = method2(v111)
    let v118 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v117 v23
    let v119 : string = method6()
    let v120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v119 v23
    let v121 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v116, v118, v120) v98
    let v122 : string = Fable.Core.Rust.emitExpr v121 v85
    let v123 : Types.std.string.String = Fable.Core.Rust.emitExpr v122 v37
    let v124 : Types.EmitType<Types.std.string.String> = v123 |> unbox<Types.EmitType<Types.std.string.String>>
    let v125 : string = "purple"
    let v126 : string = "colored::Colorize::color(&*$0, $1.to_string())"
    let v127 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v124, v125) v126
    let v128 : string = "format!(\"{}\", $0)"
    let v129 : Types.std.string.String = Fable.Core.Rust.emitExpr v127 v128
    let v130 : Types.std.string.String = v48 |> unbox
    let v131 : string = Fable.Core.Rust.emitExpr v130 v85
    let v132 : string = $"r#\"{v87}\"#"
    let v133 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v132
    let v134 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v133 v90
    let v135 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v134 v92
    let v136 : string = method2(v131)
    let v137 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v136 v23
    let v138 : string = method4()
    let v139 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v138 v23
    let v140 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v135, v137, v139) v98
    let v141 : string = Fable.Core.Rust.emitExpr v140 v85
    let v142 : string = $"r#\"{v101}\"#"
    let v143 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v142
    let v144 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v143 v90
    let v145 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v144 v92
    let v146 : string = method2(v141)
    let v147 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v146 v23
    let v148 : string = method5()
    let v149 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v148 v23
    let v150 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v145, v147, v149) v98
    let v151 : string = Fable.Core.Rust.emitExpr v150 v85
    let v152 : string = $"r#\"{v112}\"#"
    let v153 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v152
    let v154 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v153 v90
    let v155 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v154 v92
    let v156 : string = method2(v151)
    let v157 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v156 v23
    let v158 : string = method6()
    let v159 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v158 v23
    let v160 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v155, v157, v159) v98
    let v161 : string = Fable.Core.Rust.emitExpr v160 v85
    let v162 : Types.std.string.String = Fable.Core.Rust.emitExpr v161 v37
    let v163 : Types.EmitType<Types.std.string.String> = v162 |> unbox<Types.EmitType<Types.std.string.String>>
    let v164 : string = "666666"
    let v165 : string = v164.Substring (0, 2)
    let v166 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v167 : uint8 = Fable.Core.Rust.emitExpr v165 v166
    let v168 : string = v164.Substring (2, 2)
    let v169 : uint8 = Fable.Core.Rust.emitExpr v168 v166
    let v170 : string = v164.Substring (4, 2)
    let v171 : uint8 = Fable.Core.Rust.emitExpr v170 v166
    let v172 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v173 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v163, v167, v169, v171) v172
    let v174 : Types.std.string.String = Fable.Core.Rust.emitExpr v173 v128
    let v175 : Types.std.string.String = v76 |> unbox
    let v176 : string = Fable.Core.Rust.emitExpr v175 v85
    let v177 : string = $"r#\"{v87}\"#"
    let v178 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v177
    let v179 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v178 v90
    let v180 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v179 v92
    let v181 : string = method2(v176)
    let v182 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v181 v23
    let v183 : string = method4()
    let v184 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v183 v23
    let v185 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v180, v182, v184) v98
    let v186 : string = Fable.Core.Rust.emitExpr v185 v85
    let v187 : string = $"r#\"{v101}\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v188 v90
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v189 v92
    let v191 : string = method2(v186)
    let v192 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v191 v23
    let v193 : string = method5()
    let v194 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v193 v23
    let v195 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v190, v192, v194) v98
    let v196 : string = Fable.Core.Rust.emitExpr v195 v85
    let v197 : string = $"r#\"{v112}\"#"
    let v198 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v197
    let v199 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v198 v90
    let v200 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v199 v92
    let v201 : string = method2(v196)
    let v202 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v201 v23
    let v203 : string = method6()
    let v204 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v203 v23
    let v205 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v200, v202, v204) v98
    let v206 : string = Fable.Core.Rust.emitExpr v205 v85
    let v207 : Types.std.string.String = Fable.Core.Rust.emitExpr v206 v37
    let v208 : Types.EmitType<Types.std.string.String> = v207 |> unbox<Types.EmitType<Types.std.string.String>>
    let v209 : string = "222222"
    let v210 : string = v209.Substring (0, 2)
    let v211 : uint8 = Fable.Core.Rust.emitExpr v210 v166
    let v212 : string = v209.Substring (2, 2)
    let v213 : uint8 = Fable.Core.Rust.emitExpr v212 v166
    let v214 : string = v209.Substring (4, 2)
    let v215 : uint8 = Fable.Core.Rust.emitExpr v214 v166
    let v216 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v208, v211, v213, v215) v172
    let v217 : Types.std.string.String = Fable.Core.Rust.emitExpr v216 v128
    let v218 : string = $"{v129} {v174} {v217}"
    System.Console.WriteLine v218
    let struct (v219 : string, v220 : string, v221 : string, v222 : bool) = method0()
    let v223 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v224 : int64 = Fable.Core.Rust.emitExpr v223 v6
    let v225 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v35 v32
    let v226 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v225 v34
    let v227 : string = "path_clean"
    let v228 : Types.std.string.String = Fable.Core.Rust.emitExpr v227 v37
    let v229 : Types.EmitType<Types.std.string.String> = v228 |> unbox<Types.EmitType<Types.std.string.String>>
    let v230 : string = "fable_library_rust::String_::fromStr(&format!(\"{}\", $0.display()))"
    let v231 : string = Fable.Core.Rust.emitExpr v226 v230
    let v232 : Types.std.string.String = Fable.Core.Rust.emitExpr v231 v37
    let v233 : Types.EmitType<Types.std.string.String> = v232 |> unbox<Types.EmitType<Types.std.string.String>>
    let v234 : (Types.EmitType<Types.std.string.String> []) = [|v229; v233|]
    let v235 : obj = Fable.Core.Rust.emitExpr v234 v44
    let v236 : Types.std.string.String = Fable.Core.Rust.emitExpr v235 v46
    let v237 : Types.EmitType<Types.std.string.String> = v236 |> unbox<Types.EmitType<Types.std.string.String>>
    let v238 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v239 : int64 = Fable.Core.Rust.emitExpr v238 v6
    let v240 : int64 = v239 - v224
    let v241 : string = (v240).ToString ()
    let v242 : int32 = 6
    let v243 : string = method3(v242, v241)
    let v244 : uint8 = Fable.Core.Rust.emitExpr () v55
    let v245 : Types.std.string.String = Fable.Core.Rust.emitExpr v57 v37
    let v246 : Types.EmitType<Types.std.string.String> = v245 |> unbox<Types.EmitType<Types.std.string.String>>
    let v247 : Types.std.string.String = Fable.Core.Rust.emitExpr v243 v37
    let v248 : Types.EmitType<Types.std.string.String> = v247 |> unbox<Types.EmitType<Types.std.string.String>>
    let v249 : Types.std.string.String = Fable.Core.Rust.emitExpr v62 v37
    let v250 : Types.EmitType<Types.std.string.String> = v249 |> unbox<Types.EmitType<Types.std.string.String>>
    let v251 : Types.std.string.String = Fable.Core.Rust.emitExpr v244 v40
    let v252 : Types.EmitType<Types.std.string.String> = v251 |> unbox<Types.EmitType<Types.std.string.String>>
    let v253 : Types.std.string.String = Fable.Core.Rust.emitExpr v67 v37
    let v254 : Types.EmitType<Types.std.string.String> = v253 |> unbox<Types.EmitType<Types.std.string.String>>
    let v255 : Types.std.string.String = Fable.Core.Rust.emitExpr v70 v37
    let v256 : Types.EmitType<Types.std.string.String> = v255 |> unbox<Types.EmitType<Types.std.string.String>>
    let v257 : (Types.EmitType<Types.std.string.String> []) = [|v246; v248; v250; v252; v254; v256|]
    let v258 : obj = Fable.Core.Rust.emitExpr v257 v44
    let v259 : Types.std.string.String = Fable.Core.Rust.emitExpr v258 v46
    let v260 : Types.EmitType<Types.std.string.String> = v259 |> unbox<Types.EmitType<Types.std.string.String>>
    let v261 : string = "> read_lines ()"
    let v262 : Types.std.string.String = Fable.Core.Rust.emitExpr v261 v37
    let v263 : Types.EmitType<Types.std.string.String> = v262 |> unbox<Types.EmitType<Types.std.string.String>>
    let v264 : (Types.EmitType<Types.std.string.String> []) = [|v263|]
    let v265 : obj = Fable.Core.Rust.emitExpr v264 v44
    let v266 : Types.std.string.String = Fable.Core.Rust.emitExpr v265 v46
    let v267 : Types.EmitType<Types.std.string.String> = v266 |> unbox<Types.EmitType<Types.std.string.String>>
    let v268 : Types.std.string.String = v267 |> unbox
    let v269 : string = Fable.Core.Rust.emitExpr v268 v85
    let v270 : string = $"r#\"{v87}\"#"
    let v271 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v270
    let v272 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v271 v90
    let v273 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v272 v92
    let v274 : string = method2(v269)
    let v275 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v274 v23
    let v276 : string = method4()
    let v277 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v276 v23
    let v278 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v273, v275, v277) v98
    let v279 : string = Fable.Core.Rust.emitExpr v278 v85
    let v280 : string = $"r#\"{v101}\"#"
    let v281 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v280
    let v282 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v281 v90
    let v283 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v282 v92
    let v284 : string = method2(v279)
    let v285 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v284 v23
    let v286 : string = method5()
    let v287 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v286 v23
    let v288 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v283, v285, v287) v98
    let v289 : string = Fable.Core.Rust.emitExpr v288 v85
    let v290 : string = $"r#\"{v112}\"#"
    let v291 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v290
    let v292 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v291 v90
    let v293 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v292 v92
    let v294 : string = method2(v289)
    let v295 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v294 v23
    let v296 : string = method6()
    let v297 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v296 v23
    let v298 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v293, v295, v297) v98
    let v299 : string = Fable.Core.Rust.emitExpr v298 v85
    let v300 : Types.std.string.String = Fable.Core.Rust.emitExpr v299 v37
    let v301 : Types.EmitType<Types.std.string.String> = v300 |> unbox<Types.EmitType<Types.std.string.String>>
    let v302 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v301, v125) v126
    let v303 : Types.std.string.String = Fable.Core.Rust.emitExpr v302 v128
    let v304 : Types.std.string.String = v237 |> unbox
    let v305 : string = Fable.Core.Rust.emitExpr v304 v85
    let v306 : string = $"r#\"{v87}\"#"
    let v307 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v306
    let v308 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v307 v90
    let v309 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v308 v92
    let v310 : string = method2(v305)
    let v311 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v310 v23
    let v312 : string = method4()
    let v313 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v312 v23
    let v314 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v309, v311, v313) v98
    let v315 : string = Fable.Core.Rust.emitExpr v314 v85
    let v316 : string = $"r#\"{v101}\"#"
    let v317 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v316
    let v318 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v317 v90
    let v319 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v318 v92
    let v320 : string = method2(v315)
    let v321 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v320 v23
    let v322 : string = method5()
    let v323 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v322 v23
    let v324 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v319, v321, v323) v98
    let v325 : string = Fable.Core.Rust.emitExpr v324 v85
    let v326 : string = $"r#\"{v112}\"#"
    let v327 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v326
    let v328 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v327 v90
    let v329 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v328 v92
    let v330 : string = method2(v325)
    let v331 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v330 v23
    let v332 : string = method6()
    let v333 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v332 v23
    let v334 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v329, v331, v333) v98
    let v335 : string = Fable.Core.Rust.emitExpr v334 v85
    let v336 : Types.std.string.String = Fable.Core.Rust.emitExpr v335 v37
    let v337 : Types.EmitType<Types.std.string.String> = v336 |> unbox<Types.EmitType<Types.std.string.String>>
    let v338 : string = v164.Substring (0, 2)
    let v339 : uint8 = Fable.Core.Rust.emitExpr v338 v166
    let v340 : string = v164.Substring (2, 2)
    let v341 : uint8 = Fable.Core.Rust.emitExpr v340 v166
    let v342 : string = v164.Substring (4, 2)
    let v343 : uint8 = Fable.Core.Rust.emitExpr v342 v166
    let v344 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v337, v339, v341, v343) v172
    let v345 : Types.std.string.String = Fable.Core.Rust.emitExpr v344 v128
    let v346 : Types.std.string.String = v260 |> unbox
    let v347 : string = Fable.Core.Rust.emitExpr v346 v85
    let v348 : string = $"r#\"{v87}\"#"
    let v349 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v348
    let v350 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v349 v90
    let v351 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v350 v92
    let v352 : string = method2(v347)
    let v353 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v352 v23
    let v354 : string = method4()
    let v355 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v354 v23
    let v356 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v351, v353, v355) v98
    let v357 : string = Fable.Core.Rust.emitExpr v356 v85
    let v358 : string = $"r#\"{v101}\"#"
    let v359 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v358
    let v360 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v359 v90
    let v361 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v360 v92
    let v362 : string = method2(v357)
    let v363 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v362 v23
    let v364 : string = method5()
    let v365 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v364 v23
    let v366 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v361, v363, v365) v98
    let v367 : string = Fable.Core.Rust.emitExpr v366 v85
    let v368 : string = $"r#\"{v112}\"#"
    let v369 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v368
    let v370 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v369 v90
    let v371 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v370 v92
    let v372 : string = method2(v367)
    let v373 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v372 v23
    let v374 : string = method6()
    let v375 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v374 v23
    let v376 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v371, v373, v375) v98
    let v377 : string = Fable.Core.Rust.emitExpr v376 v85
    let v378 : Types.std.string.String = Fable.Core.Rust.emitExpr v377 v37
    let v379 : Types.EmitType<Types.std.string.String> = v378 |> unbox<Types.EmitType<Types.std.string.String>>
    let v380 : string = v209.Substring (0, 2)
    let v381 : uint8 = Fable.Core.Rust.emitExpr v380 v166
    let v382 : string = v209.Substring (2, 2)
    let v383 : uint8 = Fable.Core.Rust.emitExpr v382 v166
    let v384 : string = v209.Substring (4, 2)
    let v385 : uint8 = Fable.Core.Rust.emitExpr v384 v166
    let v386 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v379, v381, v383, v385) v172
    let v387 : Types.std.string.String = Fable.Core.Rust.emitExpr v386 v128
    let v388 : string = $"{v303} {v345} {v387}"
    System.Console.WriteLine v388
    let v389 : string = "std::fs::File::open($0)"
    let v390 : Result<Types.std.fs.File, Types.std.io.Error> = Fable.Core.Rust.emitExpr v226 v389
    let v391 : string = "$0.unwrap()"
    let v392 : Types.Ref<Types.std.fs.File> = Fable.Core.Rust.emitExpr v390 v391
    let v393 : string = "std::cell::RefCell::new(linereader::LineReader::new($0))"
    let v394 : Types.std.cell.RefCell<Types.linereader.LineReader<Types.Ref<Types.std.fs.File>>> = Fable.Core.Rust.emitExpr v392 v393
    let v395 : string = "reader"
    let v396 : Types.std.string.String = Fable.Core.Rust.emitExpr v395 v37
    let v397 : Types.EmitType<Types.std.string.String> = v396 |> unbox<Types.EmitType<Types.std.string.String>>
    let v398 : Types.std.string.String = Fable.Core.Rust.emitExpr v394 v40
    let v399 : Types.EmitType<Types.std.string.String> = v398 |> unbox<Types.EmitType<Types.std.string.String>>
    let v400 : (Types.EmitType<Types.std.string.String> []) = [|v397; v399|]
    let v401 : obj = Fable.Core.Rust.emitExpr v400 v44
    let v402 : Types.std.string.String = Fable.Core.Rust.emitExpr v401 v46
    let v403 : Types.EmitType<Types.std.string.String> = v402 |> unbox<Types.EmitType<Types.std.string.String>>
    let v404 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v405 : int64 = Fable.Core.Rust.emitExpr v404 v6
    let v406 : int64 = v405 - v224
    let v407 : string = (v406).ToString ()
    let v408 : int32 = 6
    let v409 : string = method3(v408, v407)
    let v410 : uint8 = Fable.Core.Rust.emitExpr () v55
    let v411 : Types.std.string.String = Fable.Core.Rust.emitExpr v57 v37
    let v412 : Types.EmitType<Types.std.string.String> = v411 |> unbox<Types.EmitType<Types.std.string.String>>
    let v413 : Types.std.string.String = Fable.Core.Rust.emitExpr v409 v37
    let v414 : Types.EmitType<Types.std.string.String> = v413 |> unbox<Types.EmitType<Types.std.string.String>>
    let v415 : Types.std.string.String = Fable.Core.Rust.emitExpr v62 v37
    let v416 : Types.EmitType<Types.std.string.String> = v415 |> unbox<Types.EmitType<Types.std.string.String>>
    let v417 : Types.std.string.String = Fable.Core.Rust.emitExpr v410 v40
    let v418 : Types.EmitType<Types.std.string.String> = v417 |> unbox<Types.EmitType<Types.std.string.String>>
    let v419 : Types.std.string.String = Fable.Core.Rust.emitExpr v67 v37
    let v420 : Types.EmitType<Types.std.string.String> = v419 |> unbox<Types.EmitType<Types.std.string.String>>
    let v421 : Types.std.string.String = Fable.Core.Rust.emitExpr v70 v37
    let v422 : Types.EmitType<Types.std.string.String> = v421 |> unbox<Types.EmitType<Types.std.string.String>>
    let v423 : (Types.EmitType<Types.std.string.String> []) = [|v412; v414; v416; v418; v420; v422|]
    let v424 : obj = Fable.Core.Rust.emitExpr v423 v44
    let v425 : Types.std.string.String = Fable.Core.Rust.emitExpr v424 v46
    let v426 : Types.EmitType<Types.std.string.String> = v425 |> unbox<Types.EmitType<Types.std.string.String>>
    let v427 : Types.std.string.String = Fable.Core.Rust.emitExpr v261 v37
    let v428 : Types.EmitType<Types.std.string.String> = v427 |> unbox<Types.EmitType<Types.std.string.String>>
    let v429 : (Types.EmitType<Types.std.string.String> []) = [|v428|]
    let v430 : obj = Fable.Core.Rust.emitExpr v429 v44
    let v431 : Types.std.string.String = Fable.Core.Rust.emitExpr v430 v46
    let v432 : Types.EmitType<Types.std.string.String> = v431 |> unbox<Types.EmitType<Types.std.string.String>>
    let v433 : Types.std.string.String = v432 |> unbox
    let v434 : string = Fable.Core.Rust.emitExpr v433 v85
    let v435 : string = $"r#\"{v87}\"#"
    let v436 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v435
    let v437 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v436 v90
    let v438 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v437 v92
    let v439 : string = method2(v434)
    let v440 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v439 v23
    let v441 : string = method4()
    let v442 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v441 v23
    let v443 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v438, v440, v442) v98
    let v444 : string = Fable.Core.Rust.emitExpr v443 v85
    let v445 : string = $"r#\"{v101}\"#"
    let v446 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v445
    let v447 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v446 v90
    let v448 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v447 v92
    let v449 : string = method2(v444)
    let v450 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v449 v23
    let v451 : string = method5()
    let v452 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v451 v23
    let v453 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v448, v450, v452) v98
    let v454 : string = Fable.Core.Rust.emitExpr v453 v85
    let v455 : string = $"r#\"{v112}\"#"
    let v456 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v455
    let v457 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v456 v90
    let v458 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v457 v92
    let v459 : string = method2(v454)
    let v460 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v459 v23
    let v461 : string = method6()
    let v462 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v461 v23
    let v463 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v458, v460, v462) v98
    let v464 : string = Fable.Core.Rust.emitExpr v463 v85
    let v465 : Types.std.string.String = Fable.Core.Rust.emitExpr v464 v37
    let v466 : Types.EmitType<Types.std.string.String> = v465 |> unbox<Types.EmitType<Types.std.string.String>>
    let v467 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v466, v125) v126
    let v468 : Types.std.string.String = Fable.Core.Rust.emitExpr v467 v128
    let v469 : Types.std.string.String = v403 |> unbox
    let v470 : string = Fable.Core.Rust.emitExpr v469 v85
    let v471 : string = $"r#\"{v87}\"#"
    let v472 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v471
    let v473 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v472 v90
    let v474 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v473 v92
    let v475 : string = method2(v470)
    let v476 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v475 v23
    let v477 : string = method4()
    let v478 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v477 v23
    let v479 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v474, v476, v478) v98
    let v480 : string = Fable.Core.Rust.emitExpr v479 v85
    let v481 : string = $"r#\"{v101}\"#"
    let v482 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v481
    let v483 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v482 v90
    let v484 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v483 v92
    let v485 : string = method2(v480)
    let v486 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v485 v23
    let v487 : string = method5()
    let v488 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v487 v23
    let v489 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v484, v486, v488) v98
    let v490 : string = Fable.Core.Rust.emitExpr v489 v85
    let v491 : string = $"r#\"{v112}\"#"
    let v492 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v491
    let v493 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v492 v90
    let v494 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v493 v92
    let v495 : string = method2(v490)
    let v496 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v495 v23
    let v497 : string = method6()
    let v498 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v497 v23
    let v499 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v494, v496, v498) v98
    let v500 : string = Fable.Core.Rust.emitExpr v499 v85
    let v501 : Types.std.string.String = Fable.Core.Rust.emitExpr v500 v37
    let v502 : Types.EmitType<Types.std.string.String> = v501 |> unbox<Types.EmitType<Types.std.string.String>>
    let v503 : string = v164.Substring (0, 2)
    let v504 : uint8 = Fable.Core.Rust.emitExpr v503 v166
    let v505 : string = v164.Substring (2, 2)
    let v506 : uint8 = Fable.Core.Rust.emitExpr v505 v166
    let v507 : string = v164.Substring (4, 2)
    let v508 : uint8 = Fable.Core.Rust.emitExpr v507 v166
    let v509 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v502, v504, v506, v508) v172
    let v510 : Types.std.string.String = Fable.Core.Rust.emitExpr v509 v128
    let v511 : Types.std.string.String = v426 |> unbox
    let v512 : string = Fable.Core.Rust.emitExpr v511 v85
    let v513 : string = $"r#\"{v87}\"#"
    let v514 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v513
    let v515 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v514 v90
    let v516 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v515 v92
    let v517 : string = method2(v512)
    let v518 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v517 v23
    let v519 : string = method4()
    let v520 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v519 v23
    let v521 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v516, v518, v520) v98
    let v522 : string = Fable.Core.Rust.emitExpr v521 v85
    let v523 : string = $"r#\"{v101}\"#"
    let v524 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v523
    let v525 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v524 v90
    let v526 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v525 v92
    let v527 : string = method2(v522)
    let v528 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v527 v23
    let v529 : string = method5()
    let v530 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v529 v23
    let v531 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v526, v528, v530) v98
    let v532 : string = Fable.Core.Rust.emitExpr v531 v85
    let v533 : string = $"r#\"{v112}\"#"
    let v534 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v533
    let v535 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v534 v90
    let v536 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v535 v92
    let v537 : string = method2(v532)
    let v538 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v537 v23
    let v539 : string = method6()
    let v540 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v539 v23
    let v541 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v536, v538, v540) v98
    let v542 : string = Fable.Core.Rust.emitExpr v541 v85
    let v543 : Types.std.string.String = Fable.Core.Rust.emitExpr v542 v37
    let v544 : Types.EmitType<Types.std.string.String> = v543 |> unbox<Types.EmitType<Types.std.string.String>>
    let v545 : string = v209.Substring (0, 2)
    let v546 : uint8 = Fable.Core.Rust.emitExpr v545 v166
    let v547 : string = v209.Substring (2, 2)
    let v548 : uint8 = Fable.Core.Rust.emitExpr v547 v166
    let v549 : string = v209.Substring (4, 2)
    let v550 : uint8 = Fable.Core.Rust.emitExpr v549 v166
    let v551 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v544, v546, v548, v550) v172
    let v552 : Types.std.string.String = Fable.Core.Rust.emitExpr v551 v128
    let v553 : string = $"{v468} {v510} {v552}"
    System.Console.WriteLine v553
    let v554 : UH0 = UH0_1
    let v555 : Mut0 = {l0 = v554} : Mut0
    let v556 : (Types.Vec<uint8> -> Result<bool, Types.std.io.Error>) = method7(v224, v555)
    let v557 : string = "($0).borrow_mut().for_each(move |x| $1(x.to_vec()))"
    let v558 : Result<unit, Types.std.io.Error> = Fable.Core.Rust.emitExpr struct (v394, v556) v557
    let v559 : string = "*(($0).as_ref()).unwrap()"
    Fable.Core.Rust.emitExpr v558 v559
    let v560 : UH0 = v555.l0
    let v561 : UH0 = UH0_1
    let v562 : UH0 = method8(v560, v561)
    let v563 : UH1 = UH1_1
    let v564 : UH1 = method9(v562, v563)
    let v565 : string = "lines len"
    let v566 : Types.std.string.String = Fable.Core.Rust.emitExpr v565 v37
    let v567 : Types.EmitType<Types.std.string.String> = v566 |> unbox<Types.EmitType<Types.std.string.String>>
    let v568 : int32 = 0
    let v569 : int32 = method10(v564, v568)
    let v570 : Types.std.string.String = Fable.Core.Rust.emitExpr v569 v40
    let v571 : Types.EmitType<Types.std.string.String> = v570 |> unbox<Types.EmitType<Types.std.string.String>>
    let v572 : (Types.EmitType<Types.std.string.String> []) = [|v567; v571|]
    let v573 : obj = Fable.Core.Rust.emitExpr v572 v44
    let v574 : Types.std.string.String = Fable.Core.Rust.emitExpr v573 v46
    let v575 : Types.EmitType<Types.std.string.String> = v574 |> unbox<Types.EmitType<Types.std.string.String>>
    let v576 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v577 : int64 = Fable.Core.Rust.emitExpr v576 v6
    let v578 : int64 = v577 - v224
    let v579 : string = (v578).ToString ()
    let v580 : int32 = 6
    let v581 : string = method3(v580, v579)
    let v582 : uint8 = Fable.Core.Rust.emitExpr () v55
    let v583 : Types.std.string.String = Fable.Core.Rust.emitExpr v57 v37
    let v584 : Types.EmitType<Types.std.string.String> = v583 |> unbox<Types.EmitType<Types.std.string.String>>
    let v585 : Types.std.string.String = Fable.Core.Rust.emitExpr v581 v37
    let v586 : Types.EmitType<Types.std.string.String> = v585 |> unbox<Types.EmitType<Types.std.string.String>>
    let v587 : Types.std.string.String = Fable.Core.Rust.emitExpr v62 v37
    let v588 : Types.EmitType<Types.std.string.String> = v587 |> unbox<Types.EmitType<Types.std.string.String>>
    let v589 : Types.std.string.String = Fable.Core.Rust.emitExpr v582 v40
    let v590 : Types.EmitType<Types.std.string.String> = v589 |> unbox<Types.EmitType<Types.std.string.String>>
    let v591 : Types.std.string.String = Fable.Core.Rust.emitExpr v67 v37
    let v592 : Types.EmitType<Types.std.string.String> = v591 |> unbox<Types.EmitType<Types.std.string.String>>
    let v593 : Types.std.string.String = Fable.Core.Rust.emitExpr v70 v37
    let v594 : Types.EmitType<Types.std.string.String> = v593 |> unbox<Types.EmitType<Types.std.string.String>>
    let v595 : (Types.EmitType<Types.std.string.String> []) = [|v584; v586; v588; v590; v592; v594|]
    let v596 : obj = Fable.Core.Rust.emitExpr v595 v44
    let v597 : Types.std.string.String = Fable.Core.Rust.emitExpr v596 v46
    let v598 : Types.EmitType<Types.std.string.String> = v597 |> unbox<Types.EmitType<Types.std.string.String>>
    let v599 : Types.std.string.String = Fable.Core.Rust.emitExpr v261 v37
    let v600 : Types.EmitType<Types.std.string.String> = v599 |> unbox<Types.EmitType<Types.std.string.String>>
    let v601 : (Types.EmitType<Types.std.string.String> []) = [|v600|]
    let v602 : obj = Fable.Core.Rust.emitExpr v601 v44
    let v603 : Types.std.string.String = Fable.Core.Rust.emitExpr v602 v46
    let v604 : Types.EmitType<Types.std.string.String> = v603 |> unbox<Types.EmitType<Types.std.string.String>>
    let v605 : Types.std.string.String = v604 |> unbox
    let v606 : string = Fable.Core.Rust.emitExpr v605 v85
    let v607 : string = $"r#\"{v87}\"#"
    let v608 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v607
    let v609 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v608 v90
    let v610 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v609 v92
    let v611 : string = method2(v606)
    let v612 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v611 v23
    let v613 : string = method4()
    let v614 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v613 v23
    let v615 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v610, v612, v614) v98
    let v616 : string = Fable.Core.Rust.emitExpr v615 v85
    let v617 : string = $"r#\"{v101}\"#"
    let v618 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v617
    let v619 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v618 v90
    let v620 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v619 v92
    let v621 : string = method2(v616)
    let v622 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v621 v23
    let v623 : string = method5()
    let v624 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v623 v23
    let v625 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v620, v622, v624) v98
    let v626 : string = Fable.Core.Rust.emitExpr v625 v85
    let v627 : string = $"r#\"{v112}\"#"
    let v628 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v627
    let v629 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v628 v90
    let v630 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v629 v92
    let v631 : string = method2(v626)
    let v632 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v631 v23
    let v633 : string = method6()
    let v634 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v633 v23
    let v635 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v630, v632, v634) v98
    let v636 : string = Fable.Core.Rust.emitExpr v635 v85
    let v637 : Types.std.string.String = Fable.Core.Rust.emitExpr v636 v37
    let v638 : Types.EmitType<Types.std.string.String> = v637 |> unbox<Types.EmitType<Types.std.string.String>>
    let v639 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v638, v125) v126
    let v640 : Types.std.string.String = Fable.Core.Rust.emitExpr v639 v128
    let v641 : Types.std.string.String = v575 |> unbox
    let v642 : string = Fable.Core.Rust.emitExpr v641 v85
    let v643 : string = $"r#\"{v87}\"#"
    let v644 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v643
    let v645 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v644 v90
    let v646 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v645 v92
    let v647 : string = method2(v642)
    let v648 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v647 v23
    let v649 : string = method4()
    let v650 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v649 v23
    let v651 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v646, v648, v650) v98
    let v652 : string = Fable.Core.Rust.emitExpr v651 v85
    let v653 : string = $"r#\"{v101}\"#"
    let v654 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v653
    let v655 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v654 v90
    let v656 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v655 v92
    let v657 : string = method2(v652)
    let v658 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v657 v23
    let v659 : string = method5()
    let v660 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v659 v23
    let v661 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v656, v658, v660) v98
    let v662 : string = Fable.Core.Rust.emitExpr v661 v85
    let v663 : string = $"r#\"{v112}\"#"
    let v664 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v663
    let v665 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v664 v90
    let v666 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v665 v92
    let v667 : string = method2(v662)
    let v668 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v667 v23
    let v669 : string = method6()
    let v670 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v669 v23
    let v671 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v666, v668, v670) v98
    let v672 : string = Fable.Core.Rust.emitExpr v671 v85
    let v673 : Types.std.string.String = Fable.Core.Rust.emitExpr v672 v37
    let v674 : Types.EmitType<Types.std.string.String> = v673 |> unbox<Types.EmitType<Types.std.string.String>>
    let v675 : string = v164.Substring (0, 2)
    let v676 : uint8 = Fable.Core.Rust.emitExpr v675 v166
    let v677 : string = v164.Substring (2, 2)
    let v678 : uint8 = Fable.Core.Rust.emitExpr v677 v166
    let v679 : string = v164.Substring (4, 2)
    let v680 : uint8 = Fable.Core.Rust.emitExpr v679 v166
    let v681 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v674, v676, v678, v680) v172
    let v682 : Types.std.string.String = Fable.Core.Rust.emitExpr v681 v128
    let v683 : Types.std.string.String = v598 |> unbox
    let v684 : string = Fable.Core.Rust.emitExpr v683 v85
    let v685 : string = $"r#\"{v87}\"#"
    let v686 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v685
    let v687 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v686 v90
    let v688 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v687 v92
    let v689 : string = method2(v684)
    let v690 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v689 v23
    let v691 : string = method4()
    let v692 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v691 v23
    let v693 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v688, v690, v692) v98
    let v694 : string = Fable.Core.Rust.emitExpr v693 v85
    let v695 : string = $"r#\"{v101}\"#"
    let v696 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v695
    let v697 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v696 v90
    let v698 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v697 v92
    let v699 : string = method2(v694)
    let v700 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v699 v23
    let v701 : string = method5()
    let v702 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v701 v23
    let v703 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v698, v700, v702) v98
    let v704 : string = Fable.Core.Rust.emitExpr v703 v85
    let v705 : string = $"r#\"{v112}\"#"
    let v706 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v705
    let v707 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v706 v90
    let v708 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v707 v92
    let v709 : string = method2(v704)
    let v710 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v709 v23
    let v711 : string = method6()
    let v712 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v711 v23
    let v713 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v708, v710, v712) v98
    let v714 : string = Fable.Core.Rust.emitExpr v713 v85
    let v715 : Types.std.string.String = Fable.Core.Rust.emitExpr v714 v37
    let v716 : Types.EmitType<Types.std.string.String> = v715 |> unbox<Types.EmitType<Types.std.string.String>>
    let v717 : string = v209.Substring (0, 2)
    let v718 : uint8 = Fable.Core.Rust.emitExpr v717 v166
    let v719 : string = v209.Substring (2, 2)
    let v720 : uint8 = Fable.Core.Rust.emitExpr v719 v166
    let v721 : string = v209.Substring (4, 2)
    let v722 : uint8 = Fable.Core.Rust.emitExpr v721 v166
    let v723 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v716, v718, v720, v722) v172
    let v724 : Types.std.string.String = Fable.Core.Rust.emitExpr v723 v128
    let v725 : string = $"{v640} {v682} {v724}"
    System.Console.WriteLine v725
    let v726 : int32 = 0
    let v727 : UH1 = UH1_1
    let struct (v728 : int32, v729 : UH1) = method11(v564, v726, v727)
    let v730 : UH1 = UH1_1
    let v731 : UH1 = method12(v729, v730)
    let v732 : string = ""
    let v733 : string = method13(v731, v732)
    let v734 : string = "text len"
    let v735 : Types.std.string.String = Fable.Core.Rust.emitExpr v734 v37
    let v736 : Types.EmitType<Types.std.string.String> = v735 |> unbox<Types.EmitType<Types.std.string.String>>
    let v737 : string = "($0).len().try_into().unwrap()"
    let v738 : int32 = Fable.Core.Rust.emitExpr v733 v737
    let v739 : Types.std.string.String = Fable.Core.Rust.emitExpr v738 v40
    let v740 : Types.EmitType<Types.std.string.String> = v739 |> unbox<Types.EmitType<Types.std.string.String>>
    let v741 : (Types.EmitType<Types.std.string.String> []) = [|v736; v740|]
    let v742 : obj = Fable.Core.Rust.emitExpr v741 v44
    let v743 : Types.std.string.String = Fable.Core.Rust.emitExpr v742 v46
    let v744 : Types.EmitType<Types.std.string.String> = v743 |> unbox<Types.EmitType<Types.std.string.String>>
    let v745 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v746 : int64 = Fable.Core.Rust.emitExpr v745 v6
    let v747 : int64 = v746 - v7
    let v748 : string = (v747).ToString ()
    let v749 : int32 = 6
    let v750 : string = method3(v749, v748)
    let v751 : uint8 = Fable.Core.Rust.emitExpr () v55
    let v752 : Types.std.string.String = Fable.Core.Rust.emitExpr v57 v37
    let v753 : Types.EmitType<Types.std.string.String> = v752 |> unbox<Types.EmitType<Types.std.string.String>>
    let v754 : Types.std.string.String = Fable.Core.Rust.emitExpr v750 v37
    let v755 : Types.EmitType<Types.std.string.String> = v754 |> unbox<Types.EmitType<Types.std.string.String>>
    let v756 : Types.std.string.String = Fable.Core.Rust.emitExpr v62 v37
    let v757 : Types.EmitType<Types.std.string.String> = v756 |> unbox<Types.EmitType<Types.std.string.String>>
    let v758 : Types.std.string.String = Fable.Core.Rust.emitExpr v751 v40
    let v759 : Types.EmitType<Types.std.string.String> = v758 |> unbox<Types.EmitType<Types.std.string.String>>
    let v760 : Types.std.string.String = Fable.Core.Rust.emitExpr v67 v37
    let v761 : Types.EmitType<Types.std.string.String> = v760 |> unbox<Types.EmitType<Types.std.string.String>>
    let v762 : Types.std.string.String = Fable.Core.Rust.emitExpr v70 v37
    let v763 : Types.EmitType<Types.std.string.String> = v762 |> unbox<Types.EmitType<Types.std.string.String>>
    let v764 : (Types.EmitType<Types.std.string.String> []) = [|v753; v755; v757; v759; v761; v763|]
    let v765 : obj = Fable.Core.Rust.emitExpr v764 v44
    let v766 : Types.std.string.String = Fable.Core.Rust.emitExpr v765 v46
    let v767 : Types.EmitType<Types.std.string.String> = v766 |> unbox<Types.EmitType<Types.std.string.String>>
    let v768 : Types.std.string.String = Fable.Core.Rust.emitExpr v77 v37
    let v769 : Types.EmitType<Types.std.string.String> = v768 |> unbox<Types.EmitType<Types.std.string.String>>
    let v770 : (Types.EmitType<Types.std.string.String> []) = [|v769|]
    let v771 : obj = Fable.Core.Rust.emitExpr v770 v44
    let v772 : Types.std.string.String = Fable.Core.Rust.emitExpr v771 v46
    let v773 : Types.EmitType<Types.std.string.String> = v772 |> unbox<Types.EmitType<Types.std.string.String>>
    let v774 : Types.std.string.String = v773 |> unbox
    let v775 : string = Fable.Core.Rust.emitExpr v774 v85
    let v776 : string = $"r#\"{v87}\"#"
    let v777 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v776
    let v778 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v777 v90
    let v779 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v778 v92
    let v780 : string = method2(v775)
    let v781 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v780 v23
    let v782 : string = method4()
    let v783 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v782 v23
    let v784 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v779, v781, v783) v98
    let v785 : string = Fable.Core.Rust.emitExpr v784 v85
    let v786 : string = $"r#\"{v101}\"#"
    let v787 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v786
    let v788 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v787 v90
    let v789 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v788 v92
    let v790 : string = method2(v785)
    let v791 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v790 v23
    let v792 : string = method5()
    let v793 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v792 v23
    let v794 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v789, v791, v793) v98
    let v795 : string = Fable.Core.Rust.emitExpr v794 v85
    let v796 : string = $"r#\"{v112}\"#"
    let v797 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v796
    let v798 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v797 v90
    let v799 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v798 v92
    let v800 : string = method2(v795)
    let v801 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v800 v23
    let v802 : string = method6()
    let v803 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v802 v23
    let v804 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v799, v801, v803) v98
    let v805 : string = Fable.Core.Rust.emitExpr v804 v85
    let v806 : Types.std.string.String = Fable.Core.Rust.emitExpr v805 v37
    let v807 : Types.EmitType<Types.std.string.String> = v806 |> unbox<Types.EmitType<Types.std.string.String>>
    let v808 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v807, v125) v126
    let v809 : Types.std.string.String = Fable.Core.Rust.emitExpr v808 v128
    let v810 : Types.std.string.String = v744 |> unbox
    let v811 : string = Fable.Core.Rust.emitExpr v810 v85
    let v812 : string = $"r#\"{v87}\"#"
    let v813 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v812
    let v814 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v813 v90
    let v815 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v814 v92
    let v816 : string = method2(v811)
    let v817 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v816 v23
    let v818 : string = method4()
    let v819 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v818 v23
    let v820 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v815, v817, v819) v98
    let v821 : string = Fable.Core.Rust.emitExpr v820 v85
    let v822 : string = $"r#\"{v101}\"#"
    let v823 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v822
    let v824 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v823 v90
    let v825 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v824 v92
    let v826 : string = method2(v821)
    let v827 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v826 v23
    let v828 : string = method5()
    let v829 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v828 v23
    let v830 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v825, v827, v829) v98
    let v831 : string = Fable.Core.Rust.emitExpr v830 v85
    let v832 : string = $"r#\"{v112}\"#"
    let v833 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v832
    let v834 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v833 v90
    let v835 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v834 v92
    let v836 : string = method2(v831)
    let v837 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v836 v23
    let v838 : string = method6()
    let v839 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v838 v23
    let v840 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v835, v837, v839) v98
    let v841 : string = Fable.Core.Rust.emitExpr v840 v85
    let v842 : Types.std.string.String = Fable.Core.Rust.emitExpr v841 v37
    let v843 : Types.EmitType<Types.std.string.String> = v842 |> unbox<Types.EmitType<Types.std.string.String>>
    let v844 : string = v164.Substring (0, 2)
    let v845 : uint8 = Fable.Core.Rust.emitExpr v844 v166
    let v846 : string = v164.Substring (2, 2)
    let v847 : uint8 = Fable.Core.Rust.emitExpr v846 v166
    let v848 : string = v164.Substring (4, 2)
    let v849 : uint8 = Fable.Core.Rust.emitExpr v848 v166
    let v850 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v843, v845, v847, v849) v172
    let v851 : Types.std.string.String = Fable.Core.Rust.emitExpr v850 v128
    let v852 : Types.std.string.String = v767 |> unbox
    let v853 : string = Fable.Core.Rust.emitExpr v852 v85
    let v854 : string = $"r#\"{v87}\"#"
    let v855 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v854
    let v856 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v855 v90
    let v857 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v856 v92
    let v858 : string = method2(v853)
    let v859 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v858 v23
    let v860 : string = method4()
    let v861 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v860 v23
    let v862 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v857, v859, v861) v98
    let v863 : string = Fable.Core.Rust.emitExpr v862 v85
    let v864 : string = $"r#\"{v101}\"#"
    let v865 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v864
    let v866 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v865 v90
    let v867 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v866 v92
    let v868 : string = method2(v863)
    let v869 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v868 v23
    let v870 : string = method5()
    let v871 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v870 v23
    let v872 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v867, v869, v871) v98
    let v873 : string = Fable.Core.Rust.emitExpr v872 v85
    let v874 : string = $"r#\"{v112}\"#"
    let v875 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v874
    let v876 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v875 v90
    let v877 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v876 v92
    let v878 : string = method2(v873)
    let v879 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v878 v23
    let v880 : string = method6()
    let v881 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v880 v23
    let v882 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v877, v879, v881) v98
    let v883 : string = Fable.Core.Rust.emitExpr v882 v85
    let v884 : Types.std.string.String = Fable.Core.Rust.emitExpr v883 v37
    let v885 : Types.EmitType<Types.std.string.String> = v884 |> unbox<Types.EmitType<Types.std.string.String>>
    let v886 : string = v209.Substring (0, 2)
    let v887 : uint8 = Fable.Core.Rust.emitExpr v886 v166
    let v888 : string = v209.Substring (2, 2)
    let v889 : uint8 = Fable.Core.Rust.emitExpr v888 v166
    let v890 : string = v209.Substring (4, 2)
    let v891 : uint8 = Fable.Core.Rust.emitExpr v890 v166
    let v892 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v885, v887, v889, v891) v172
    let v893 : Types.std.string.String = Fable.Core.Rust.emitExpr v892 v128
    let v894 : string = $"{v809} {v851} {v893}"
    System.Console.WriteLine v894
    let v895 : string = "std::fs::write($0, $1.as_str())"
    let v896 : Result<unit, Types.std.io.Error> = Fable.Core.Rust.emitExpr struct (v35, v733) v895
    Fable.Core.Rust.emitExpr v896 v559
    let v897 : string = "> fs_write rs_path_clean text; ok"
    let v898 : Types.std.string.String = Fable.Core.Rust.emitExpr v897 v37
    let v899 : Types.EmitType<Types.std.string.String> = v898 |> unbox<Types.EmitType<Types.std.string.String>>
    let v900 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v901 : int64 = Fable.Core.Rust.emitExpr v900 v6
    let v902 : int64 = v901 - v7
    let v903 : string = (v902).ToString ()
    let v904 : int32 = 6
    let v905 : string = method3(v904, v903)
    let v906 : uint8 = Fable.Core.Rust.emitExpr () v55
    let v907 : Types.std.string.String = Fable.Core.Rust.emitExpr v57 v37
    let v908 : Types.EmitType<Types.std.string.String> = v907 |> unbox<Types.EmitType<Types.std.string.String>>
    let v909 : Types.std.string.String = Fable.Core.Rust.emitExpr v905 v37
    let v910 : Types.EmitType<Types.std.string.String> = v909 |> unbox<Types.EmitType<Types.std.string.String>>
    let v911 : Types.std.string.String = Fable.Core.Rust.emitExpr v62 v37
    let v912 : Types.EmitType<Types.std.string.String> = v911 |> unbox<Types.EmitType<Types.std.string.String>>
    let v913 : Types.std.string.String = Fable.Core.Rust.emitExpr v906 v40
    let v914 : Types.EmitType<Types.std.string.String> = v913 |> unbox<Types.EmitType<Types.std.string.String>>
    let v915 : Types.std.string.String = Fable.Core.Rust.emitExpr v67 v37
    let v916 : Types.EmitType<Types.std.string.String> = v915 |> unbox<Types.EmitType<Types.std.string.String>>
    let v917 : Types.std.string.String = Fable.Core.Rust.emitExpr v70 v37
    let v918 : Types.EmitType<Types.std.string.String> = v917 |> unbox<Types.EmitType<Types.std.string.String>>
    let v919 : (Types.EmitType<Types.std.string.String> []) = [|v908; v910; v912; v914; v916; v918|]
    let v920 : obj = Fable.Core.Rust.emitExpr v919 v44
    let v921 : Types.std.string.String = Fable.Core.Rust.emitExpr v920 v46
    let v922 : Types.EmitType<Types.std.string.String> = v921 |> unbox<Types.EmitType<Types.std.string.String>>
    let v923 : Types.std.string.String = Fable.Core.Rust.emitExpr v77 v37
    let v924 : Types.EmitType<Types.std.string.String> = v923 |> unbox<Types.EmitType<Types.std.string.String>>
    let v925 : (Types.EmitType<Types.std.string.String> []) = [|v924|]
    let v926 : obj = Fable.Core.Rust.emitExpr v925 v44
    let v927 : Types.std.string.String = Fable.Core.Rust.emitExpr v926 v46
    let v928 : Types.EmitType<Types.std.string.String> = v927 |> unbox<Types.EmitType<Types.std.string.String>>
    let v929 : Types.std.string.String = v928 |> unbox
    let v930 : string = Fable.Core.Rust.emitExpr v929 v85
    let v931 : string = $"r#\"{v87}\"#"
    let v932 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v931
    let v933 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v932 v90
    let v934 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v933 v92
    let v935 : string = method2(v930)
    let v936 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v935 v23
    let v937 : string = method4()
    let v938 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v937 v23
    let v939 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v934, v936, v938) v98
    let v940 : string = Fable.Core.Rust.emitExpr v939 v85
    let v941 : string = $"r#\"{v101}\"#"
    let v942 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v941
    let v943 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v942 v90
    let v944 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v943 v92
    let v945 : string = method2(v940)
    let v946 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v945 v23
    let v947 : string = method5()
    let v948 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v947 v23
    let v949 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v944, v946, v948) v98
    let v950 : string = Fable.Core.Rust.emitExpr v949 v85
    let v951 : string = $"r#\"{v112}\"#"
    let v952 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v951
    let v953 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v952 v90
    let v954 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v953 v92
    let v955 : string = method2(v950)
    let v956 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v955 v23
    let v957 : string = method6()
    let v958 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v957 v23
    let v959 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v954, v956, v958) v98
    let v960 : string = Fable.Core.Rust.emitExpr v959 v85
    let v961 : Types.std.string.String = Fable.Core.Rust.emitExpr v960 v37
    let v962 : Types.EmitType<Types.std.string.String> = v961 |> unbox<Types.EmitType<Types.std.string.String>>
    let v963 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v962, v125) v126
    let v964 : Types.std.string.String = Fable.Core.Rust.emitExpr v963 v128
    let v965 : Types.std.string.String = v899 |> unbox
    let v966 : string = Fable.Core.Rust.emitExpr v965 v85
    let v967 : string = $"r#\"{v87}\"#"
    let v968 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v967
    let v969 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v968 v90
    let v970 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v969 v92
    let v971 : string = method2(v966)
    let v972 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v971 v23
    let v973 : string = method4()
    let v974 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v973 v23
    let v975 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v970, v972, v974) v98
    let v976 : string = Fable.Core.Rust.emitExpr v975 v85
    let v977 : string = $"r#\"{v101}\"#"
    let v978 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v977
    let v979 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v978 v90
    let v980 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v979 v92
    let v981 : string = method2(v976)
    let v982 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v981 v23
    let v983 : string = method5()
    let v984 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v983 v23
    let v985 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v980, v982, v984) v98
    let v986 : string = Fable.Core.Rust.emitExpr v985 v85
    let v987 : string = $"r#\"{v112}\"#"
    let v988 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v987
    let v989 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v988 v90
    let v990 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v989 v92
    let v991 : string = method2(v986)
    let v992 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v991 v23
    let v993 : string = method6()
    let v994 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v993 v23
    let v995 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v990, v992, v994) v98
    let v996 : string = Fable.Core.Rust.emitExpr v995 v85
    let v997 : Types.std.string.String = Fable.Core.Rust.emitExpr v996 v37
    let v998 : Types.EmitType<Types.std.string.String> = v997 |> unbox<Types.EmitType<Types.std.string.String>>
    let v999 : string = v164.Substring (0, 2)
    let v1000 : uint8 = Fable.Core.Rust.emitExpr v999 v166
    let v1001 : string = v164.Substring (2, 2)
    let v1002 : uint8 = Fable.Core.Rust.emitExpr v1001 v166
    let v1003 : string = v164.Substring (4, 2)
    let v1004 : uint8 = Fable.Core.Rust.emitExpr v1003 v166
    let v1005 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v998, v1000, v1002, v1004) v172
    let v1006 : Types.std.string.String = Fable.Core.Rust.emitExpr v1005 v128
    let v1007 : Types.std.string.String = v922 |> unbox
    let v1008 : string = Fable.Core.Rust.emitExpr v1007 v85
    let v1009 : string = $"r#\"{v87}\"#"
    let v1010 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1009
    let v1011 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1010 v90
    let v1012 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1011 v92
    let v1013 : string = method2(v1008)
    let v1014 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1013 v23
    let v1015 : string = method4()
    let v1016 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1015 v23
    let v1017 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1012, v1014, v1016) v98
    let v1018 : string = Fable.Core.Rust.emitExpr v1017 v85
    let v1019 : string = $"r#\"{v101}\"#"
    let v1020 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1019
    let v1021 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1020 v90
    let v1022 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1021 v92
    let v1023 : string = method2(v1018)
    let v1024 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1023 v23
    let v1025 : string = method5()
    let v1026 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1025 v23
    let v1027 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1022, v1024, v1026) v98
    let v1028 : string = Fable.Core.Rust.emitExpr v1027 v85
    let v1029 : string = $"r#\"{v112}\"#"
    let v1030 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1029
    let v1031 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1030 v90
    let v1032 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1031 v92
    let v1033 : string = method2(v1028)
    let v1034 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1033 v23
    let v1035 : string = method6()
    let v1036 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1035 v23
    let v1037 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1032, v1034, v1036) v98
    let v1038 : string = Fable.Core.Rust.emitExpr v1037 v85
    let v1039 : Types.std.string.String = Fable.Core.Rust.emitExpr v1038 v37
    let v1040 : Types.EmitType<Types.std.string.String> = v1039 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1041 : string = v209.Substring (0, 2)
    let v1042 : uint8 = Fable.Core.Rust.emitExpr v1041 v166
    let v1043 : string = v209.Substring (2, 2)
    let v1044 : uint8 = Fable.Core.Rust.emitExpr v1043 v166
    let v1045 : string = v209.Substring (4, 2)
    let v1046 : uint8 = Fable.Core.Rust.emitExpr v1045 v166
    let v1047 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1040, v1042, v1044, v1046) v172
    let v1048 : Types.std.string.String = Fable.Core.Rust.emitExpr v1047 v128
    let v1049 : string = $"{v964} {v1006} {v1048}"
    System.Console.WriteLine v1049
    0
let v0 : (unit -> int32) = closure0()
()
