type UH0 =
    | UH0_0 of Types.std.string.String * UH0
    | UH0_1
and Mut0 = {mutable l0 : UH0}
and UH1 =
    | UH1_0 of string * UH1
    | UH1_1
let rec method0 () : struct (string * string * string * bool) =
    let v0 : string = ""
    let v1 : obj = v0
    struct (v0, v0, v0, true)
and method1 () : string =
    let v0 : string = "../client/client.rs"
    v0
and method2 (v0 : int32, v1 : string) : string =
    let v2 : int32 = String.length v1
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : string = $"0{v1}"
        method2(v0, v4)
    else
        v1
and method3 (v0 : string) : string =
    v0
and method4 () : string =
    let v0 : string = "$1=$2"
    v0
and method5 () : string =
    let v0 : string = "[$1]"
    v0
and method6 () : string =
    let v0 : string = " "
    v0
and closure1 (v0 : int64, v1 : Mut0) (v2 : Types.Vec<uint8>) : Result<bool, Types.std.io.Error> =
    let v3 : string = "line len"
    let v4 : string = "($0).to_string()"
    let v5 : Types.std.string.String = Fable.Core.Rust.emitExpr v3 v4
    let v6 : Types.EmitType<Types.std.string.String> = v5 |> unbox<Types.EmitType<Types.std.string.String>>
    let v7 : string = "($0).len().try_into().unwrap()"
    let v8 : int32 = Fable.Core.Rust.emitExpr v2 v7
    let v9 : string = "format!(\"{:?}\", $0)"
    let v10 : Types.std.string.String = Fable.Core.Rust.emitExpr v8 v9
    let v11 : Types.EmitType<Types.std.string.String> = v10 |> unbox<Types.EmitType<Types.std.string.String>>
    let v12 : (Types.EmitType<Types.std.string.String> []) = [|v6; v11|]
    let v13 : string = "core::ops::Deref::deref($0)"
    let v14 : obj = Fable.Core.Rust.emitExpr v12 v13
    let v15 : string = "format!(\"{:?}\", ***$0)"
    let v16 : Types.std.string.String = Fable.Core.Rust.emitExpr v14 v15
    let v17 : Types.EmitType<Types.std.string.String> = v16 |> unbox<Types.EmitType<Types.std.string.String>>
    let v18 : string = "std::string::String::from_utf8(($0).to_owned()).unwrap()"
    let v19 : Types.std.string.String = Fable.Core.Rust.emitExpr v2 v18
    let v20 : UH0 = v1.l0
    let v21 : UH0 = UH0_0(v19, v20)
    v1.l0 <- v21
    let v22 : Result<bool, Types.std.io.Error> = Ok true
    v22
and method7 (v0 : int64, v1 : Mut0) : (Types.Vec<uint8> -> Result<bool, Types.std.io.Error>) =
    closure1(v0, v1)
and method8 (v0 : UH0, v1 : UH0) : UH0 =
    match v0 with
    | UH0_0(v2, v3) -> (* Cons *)
        let v4 : UH0 = UH0_0(v2, v1)
        method8(v3, v4)
    | UH0_1 -> (* Nil *)
        v1
and method9 (v0 : UH0, v1 : UH1) : UH1 =
    match v0 with
    | UH0_0(v2, v3) -> (* Cons *)
        let v4 : UH1 = method9(v3, v1)
        let v5 : string = "fable_library_rust::String_::fromStr($0)"
        let v6 : string = Fable.Core.Rust.emitExpr v2 v5
        UH1_0(v6, v4)
    | UH0_1 -> (* Nil *)
        v1
and method10 (v0 : UH1, v1 : int32) : int32 =
    match v0 with
    | UH1_0(v2, v3) -> (* Cons *)
        let v4 : int32 = v1 + 1
        method10(v3, v4)
    | UH1_1 -> (* Nil *)
        v1
and method11 (v0 : UH1, v1 : int32, v2 : UH1) : struct (int32 * UH1) =
    match v0 with
    | UH1_0(v3, v4) -> (* Cons *)
        let v5 : string = "/node_modules/"
        let v6 : Types.Ref<string> = v5 |> unbox
        let v7 : Types.Ref<string> = v3 |> unbox
        let v8 : string = "($1).contains(&*$0)"
        let v9 : bool = Fable.Core.Rust.emitExpr struct (v6, v7) v8
        let struct (v18 : int32, v19 : UH1) =
            if v9 then
                struct (1, v2)
            else
                let v10 : bool = 0 = v1
                if v10 then
                    let v11 : UH1 = UH1_0(v3, v2)
                    struct (0, v11)
                else
                    let v12 : bool = 2 = v1
                    if v12 then
                        struct (0, v2)
                    else
                        let v13 : int32 = v1 + 1
                        struct (v13, v2)
        method11(v4, v18, v19)
    | UH1_1 -> (* Nil *)
        struct (v1, v2)
and method12 (v0 : UH1, v1 : UH1) : UH1 =
    match v0 with
    | UH1_0(v2, v3) -> (* Cons *)
        let v4 : UH1 = UH1_0(v2, v1)
        method12(v3, v4)
    | UH1_1 -> (* Nil *)
        v1
and method13 (v0 : UH1, v1 : string) : string =
    match v0 with
    | UH1_0(v2, v3) -> (* Cons *)
        let v4 : string = v1 + v2
        method13(v3, v4)
    | UH1_1 -> (* Nil *)
        v1
and closure0 () () : int32 =
    let struct (v0 : string, v1 : string, v2 : string, v3 : bool) = method0()
    let v4 : string = "chrono::Utc::now()"
    let v5 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v6 : string = "($0).timestamp()"
    let v7 : int64 = Fable.Core.Rust.emitExpr v5 v6
    let v8 : string = method1()
    let v9 : string = "$0.as_str()"
    let v10 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v8 v9
    let v11 : string = "std::path::PathBuf::from($0)"
    let v12 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v10 v11
    let struct (v13 : string, v14 : string, v15 : string, v16 : bool) = method0()
    let v17 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v18 : int64 = Fable.Core.Rust.emitExpr v17 v6
    let v19 : string = "($0).canonicalize()"
    let v20 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v12 v19
    let v21 : string = "($0).as_ref().unwrap().to_path_buf()"
    let v22 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v20 v21
    let v23 : string = "path_clean"
    let v24 : string = "($0).to_string()"
    let v25 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v24
    let v26 : Types.EmitType<Types.std.string.String> = v25 |> unbox<Types.EmitType<Types.std.string.String>>
    let v27 : string = "fable_library_rust::String_::fromStr(&format!(\"{}\", $0.display()))"
    let v28 : string = Fable.Core.Rust.emitExpr v22 v27
    let v29 : Types.std.string.String = Fable.Core.Rust.emitExpr v28 v24
    let v30 : Types.EmitType<Types.std.string.String> = v29 |> unbox<Types.EmitType<Types.std.string.String>>
    let v31 : (Types.EmitType<Types.std.string.String> []) = [|v26; v30|]
    let v32 : string = "core::ops::Deref::deref($0)"
    let v33 : obj = Fable.Core.Rust.emitExpr v31 v32
    let v34 : string = "format!(\"{:?}\", ***$0)"
    let v35 : Types.std.string.String = Fable.Core.Rust.emitExpr v33 v34
    let v36 : Types.EmitType<Types.std.string.String> = v35 |> unbox<Types.EmitType<Types.std.string.String>>
    let v37 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v38 : int64 = Fable.Core.Rust.emitExpr v37 v6
    let v39 : int64 = v38 - v18
    let v40 : string = (v39).ToString ()
    let v41 : int32 = 6
    let v42 : string = method2(v41, v40)
    let v43 : string = "rand::random::<u8>()"
    let v44 : uint8 = Fable.Core.Rust.emitExpr () v43
    let v45 : string = "timestamp"
    let v46 : Types.std.string.String = Fable.Core.Rust.emitExpr v45 v24
    let v47 : Types.EmitType<Types.std.string.String> = v46 |> unbox<Types.EmitType<Types.std.string.String>>
    let v48 : Types.std.string.String = Fable.Core.Rust.emitExpr v42 v24
    let v49 : Types.EmitType<Types.std.string.String> = v48 |> unbox<Types.EmitType<Types.std.string.String>>
    let v50 : string = "run_id"
    let v51 : Types.std.string.String = Fable.Core.Rust.emitExpr v50 v24
    let v52 : Types.EmitType<Types.std.string.String> = v51 |> unbox<Types.EmitType<Types.std.string.String>>
    let v53 : string = "format!(\"{:?}\", $0)"
    let v54 : Types.std.string.String = Fable.Core.Rust.emitExpr v44 v53
    let v55 : Types.EmitType<Types.std.string.String> = v54 |> unbox<Types.EmitType<Types.std.string.String>>
    let v56 : string = "log_level"
    let v57 : Types.std.string.String = Fable.Core.Rust.emitExpr v56 v24
    let v58 : Types.EmitType<Types.std.string.String> = v57 |> unbox<Types.EmitType<Types.std.string.String>>
    let v59 : string = "Debug"
    let v60 : Types.std.string.String = Fable.Core.Rust.emitExpr v59 v24
    let v61 : Types.EmitType<Types.std.string.String> = v60 |> unbox<Types.EmitType<Types.std.string.String>>
    let v62 : (Types.EmitType<Types.std.string.String> []) = [|v47; v49; v52; v55; v58; v61|]
    let v63 : obj = Fable.Core.Rust.emitExpr v62 v32
    let v64 : Types.std.string.String = Fable.Core.Rust.emitExpr v63 v34
    let v65 : Types.EmitType<Types.std.string.String> = v64 |> unbox<Types.EmitType<Types.std.string.String>>
    let v66 : string = "> read_lines ()"
    let v67 : Types.std.string.String = Fable.Core.Rust.emitExpr v66 v24
    let v68 : Types.EmitType<Types.std.string.String> = v67 |> unbox<Types.EmitType<Types.std.string.String>>
    let v69 : (Types.EmitType<Types.std.string.String> []) = [|v68|]
    let v70 : obj = Fable.Core.Rust.emitExpr v69 v32
    let v71 : Types.std.string.String = Fable.Core.Rust.emitExpr v70 v34
    let v72 : Types.EmitType<Types.std.string.String> = v71 |> unbox<Types.EmitType<Types.std.string.String>>
    let v73 : Types.std.string.String = v72 |> unbox
    let v74 : string = "fable_library_rust::String_::fromStr($0)"
    let v75 : string = Fable.Core.Rust.emitExpr v73 v74
    let v76 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v77 : string = $"r#\"{v76}\"#"
    let v78 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v77
    let v79 : string = "regex::RegexBuilder::new($0)"
    let v80 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v78 v79
    let v81 : string = "$0.build().unwrap()"
    let v82 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v80 v81
    let v83 : string = method3(v75)
    let v84 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v83 v9
    let v85 : string = method4()
    let v86 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v85 v9
    let v87 : string = "$0.replace_all(&$1, $2).to_string()"
    let v88 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v82, v84, v86) v87
    let v89 : string = Fable.Core.Rust.emitExpr v88 v74
    let v90 : string = "\\[\"(.*?)\"\\]"
    let v91 : string = $"r#\"{v90}\"#"
    let v92 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v91
    let v93 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v92 v79
    let v94 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v93 v81
    let v95 : string = method3(v89)
    let v96 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v95 v9
    let v97 : string = method5()
    let v98 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v97 v9
    let v99 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v94, v96, v98) v87
    let v100 : string = Fable.Core.Rust.emitExpr v99 v74
    let v101 : string = ", "
    let v102 : string = $"r#\"{v101}\"#"
    let v103 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v102
    let v104 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v103 v79
    let v105 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v104 v81
    let v106 : string = method3(v100)
    let v107 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v106 v9
    let v108 : string = method6()
    let v109 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v108 v9
    let v110 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v105, v107, v109) v87
    let v111 : string = Fable.Core.Rust.emitExpr v110 v74
    let v112 : Types.std.string.String = Fable.Core.Rust.emitExpr v111 v24
    let v113 : Types.EmitType<Types.std.string.String> = v112 |> unbox<Types.EmitType<Types.std.string.String>>
    let v114 : string = "purple"
    let v115 : string = "colored::Colorize::color(&*$0, $1.to_string())"
    let v116 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v113, v114) v115
    let v117 : string = "format!(\"{}\", $0)"
    let v118 : Types.std.string.String = Fable.Core.Rust.emitExpr v116 v117
    let v119 : Types.std.string.String = v36 |> unbox
    let v120 : string = Fable.Core.Rust.emitExpr v119 v74
    let v121 : string = $"r#\"{v76}\"#"
    let v122 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v121
    let v123 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v122 v79
    let v124 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v123 v81
    let v125 : string = method3(v120)
    let v126 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v125 v9
    let v127 : string = method4()
    let v128 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v127 v9
    let v129 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v124, v126, v128) v87
    let v130 : string = Fable.Core.Rust.emitExpr v129 v74
    let v131 : string = $"r#\"{v90}\"#"
    let v132 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v131
    let v133 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v132 v79
    let v134 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v133 v81
    let v135 : string = method3(v130)
    let v136 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v135 v9
    let v137 : string = method5()
    let v138 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v137 v9
    let v139 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v134, v136, v138) v87
    let v140 : string = Fable.Core.Rust.emitExpr v139 v74
    let v141 : string = $"r#\"{v101}\"#"
    let v142 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v141
    let v143 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v142 v79
    let v144 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v143 v81
    let v145 : string = method3(v140)
    let v146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v145 v9
    let v147 : string = method6()
    let v148 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v147 v9
    let v149 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v144, v146, v148) v87
    let v150 : string = Fable.Core.Rust.emitExpr v149 v74
    let v151 : Types.std.string.String = Fable.Core.Rust.emitExpr v150 v24
    let v152 : Types.EmitType<Types.std.string.String> = v151 |> unbox<Types.EmitType<Types.std.string.String>>
    let v153 : string = "666666"
    let v154 : string = v153.Substring (0, 2)
    let v155 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v156 : uint8 = Fable.Core.Rust.emitExpr v154 v155
    let v157 : string = v153.Substring (2, 2)
    let v158 : uint8 = Fable.Core.Rust.emitExpr v157 v155
    let v159 : string = v153.Substring (4, 2)
    let v160 : uint8 = Fable.Core.Rust.emitExpr v159 v155
    let v161 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v162 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v152, v156, v158, v160) v161
    let v163 : Types.std.string.String = Fable.Core.Rust.emitExpr v162 v117
    let v164 : Types.std.string.String = v65 |> unbox
    let v165 : string = Fable.Core.Rust.emitExpr v164 v74
    let v166 : string = $"r#\"{v76}\"#"
    let v167 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v166
    let v168 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v167 v79
    let v169 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v168 v81
    let v170 : string = method3(v165)
    let v171 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v170 v9
    let v172 : string = method4()
    let v173 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v172 v9
    let v174 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v169, v171, v173) v87
    let v175 : string = Fable.Core.Rust.emitExpr v174 v74
    let v176 : string = $"r#\"{v90}\"#"
    let v177 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v176
    let v178 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v177 v79
    let v179 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v178 v81
    let v180 : string = method3(v175)
    let v181 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v180 v9
    let v182 : string = method5()
    let v183 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v182 v9
    let v184 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v179, v181, v183) v87
    let v185 : string = Fable.Core.Rust.emitExpr v184 v74
    let v186 : string = $"r#\"{v101}\"#"
    let v187 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v186
    let v188 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v187 v79
    let v189 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v188 v81
    let v190 : string = method3(v185)
    let v191 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v190 v9
    let v192 : string = method6()
    let v193 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v192 v9
    let v194 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v189, v191, v193) v87
    let v195 : string = Fable.Core.Rust.emitExpr v194 v74
    let v196 : Types.std.string.String = Fable.Core.Rust.emitExpr v195 v24
    let v197 : Types.EmitType<Types.std.string.String> = v196 |> unbox<Types.EmitType<Types.std.string.String>>
    let v198 : string = "222222"
    let v199 : string = v198.Substring (0, 2)
    let v200 : uint8 = Fable.Core.Rust.emitExpr v199 v155
    let v201 : string = v198.Substring (2, 2)
    let v202 : uint8 = Fable.Core.Rust.emitExpr v201 v155
    let v203 : string = v198.Substring (4, 2)
    let v204 : uint8 = Fable.Core.Rust.emitExpr v203 v155
    let v205 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v197, v200, v202, v204) v161
    let v206 : Types.std.string.String = Fable.Core.Rust.emitExpr v205 v117
    let v207 : string = $"{v118} {v163} {v206}"
    System.Console.WriteLine v207
    let v208 : string = "std::fs::File::open($0)"
    let v209 : Result<Types.std.fs.File, Types.std.io.Error> = Fable.Core.Rust.emitExpr v22 v208
    let v210 : string = "$0.unwrap()"
    let v211 : Types.Ref<Types.std.fs.File> = Fable.Core.Rust.emitExpr v209 v210
    let v212 : string = "std::cell::RefCell::new(linereader::LineReader::new($0))"
    let v213 : Types.std.cell.RefCell<Types.linereader.LineReader<Types.Ref<Types.std.fs.File>>> = Fable.Core.Rust.emitExpr v211 v212
    let v214 : string = "reader"
    let v215 : Types.std.string.String = Fable.Core.Rust.emitExpr v214 v24
    let v216 : Types.EmitType<Types.std.string.String> = v215 |> unbox<Types.EmitType<Types.std.string.String>>
    let v217 : Types.std.string.String = Fable.Core.Rust.emitExpr v213 v53
    let v218 : Types.EmitType<Types.std.string.String> = v217 |> unbox<Types.EmitType<Types.std.string.String>>
    let v219 : (Types.EmitType<Types.std.string.String> []) = [|v216; v218|]
    let v220 : obj = Fable.Core.Rust.emitExpr v219 v32
    let v221 : Types.std.string.String = Fable.Core.Rust.emitExpr v220 v34
    let v222 : Types.EmitType<Types.std.string.String> = v221 |> unbox<Types.EmitType<Types.std.string.String>>
    let v223 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v224 : int64 = Fable.Core.Rust.emitExpr v223 v6
    let v225 : int64 = v224 - v18
    let v226 : string = (v225).ToString ()
    let v227 : int32 = 6
    let v228 : string = method2(v227, v226)
    let v229 : uint8 = Fable.Core.Rust.emitExpr () v43
    let v230 : Types.std.string.String = Fable.Core.Rust.emitExpr v45 v24
    let v231 : Types.EmitType<Types.std.string.String> = v230 |> unbox<Types.EmitType<Types.std.string.String>>
    let v232 : Types.std.string.String = Fable.Core.Rust.emitExpr v228 v24
    let v233 : Types.EmitType<Types.std.string.String> = v232 |> unbox<Types.EmitType<Types.std.string.String>>
    let v234 : Types.std.string.String = Fable.Core.Rust.emitExpr v50 v24
    let v235 : Types.EmitType<Types.std.string.String> = v234 |> unbox<Types.EmitType<Types.std.string.String>>
    let v236 : Types.std.string.String = Fable.Core.Rust.emitExpr v229 v53
    let v237 : Types.EmitType<Types.std.string.String> = v236 |> unbox<Types.EmitType<Types.std.string.String>>
    let v238 : Types.std.string.String = Fable.Core.Rust.emitExpr v56 v24
    let v239 : Types.EmitType<Types.std.string.String> = v238 |> unbox<Types.EmitType<Types.std.string.String>>
    let v240 : Types.std.string.String = Fable.Core.Rust.emitExpr v59 v24
    let v241 : Types.EmitType<Types.std.string.String> = v240 |> unbox<Types.EmitType<Types.std.string.String>>
    let v242 : (Types.EmitType<Types.std.string.String> []) = [|v231; v233; v235; v237; v239; v241|]
    let v243 : obj = Fable.Core.Rust.emitExpr v242 v32
    let v244 : Types.std.string.String = Fable.Core.Rust.emitExpr v243 v34
    let v245 : Types.EmitType<Types.std.string.String> = v244 |> unbox<Types.EmitType<Types.std.string.String>>
    let v246 : Types.std.string.String = Fable.Core.Rust.emitExpr v66 v24
    let v247 : Types.EmitType<Types.std.string.String> = v246 |> unbox<Types.EmitType<Types.std.string.String>>
    let v248 : (Types.EmitType<Types.std.string.String> []) = [|v247|]
    let v249 : obj = Fable.Core.Rust.emitExpr v248 v32
    let v250 : Types.std.string.String = Fable.Core.Rust.emitExpr v249 v34
    let v251 : Types.EmitType<Types.std.string.String> = v250 |> unbox<Types.EmitType<Types.std.string.String>>
    let v252 : Types.std.string.String = v251 |> unbox
    let v253 : string = Fable.Core.Rust.emitExpr v252 v74
    let v254 : string = $"r#\"{v76}\"#"
    let v255 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v254
    let v256 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v255 v79
    let v257 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v256 v81
    let v258 : string = method3(v253)
    let v259 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v258 v9
    let v260 : string = method4()
    let v261 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v260 v9
    let v262 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v257, v259, v261) v87
    let v263 : string = Fable.Core.Rust.emitExpr v262 v74
    let v264 : string = $"r#\"{v90}\"#"
    let v265 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v264
    let v266 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v265 v79
    let v267 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v266 v81
    let v268 : string = method3(v263)
    let v269 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v268 v9
    let v270 : string = method5()
    let v271 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v270 v9
    let v272 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v267, v269, v271) v87
    let v273 : string = Fable.Core.Rust.emitExpr v272 v74
    let v274 : string = $"r#\"{v101}\"#"
    let v275 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v274
    let v276 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v275 v79
    let v277 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v276 v81
    let v278 : string = method3(v273)
    let v279 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v278 v9
    let v280 : string = method6()
    let v281 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v280 v9
    let v282 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v277, v279, v281) v87
    let v283 : string = Fable.Core.Rust.emitExpr v282 v74
    let v284 : Types.std.string.String = Fable.Core.Rust.emitExpr v283 v24
    let v285 : Types.EmitType<Types.std.string.String> = v284 |> unbox<Types.EmitType<Types.std.string.String>>
    let v286 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v285, v114) v115
    let v287 : Types.std.string.String = Fable.Core.Rust.emitExpr v286 v117
    let v288 : Types.std.string.String = v222 |> unbox
    let v289 : string = Fable.Core.Rust.emitExpr v288 v74
    let v290 : string = $"r#\"{v76}\"#"
    let v291 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v290
    let v292 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v291 v79
    let v293 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v292 v81
    let v294 : string = method3(v289)
    let v295 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v294 v9
    let v296 : string = method4()
    let v297 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v296 v9
    let v298 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v293, v295, v297) v87
    let v299 : string = Fable.Core.Rust.emitExpr v298 v74
    let v300 : string = $"r#\"{v90}\"#"
    let v301 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v300
    let v302 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v301 v79
    let v303 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v302 v81
    let v304 : string = method3(v299)
    let v305 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v304 v9
    let v306 : string = method5()
    let v307 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v306 v9
    let v308 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v303, v305, v307) v87
    let v309 : string = Fable.Core.Rust.emitExpr v308 v74
    let v310 : string = $"r#\"{v101}\"#"
    let v311 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v310
    let v312 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v311 v79
    let v313 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v312 v81
    let v314 : string = method3(v309)
    let v315 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v314 v9
    let v316 : string = method6()
    let v317 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v316 v9
    let v318 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v313, v315, v317) v87
    let v319 : string = Fable.Core.Rust.emitExpr v318 v74
    let v320 : Types.std.string.String = Fable.Core.Rust.emitExpr v319 v24
    let v321 : Types.EmitType<Types.std.string.String> = v320 |> unbox<Types.EmitType<Types.std.string.String>>
    let v322 : string = v153.Substring (0, 2)
    let v323 : uint8 = Fable.Core.Rust.emitExpr v322 v155
    let v324 : string = v153.Substring (2, 2)
    let v325 : uint8 = Fable.Core.Rust.emitExpr v324 v155
    let v326 : string = v153.Substring (4, 2)
    let v327 : uint8 = Fable.Core.Rust.emitExpr v326 v155
    let v328 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v321, v323, v325, v327) v161
    let v329 : Types.std.string.String = Fable.Core.Rust.emitExpr v328 v117
    let v330 : Types.std.string.String = v245 |> unbox
    let v331 : string = Fable.Core.Rust.emitExpr v330 v74
    let v332 : string = $"r#\"{v76}\"#"
    let v333 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v332
    let v334 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v333 v79
    let v335 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v334 v81
    let v336 : string = method3(v331)
    let v337 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v336 v9
    let v338 : string = method4()
    let v339 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v338 v9
    let v340 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v335, v337, v339) v87
    let v341 : string = Fable.Core.Rust.emitExpr v340 v74
    let v342 : string = $"r#\"{v90}\"#"
    let v343 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v342
    let v344 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v343 v79
    let v345 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v344 v81
    let v346 : string = method3(v341)
    let v347 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v346 v9
    let v348 : string = method5()
    let v349 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v348 v9
    let v350 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v345, v347, v349) v87
    let v351 : string = Fable.Core.Rust.emitExpr v350 v74
    let v352 : string = $"r#\"{v101}\"#"
    let v353 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v352
    let v354 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v353 v79
    let v355 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v354 v81
    let v356 : string = method3(v351)
    let v357 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v356 v9
    let v358 : string = method6()
    let v359 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v358 v9
    let v360 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v355, v357, v359) v87
    let v361 : string = Fable.Core.Rust.emitExpr v360 v74
    let v362 : Types.std.string.String = Fable.Core.Rust.emitExpr v361 v24
    let v363 : Types.EmitType<Types.std.string.String> = v362 |> unbox<Types.EmitType<Types.std.string.String>>
    let v364 : string = v198.Substring (0, 2)
    let v365 : uint8 = Fable.Core.Rust.emitExpr v364 v155
    let v366 : string = v198.Substring (2, 2)
    let v367 : uint8 = Fable.Core.Rust.emitExpr v366 v155
    let v368 : string = v198.Substring (4, 2)
    let v369 : uint8 = Fable.Core.Rust.emitExpr v368 v155
    let v370 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v363, v365, v367, v369) v161
    let v371 : Types.std.string.String = Fable.Core.Rust.emitExpr v370 v117
    let v372 : string = $"{v287} {v329} {v371}"
    System.Console.WriteLine v372
    let v373 : UH0 = UH0_1
    let v374 : Mut0 = {l0 = v373} : Mut0
    let v375 : (Types.Vec<uint8> -> Result<bool, Types.std.io.Error>) = method7(v18, v374)
    let v376 : string = "($0).borrow_mut().for_each(move |x| $1(x.to_vec()))"
    let v377 : Result<unit, Types.std.io.Error> = Fable.Core.Rust.emitExpr struct (v213, v375) v376
    let v378 : string = "*(($0).as_ref()).unwrap()"
    Fable.Core.Rust.emitExpr v377 v378
    let v379 : UH0 = v374.l0
    let v380 : UH0 = UH0_1
    let v381 : UH0 = method8(v379, v380)
    let v382 : UH1 = UH1_1
    let v383 : UH1 = method9(v381, v382)
    let v384 : string = "lines len"
    let v385 : Types.std.string.String = Fable.Core.Rust.emitExpr v384 v24
    let v386 : Types.EmitType<Types.std.string.String> = v385 |> unbox<Types.EmitType<Types.std.string.String>>
    let v387 : int32 = 0
    let v388 : int32 = method10(v383, v387)
    let v389 : Types.std.string.String = Fable.Core.Rust.emitExpr v388 v53
    let v390 : Types.EmitType<Types.std.string.String> = v389 |> unbox<Types.EmitType<Types.std.string.String>>
    let v391 : (Types.EmitType<Types.std.string.String> []) = [|v386; v390|]
    let v392 : obj = Fable.Core.Rust.emitExpr v391 v32
    let v393 : Types.std.string.String = Fable.Core.Rust.emitExpr v392 v34
    let v394 : Types.EmitType<Types.std.string.String> = v393 |> unbox<Types.EmitType<Types.std.string.String>>
    let v395 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v396 : int64 = Fable.Core.Rust.emitExpr v395 v6
    let v397 : int64 = v396 - v18
    let v398 : string = (v397).ToString ()
    let v399 : int32 = 6
    let v400 : string = method2(v399, v398)
    let v401 : uint8 = Fable.Core.Rust.emitExpr () v43
    let v402 : Types.std.string.String = Fable.Core.Rust.emitExpr v45 v24
    let v403 : Types.EmitType<Types.std.string.String> = v402 |> unbox<Types.EmitType<Types.std.string.String>>
    let v404 : Types.std.string.String = Fable.Core.Rust.emitExpr v400 v24
    let v405 : Types.EmitType<Types.std.string.String> = v404 |> unbox<Types.EmitType<Types.std.string.String>>
    let v406 : Types.std.string.String = Fable.Core.Rust.emitExpr v50 v24
    let v407 : Types.EmitType<Types.std.string.String> = v406 |> unbox<Types.EmitType<Types.std.string.String>>
    let v408 : Types.std.string.String = Fable.Core.Rust.emitExpr v401 v53
    let v409 : Types.EmitType<Types.std.string.String> = v408 |> unbox<Types.EmitType<Types.std.string.String>>
    let v410 : Types.std.string.String = Fable.Core.Rust.emitExpr v56 v24
    let v411 : Types.EmitType<Types.std.string.String> = v410 |> unbox<Types.EmitType<Types.std.string.String>>
    let v412 : Types.std.string.String = Fable.Core.Rust.emitExpr v59 v24
    let v413 : Types.EmitType<Types.std.string.String> = v412 |> unbox<Types.EmitType<Types.std.string.String>>
    let v414 : (Types.EmitType<Types.std.string.String> []) = [|v403; v405; v407; v409; v411; v413|]
    let v415 : obj = Fable.Core.Rust.emitExpr v414 v32
    let v416 : Types.std.string.String = Fable.Core.Rust.emitExpr v415 v34
    let v417 : Types.EmitType<Types.std.string.String> = v416 |> unbox<Types.EmitType<Types.std.string.String>>
    let v418 : Types.std.string.String = Fable.Core.Rust.emitExpr v66 v24
    let v419 : Types.EmitType<Types.std.string.String> = v418 |> unbox<Types.EmitType<Types.std.string.String>>
    let v420 : (Types.EmitType<Types.std.string.String> []) = [|v419|]
    let v421 : obj = Fable.Core.Rust.emitExpr v420 v32
    let v422 : Types.std.string.String = Fable.Core.Rust.emitExpr v421 v34
    let v423 : Types.EmitType<Types.std.string.String> = v422 |> unbox<Types.EmitType<Types.std.string.String>>
    let v424 : Types.std.string.String = v423 |> unbox
    let v425 : string = Fable.Core.Rust.emitExpr v424 v74
    let v426 : string = $"r#\"{v76}\"#"
    let v427 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v426
    let v428 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v427 v79
    let v429 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v428 v81
    let v430 : string = method3(v425)
    let v431 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v430 v9
    let v432 : string = method4()
    let v433 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v432 v9
    let v434 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v429, v431, v433) v87
    let v435 : string = Fable.Core.Rust.emitExpr v434 v74
    let v436 : string = $"r#\"{v90}\"#"
    let v437 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v436
    let v438 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v437 v79
    let v439 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v438 v81
    let v440 : string = method3(v435)
    let v441 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v440 v9
    let v442 : string = method5()
    let v443 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v442 v9
    let v444 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v439, v441, v443) v87
    let v445 : string = Fable.Core.Rust.emitExpr v444 v74
    let v446 : string = $"r#\"{v101}\"#"
    let v447 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v446
    let v448 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v447 v79
    let v449 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v448 v81
    let v450 : string = method3(v445)
    let v451 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v450 v9
    let v452 : string = method6()
    let v453 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v452 v9
    let v454 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v449, v451, v453) v87
    let v455 : string = Fable.Core.Rust.emitExpr v454 v74
    let v456 : Types.std.string.String = Fable.Core.Rust.emitExpr v455 v24
    let v457 : Types.EmitType<Types.std.string.String> = v456 |> unbox<Types.EmitType<Types.std.string.String>>
    let v458 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v457, v114) v115
    let v459 : Types.std.string.String = Fable.Core.Rust.emitExpr v458 v117
    let v460 : Types.std.string.String = v394 |> unbox
    let v461 : string = Fable.Core.Rust.emitExpr v460 v74
    let v462 : string = $"r#\"{v76}\"#"
    let v463 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v462
    let v464 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v463 v79
    let v465 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v464 v81
    let v466 : string = method3(v461)
    let v467 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v466 v9
    let v468 : string = method4()
    let v469 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v468 v9
    let v470 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v465, v467, v469) v87
    let v471 : string = Fable.Core.Rust.emitExpr v470 v74
    let v472 : string = $"r#\"{v90}\"#"
    let v473 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v472
    let v474 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v473 v79
    let v475 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v474 v81
    let v476 : string = method3(v471)
    let v477 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v476 v9
    let v478 : string = method5()
    let v479 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v478 v9
    let v480 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v475, v477, v479) v87
    let v481 : string = Fable.Core.Rust.emitExpr v480 v74
    let v482 : string = $"r#\"{v101}\"#"
    let v483 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v482
    let v484 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v483 v79
    let v485 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v484 v81
    let v486 : string = method3(v481)
    let v487 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v486 v9
    let v488 : string = method6()
    let v489 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v488 v9
    let v490 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v485, v487, v489) v87
    let v491 : string = Fable.Core.Rust.emitExpr v490 v74
    let v492 : Types.std.string.String = Fable.Core.Rust.emitExpr v491 v24
    let v493 : Types.EmitType<Types.std.string.String> = v492 |> unbox<Types.EmitType<Types.std.string.String>>
    let v494 : string = v153.Substring (0, 2)
    let v495 : uint8 = Fable.Core.Rust.emitExpr v494 v155
    let v496 : string = v153.Substring (2, 2)
    let v497 : uint8 = Fable.Core.Rust.emitExpr v496 v155
    let v498 : string = v153.Substring (4, 2)
    let v499 : uint8 = Fable.Core.Rust.emitExpr v498 v155
    let v500 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v493, v495, v497, v499) v161
    let v501 : Types.std.string.String = Fable.Core.Rust.emitExpr v500 v117
    let v502 : Types.std.string.String = v417 |> unbox
    let v503 : string = Fable.Core.Rust.emitExpr v502 v74
    let v504 : string = $"r#\"{v76}\"#"
    let v505 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v504
    let v506 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v505 v79
    let v507 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v506 v81
    let v508 : string = method3(v503)
    let v509 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v508 v9
    let v510 : string = method4()
    let v511 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v510 v9
    let v512 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v507, v509, v511) v87
    let v513 : string = Fable.Core.Rust.emitExpr v512 v74
    let v514 : string = $"r#\"{v90}\"#"
    let v515 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v514
    let v516 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v515 v79
    let v517 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v516 v81
    let v518 : string = method3(v513)
    let v519 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v518 v9
    let v520 : string = method5()
    let v521 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v520 v9
    let v522 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v517, v519, v521) v87
    let v523 : string = Fable.Core.Rust.emitExpr v522 v74
    let v524 : string = $"r#\"{v101}\"#"
    let v525 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v524
    let v526 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v525 v79
    let v527 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v526 v81
    let v528 : string = method3(v523)
    let v529 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v528 v9
    let v530 : string = method6()
    let v531 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v530 v9
    let v532 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v527, v529, v531) v87
    let v533 : string = Fable.Core.Rust.emitExpr v532 v74
    let v534 : Types.std.string.String = Fable.Core.Rust.emitExpr v533 v24
    let v535 : Types.EmitType<Types.std.string.String> = v534 |> unbox<Types.EmitType<Types.std.string.String>>
    let v536 : string = v198.Substring (0, 2)
    let v537 : uint8 = Fable.Core.Rust.emitExpr v536 v155
    let v538 : string = v198.Substring (2, 2)
    let v539 : uint8 = Fable.Core.Rust.emitExpr v538 v155
    let v540 : string = v198.Substring (4, 2)
    let v541 : uint8 = Fable.Core.Rust.emitExpr v540 v155
    let v542 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v535, v537, v539, v541) v161
    let v543 : Types.std.string.String = Fable.Core.Rust.emitExpr v542 v117
    let v544 : string = $"{v459} {v501} {v543}"
    System.Console.WriteLine v544
    let v545 : int32 = 0
    let v546 : UH1 = UH1_1
    let struct (v547 : int32, v548 : UH1) = method11(v383, v545, v546)
    let v549 : UH1 = UH1_1
    let v550 : UH1 = method12(v548, v549)
    let v551 : string = ""
    let v552 : string = method13(v550, v551)
    let v553 : string = "text len"
    let v554 : Types.std.string.String = Fable.Core.Rust.emitExpr v553 v24
    let v555 : Types.EmitType<Types.std.string.String> = v554 |> unbox<Types.EmitType<Types.std.string.String>>
    let v556 : string = "($0).len().try_into().unwrap()"
    let v557 : int32 = Fable.Core.Rust.emitExpr v552 v556
    let v558 : Types.std.string.String = Fable.Core.Rust.emitExpr v557 v53
    let v559 : Types.EmitType<Types.std.string.String> = v558 |> unbox<Types.EmitType<Types.std.string.String>>
    let v560 : (Types.EmitType<Types.std.string.String> []) = [|v555; v559|]
    let v561 : obj = Fable.Core.Rust.emitExpr v560 v32
    let v562 : Types.std.string.String = Fable.Core.Rust.emitExpr v561 v34
    let v563 : Types.EmitType<Types.std.string.String> = v562 |> unbox<Types.EmitType<Types.std.string.String>>
    let v564 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v565 : int64 = Fable.Core.Rust.emitExpr v564 v6
    let v566 : int64 = v565 - v7
    let v567 : string = (v566).ToString ()
    let v568 : int32 = 6
    let v569 : string = method2(v568, v567)
    let v570 : uint8 = Fable.Core.Rust.emitExpr () v43
    let v571 : Types.std.string.String = Fable.Core.Rust.emitExpr v45 v24
    let v572 : Types.EmitType<Types.std.string.String> = v571 |> unbox<Types.EmitType<Types.std.string.String>>
    let v573 : Types.std.string.String = Fable.Core.Rust.emitExpr v569 v24
    let v574 : Types.EmitType<Types.std.string.String> = v573 |> unbox<Types.EmitType<Types.std.string.String>>
    let v575 : Types.std.string.String = Fable.Core.Rust.emitExpr v50 v24
    let v576 : Types.EmitType<Types.std.string.String> = v575 |> unbox<Types.EmitType<Types.std.string.String>>
    let v577 : Types.std.string.String = Fable.Core.Rust.emitExpr v570 v53
    let v578 : Types.EmitType<Types.std.string.String> = v577 |> unbox<Types.EmitType<Types.std.string.String>>
    let v579 : Types.std.string.String = Fable.Core.Rust.emitExpr v56 v24
    let v580 : Types.EmitType<Types.std.string.String> = v579 |> unbox<Types.EmitType<Types.std.string.String>>
    let v581 : Types.std.string.String = Fable.Core.Rust.emitExpr v59 v24
    let v582 : Types.EmitType<Types.std.string.String> = v581 |> unbox<Types.EmitType<Types.std.string.String>>
    let v583 : (Types.EmitType<Types.std.string.String> []) = [|v572; v574; v576; v578; v580; v582|]
    let v584 : obj = Fable.Core.Rust.emitExpr v583 v32
    let v585 : Types.std.string.String = Fable.Core.Rust.emitExpr v584 v34
    let v586 : Types.EmitType<Types.std.string.String> = v585 |> unbox<Types.EmitType<Types.std.string.String>>
    let v587 : string = "> app ()"
    let v588 : Types.std.string.String = Fable.Core.Rust.emitExpr v587 v24
    let v589 : Types.EmitType<Types.std.string.String> = v588 |> unbox<Types.EmitType<Types.std.string.String>>
    let v590 : (Types.EmitType<Types.std.string.String> []) = [|v589|]
    let v591 : obj = Fable.Core.Rust.emitExpr v590 v32
    let v592 : Types.std.string.String = Fable.Core.Rust.emitExpr v591 v34
    let v593 : Types.EmitType<Types.std.string.String> = v592 |> unbox<Types.EmitType<Types.std.string.String>>
    let v594 : Types.std.string.String = v593 |> unbox
    let v595 : string = Fable.Core.Rust.emitExpr v594 v74
    let v596 : string = $"r#\"{v76}\"#"
    let v597 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v596
    let v598 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v597 v79
    let v599 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v598 v81
    let v600 : string = method3(v595)
    let v601 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v600 v9
    let v602 : string = method4()
    let v603 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v602 v9
    let v604 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v599, v601, v603) v87
    let v605 : string = Fable.Core.Rust.emitExpr v604 v74
    let v606 : string = $"r#\"{v90}\"#"
    let v607 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v606
    let v608 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v607 v79
    let v609 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v608 v81
    let v610 : string = method3(v605)
    let v611 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v610 v9
    let v612 : string = method5()
    let v613 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v612 v9
    let v614 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v609, v611, v613) v87
    let v615 : string = Fable.Core.Rust.emitExpr v614 v74
    let v616 : string = $"r#\"{v101}\"#"
    let v617 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v616
    let v618 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v617 v79
    let v619 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v618 v81
    let v620 : string = method3(v615)
    let v621 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v620 v9
    let v622 : string = method6()
    let v623 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v622 v9
    let v624 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v619, v621, v623) v87
    let v625 : string = Fable.Core.Rust.emitExpr v624 v74
    let v626 : Types.std.string.String = Fable.Core.Rust.emitExpr v625 v24
    let v627 : Types.EmitType<Types.std.string.String> = v626 |> unbox<Types.EmitType<Types.std.string.String>>
    let v628 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v627, v114) v115
    let v629 : Types.std.string.String = Fable.Core.Rust.emitExpr v628 v117
    let v630 : Types.std.string.String = v563 |> unbox
    let v631 : string = Fable.Core.Rust.emitExpr v630 v74
    let v632 : string = $"r#\"{v76}\"#"
    let v633 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v632
    let v634 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v633 v79
    let v635 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v634 v81
    let v636 : string = method3(v631)
    let v637 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v636 v9
    let v638 : string = method4()
    let v639 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v638 v9
    let v640 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v635, v637, v639) v87
    let v641 : string = Fable.Core.Rust.emitExpr v640 v74
    let v642 : string = $"r#\"{v90}\"#"
    let v643 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v642
    let v644 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v643 v79
    let v645 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v644 v81
    let v646 : string = method3(v641)
    let v647 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v646 v9
    let v648 : string = method5()
    let v649 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v648 v9
    let v650 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v645, v647, v649) v87
    let v651 : string = Fable.Core.Rust.emitExpr v650 v74
    let v652 : string = $"r#\"{v101}\"#"
    let v653 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v652
    let v654 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v653 v79
    let v655 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v654 v81
    let v656 : string = method3(v651)
    let v657 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v656 v9
    let v658 : string = method6()
    let v659 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v658 v9
    let v660 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v655, v657, v659) v87
    let v661 : string = Fable.Core.Rust.emitExpr v660 v74
    let v662 : Types.std.string.String = Fable.Core.Rust.emitExpr v661 v24
    let v663 : Types.EmitType<Types.std.string.String> = v662 |> unbox<Types.EmitType<Types.std.string.String>>
    let v664 : string = v153.Substring (0, 2)
    let v665 : uint8 = Fable.Core.Rust.emitExpr v664 v155
    let v666 : string = v153.Substring (2, 2)
    let v667 : uint8 = Fable.Core.Rust.emitExpr v666 v155
    let v668 : string = v153.Substring (4, 2)
    let v669 : uint8 = Fable.Core.Rust.emitExpr v668 v155
    let v670 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v663, v665, v667, v669) v161
    let v671 : Types.std.string.String = Fable.Core.Rust.emitExpr v670 v117
    let v672 : Types.std.string.String = v586 |> unbox
    let v673 : string = Fable.Core.Rust.emitExpr v672 v74
    let v674 : string = $"r#\"{v76}\"#"
    let v675 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v674
    let v676 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v675 v79
    let v677 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v676 v81
    let v678 : string = method3(v673)
    let v679 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v678 v9
    let v680 : string = method4()
    let v681 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v680 v9
    let v682 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v677, v679, v681) v87
    let v683 : string = Fable.Core.Rust.emitExpr v682 v74
    let v684 : string = $"r#\"{v90}\"#"
    let v685 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v684
    let v686 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v685 v79
    let v687 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v686 v81
    let v688 : string = method3(v683)
    let v689 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v688 v9
    let v690 : string = method5()
    let v691 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v690 v9
    let v692 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v687, v689, v691) v87
    let v693 : string = Fable.Core.Rust.emitExpr v692 v74
    let v694 : string = $"r#\"{v101}\"#"
    let v695 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v694
    let v696 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v695 v79
    let v697 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v696 v81
    let v698 : string = method3(v693)
    let v699 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v698 v9
    let v700 : string = method6()
    let v701 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v700 v9
    let v702 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v697, v699, v701) v87
    let v703 : string = Fable.Core.Rust.emitExpr v702 v74
    let v704 : Types.std.string.String = Fable.Core.Rust.emitExpr v703 v24
    let v705 : Types.EmitType<Types.std.string.String> = v704 |> unbox<Types.EmitType<Types.std.string.String>>
    let v706 : string = v198.Substring (0, 2)
    let v707 : uint8 = Fable.Core.Rust.emitExpr v706 v155
    let v708 : string = v198.Substring (2, 2)
    let v709 : uint8 = Fable.Core.Rust.emitExpr v708 v155
    let v710 : string = v198.Substring (4, 2)
    let v711 : uint8 = Fable.Core.Rust.emitExpr v710 v155
    let v712 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v705, v707, v709, v711) v161
    let v713 : Types.std.string.String = Fable.Core.Rust.emitExpr v712 v117
    let v714 : string = $"{v629} {v671} {v713}"
    System.Console.WriteLine v714
    let v715 : string = "std::fs::write($0, $1.as_str())"
    let v716 : Result<unit, Types.std.io.Error> = Fable.Core.Rust.emitExpr struct (v12, v552) v715
    Fable.Core.Rust.emitExpr v716 v378
    let v717 : string = "> fs_write path text; ok"
    let v718 : Types.std.string.String = Fable.Core.Rust.emitExpr v717 v24
    let v719 : Types.EmitType<Types.std.string.String> = v718 |> unbox<Types.EmitType<Types.std.string.String>>
    let v720 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v721 : int64 = Fable.Core.Rust.emitExpr v720 v6
    let v722 : int64 = v721 - v7
    let v723 : string = (v722).ToString ()
    let v724 : int32 = 6
    let v725 : string = method2(v724, v723)
    let v726 : uint8 = Fable.Core.Rust.emitExpr () v43
    let v727 : Types.std.string.String = Fable.Core.Rust.emitExpr v45 v24
    let v728 : Types.EmitType<Types.std.string.String> = v727 |> unbox<Types.EmitType<Types.std.string.String>>
    let v729 : Types.std.string.String = Fable.Core.Rust.emitExpr v725 v24
    let v730 : Types.EmitType<Types.std.string.String> = v729 |> unbox<Types.EmitType<Types.std.string.String>>
    let v731 : Types.std.string.String = Fable.Core.Rust.emitExpr v50 v24
    let v732 : Types.EmitType<Types.std.string.String> = v731 |> unbox<Types.EmitType<Types.std.string.String>>
    let v733 : Types.std.string.String = Fable.Core.Rust.emitExpr v726 v53
    let v734 : Types.EmitType<Types.std.string.String> = v733 |> unbox<Types.EmitType<Types.std.string.String>>
    let v735 : Types.std.string.String = Fable.Core.Rust.emitExpr v56 v24
    let v736 : Types.EmitType<Types.std.string.String> = v735 |> unbox<Types.EmitType<Types.std.string.String>>
    let v737 : Types.std.string.String = Fable.Core.Rust.emitExpr v59 v24
    let v738 : Types.EmitType<Types.std.string.String> = v737 |> unbox<Types.EmitType<Types.std.string.String>>
    let v739 : (Types.EmitType<Types.std.string.String> []) = [|v728; v730; v732; v734; v736; v738|]
    let v740 : obj = Fable.Core.Rust.emitExpr v739 v32
    let v741 : Types.std.string.String = Fable.Core.Rust.emitExpr v740 v34
    let v742 : Types.EmitType<Types.std.string.String> = v741 |> unbox<Types.EmitType<Types.std.string.String>>
    let v743 : Types.std.string.String = Fable.Core.Rust.emitExpr v587 v24
    let v744 : Types.EmitType<Types.std.string.String> = v743 |> unbox<Types.EmitType<Types.std.string.String>>
    let v745 : (Types.EmitType<Types.std.string.String> []) = [|v744|]
    let v746 : obj = Fable.Core.Rust.emitExpr v745 v32
    let v747 : Types.std.string.String = Fable.Core.Rust.emitExpr v746 v34
    let v748 : Types.EmitType<Types.std.string.String> = v747 |> unbox<Types.EmitType<Types.std.string.String>>
    let v749 : Types.std.string.String = v748 |> unbox
    let v750 : string = Fable.Core.Rust.emitExpr v749 v74
    let v751 : string = $"r#\"{v76}\"#"
    let v752 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v751
    let v753 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v752 v79
    let v754 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v753 v81
    let v755 : string = method3(v750)
    let v756 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v755 v9
    let v757 : string = method4()
    let v758 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v757 v9
    let v759 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v754, v756, v758) v87
    let v760 : string = Fable.Core.Rust.emitExpr v759 v74
    let v761 : string = $"r#\"{v90}\"#"
    let v762 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v761
    let v763 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v762 v79
    let v764 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v763 v81
    let v765 : string = method3(v760)
    let v766 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v765 v9
    let v767 : string = method5()
    let v768 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v767 v9
    let v769 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v764, v766, v768) v87
    let v770 : string = Fable.Core.Rust.emitExpr v769 v74
    let v771 : string = $"r#\"{v101}\"#"
    let v772 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v771
    let v773 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v772 v79
    let v774 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v773 v81
    let v775 : string = method3(v770)
    let v776 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v775 v9
    let v777 : string = method6()
    let v778 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v777 v9
    let v779 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v774, v776, v778) v87
    let v780 : string = Fable.Core.Rust.emitExpr v779 v74
    let v781 : Types.std.string.String = Fable.Core.Rust.emitExpr v780 v24
    let v782 : Types.EmitType<Types.std.string.String> = v781 |> unbox<Types.EmitType<Types.std.string.String>>
    let v783 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v782, v114) v115
    let v784 : Types.std.string.String = Fable.Core.Rust.emitExpr v783 v117
    let v785 : Types.std.string.String = v719 |> unbox
    let v786 : string = Fable.Core.Rust.emitExpr v785 v74
    let v787 : string = $"r#\"{v76}\"#"
    let v788 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v787
    let v789 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v788 v79
    let v790 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v789 v81
    let v791 : string = method3(v786)
    let v792 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v791 v9
    let v793 : string = method4()
    let v794 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v793 v9
    let v795 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v790, v792, v794) v87
    let v796 : string = Fable.Core.Rust.emitExpr v795 v74
    let v797 : string = $"r#\"{v90}\"#"
    let v798 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v797
    let v799 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v798 v79
    let v800 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v799 v81
    let v801 : string = method3(v796)
    let v802 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v801 v9
    let v803 : string = method5()
    let v804 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v803 v9
    let v805 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v800, v802, v804) v87
    let v806 : string = Fable.Core.Rust.emitExpr v805 v74
    let v807 : string = $"r#\"{v101}\"#"
    let v808 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v807
    let v809 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v808 v79
    let v810 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v809 v81
    let v811 : string = method3(v806)
    let v812 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v811 v9
    let v813 : string = method6()
    let v814 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v813 v9
    let v815 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v810, v812, v814) v87
    let v816 : string = Fable.Core.Rust.emitExpr v815 v74
    let v817 : Types.std.string.String = Fable.Core.Rust.emitExpr v816 v24
    let v818 : Types.EmitType<Types.std.string.String> = v817 |> unbox<Types.EmitType<Types.std.string.String>>
    let v819 : string = v153.Substring (0, 2)
    let v820 : uint8 = Fable.Core.Rust.emitExpr v819 v155
    let v821 : string = v153.Substring (2, 2)
    let v822 : uint8 = Fable.Core.Rust.emitExpr v821 v155
    let v823 : string = v153.Substring (4, 2)
    let v824 : uint8 = Fable.Core.Rust.emitExpr v823 v155
    let v825 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v818, v820, v822, v824) v161
    let v826 : Types.std.string.String = Fable.Core.Rust.emitExpr v825 v117
    let v827 : Types.std.string.String = v742 |> unbox
    let v828 : string = Fable.Core.Rust.emitExpr v827 v74
    let v829 : string = $"r#\"{v76}\"#"
    let v830 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v829
    let v831 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v830 v79
    let v832 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v831 v81
    let v833 : string = method3(v828)
    let v834 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v833 v9
    let v835 : string = method4()
    let v836 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v835 v9
    let v837 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v832, v834, v836) v87
    let v838 : string = Fable.Core.Rust.emitExpr v837 v74
    let v839 : string = $"r#\"{v90}\"#"
    let v840 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v839
    let v841 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v840 v79
    let v842 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v841 v81
    let v843 : string = method3(v838)
    let v844 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v843 v9
    let v845 : string = method5()
    let v846 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v845 v9
    let v847 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v842, v844, v846) v87
    let v848 : string = Fable.Core.Rust.emitExpr v847 v74
    let v849 : string = $"r#\"{v101}\"#"
    let v850 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v849
    let v851 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v850 v79
    let v852 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v851 v81
    let v853 : string = method3(v848)
    let v854 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v853 v9
    let v855 : string = method6()
    let v856 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v855 v9
    let v857 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v852, v854, v856) v87
    let v858 : string = Fable.Core.Rust.emitExpr v857 v74
    let v859 : Types.std.string.String = Fable.Core.Rust.emitExpr v858 v24
    let v860 : Types.EmitType<Types.std.string.String> = v859 |> unbox<Types.EmitType<Types.std.string.String>>
    let v861 : string = v198.Substring (0, 2)
    let v862 : uint8 = Fable.Core.Rust.emitExpr v861 v155
    let v863 : string = v198.Substring (2, 2)
    let v864 : uint8 = Fable.Core.Rust.emitExpr v863 v155
    let v865 : string = v198.Substring (4, 2)
    let v866 : uint8 = Fable.Core.Rust.emitExpr v865 v155
    let v867 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v860, v862, v864, v866) v161
    let v868 : Types.std.string.String = Fable.Core.Rust.emitExpr v867 v117
    let v869 : string = $"{v784} {v826} {v868}"
    System.Console.WriteLine v869
    0
let v0 : (unit -> int32) = closure0()
()
