type UH0 =
    | UH0_0 of Types.std.string.String * UH0
    | UH0_1
and Mut0 = {mutable l0 : UH0}
let rec method0 () : struct (string * string * string * bool) =
    let v0 : string = ""
    let v1 : obj = v0
    struct (v0, v0, v0, true)
and method1 () : string =
    let v0 : string = "./cli.rs"
    v0
and method2 (v0 : int32, v1 : string) : string =
    let v2 : int32 = String.length v1
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : string = $"0{v1}"
        method2(v0, v4)
    else
        v1
and method3 (v0 : string) : string =
    v0
and method4 () : string =
    let v0 : string = "$1=$2"
    v0
and method5 () : string =
    let v0 : string = "[$1]"
    v0
and method6 () : string =
    let v0 : string = " "
    v0
and closure1 (v0 : int64, v1 : Mut0) (v2 : Types.Vec<uint8>) : Result<bool, Types.std.io.Error> =
    let v3 : string = "line len"
    let v4 : string = "($0).to_string()"
    let v5 : Types.std.string.String = Fable.Core.Rust.emitExpr v3 v4
    let v6 : Types.EmitType<Types.std.string.String> = v5 |> unbox<Types.EmitType<Types.std.string.String>>
    let v7 : string = "($0).len().try_into().unwrap()"
    let v8 : int32 = Fable.Core.Rust.emitExpr v2 v7
    let v9 : string = "format!(\"{:?}\", $0)"
    let v10 : Types.std.string.String = Fable.Core.Rust.emitExpr v8 v9
    let v11 : Types.EmitType<Types.std.string.String> = v10 |> unbox<Types.EmitType<Types.std.string.String>>
    let v12 : (Types.EmitType<Types.std.string.String> []) = [|v6; v11|]
    let v13 : string = "core::ops::Deref::deref($0)"
    let v14 : obj = Fable.Core.Rust.emitExpr v12 v13
    let v15 : string = "format!(\"{:?}\", ***$0)"
    let v16 : Types.std.string.String = Fable.Core.Rust.emitExpr v14 v15
    let v17 : Types.EmitType<Types.std.string.String> = v16 |> unbox<Types.EmitType<Types.std.string.String>>
    let v18 : string = "std::string::String::from_utf8(($0).to_owned()).unwrap()"
    let v19 : Types.std.string.String = Fable.Core.Rust.emitExpr v2 v18
    let v20 : UH0 = v1.l0
    let v21 : UH0 = UH0_0(v19, v20)
    v1.l0 <- v21
    let v22 : Result<bool, Types.std.io.Error> = Ok true
    v22
and method7 (v0 : int64, v1 : Mut0) : (Types.Vec<uint8> -> Result<bool, Types.std.io.Error>) =
    closure1(v0, v1)
and method8 (v0 : UH0, v1 : UH0) : UH0 =
    match v0 with
    | UH0_0(v2, v3) -> (* Cons *)
        let v4 : UH0 = UH0_0(v2, v1)
        method8(v3, v4)
    | UH0_1 -> (* Nil *)
        v1
and method9 (v0 : UH0, v1 : int32) : int32 =
    match v0 with
    | UH0_0(v2, v3) -> (* Cons *)
        let v4 : int32 = v1 + 1
        method9(v3, v4)
    | UH0_1 -> (* Nil *)
        v1
and method10 (v0 : UH0, v1 : string) : string =
    match v0 with
    | UH0_0(v2, v3) -> (* Cons *)
        let v4 : string = $"{v1}{v2}"
        method10(v3, v4)
    | UH0_1 -> (* Nil *)
        v1
and closure0 () () : int32 =
    let struct (v0 : string, v1 : string, v2 : string, v3 : bool) = method0()
    let v4 : string = "chrono::Utc::now()"
    let v5 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v6 : string = "($0).timestamp()"
    let v7 : int64 = Fable.Core.Rust.emitExpr v5 v6
    let v8 : string = method1()
    let v9 : string = "$0.as_str()"
    let v10 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v8 v9
    let v11 : string = "std::path::PathBuf::from($0)"
    let v12 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v10 v11
    let struct (v13 : string, v14 : string, v15 : string, v16 : bool) = method0()
    let v17 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v18 : int64 = Fable.Core.Rust.emitExpr v17 v6
    let v19 : string = "($0).canonicalize()"
    let v20 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v12 v19
    let v21 : string = "($0).as_ref().unwrap().to_path_buf()"
    let v22 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v20 v21
    let v23 : string = "path_clean"
    let v24 : string = "($0).to_string()"
    let v25 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v24
    let v26 : Types.EmitType<Types.std.string.String> = v25 |> unbox<Types.EmitType<Types.std.string.String>>
    let v27 : string = "fable_library_rust::String_::fromStr(&format!(\"{}\", $0.display()))"
    let v28 : string = Fable.Core.Rust.emitExpr v22 v27
    let v29 : Types.std.string.String = Fable.Core.Rust.emitExpr v28 v24
    let v30 : Types.EmitType<Types.std.string.String> = v29 |> unbox<Types.EmitType<Types.std.string.String>>
    let v31 : (Types.EmitType<Types.std.string.String> []) = [|v26; v30|]
    let v32 : string = "core::ops::Deref::deref($0)"
    let v33 : obj = Fable.Core.Rust.emitExpr v31 v32
    let v34 : string = "format!(\"{:?}\", ***$0)"
    let v35 : Types.std.string.String = Fable.Core.Rust.emitExpr v33 v34
    let v36 : Types.EmitType<Types.std.string.String> = v35 |> unbox<Types.EmitType<Types.std.string.String>>
    let v37 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v38 : int64 = Fable.Core.Rust.emitExpr v37 v6
    let v39 : int64 = v38 - v18
    let v40 : string = (v39).ToString ()
    let v41 : int32 = 6
    let v42 : string = method2(v41, v40)
    let v43 : string = "rand::random::<u8>()"
    let v44 : uint8 = Fable.Core.Rust.emitExpr () v43
    let v45 : string = "timestamp"
    let v46 : Types.std.string.String = Fable.Core.Rust.emitExpr v45 v24
    let v47 : Types.EmitType<Types.std.string.String> = v46 |> unbox<Types.EmitType<Types.std.string.String>>
    let v48 : Types.std.string.String = Fable.Core.Rust.emitExpr v42 v24
    let v49 : Types.EmitType<Types.std.string.String> = v48 |> unbox<Types.EmitType<Types.std.string.String>>
    let v50 : string = "run_id"
    let v51 : Types.std.string.String = Fable.Core.Rust.emitExpr v50 v24
    let v52 : Types.EmitType<Types.std.string.String> = v51 |> unbox<Types.EmitType<Types.std.string.String>>
    let v53 : string = "format!(\"{:?}\", $0)"
    let v54 : Types.std.string.String = Fable.Core.Rust.emitExpr v44 v53
    let v55 : Types.EmitType<Types.std.string.String> = v54 |> unbox<Types.EmitType<Types.std.string.String>>
    let v56 : string = "log_level"
    let v57 : Types.std.string.String = Fable.Core.Rust.emitExpr v56 v24
    let v58 : Types.EmitType<Types.std.string.String> = v57 |> unbox<Types.EmitType<Types.std.string.String>>
    let v59 : string = "Debug"
    let v60 : Types.std.string.String = Fable.Core.Rust.emitExpr v59 v24
    let v61 : Types.EmitType<Types.std.string.String> = v60 |> unbox<Types.EmitType<Types.std.string.String>>
    let v62 : (Types.EmitType<Types.std.string.String> []) = [|v47; v49; v52; v55; v58; v61|]
    let v63 : obj = Fable.Core.Rust.emitExpr v62 v32
    let v64 : Types.std.string.String = Fable.Core.Rust.emitExpr v63 v34
    let v65 : Types.EmitType<Types.std.string.String> = v64 |> unbox<Types.EmitType<Types.std.string.String>>
    let v66 : string = "> read_lines ()"
    let v67 : Types.std.string.String = Fable.Core.Rust.emitExpr v66 v24
    let v68 : Types.EmitType<Types.std.string.String> = v67 |> unbox<Types.EmitType<Types.std.string.String>>
    let v69 : (Types.EmitType<Types.std.string.String> []) = [|v68|]
    let v70 : obj = Fable.Core.Rust.emitExpr v69 v32
    let v71 : Types.std.string.String = Fable.Core.Rust.emitExpr v70 v34
    let v72 : Types.EmitType<Types.std.string.String> = v71 |> unbox<Types.EmitType<Types.std.string.String>>
    let v73 : Types.std.string.String = v72 |> unbox
    let v74 : string = "fable_library_rust::String_::fromStr($0)"
    let v75 : string = Fable.Core.Rust.emitExpr v73 v74
    let v76 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v77 : string = $"r#\"{v76}\"#"
    let v78 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v77
    let v79 : string = "regex::RegexBuilder::new($0)"
    let v80 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v78 v79
    let v81 : string = "$0.build().unwrap()"
    let v82 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v80 v81
    let v83 : string = method3(v75)
    let v84 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v83 v9
    let v85 : string = method4()
    let v86 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v85 v9
    let v87 : string = "$0.replace_all(&$1, $2).to_string()"
    let v88 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v82, v84, v86) v87
    let v89 : string = Fable.Core.Rust.emitExpr v88 v74
    let v90 : string = "\\[\"(.*?)\"\\]"
    let v91 : string = $"r#\"{v90}\"#"
    let v92 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v91
    let v93 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v92 v79
    let v94 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v93 v81
    let v95 : string = method3(v89)
    let v96 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v95 v9
    let v97 : string = method5()
    let v98 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v97 v9
    let v99 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v94, v96, v98) v87
    let v100 : string = Fable.Core.Rust.emitExpr v99 v74
    let v101 : string = ", "
    let v102 : string = $"r#\"{v101}\"#"
    let v103 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v102
    let v104 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v103 v79
    let v105 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v104 v81
    let v106 : string = method3(v100)
    let v107 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v106 v9
    let v108 : string = method6()
    let v109 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v108 v9
    let v110 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v105, v107, v109) v87
    let v111 : string = Fable.Core.Rust.emitExpr v110 v74
    let v112 : Types.std.string.String = Fable.Core.Rust.emitExpr v111 v24
    let v113 : Types.EmitType<Types.std.string.String> = v112 |> unbox<Types.EmitType<Types.std.string.String>>
    let v114 : string = "purple"
    let v115 : string = "colored::Colorize::color(&*$0, $1.to_string())"
    let v116 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v113, v114) v115
    let v117 : string = "format!(\"{}\", $0)"
    let v118 : Types.std.string.String = Fable.Core.Rust.emitExpr v116 v117
    let v119 : Types.std.string.String = v36 |> unbox
    let v120 : string = Fable.Core.Rust.emitExpr v119 v74
    let v121 : string = $"r#\"{v76}\"#"
    let v122 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v121
    let v123 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v122 v79
    let v124 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v123 v81
    let v125 : string = method3(v120)
    let v126 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v125 v9
    let v127 : string = method4()
    let v128 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v127 v9
    let v129 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v124, v126, v128) v87
    let v130 : string = Fable.Core.Rust.emitExpr v129 v74
    let v131 : string = $"r#\"{v90}\"#"
    let v132 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v131
    let v133 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v132 v79
    let v134 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v133 v81
    let v135 : string = method3(v130)
    let v136 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v135 v9
    let v137 : string = method5()
    let v138 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v137 v9
    let v139 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v134, v136, v138) v87
    let v140 : string = Fable.Core.Rust.emitExpr v139 v74
    let v141 : string = $"r#\"{v101}\"#"
    let v142 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v141
    let v143 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v142 v79
    let v144 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v143 v81
    let v145 : string = method3(v140)
    let v146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v145 v9
    let v147 : string = method6()
    let v148 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v147 v9
    let v149 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v144, v146, v148) v87
    let v150 : string = Fable.Core.Rust.emitExpr v149 v74
    let v151 : Types.std.string.String = Fable.Core.Rust.emitExpr v150 v24
    let v152 : Types.EmitType<Types.std.string.String> = v151 |> unbox<Types.EmitType<Types.std.string.String>>
    let v153 : string = "666666"
    let v154 : string = v153.Substring (0, 2)
    let v155 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v156 : uint8 = Fable.Core.Rust.emitExpr v154 v155
    let v157 : string = v153.Substring (2, 2)
    let v158 : uint8 = Fable.Core.Rust.emitExpr v157 v155
    let v159 : string = v153.Substring (4, 2)
    let v160 : uint8 = Fable.Core.Rust.emitExpr v159 v155
    let v161 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v162 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v152, v156, v158, v160) v161
    let v163 : Types.std.string.String = Fable.Core.Rust.emitExpr v162 v117
    let v164 : Types.std.string.String = v65 |> unbox
    let v165 : string = Fable.Core.Rust.emitExpr v164 v74
    let v166 : string = $"r#\"{v76}\"#"
    let v167 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v166
    let v168 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v167 v79
    let v169 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v168 v81
    let v170 : string = method3(v165)
    let v171 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v170 v9
    let v172 : string = method4()
    let v173 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v172 v9
    let v174 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v169, v171, v173) v87
    let v175 : string = Fable.Core.Rust.emitExpr v174 v74
    let v176 : string = $"r#\"{v90}\"#"
    let v177 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v176
    let v178 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v177 v79
    let v179 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v178 v81
    let v180 : string = method3(v175)
    let v181 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v180 v9
    let v182 : string = method5()
    let v183 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v182 v9
    let v184 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v179, v181, v183) v87
    let v185 : string = Fable.Core.Rust.emitExpr v184 v74
    let v186 : string = $"r#\"{v101}\"#"
    let v187 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v186
    let v188 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v187 v79
    let v189 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v188 v81
    let v190 : string = method3(v185)
    let v191 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v190 v9
    let v192 : string = method6()
    let v193 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v192 v9
    let v194 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v189, v191, v193) v87
    let v195 : string = Fable.Core.Rust.emitExpr v194 v74
    let v196 : Types.std.string.String = Fable.Core.Rust.emitExpr v195 v24
    let v197 : Types.EmitType<Types.std.string.String> = v196 |> unbox<Types.EmitType<Types.std.string.String>>
    let v198 : string = "222222"
    let v199 : string = v198.Substring (0, 2)
    let v200 : uint8 = Fable.Core.Rust.emitExpr v199 v155
    let v201 : string = v198.Substring (2, 2)
    let v202 : uint8 = Fable.Core.Rust.emitExpr v201 v155
    let v203 : string = v198.Substring (4, 2)
    let v204 : uint8 = Fable.Core.Rust.emitExpr v203 v155
    let v205 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v197, v200, v202, v204) v161
    let v206 : Types.std.string.String = Fable.Core.Rust.emitExpr v205 v117
    let v207 : string = $"{v118} {v163} {v206}"
    System.Console.WriteLine v207
    let v208 : string = "std::fs::File::open($0)"
    let v209 : Result<Types.std.fs.File, Types.std.io.Error> = Fable.Core.Rust.emitExpr v22 v208
    let v210 : string = "$0.unwrap()"
    let v211 : Types.Ref<Types.std.fs.File> = Fable.Core.Rust.emitExpr v209 v210
    let v212 : string = "std::cell::RefCell::new(linereader::LineReader::new($0))"
    let v213 : Types.std.cell.RefCell<Types.linereader.LineReader<Types.Ref<Types.std.fs.File>>> = Fable.Core.Rust.emitExpr v211 v212
    let v214 : string = "reader"
    let v215 : Types.std.string.String = Fable.Core.Rust.emitExpr v214 v24
    let v216 : Types.EmitType<Types.std.string.String> = v215 |> unbox<Types.EmitType<Types.std.string.String>>
    let v217 : Types.std.string.String = Fable.Core.Rust.emitExpr v213 v53
    let v218 : Types.EmitType<Types.std.string.String> = v217 |> unbox<Types.EmitType<Types.std.string.String>>
    let v219 : (Types.EmitType<Types.std.string.String> []) = [|v216; v218|]
    let v220 : obj = Fable.Core.Rust.emitExpr v219 v32
    let v221 : Types.std.string.String = Fable.Core.Rust.emitExpr v220 v34
    let v222 : Types.EmitType<Types.std.string.String> = v221 |> unbox<Types.EmitType<Types.std.string.String>>
    let v223 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v224 : int64 = Fable.Core.Rust.emitExpr v223 v6
    let v225 : int64 = v224 - v18
    let v226 : string = (v225).ToString ()
    let v227 : int32 = 6
    let v228 : string = method2(v227, v226)
    let v229 : uint8 = Fable.Core.Rust.emitExpr () v43
    let v230 : Types.std.string.String = Fable.Core.Rust.emitExpr v45 v24
    let v231 : Types.EmitType<Types.std.string.String> = v230 |> unbox<Types.EmitType<Types.std.string.String>>
    let v232 : Types.std.string.String = Fable.Core.Rust.emitExpr v228 v24
    let v233 : Types.EmitType<Types.std.string.String> = v232 |> unbox<Types.EmitType<Types.std.string.String>>
    let v234 : Types.std.string.String = Fable.Core.Rust.emitExpr v50 v24
    let v235 : Types.EmitType<Types.std.string.String> = v234 |> unbox<Types.EmitType<Types.std.string.String>>
    let v236 : Types.std.string.String = Fable.Core.Rust.emitExpr v229 v53
    let v237 : Types.EmitType<Types.std.string.String> = v236 |> unbox<Types.EmitType<Types.std.string.String>>
    let v238 : Types.std.string.String = Fable.Core.Rust.emitExpr v56 v24
    let v239 : Types.EmitType<Types.std.string.String> = v238 |> unbox<Types.EmitType<Types.std.string.String>>
    let v240 : Types.std.string.String = Fable.Core.Rust.emitExpr v59 v24
    let v241 : Types.EmitType<Types.std.string.String> = v240 |> unbox<Types.EmitType<Types.std.string.String>>
    let v242 : (Types.EmitType<Types.std.string.String> []) = [|v231; v233; v235; v237; v239; v241|]
    let v243 : obj = Fable.Core.Rust.emitExpr v242 v32
    let v244 : Types.std.string.String = Fable.Core.Rust.emitExpr v243 v34
    let v245 : Types.EmitType<Types.std.string.String> = v244 |> unbox<Types.EmitType<Types.std.string.String>>
    let v246 : Types.std.string.String = Fable.Core.Rust.emitExpr v66 v24
    let v247 : Types.EmitType<Types.std.string.String> = v246 |> unbox<Types.EmitType<Types.std.string.String>>
    let v248 : (Types.EmitType<Types.std.string.String> []) = [|v247|]
    let v249 : obj = Fable.Core.Rust.emitExpr v248 v32
    let v250 : Types.std.string.String = Fable.Core.Rust.emitExpr v249 v34
    let v251 : Types.EmitType<Types.std.string.String> = v250 |> unbox<Types.EmitType<Types.std.string.String>>
    let v252 : Types.std.string.String = v251 |> unbox
    let v253 : string = Fable.Core.Rust.emitExpr v252 v74
    let v254 : string = $"r#\"{v76}\"#"
    let v255 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v254
    let v256 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v255 v79
    let v257 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v256 v81
    let v258 : string = method3(v253)
    let v259 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v258 v9
    let v260 : string = method4()
    let v261 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v260 v9
    let v262 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v257, v259, v261) v87
    let v263 : string = Fable.Core.Rust.emitExpr v262 v74
    let v264 : string = $"r#\"{v90}\"#"
    let v265 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v264
    let v266 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v265 v79
    let v267 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v266 v81
    let v268 : string = method3(v263)
    let v269 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v268 v9
    let v270 : string = method5()
    let v271 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v270 v9
    let v272 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v267, v269, v271) v87
    let v273 : string = Fable.Core.Rust.emitExpr v272 v74
    let v274 : string = $"r#\"{v101}\"#"
    let v275 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v274
    let v276 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v275 v79
    let v277 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v276 v81
    let v278 : string = method3(v273)
    let v279 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v278 v9
    let v280 : string = method6()
    let v281 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v280 v9
    let v282 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v277, v279, v281) v87
    let v283 : string = Fable.Core.Rust.emitExpr v282 v74
    let v284 : Types.std.string.String = Fable.Core.Rust.emitExpr v283 v24
    let v285 : Types.EmitType<Types.std.string.String> = v284 |> unbox<Types.EmitType<Types.std.string.String>>
    let v286 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v285, v114) v115
    let v287 : Types.std.string.String = Fable.Core.Rust.emitExpr v286 v117
    let v288 : Types.std.string.String = v222 |> unbox
    let v289 : string = Fable.Core.Rust.emitExpr v288 v74
    let v290 : string = $"r#\"{v76}\"#"
    let v291 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v290
    let v292 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v291 v79
    let v293 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v292 v81
    let v294 : string = method3(v289)
    let v295 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v294 v9
    let v296 : string = method4()
    let v297 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v296 v9
    let v298 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v293, v295, v297) v87
    let v299 : string = Fable.Core.Rust.emitExpr v298 v74
    let v300 : string = $"r#\"{v90}\"#"
    let v301 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v300
    let v302 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v301 v79
    let v303 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v302 v81
    let v304 : string = method3(v299)
    let v305 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v304 v9
    let v306 : string = method5()
    let v307 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v306 v9
    let v308 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v303, v305, v307) v87
    let v309 : string = Fable.Core.Rust.emitExpr v308 v74
    let v310 : string = $"r#\"{v101}\"#"
    let v311 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v310
    let v312 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v311 v79
    let v313 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v312 v81
    let v314 : string = method3(v309)
    let v315 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v314 v9
    let v316 : string = method6()
    let v317 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v316 v9
    let v318 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v313, v315, v317) v87
    let v319 : string = Fable.Core.Rust.emitExpr v318 v74
    let v320 : Types.std.string.String = Fable.Core.Rust.emitExpr v319 v24
    let v321 : Types.EmitType<Types.std.string.String> = v320 |> unbox<Types.EmitType<Types.std.string.String>>
    let v322 : string = v153.Substring (0, 2)
    let v323 : uint8 = Fable.Core.Rust.emitExpr v322 v155
    let v324 : string = v153.Substring (2, 2)
    let v325 : uint8 = Fable.Core.Rust.emitExpr v324 v155
    let v326 : string = v153.Substring (4, 2)
    let v327 : uint8 = Fable.Core.Rust.emitExpr v326 v155
    let v328 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v321, v323, v325, v327) v161
    let v329 : Types.std.string.String = Fable.Core.Rust.emitExpr v328 v117
    let v330 : Types.std.string.String = v245 |> unbox
    let v331 : string = Fable.Core.Rust.emitExpr v330 v74
    let v332 : string = $"r#\"{v76}\"#"
    let v333 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v332
    let v334 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v333 v79
    let v335 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v334 v81
    let v336 : string = method3(v331)
    let v337 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v336 v9
    let v338 : string = method4()
    let v339 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v338 v9
    let v340 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v335, v337, v339) v87
    let v341 : string = Fable.Core.Rust.emitExpr v340 v74
    let v342 : string = $"r#\"{v90}\"#"
    let v343 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v342
    let v344 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v343 v79
    let v345 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v344 v81
    let v346 : string = method3(v341)
    let v347 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v346 v9
    let v348 : string = method5()
    let v349 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v348 v9
    let v350 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v345, v347, v349) v87
    let v351 : string = Fable.Core.Rust.emitExpr v350 v74
    let v352 : string = $"r#\"{v101}\"#"
    let v353 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v352
    let v354 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v353 v79
    let v355 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v354 v81
    let v356 : string = method3(v351)
    let v357 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v356 v9
    let v358 : string = method6()
    let v359 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v358 v9
    let v360 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v355, v357, v359) v87
    let v361 : string = Fable.Core.Rust.emitExpr v360 v74
    let v362 : Types.std.string.String = Fable.Core.Rust.emitExpr v361 v24
    let v363 : Types.EmitType<Types.std.string.String> = v362 |> unbox<Types.EmitType<Types.std.string.String>>
    let v364 : string = v198.Substring (0, 2)
    let v365 : uint8 = Fable.Core.Rust.emitExpr v364 v155
    let v366 : string = v198.Substring (2, 2)
    let v367 : uint8 = Fable.Core.Rust.emitExpr v366 v155
    let v368 : string = v198.Substring (4, 2)
    let v369 : uint8 = Fable.Core.Rust.emitExpr v368 v155
    let v370 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v363, v365, v367, v369) v161
    let v371 : Types.std.string.String = Fable.Core.Rust.emitExpr v370 v117
    let v372 : string = $"{v287} {v329} {v371}"
    System.Console.WriteLine v372
    let v373 : UH0 = UH0_1
    let v374 : Mut0 = {l0 = v373} : Mut0
    let v375 : (Types.Vec<uint8> -> Result<bool, Types.std.io.Error>) = method7(v18, v374)
    let v376 : string = "($0).borrow_mut().for_each(move |x| $1(x.to_vec()))"
    let v377 : Result<unit, Types.std.io.Error> = Fable.Core.Rust.emitExpr struct (v213, v375) v376
    let v378 : string = "*(($0).as_ref()).unwrap()"
    Fable.Core.Rust.emitExpr v377 v378
    let v379 : UH0 = v374.l0
    let v380 : UH0 = UH0_1
    let v381 : UH0 = method8(v379, v380)
    let v382 : string = "lines len"
    let v383 : Types.std.string.String = Fable.Core.Rust.emitExpr v382 v24
    let v384 : Types.EmitType<Types.std.string.String> = v383 |> unbox<Types.EmitType<Types.std.string.String>>
    let v385 : int32 = 0
    let v386 : int32 = method9(v381, v385)
    let v387 : Types.std.string.String = Fable.Core.Rust.emitExpr v386 v53
    let v388 : Types.EmitType<Types.std.string.String> = v387 |> unbox<Types.EmitType<Types.std.string.String>>
    let v389 : (Types.EmitType<Types.std.string.String> []) = [|v384; v388|]
    let v390 : obj = Fable.Core.Rust.emitExpr v389 v32
    let v391 : Types.std.string.String = Fable.Core.Rust.emitExpr v390 v34
    let v392 : Types.EmitType<Types.std.string.String> = v391 |> unbox<Types.EmitType<Types.std.string.String>>
    let v393 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v394 : int64 = Fable.Core.Rust.emitExpr v393 v6
    let v395 : int64 = v394 - v18
    let v396 : string = (v395).ToString ()
    let v397 : int32 = 6
    let v398 : string = method2(v397, v396)
    let v399 : uint8 = Fable.Core.Rust.emitExpr () v43
    let v400 : Types.std.string.String = Fable.Core.Rust.emitExpr v45 v24
    let v401 : Types.EmitType<Types.std.string.String> = v400 |> unbox<Types.EmitType<Types.std.string.String>>
    let v402 : Types.std.string.String = Fable.Core.Rust.emitExpr v398 v24
    let v403 : Types.EmitType<Types.std.string.String> = v402 |> unbox<Types.EmitType<Types.std.string.String>>
    let v404 : Types.std.string.String = Fable.Core.Rust.emitExpr v50 v24
    let v405 : Types.EmitType<Types.std.string.String> = v404 |> unbox<Types.EmitType<Types.std.string.String>>
    let v406 : Types.std.string.String = Fable.Core.Rust.emitExpr v399 v53
    let v407 : Types.EmitType<Types.std.string.String> = v406 |> unbox<Types.EmitType<Types.std.string.String>>
    let v408 : Types.std.string.String = Fable.Core.Rust.emitExpr v56 v24
    let v409 : Types.EmitType<Types.std.string.String> = v408 |> unbox<Types.EmitType<Types.std.string.String>>
    let v410 : Types.std.string.String = Fable.Core.Rust.emitExpr v59 v24
    let v411 : Types.EmitType<Types.std.string.String> = v410 |> unbox<Types.EmitType<Types.std.string.String>>
    let v412 : (Types.EmitType<Types.std.string.String> []) = [|v401; v403; v405; v407; v409; v411|]
    let v413 : obj = Fable.Core.Rust.emitExpr v412 v32
    let v414 : Types.std.string.String = Fable.Core.Rust.emitExpr v413 v34
    let v415 : Types.EmitType<Types.std.string.String> = v414 |> unbox<Types.EmitType<Types.std.string.String>>
    let v416 : Types.std.string.String = Fable.Core.Rust.emitExpr v66 v24
    let v417 : Types.EmitType<Types.std.string.String> = v416 |> unbox<Types.EmitType<Types.std.string.String>>
    let v418 : (Types.EmitType<Types.std.string.String> []) = [|v417|]
    let v419 : obj = Fable.Core.Rust.emitExpr v418 v32
    let v420 : Types.std.string.String = Fable.Core.Rust.emitExpr v419 v34
    let v421 : Types.EmitType<Types.std.string.String> = v420 |> unbox<Types.EmitType<Types.std.string.String>>
    let v422 : Types.std.string.String = v421 |> unbox
    let v423 : string = Fable.Core.Rust.emitExpr v422 v74
    let v424 : string = $"r#\"{v76}\"#"
    let v425 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v424
    let v426 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v425 v79
    let v427 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v426 v81
    let v428 : string = method3(v423)
    let v429 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v428 v9
    let v430 : string = method4()
    let v431 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v430 v9
    let v432 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v427, v429, v431) v87
    let v433 : string = Fable.Core.Rust.emitExpr v432 v74
    let v434 : string = $"r#\"{v90}\"#"
    let v435 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v434
    let v436 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v435 v79
    let v437 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v436 v81
    let v438 : string = method3(v433)
    let v439 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v438 v9
    let v440 : string = method5()
    let v441 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v440 v9
    let v442 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v437, v439, v441) v87
    let v443 : string = Fable.Core.Rust.emitExpr v442 v74
    let v444 : string = $"r#\"{v101}\"#"
    let v445 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v444
    let v446 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v445 v79
    let v447 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v446 v81
    let v448 : string = method3(v443)
    let v449 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v448 v9
    let v450 : string = method6()
    let v451 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v450 v9
    let v452 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v447, v449, v451) v87
    let v453 : string = Fable.Core.Rust.emitExpr v452 v74
    let v454 : Types.std.string.String = Fable.Core.Rust.emitExpr v453 v24
    let v455 : Types.EmitType<Types.std.string.String> = v454 |> unbox<Types.EmitType<Types.std.string.String>>
    let v456 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v455, v114) v115
    let v457 : Types.std.string.String = Fable.Core.Rust.emitExpr v456 v117
    let v458 : Types.std.string.String = v392 |> unbox
    let v459 : string = Fable.Core.Rust.emitExpr v458 v74
    let v460 : string = $"r#\"{v76}\"#"
    let v461 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v460
    let v462 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v461 v79
    let v463 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v462 v81
    let v464 : string = method3(v459)
    let v465 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v464 v9
    let v466 : string = method4()
    let v467 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v466 v9
    let v468 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v463, v465, v467) v87
    let v469 : string = Fable.Core.Rust.emitExpr v468 v74
    let v470 : string = $"r#\"{v90}\"#"
    let v471 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v470
    let v472 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v471 v79
    let v473 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v472 v81
    let v474 : string = method3(v469)
    let v475 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v474 v9
    let v476 : string = method5()
    let v477 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v476 v9
    let v478 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v473, v475, v477) v87
    let v479 : string = Fable.Core.Rust.emitExpr v478 v74
    let v480 : string = $"r#\"{v101}\"#"
    let v481 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v480
    let v482 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v481 v79
    let v483 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v482 v81
    let v484 : string = method3(v479)
    let v485 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v484 v9
    let v486 : string = method6()
    let v487 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v486 v9
    let v488 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v483, v485, v487) v87
    let v489 : string = Fable.Core.Rust.emitExpr v488 v74
    let v490 : Types.std.string.String = Fable.Core.Rust.emitExpr v489 v24
    let v491 : Types.EmitType<Types.std.string.String> = v490 |> unbox<Types.EmitType<Types.std.string.String>>
    let v492 : string = v153.Substring (0, 2)
    let v493 : uint8 = Fable.Core.Rust.emitExpr v492 v155
    let v494 : string = v153.Substring (2, 2)
    let v495 : uint8 = Fable.Core.Rust.emitExpr v494 v155
    let v496 : string = v153.Substring (4, 2)
    let v497 : uint8 = Fable.Core.Rust.emitExpr v496 v155
    let v498 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v491, v493, v495, v497) v161
    let v499 : Types.std.string.String = Fable.Core.Rust.emitExpr v498 v117
    let v500 : Types.std.string.String = v415 |> unbox
    let v501 : string = Fable.Core.Rust.emitExpr v500 v74
    let v502 : string = $"r#\"{v76}\"#"
    let v503 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v502
    let v504 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v503 v79
    let v505 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v504 v81
    let v506 : string = method3(v501)
    let v507 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v506 v9
    let v508 : string = method4()
    let v509 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v508 v9
    let v510 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v505, v507, v509) v87
    let v511 : string = Fable.Core.Rust.emitExpr v510 v74
    let v512 : string = $"r#\"{v90}\"#"
    let v513 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v512
    let v514 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v513 v79
    let v515 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v514 v81
    let v516 : string = method3(v511)
    let v517 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v516 v9
    let v518 : string = method5()
    let v519 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v518 v9
    let v520 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v515, v517, v519) v87
    let v521 : string = Fable.Core.Rust.emitExpr v520 v74
    let v522 : string = $"r#\"{v101}\"#"
    let v523 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v522
    let v524 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v523 v79
    let v525 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v524 v81
    let v526 : string = method3(v521)
    let v527 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v526 v9
    let v528 : string = method6()
    let v529 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v528 v9
    let v530 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v525, v527, v529) v87
    let v531 : string = Fable.Core.Rust.emitExpr v530 v74
    let v532 : Types.std.string.String = Fable.Core.Rust.emitExpr v531 v24
    let v533 : Types.EmitType<Types.std.string.String> = v532 |> unbox<Types.EmitType<Types.std.string.String>>
    let v534 : string = v198.Substring (0, 2)
    let v535 : uint8 = Fable.Core.Rust.emitExpr v534 v155
    let v536 : string = v198.Substring (2, 2)
    let v537 : uint8 = Fable.Core.Rust.emitExpr v536 v155
    let v538 : string = v198.Substring (4, 2)
    let v539 : uint8 = Fable.Core.Rust.emitExpr v538 v155
    let v540 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v533, v535, v537, v539) v161
    let v541 : Types.std.string.String = Fable.Core.Rust.emitExpr v540 v117
    let v542 : string = $"{v457} {v499} {v541}"
    System.Console.WriteLine v542
    let v543 : string = ""
    let v544 : string = method10(v381, v543)
    let v545 : string = "text len"
    let v546 : Types.std.string.String = Fable.Core.Rust.emitExpr v545 v24
    let v547 : Types.EmitType<Types.std.string.String> = v546 |> unbox<Types.EmitType<Types.std.string.String>>
    let v548 : string = "($0).len().try_into().unwrap()"
    let v549 : int32 = Fable.Core.Rust.emitExpr v544 v548
    let v550 : Types.std.string.String = Fable.Core.Rust.emitExpr v549 v53
    let v551 : Types.EmitType<Types.std.string.String> = v550 |> unbox<Types.EmitType<Types.std.string.String>>
    let v552 : (Types.EmitType<Types.std.string.String> []) = [|v547; v551|]
    let v553 : obj = Fable.Core.Rust.emitExpr v552 v32
    let v554 : Types.std.string.String = Fable.Core.Rust.emitExpr v553 v34
    let v555 : Types.EmitType<Types.std.string.String> = v554 |> unbox<Types.EmitType<Types.std.string.String>>
    let v556 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v557 : int64 = Fable.Core.Rust.emitExpr v556 v6
    let v558 : int64 = v557 - v7
    let v559 : string = (v558).ToString ()
    let v560 : int32 = 6
    let v561 : string = method2(v560, v559)
    let v562 : uint8 = Fable.Core.Rust.emitExpr () v43
    let v563 : Types.std.string.String = Fable.Core.Rust.emitExpr v45 v24
    let v564 : Types.EmitType<Types.std.string.String> = v563 |> unbox<Types.EmitType<Types.std.string.String>>
    let v565 : Types.std.string.String = Fable.Core.Rust.emitExpr v561 v24
    let v566 : Types.EmitType<Types.std.string.String> = v565 |> unbox<Types.EmitType<Types.std.string.String>>
    let v567 : Types.std.string.String = Fable.Core.Rust.emitExpr v50 v24
    let v568 : Types.EmitType<Types.std.string.String> = v567 |> unbox<Types.EmitType<Types.std.string.String>>
    let v569 : Types.std.string.String = Fable.Core.Rust.emitExpr v562 v53
    let v570 : Types.EmitType<Types.std.string.String> = v569 |> unbox<Types.EmitType<Types.std.string.String>>
    let v571 : Types.std.string.String = Fable.Core.Rust.emitExpr v56 v24
    let v572 : Types.EmitType<Types.std.string.String> = v571 |> unbox<Types.EmitType<Types.std.string.String>>
    let v573 : Types.std.string.String = Fable.Core.Rust.emitExpr v59 v24
    let v574 : Types.EmitType<Types.std.string.String> = v573 |> unbox<Types.EmitType<Types.std.string.String>>
    let v575 : (Types.EmitType<Types.std.string.String> []) = [|v564; v566; v568; v570; v572; v574|]
    let v576 : obj = Fable.Core.Rust.emitExpr v575 v32
    let v577 : Types.std.string.String = Fable.Core.Rust.emitExpr v576 v34
    let v578 : Types.EmitType<Types.std.string.String> = v577 |> unbox<Types.EmitType<Types.std.string.String>>
    let v579 : string = "> app ()"
    let v580 : Types.std.string.String = Fable.Core.Rust.emitExpr v579 v24
    let v581 : Types.EmitType<Types.std.string.String> = v580 |> unbox<Types.EmitType<Types.std.string.String>>
    let v582 : (Types.EmitType<Types.std.string.String> []) = [|v581|]
    let v583 : obj = Fable.Core.Rust.emitExpr v582 v32
    let v584 : Types.std.string.String = Fable.Core.Rust.emitExpr v583 v34
    let v585 : Types.EmitType<Types.std.string.String> = v584 |> unbox<Types.EmitType<Types.std.string.String>>
    let v586 : Types.std.string.String = v585 |> unbox
    let v587 : string = Fable.Core.Rust.emitExpr v586 v74
    let v588 : string = $"r#\"{v76}\"#"
    let v589 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v588
    let v590 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v589 v79
    let v591 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v590 v81
    let v592 : string = method3(v587)
    let v593 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v592 v9
    let v594 : string = method4()
    let v595 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v594 v9
    let v596 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v591, v593, v595) v87
    let v597 : string = Fable.Core.Rust.emitExpr v596 v74
    let v598 : string = $"r#\"{v90}\"#"
    let v599 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v598
    let v600 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v599 v79
    let v601 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v600 v81
    let v602 : string = method3(v597)
    let v603 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v602 v9
    let v604 : string = method5()
    let v605 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v604 v9
    let v606 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v601, v603, v605) v87
    let v607 : string = Fable.Core.Rust.emitExpr v606 v74
    let v608 : string = $"r#\"{v101}\"#"
    let v609 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v608
    let v610 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v609 v79
    let v611 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v610 v81
    let v612 : string = method3(v607)
    let v613 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v612 v9
    let v614 : string = method6()
    let v615 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v614 v9
    let v616 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v611, v613, v615) v87
    let v617 : string = Fable.Core.Rust.emitExpr v616 v74
    let v618 : Types.std.string.String = Fable.Core.Rust.emitExpr v617 v24
    let v619 : Types.EmitType<Types.std.string.String> = v618 |> unbox<Types.EmitType<Types.std.string.String>>
    let v620 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v619, v114) v115
    let v621 : Types.std.string.String = Fable.Core.Rust.emitExpr v620 v117
    let v622 : Types.std.string.String = v555 |> unbox
    let v623 : string = Fable.Core.Rust.emitExpr v622 v74
    let v624 : string = $"r#\"{v76}\"#"
    let v625 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v624
    let v626 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v625 v79
    let v627 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v626 v81
    let v628 : string = method3(v623)
    let v629 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v628 v9
    let v630 : string = method4()
    let v631 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v630 v9
    let v632 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v627, v629, v631) v87
    let v633 : string = Fable.Core.Rust.emitExpr v632 v74
    let v634 : string = $"r#\"{v90}\"#"
    let v635 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v634
    let v636 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v635 v79
    let v637 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v636 v81
    let v638 : string = method3(v633)
    let v639 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v638 v9
    let v640 : string = method5()
    let v641 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v640 v9
    let v642 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v637, v639, v641) v87
    let v643 : string = Fable.Core.Rust.emitExpr v642 v74
    let v644 : string = $"r#\"{v101}\"#"
    let v645 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v644
    let v646 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v645 v79
    let v647 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v646 v81
    let v648 : string = method3(v643)
    let v649 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v648 v9
    let v650 : string = method6()
    let v651 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v650 v9
    let v652 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v647, v649, v651) v87
    let v653 : string = Fable.Core.Rust.emitExpr v652 v74
    let v654 : Types.std.string.String = Fable.Core.Rust.emitExpr v653 v24
    let v655 : Types.EmitType<Types.std.string.String> = v654 |> unbox<Types.EmitType<Types.std.string.String>>
    let v656 : string = v153.Substring (0, 2)
    let v657 : uint8 = Fable.Core.Rust.emitExpr v656 v155
    let v658 : string = v153.Substring (2, 2)
    let v659 : uint8 = Fable.Core.Rust.emitExpr v658 v155
    let v660 : string = v153.Substring (4, 2)
    let v661 : uint8 = Fable.Core.Rust.emitExpr v660 v155
    let v662 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v655, v657, v659, v661) v161
    let v663 : Types.std.string.String = Fable.Core.Rust.emitExpr v662 v117
    let v664 : Types.std.string.String = v578 |> unbox
    let v665 : string = Fable.Core.Rust.emitExpr v664 v74
    let v666 : string = $"r#\"{v76}\"#"
    let v667 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v666
    let v668 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v667 v79
    let v669 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v668 v81
    let v670 : string = method3(v665)
    let v671 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v670 v9
    let v672 : string = method4()
    let v673 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v672 v9
    let v674 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v669, v671, v673) v87
    let v675 : string = Fable.Core.Rust.emitExpr v674 v74
    let v676 : string = $"r#\"{v90}\"#"
    let v677 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v676
    let v678 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v677 v79
    let v679 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v678 v81
    let v680 : string = method3(v675)
    let v681 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v680 v9
    let v682 : string = method5()
    let v683 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v682 v9
    let v684 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v679, v681, v683) v87
    let v685 : string = Fable.Core.Rust.emitExpr v684 v74
    let v686 : string = $"r#\"{v101}\"#"
    let v687 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v686
    let v688 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v687 v79
    let v689 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v688 v81
    let v690 : string = method3(v685)
    let v691 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v690 v9
    let v692 : string = method6()
    let v693 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v692 v9
    let v694 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v689, v691, v693) v87
    let v695 : string = Fable.Core.Rust.emitExpr v694 v74
    let v696 : Types.std.string.String = Fable.Core.Rust.emitExpr v695 v24
    let v697 : Types.EmitType<Types.std.string.String> = v696 |> unbox<Types.EmitType<Types.std.string.String>>
    let v698 : string = v198.Substring (0, 2)
    let v699 : uint8 = Fable.Core.Rust.emitExpr v698 v155
    let v700 : string = v198.Substring (2, 2)
    let v701 : uint8 = Fable.Core.Rust.emitExpr v700 v155
    let v702 : string = v198.Substring (4, 2)
    let v703 : uint8 = Fable.Core.Rust.emitExpr v702 v155
    let v704 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v697, v699, v701, v703) v161
    let v705 : Types.std.string.String = Fable.Core.Rust.emitExpr v704 v117
    let v706 : string = $"{v621} {v663} {v705}"
    System.Console.WriteLine v706
    0
let v0 : (unit -> int32) = closure0()
()
