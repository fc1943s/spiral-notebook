open rust.util


inl for_each forall a. (fn : a -> result' bool io_error) (reader : ref_cell _) : result' () io_error =
    emit_expr (reader, join fn) $"\"($0).borrow_mut().for_each(move |x| $1(x.to_vec()))\""

inl read_lines (path : path_buf) : list string =
    inl get_locals () = !!(;[
        !!"> read_lines ()" : log_item
    ])
    inl log = new_log (fun () => Debug) get_locals "666666"

    inl path_clean = path |> path_canonicalize
    log Debug !!(;[!!"path_clean"; !!(path_clean |> path_display) : log_item])

    inl file : result' file io_error = emit_expr path_clean "std::fs::File::open($0)"
    inl file : ref' file = !!file

    inl reader : ref_cell (linereader (ref' file)) = emit_expr file "std::cell::RefCell::new(linereader::LineReader::new($0))"
    log Debug !!(;[!!"reader"; !!reader : log_item])

    inl lines_list : mut (list std_string) = mut Nil

    (reader
        |> for_each fun (line : vec u8) =>
            log Verbose !!(;[!!"line len"; !!(line |> len) : log_item])
            lines_list <- (line |> from_utf8) :: *lines_list
            $"Ok true"
        |> (~!!) : unit')
    |> ignore

    inl lines =
        *lines_list
        |> listm.rev
        |> listm.map to_string''

    log Debug !!(;[!!"lines len"; !!(lines |> listm.length : i32) : log_item])

    lines

inl app () =
    inl get_locals () = !!(;[
        !!"> app ()" : log_item
    ])
    inl log = new_log (fun () => Debug) get_locals "666666"

    inl name, sub_matches : ref' str * ref' clap_arg_matches =
        new_clap_command "app1"
        |> add_clap_subcommand (
            new_clap_command "PostFsxRsBuild"
            |> add_clap_arg (new_clap_arg "rs-path")
        )
        |> add_clap_subcommand (
            new_clap_command "SpiFsxBuild"
            |> add_clap_arg (new_clap_arg "spi-path")
            |> add_clap_arg (new_clap_arg "fsx-path")
        )
        |> get_clap_matches
        |> matches_subcommand
        |> unwrap_as_ref

    inl rs_path = sub_matches |> get_clap_one "rs-path" |> to_path_buf
    inl rs_path_clean = rs_path |> path_canonicalize

    log Debug !!(;[!!"rs_path_clean"; !!rs_path_clean : log_item])

    inl lines = read_lines rs_path_clean

    inl lines =
        lines
        |> listm.fold
            fun (i, acc) line =>
                match i with
                | _ when line |> string_contains "/node_modules/" =>
                    log Debug !!(;[!!"found line. removing."; !!" line"; !!line : log_item])
                    1, acc
                | 0 => 0, line :: acc
                | 2 => 0, acc
                | _ => i + 1, acc
            (0i32, (Nil : list string))
        |> snd
        |> listm.rev

    inl text = lines |> listm.fold (+\) ""

    log Debug !!(;[!!"text len"; !!(text |> len) : log_item])

    (!!(fs_write rs_path_clean text) : unit') |> ignore
    log Debug !!"> fs_write rs_path_clean text; ok"

    0i32


inl main () =
    print_static "<cli>"

    app
    |> dyn
    |> ignore

    print_static "</cli>"
