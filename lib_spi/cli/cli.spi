open rust.util


inl post_fsx_rs_build (rs_path : ref' std_string) =
    inl get_locals () = ;[!>"> post_fsx_rs_build ()"]
    inl log = new_log UnknownRustTarget (fun () => Debug) get_locals "666666"

    inl rs_path = rs_path |> to_path_buf
    inl rs_path_clean = rs_path |> path_canonicalize

    log Debug ;[!>"rs_path_clean"; !>rs_path_clean]

    inl lines = read_lines rs_path_clean

    inl lines =
        lines
        |> listm.fold
            fun (i, acc) line =>
                match i with
                | _ when
                        (line |> string_contains "/node_modules/") &&
                        (line |> string_contains ".cs") =>
                    log Debug ;[!>"found line. removing."; !>" line"; !>line]
                    1, acc
                | 0 => 0, line :: acc
                | 2 => 0, acc
                | _ => i + 1, acc
            (0i32, (Nil : list string))
        |> snd
        |> listm.rev

    inl text = lines |> listm.fold (+\) ""

    log Debug ;[!>"text len"; !>(text |> len)]

    (!!(fs_write rs_path_clean text) : unit') |> ignore
    log Debug ;[!>"> fs_write rs_path_clean text; ok"]


inl app () =
    inl get_locals () = ;[!>"> app ()"]
    inl log = new_log UnknownRustTarget (fun () => Debug) get_locals "387957"

    inl name, sub_matches : ref' str * ref' clap_arg_matches =
        new_clap_command "app1"
        |> add_clap_subcommand (
            new_clap_command "PostFsxRsBuild"
            |> add_clap_arg (new_clap_arg "rs-path")
        )
        |> add_clap_subcommand (
            new_clap_command "SpiFsxBuild"
            |> add_clap_arg (new_clap_arg "spi-path")
            |> add_clap_arg (new_clap_arg "fsx-path")
        )
        |> get_clap_matches
        |> matches_subcommand
        |> unwrap_as_ref

    match name |> to_string''' with
    | "PostFsxRsBuild" =>
        inl rs_path = sub_matches |> get_clap_one "rs-path"
        post_fsx_rs_build rs_path
    | "SpiFsxBuild" =>
        // inl spi_path = sub_matches |> get_clap_one "spi-path"
        // inl fsx_path = sub_matches |> get_clap_one "fsx-path"
        // spi_fsx_build spi_path fsx_path
        ()
    | _ => ()

    0i32


inl main () =
    print_static "<cli>"

    app
    |> dyn
    |> ignore

    print_static "</cli>"
