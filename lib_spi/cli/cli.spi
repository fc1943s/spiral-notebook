open rust.util


union cli_source_status =
    | Search
    | FirstLine
    | SecondLine
    | ThirdLine

//     fn read_lines(path: &str) -> Vec<String> {
//         let file = std::fs::File::open(path).unwrap();
//         let mut reader = linereader::LineReader::new(file);
//         println!("reader={:?}", reader);
//         let mut lines = vec![];
//         reader.for_each(|line| {
//             lines.push(line.to_vec());
//             Ok(true)
//         }).unwrap();
//         let lines = lines.iter().map(|line| String::from_utf8(line.clone()).unwrap());
//         println!("lines={:?}", lines);
//         lines.collect()
//    }

inl for_each forall a. (fn : a -> result' bool io_error) (reader : ref_cell _) : result' () io_error =
    emit_expr (reader, join fn) $"\"($0).borrow_mut().for_each(move |x| $1(x.to_vec()))\""

inl from_utf8 (v : vec u8) : std_string =
    emit_expr v "std::string::String::from_utf8(($0).to_owned()).unwrap()"

inl read_lines (path : path_buf) : a i32 string =
    inl get_locals () = !!(;[
        !!"> read_lines ()" : log_item
    ])
    inl log = new_log (fun () => Debug) get_locals console_fsx.write_line "666666"

    inl path_clean = path |> path_canonicalize
    log Debug !!(;[
        !!"path_clean:"; !!(path_clean |> path_display) : log_item
    ])

    inl file : result' file io_error = emit_expr path_clean "std::fs::File::open($0)"
    inl file : ref' file = !!file

    inl reader : ref_cell (linereader (ref' file)) = emit_expr file "std::cell::RefCell::new(linereader::LineReader::new($0))"
    log Debug !!(;[!!"reader:"; !!reader : log_item])

    inl lines_list : mut (list std_string) = mut Nil

    (reader
        |> for_each fun (line : vec u8) =>
            // log Debug !!(;[!!"line.len():"; !!(line |> len) : log_item])
            lines_list <- (line |> from_utf8) :: *lines_list
            $"Ok true"
        |> (~!!) : unit')
    |> ignore

    // log Debug !!(;[!!"lines_list:"; !!lines_list : log_item])

    inl lines : string =
        *lines_list
        |> listm.rev
        |> listm.fold
            fun acc x =>
                inl x = x
                $"$\"{!acc}{!x}\""
            ""

    log Debug !!(;[!!"lines:"; !!lines : log_item])

    a ;[]

inl app () =
    inl get_locals () = !!(;[
        !!"> app ()" : log_item
    ])
    inl log = new_log (fun () => Debug) get_locals console_fsx.write_line "666666"

    inl lines = read_lines ("./cli.rs" |> as_str |> to_path_buf)

    log Debug !!(;[
        !!"lines:"; !!lines : log_item
    ])

        // let text = lines.clone().into_iter().collect::<String>();
        // println!("text={:?}", text);

        // let new_lines: ([_; 0], CliSourceStatus) = lines
        //     .into_iter()
        //     .fold(([], crate::cli::Cli::CliSourceStatus::Search), |(acc, status), line| -> ([_; 0], CliSourceStatus) {
        //         if line == r#"#[path = "./node_modules/node-gyp/lib/Find-VisualStudio.cs"]"# {
        //             let s = crate::cli::Cli::CliSourceStatus::FirstLine;
        //             //acc.push((line, s));
        //             (acc, s)
        //         } else {
        //             let s = crate::cli::Cli::CliSourceStatus::Search;
        //             //acc.push((line, s));
        //             (acc, s)
        //         }
        //     });

    0i32


inl main () =
    print_static "<cli>"

    app
    |> dyn
    |> ignore

    print_static "</cli>"
