open real_js
open real_util


instance to_string any = to_string'

inl to_any forall a. (obj : a) : any =
    real real_to_any `a obj

inl stringify forall a. (obj : a) : string =
    real real_stringify `a obj

let new_log
    (get_log_level : () -> log_level_type)
    (obj_fn : () -> array any)
    (color : string)
    : log_level_type -> array any -> ()
    =
    inl env : env = real get_env ()
    inl start_timestamp : i64 = ticks ()
    fun log_level (args : array any) : () =>
        if ((real real_core.union_tag (get_log_level ())) : i32) <= real real_core.union_tag log_level then
            inl new_ticks : i64 = ticks ()
            inl new_timestamp () : i64 = new_ticks - start_timestamp
            inl timestamp : string = new_timestamp () |> to_any |> to_string
            inl timestamp : string = pad 6 timestamp
            inl run_id : i32 = $"emitJsExpr () \"components_spi.run_id\""
            inl locals : array any = ;[
                "timestamp:" |> to_any
                timestamp |> to_any
                "run_id:" |> to_any
                run_id |> to_any
            ]
            inl obj_json : string = stringify (obj_fn ())
            inl args_json : string = stringify args
            inl locals_json : string = stringify locals
            inl new_args =
                if env.is_test then
                    args_json,
                    obj_json,
                    locals_json,
                    "",
                    ""
                else
                    "%c%s %c%s",
                    ($"$\"font-weight: bold; color: {!color}\"" : string),
                    args_json,
                    "font-weight: bold; color: #444",
                    $"$\"{!obj_json} {!locals_json}\""
            $"emitJsExpr () $\"console.log.apply(console, {!new_args})\"" : ()
