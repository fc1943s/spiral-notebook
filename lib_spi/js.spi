open real_js
open real_util


nominal js_function = $"Fable.Core.JS.Function"


inl import (name : string) (module : string) : js_function =
    $"Fable.Core.JsInterop.import !name !module"

inl import_default (module : string) : js_function =
    $"Fable.Core.JsInterop.importDefault !module"

inl import_side_effects (module : string) : () =
    $"Fable.Core.JsInterop.importSideEffects !module"

inl create_obj (obj : a i32 (pair string any)) : any =
    $"Fable.Core.JsInterop.createObj !obj"

inl json_parse forall a. (json : string) : a =
    $"Fable.Core.JS.JSON.parse !json"

inl json_stringify forall a. (obj : a) : string =
    $"Fable.Core.JS.JSON.stringify !obj"

inl json_stringify_space forall a. (obj : a) : string =
    $"Fable.Core.JsInterop.emitJsExpr !obj \"JSON.stringify($0, null, 2)\""

inl js_null forall t. () : t =
    $"Fable.Core.JsInterop.emitJsExpr () \"null\""

inl undefined forall t. () : t =
    $"Fable.Core.JS.undefined"

inl is_empty forall a. (obj : a) : bool =
    $"Fable.Core.JsInterop.emitJsExpr !obj \"\!$0\""

inl create_new (o : js_function) (args : any) : any =
    $"Fable.Core.JsInterop.createNew !o !args"

instance to_string any = to_string'

instance (~!!) any = to_any

nominal promise t = $"Fable.Core.JS.Promise<`t>"

inl promise_create forall t. (fn : ((t -> ()) -> (exn -> ()) -> ())) : promise t =
    $"Promise.create !fn"

inl promise_lift forall t. (a : t) : promise t =
    $"Promise.lift !a"

inl promise_reject forall t. (reason : exn) : promise t =
    $"Promise.reject !reason"

inl promise_bind forall t1 t2. (a : t1 -> promise t2) (pr : promise t1) : promise t2 =
    $"!pr |> Promise.bind !a"

inl promise_map forall t1 t2. (fn : t1 -> t2) (p : promise t1) : promise t2 =
    $"!p |> Promise.map !fn"

inl promise_iter forall t. (fn : t -> ()) (p : promise t) : () =
    $"!p |> Promise.iter !fn"

inl promise_tap forall t. (fn : t -> ()) (p : promise t) : promise t =
    $"!p |> Promise.tap !fn"

inl promise_catch forall t. (fn : exn -> t) (p : promise t) : promise t =
    $"!p |> Promise.catch !fn"

inl promise_catch_bind forall t. (fn : exn -> promise t) (p : promise t) : promise t =
    $"!p |> Promise.catchBind !fn"

inl promise_catch_end forall t. (fn : exn -> ()) (p : promise t) : () =
    $"!p |> Promise.catchEnd !fn"

inl promise_either forall t1 t2. (success : t1 -> t2) (fail : exn -> t2) (p : promise t1) : promise t2 =
    $"!p |> Promise.either !success !fail"

inl promise_either_bind forall t1 t2.
    (success : t1 -> promise t2)
    (fail : exn -> promise t2)
    (p : promise t1)
    : promise t2
    =
    $"!p |> Promise.eitherBind !success !fail"

inl promise_either_end forall t1 t2.
    (success : t1 -> t2)
    (fail : exn -> t2)
    (p : promise t1)
    : promise t2
    =
    $"!p |> Promise.eitherEnd !success !fail"

inl promise_start forall t. (p : promise t) : () =
    $"!p |> Promise.start"

inl promise_try_start forall t. (fail : exn -> ()) (p : promise t) : () =
    $"!p |> Promise.tryStart !fail"

inl promise_parallel forall t. (p : a i32 (promise t)) : promise (a i32 t) =
    $"!p |> Promise.Parallel"

inl promise_all forall t. (p : a i32 (promise t)) : promise (a i32 t) =
    $"!p |> Promise.all"

inl async_start_as_promise_ () = import "startAsPromise" "../../lib_ts/fable_modules/fable-library-ts/Async.ts"

inl async_start_as_promise forall t. (obj : async t) : promise t =
    inl async_start_as_promise' = async_start_as_promise_ ()
    ($"!async_start_as_promise'.Invoke !obj" : any) |> real real_unbox `any `(promise t)


inl object_keys forall t. (obj : t) : a i32 string = $"Fable.Core.JS.Constructors.Object.keys !obj |> unbox<`string[]>"
inl object_values obj : a i32 string = $"Fable.Core.JS.Constructors.Object.values !obj"
inl object_entries obj : a i32 string = $"Fable.Core.JS.Constructors.Object.entries !obj"
inl object_assign forall a. (target : a) source : a = $"Fable.Core.JS.Constructors.Object.assign (!target, [| !target |])"

inl set_timeout (callback : () -> ()) (ms : i32) : i32 = $"Fable.Core.JS.setTimeout !callback !ms"
inl clear_timeout (token : i32) : () = $"Fable.Core.JS.clearTimeout !token"
inl set_interval (callback : () -> ()) (ms : i32) : i32 = $"Fable.Core.JS.setInterval !callback !ms"
inl clear_interval (token : i32) : () = $"Fable.Core.JS.clearInterval !token"

inl js_get (obj : any) (key : string) : any =
    $"(Fable.Core.JsInterop.(?)) !obj !key"

type env =
    {
        env : any
        codespace_name : string
        github_run_id : string
        github_sha : string
        is_test : bool
    }
let get_env () : env =
    inl env : any = ($"Fable.Core.JsInterop.emitJsExpr () \"components.env\"" : any)

    inl codespace_name = $"Fable.Core.JsInterop.emitJsExpr !env \"$0.CODESPACE_NAME || \\\"\\\"\"" : string
    inl github_run_id = $"Fable.Core.JsInterop.emitJsExpr !env \"$0.GITHUB_RUN_ID || \\\"\\\"\"" : string
    inl github_sha = $"Fable.Core.JsInterop.emitJsExpr !env \"$0.GITHUB_SHA || \\\"\\\"\"" : string
    inl is_test =
        inl is_test' : any = js_get env "IS_TEST"
        inl is_test' : bool = is_empty is_test'
        not is_test'

    {
        env
        codespace_name
        github_run_id
        github_sha
        is_test
    } : env

inl track_time forall a. (name : string) (n : i32) (fn : () -> a) : a =
    $"Fable.Core.JS.console.time !name" : ()

    inl result =
        loop.for
            {from = 0i32; nearTo = n}
            fun _ _ => fn ()
            (undefined ())

    $"Fable.Core.JS.console.timeEnd !name" : ()

    result

let new_log
    (get_log_level : () -> log_level_type)
    (obj_fn : () -> array any)
    (color : string)
    : log_level_type -> array any -> ()
    =
    inl env : env = real get_env ()
    inl start_timestamp : i64 = ticks ()
    fun log_level (args : array any) : () =>
        if ((real real_core.union_tag (get_log_level ())) : i32) <= real real_core.union_tag log_level then
            inl new_timestamp () : i64 = ticks () - start_timestamp
            inl timestamp : string = new_timestamp () |> to_string'
            inl timestamp : string = pad 6 timestamp
            inl run_id : i32 = $"Fable.Core.JsInterop.emitJsExpr () \"components.run_id\""
            inl locals : array any = ;[
                !!("timestamp:", timestamp)
                !!("run_id:", run_id)
            ]
            inl obj_json : string = json_stringify (obj_fn ())
            inl args_json : string = json_stringify args
            inl locals_json : string = json_stringify locals
            inl new_args =
                if env.is_test then
                    args_json,
                    obj_json,
                    locals_json,
                    "",
                    ""
                else
                    "%c%s %c%s",
                    ($"$\"font-weight: bold; color: {!color}\"" : string),
                    args_json,
                    "font-weight: bold; color: #444",
                    $"$\"{!obj_json} {!locals_json}\""
            $"Fable.Core.JsInterop.emitJsExpr () $\"console.log.apply(console, {!new_args})\"" : ()
