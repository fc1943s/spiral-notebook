type [<Struct>] US0 =
    | US0_0
    | US0_1 of f1_0 : string
and Mut0 = {mutable l0 : int32; mutable l1 : US0}
let rec method0 () : struct (string * string * string * bool) =
    let v0 : string = ""
    let v1 : obj = v0
    struct (v0, v0, v0, true)
and method1 (v0 : int32, v1 : string) : string =
    let v2 : int32 = String.length v1
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : string = $"0{v1}"
        method1(v0, v4)
    else
        v1
and method2 (v0 : string) : string =
    v0
and method3 () : string =
    let v0 : string = "$1=$2"
    v0
and method4 () : string =
    let v0 : string = "[$1]"
    v0
and method5 () : string =
    let v0 : string = " "
    v0
and method6 () : string =
    let v0 : string = "de884c"
    v0
and method7 () : string =
    let v0 : string = "222222"
    v0
and closure2 () (v0 : Types.Ref<Types.std.path.Path>) : Types.std.path.PathBuf =
    let v1 : string = "package.spiproj"
    let v2 : string = "$1.join($0.as_str())"
    let v3 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr struct (v1, v0) v2
    v3
and closure3 () (v0 : Types.Ref<Types.std.path.PathBuf>) : bool =
    let v1 : string = "std::path::Path::exists($0)"
    let v2 : bool = Fable.Core.Rust.emitExpr v0 v1
    v2
and method8 () : string =
    let v0 : string = "e36a62"
    v0
and method9 () : string =
    let v0 : string = "fcfb1b"
    v0
and method10 () : string =
    let v0 : string = "98d5ef"
    v0
and method11 () : string =
    let v0 : string = "387957"
    v0
and method12 (v0 : int32, v1 : Mut0) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and closure1 (v0 : Types.std.path.PathBuf) (v1 : Option<Types.std.path.PathBuf>) : string =
    let struct (v2 : string, v3 : string, v4 : string, v5 : bool) = method0()
    let v6 : string = "chrono::Utc::now()"
    let v7 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v8 : string = "($0).timestamp()"
    let v9 : int64 = Fable.Core.Rust.emitExpr v7 v8
    let v10 : string = "pwd"
    let v11 : string = "($0).to_string()"
    let v12 : Types.std.string.String = Fable.Core.Rust.emitExpr v10 v11
    let v13 : Types.EmitType<Types.std.string.String> = v12 |> unbox<Types.EmitType<Types.std.string.String>>
    let v14 : string = "std::env::current_dir()"
    let v15 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr () v14
    let v16 : string = "($0).as_ref().unwrap().to_path_buf()"
    let v17 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v15 v16
    let v18 : string = "($0).canonicalize()"
    let v19 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v17 v18
    let v20 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v19 v16
    let v21 : string = "fable_library_rust::String_::fromStr(&format!(\"{}\", $0.display()))"
    let v22 : string = Fable.Core.Rust.emitExpr v20 v21
    let v23 : Types.std.string.String = Fable.Core.Rust.emitExpr v22 v11
    let v24 : Types.EmitType<Types.std.string.String> = v23 |> unbox<Types.EmitType<Types.std.string.String>>
    let v25 : string = "spi_path"
    let v26 : Types.std.string.String = Fable.Core.Rust.emitExpr v25 v11
    let v27 : Types.EmitType<Types.std.string.String> = v26 |> unbox<Types.EmitType<Types.std.string.String>>
    let v28 : string = Fable.Core.Rust.emitExpr v0 v21
    let v29 : Types.std.string.String = Fable.Core.Rust.emitExpr v28 v11
    let v30 : Types.EmitType<Types.std.string.String> = v29 |> unbox<Types.EmitType<Types.std.string.String>>
    let v31 : string = "new_fsx_path"
    let v32 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v11
    let v33 : Types.EmitType<Types.std.string.String> = v32 |> unbox<Types.EmitType<Types.std.string.String>>
    let v34 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v1 v16
    let v35 : string = Fable.Core.Rust.emitExpr v34 v21
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v35 v11
    let v37 : Types.EmitType<Types.std.string.String> = v36 |> unbox<Types.EmitType<Types.std.string.String>>
    let v38 : (Types.EmitType<Types.std.string.String> []) = [|v13; v24; v27; v30; v33; v37|]
    let v39 : string = "core::ops::Deref::deref($0)"
    let v40 : obj = Fable.Core.Rust.emitExpr v38 v39
    let v41 : string = "format!(\"{:?}\", ***$0)"
    let v42 : Types.std.string.String = Fable.Core.Rust.emitExpr v40 v41
    let v43 : Types.EmitType<Types.std.string.String> = v42 |> unbox<Types.EmitType<Types.std.string.String>>
    let v44 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v45 : int64 = Fable.Core.Rust.emitExpr v44 v8
    let v46 : int64 = v45 - v9
    let v47 : string = (v46).ToString ()
    let v48 : int32 = 6
    let v49 : string = method1(v48, v47)
    let v50 : string = "rand::random::<u8>()"
    let v51 : uint8 = Fable.Core.Rust.emitExpr () v50
    let v52 : string = "timestamp"
    let v53 : Types.std.string.String = Fable.Core.Rust.emitExpr v52 v11
    let v54 : Types.EmitType<Types.std.string.String> = v53 |> unbox<Types.EmitType<Types.std.string.String>>
    let v55 : Types.std.string.String = Fable.Core.Rust.emitExpr v49 v11
    let v56 : Types.EmitType<Types.std.string.String> = v55 |> unbox<Types.EmitType<Types.std.string.String>>
    let v57 : string = "run_id"
    let v58 : Types.std.string.String = Fable.Core.Rust.emitExpr v57 v11
    let v59 : Types.EmitType<Types.std.string.String> = v58 |> unbox<Types.EmitType<Types.std.string.String>>
    let v60 : string = "format!(\"{:?}\", $0)"
    let v61 : Types.std.string.String = Fable.Core.Rust.emitExpr v51 v60
    let v62 : Types.EmitType<Types.std.string.String> = v61 |> unbox<Types.EmitType<Types.std.string.String>>
    let v63 : string = "log_level"
    let v64 : Types.std.string.String = Fable.Core.Rust.emitExpr v63 v11
    let v65 : Types.EmitType<Types.std.string.String> = v64 |> unbox<Types.EmitType<Types.std.string.String>>
    let v66 : string = "Debug"
    let v67 : Types.std.string.String = Fable.Core.Rust.emitExpr v66 v11
    let v68 : Types.EmitType<Types.std.string.String> = v67 |> unbox<Types.EmitType<Types.std.string.String>>
    let v69 : (Types.EmitType<Types.std.string.String> []) = [|v54; v56; v59; v62; v65; v68|]
    let v70 : obj = Fable.Core.Rust.emitExpr v69 v39
    let v71 : Types.std.string.String = Fable.Core.Rust.emitExpr v70 v41
    let v72 : Types.EmitType<Types.std.string.String> = v71 |> unbox<Types.EmitType<Types.std.string.String>>
    let v73 : string = "> spi_to_fsx ()"
    let v74 : Types.std.string.String = Fable.Core.Rust.emitExpr v73 v11
    let v75 : Types.EmitType<Types.std.string.String> = v74 |> unbox<Types.EmitType<Types.std.string.String>>
    let v76 : (Types.EmitType<Types.std.string.String> []) = [|v75|]
    let v77 : obj = Fable.Core.Rust.emitExpr v76 v39
    let v78 : Types.std.string.String = Fable.Core.Rust.emitExpr v77 v41
    let v79 : Types.EmitType<Types.std.string.String> = v78 |> unbox<Types.EmitType<Types.std.string.String>>
    let v80 : Types.std.string.String = v79 |> unbox
    let v81 : string = "fable_library_rust::String_::fromStr($0)"
    let v82 : string = Fable.Core.Rust.emitExpr v80 v81
    let v83 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v84 : string = $"r#\"{v83}\"#"
    let v85 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v84
    let v86 : string = "regex::RegexBuilder::new($0)"
    let v87 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v85 v86
    let v88 : string = "$0.build().unwrap()"
    let v89 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v87 v88
    let v90 : string = method2(v82)
    let v91 : string = "$0.as_str()"
    let v92 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v90 v91
    let v93 : string = method3()
    let v94 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v93 v91
    let v95 : string = "$0.replace_all(&$1, $2).to_string()"
    let v96 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v89, v92, v94) v95
    let v97 : string = Fable.Core.Rust.emitExpr v96 v81
    let v98 : string = "\\[\"(.*?)\"\\]"
    let v99 : string = $"r#\"{v98}\"#"
    let v100 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v99
    let v101 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v100 v86
    let v102 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v101 v88
    let v103 : string = method2(v97)
    let v104 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v103 v91
    let v105 : string = method4()
    let v106 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v105 v91
    let v107 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v102, v104, v106) v95
    let v108 : string = Fable.Core.Rust.emitExpr v107 v81
    let v109 : string = ", "
    let v110 : string = $"r#\"{v109}\"#"
    let v111 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v110
    let v112 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v111 v86
    let v113 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v112 v88
    let v114 : string = method2(v108)
    let v115 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v114 v91
    let v116 : string = method5()
    let v117 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v116 v91
    let v118 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v113, v115, v117) v95
    let v119 : string = Fable.Core.Rust.emitExpr v118 v81
    let v120 : Types.std.string.String = Fable.Core.Rust.emitExpr v119 v11
    let v121 : Types.EmitType<Types.std.string.String> = v120 |> unbox<Types.EmitType<Types.std.string.String>>
    let v122 : string = "purple"
    let v123 : string = "colored::Colorize::color(&*$0, $1.to_string())"
    let v124 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v121, v122) v123
    let v125 : string = "format!(\"{}\", $0)"
    let v126 : Types.std.string.String = Fable.Core.Rust.emitExpr v124 v125
    let v127 : Types.std.string.String = v43 |> unbox
    let v128 : string = Fable.Core.Rust.emitExpr v127 v81
    let v129 : string = $"r#\"{v83}\"#"
    let v130 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v129
    let v131 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v130 v86
    let v132 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v131 v88
    let v133 : string = method2(v128)
    let v134 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v133 v91
    let v135 : string = method3()
    let v136 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v135 v91
    let v137 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v132, v134, v136) v95
    let v138 : string = Fable.Core.Rust.emitExpr v137 v81
    let v139 : string = $"r#\"{v98}\"#"
    let v140 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v139
    let v141 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v140 v86
    let v142 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v141 v88
    let v143 : string = method2(v138)
    let v144 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v143 v91
    let v145 : string = method4()
    let v146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v145 v91
    let v147 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v142, v144, v146) v95
    let v148 : string = Fable.Core.Rust.emitExpr v147 v81
    let v149 : string = $"r#\"{v109}\"#"
    let v150 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v149
    let v151 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v150 v86
    let v152 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v151 v88
    let v153 : string = method2(v148)
    let v154 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v153 v91
    let v155 : string = method5()
    let v156 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v155 v91
    let v157 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v152, v154, v156) v95
    let v158 : string = Fable.Core.Rust.emitExpr v157 v81
    let v159 : Types.std.string.String = Fable.Core.Rust.emitExpr v158 v11
    let v160 : Types.EmitType<Types.std.string.String> = v159 |> unbox<Types.EmitType<Types.std.string.String>>
    let v161 : string = method6()
    let v162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v161 v91
    let v163 : unativeint = unativeint 0
    let v164 : unativeint = unativeint 2
    let v165 : string = "&$0[$1..$2]"
    let v166 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v162, v163, v164) v165
    let v167 : string = Fable.Core.Rust.emitExpr v166 v81
    let v168 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v169 : uint8 = Fable.Core.Rust.emitExpr v167 v168
    let v170 : string = method6()
    let v171 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v170 v91
    let v172 : unativeint = unativeint 2
    let v173 : unativeint = unativeint 4
    let v174 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v171, v172, v173) v165
    let v175 : string = Fable.Core.Rust.emitExpr v174 v81
    let v176 : uint8 = Fable.Core.Rust.emitExpr v175 v168
    let v177 : string = method6()
    let v178 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v177 v91
    let v179 : unativeint = unativeint 4
    let v180 : unativeint = unativeint 6
    let v181 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v178, v179, v180) v165
    let v182 : string = Fable.Core.Rust.emitExpr v181 v81
    let v183 : uint8 = Fable.Core.Rust.emitExpr v182 v168
    let v184 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v185 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v160, v169, v176, v183) v184
    let v186 : Types.std.string.String = Fable.Core.Rust.emitExpr v185 v125
    let v187 : Types.std.string.String = v72 |> unbox
    let v188 : string = Fable.Core.Rust.emitExpr v187 v81
    let v189 : string = $"r#\"{v83}\"#"
    let v190 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v189
    let v191 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v190 v86
    let v192 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v191 v88
    let v193 : string = method2(v188)
    let v194 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v193 v91
    let v195 : string = method3()
    let v196 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v195 v91
    let v197 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v192, v194, v196) v95
    let v198 : string = Fable.Core.Rust.emitExpr v197 v81
    let v199 : string = $"r#\"{v98}\"#"
    let v200 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v199
    let v201 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v200 v86
    let v202 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v201 v88
    let v203 : string = method2(v198)
    let v204 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v203 v91
    let v205 : string = method4()
    let v206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v205 v91
    let v207 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v202, v204, v206) v95
    let v208 : string = Fable.Core.Rust.emitExpr v207 v81
    let v209 : string = $"r#\"{v109}\"#"
    let v210 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v209
    let v211 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v210 v86
    let v212 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v211 v88
    let v213 : string = method2(v208)
    let v214 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v213 v91
    let v215 : string = method5()
    let v216 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v215 v91
    let v217 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v212, v214, v216) v95
    let v218 : string = Fable.Core.Rust.emitExpr v217 v81
    let v219 : Types.std.string.String = Fable.Core.Rust.emitExpr v218 v11
    let v220 : Types.EmitType<Types.std.string.String> = v219 |> unbox<Types.EmitType<Types.std.string.String>>
    let v221 : string = method7()
    let v222 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v221 v91
    let v223 : unativeint = unativeint 0
    let v224 : unativeint = unativeint 2
    let v225 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v222, v223, v224) v165
    let v226 : string = Fable.Core.Rust.emitExpr v225 v81
    let v227 : uint8 = Fable.Core.Rust.emitExpr v226 v168
    let v228 : string = method7()
    let v229 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v228 v91
    let v230 : unativeint = unativeint 2
    let v231 : unativeint = unativeint 4
    let v232 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v229, v230, v231) v165
    let v233 : string = Fable.Core.Rust.emitExpr v232 v81
    let v234 : uint8 = Fable.Core.Rust.emitExpr v233 v168
    let v235 : string = method7()
    let v236 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v235 v91
    let v237 : unativeint = unativeint 4
    let v238 : unativeint = unativeint 6
    let v239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v236, v237, v238) v165
    let v240 : string = Fable.Core.Rust.emitExpr v239 v81
    let v241 : uint8 = Fable.Core.Rust.emitExpr v240 v168
    let v242 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v220, v227, v234, v241) v184
    let v243 : Types.std.string.String = Fable.Core.Rust.emitExpr v242 v125
    let v244 : string = $"{v126} {v186} {v243}"
    System.Console.WriteLine v244
    let v245 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v0 v18
    let v246 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v245 v16
    let v247 : string = "spi_path_clean"
    let v248 : Types.std.string.String = Fable.Core.Rust.emitExpr v247 v11
    let v249 : Types.EmitType<Types.std.string.String> = v248 |> unbox<Types.EmitType<Types.std.string.String>>
    let v250 : string = Fable.Core.Rust.emitExpr v246 v21
    let v251 : Types.std.string.String = Fable.Core.Rust.emitExpr v250 v11
    let v252 : Types.EmitType<Types.std.string.String> = v251 |> unbox<Types.EmitType<Types.std.string.String>>
    let v253 : (Types.EmitType<Types.std.string.String> []) = [|v249; v252|]
    let v254 : obj = Fable.Core.Rust.emitExpr v253 v39
    let v255 : Types.std.string.String = Fable.Core.Rust.emitExpr v254 v41
    let v256 : Types.EmitType<Types.std.string.String> = v255 |> unbox<Types.EmitType<Types.std.string.String>>
    let v257 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v258 : int64 = Fable.Core.Rust.emitExpr v257 v8
    let v259 : int64 = v258 - v9
    let v260 : string = (v259).ToString ()
    let v261 : int32 = 6
    let v262 : string = method1(v261, v260)
    let v263 : uint8 = Fable.Core.Rust.emitExpr () v50
    let v264 : Types.std.string.String = Fable.Core.Rust.emitExpr v52 v11
    let v265 : Types.EmitType<Types.std.string.String> = v264 |> unbox<Types.EmitType<Types.std.string.String>>
    let v266 : Types.std.string.String = Fable.Core.Rust.emitExpr v262 v11
    let v267 : Types.EmitType<Types.std.string.String> = v266 |> unbox<Types.EmitType<Types.std.string.String>>
    let v268 : Types.std.string.String = Fable.Core.Rust.emitExpr v57 v11
    let v269 : Types.EmitType<Types.std.string.String> = v268 |> unbox<Types.EmitType<Types.std.string.String>>
    let v270 : Types.std.string.String = Fable.Core.Rust.emitExpr v263 v60
    let v271 : Types.EmitType<Types.std.string.String> = v270 |> unbox<Types.EmitType<Types.std.string.String>>
    let v272 : Types.std.string.String = Fable.Core.Rust.emitExpr v63 v11
    let v273 : Types.EmitType<Types.std.string.String> = v272 |> unbox<Types.EmitType<Types.std.string.String>>
    let v274 : Types.std.string.String = Fable.Core.Rust.emitExpr v66 v11
    let v275 : Types.EmitType<Types.std.string.String> = v274 |> unbox<Types.EmitType<Types.std.string.String>>
    let v276 : (Types.EmitType<Types.std.string.String> []) = [|v265; v267; v269; v271; v273; v275|]
    let v277 : obj = Fable.Core.Rust.emitExpr v276 v39
    let v278 : Types.std.string.String = Fable.Core.Rust.emitExpr v277 v41
    let v279 : Types.EmitType<Types.std.string.String> = v278 |> unbox<Types.EmitType<Types.std.string.String>>
    let v280 : Types.std.string.String = Fable.Core.Rust.emitExpr v73 v11
    let v281 : Types.EmitType<Types.std.string.String> = v280 |> unbox<Types.EmitType<Types.std.string.String>>
    let v282 : (Types.EmitType<Types.std.string.String> []) = [|v281|]
    let v283 : obj = Fable.Core.Rust.emitExpr v282 v39
    let v284 : Types.std.string.String = Fable.Core.Rust.emitExpr v283 v41
    let v285 : Types.EmitType<Types.std.string.String> = v284 |> unbox<Types.EmitType<Types.std.string.String>>
    let v286 : Types.std.string.String = v285 |> unbox
    let v287 : string = Fable.Core.Rust.emitExpr v286 v81
    let v288 : string = $"r#\"{v83}\"#"
    let v289 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v288
    let v290 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v289 v86
    let v291 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v290 v88
    let v292 : string = method2(v287)
    let v293 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v292 v91
    let v294 : string = method3()
    let v295 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v294 v91
    let v296 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v291, v293, v295) v95
    let v297 : string = Fable.Core.Rust.emitExpr v296 v81
    let v298 : string = $"r#\"{v98}\"#"
    let v299 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v298
    let v300 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v299 v86
    let v301 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v300 v88
    let v302 : string = method2(v297)
    let v303 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v302 v91
    let v304 : string = method4()
    let v305 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v304 v91
    let v306 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v301, v303, v305) v95
    let v307 : string = Fable.Core.Rust.emitExpr v306 v81
    let v308 : string = $"r#\"{v109}\"#"
    let v309 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v308
    let v310 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v309 v86
    let v311 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v310 v88
    let v312 : string = method2(v307)
    let v313 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v312 v91
    let v314 : string = method5()
    let v315 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v314 v91
    let v316 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v311, v313, v315) v95
    let v317 : string = Fable.Core.Rust.emitExpr v316 v81
    let v318 : Types.std.string.String = Fable.Core.Rust.emitExpr v317 v11
    let v319 : Types.EmitType<Types.std.string.String> = v318 |> unbox<Types.EmitType<Types.std.string.String>>
    let v320 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v319, v122) v123
    let v321 : Types.std.string.String = Fable.Core.Rust.emitExpr v320 v125
    let v322 : Types.std.string.String = v256 |> unbox
    let v323 : string = Fable.Core.Rust.emitExpr v322 v81
    let v324 : string = $"r#\"{v83}\"#"
    let v325 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v324
    let v326 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v325 v86
    let v327 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v326 v88
    let v328 : string = method2(v323)
    let v329 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v328 v91
    let v330 : string = method3()
    let v331 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v330 v91
    let v332 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v327, v329, v331) v95
    let v333 : string = Fable.Core.Rust.emitExpr v332 v81
    let v334 : string = $"r#\"{v98}\"#"
    let v335 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v334
    let v336 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v335 v86
    let v337 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v336 v88
    let v338 : string = method2(v333)
    let v339 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v338 v91
    let v340 : string = method4()
    let v341 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v340 v91
    let v342 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v337, v339, v341) v95
    let v343 : string = Fable.Core.Rust.emitExpr v342 v81
    let v344 : string = $"r#\"{v109}\"#"
    let v345 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v344
    let v346 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v345 v86
    let v347 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v346 v88
    let v348 : string = method2(v343)
    let v349 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v348 v91
    let v350 : string = method5()
    let v351 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v350 v91
    let v352 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v347, v349, v351) v95
    let v353 : string = Fable.Core.Rust.emitExpr v352 v81
    let v354 : Types.std.string.String = Fable.Core.Rust.emitExpr v353 v11
    let v355 : Types.EmitType<Types.std.string.String> = v354 |> unbox<Types.EmitType<Types.std.string.String>>
    let v356 : string = method6()
    let v357 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v356 v91
    let v358 : unativeint = unativeint 0
    let v359 : unativeint = unativeint 2
    let v360 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v357, v358, v359) v165
    let v361 : string = Fable.Core.Rust.emitExpr v360 v81
    let v362 : uint8 = Fable.Core.Rust.emitExpr v361 v168
    let v363 : string = method6()
    let v364 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v363 v91
    let v365 : unativeint = unativeint 2
    let v366 : unativeint = unativeint 4
    let v367 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v364, v365, v366) v165
    let v368 : string = Fable.Core.Rust.emitExpr v367 v81
    let v369 : uint8 = Fable.Core.Rust.emitExpr v368 v168
    let v370 : string = method6()
    let v371 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v370 v91
    let v372 : unativeint = unativeint 4
    let v373 : unativeint = unativeint 6
    let v374 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v371, v372, v373) v165
    let v375 : string = Fable.Core.Rust.emitExpr v374 v81
    let v376 : uint8 = Fable.Core.Rust.emitExpr v375 v168
    let v377 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v355, v362, v369, v376) v184
    let v378 : Types.std.string.String = Fable.Core.Rust.emitExpr v377 v125
    let v379 : Types.std.string.String = v279 |> unbox
    let v380 : string = Fable.Core.Rust.emitExpr v379 v81
    let v381 : string = $"r#\"{v83}\"#"
    let v382 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v381
    let v383 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v382 v86
    let v384 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v383 v88
    let v385 : string = method2(v380)
    let v386 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v385 v91
    let v387 : string = method3()
    let v388 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v387 v91
    let v389 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v384, v386, v388) v95
    let v390 : string = Fable.Core.Rust.emitExpr v389 v81
    let v391 : string = $"r#\"{v98}\"#"
    let v392 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v391
    let v393 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v392 v86
    let v394 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v393 v88
    let v395 : string = method2(v390)
    let v396 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v395 v91
    let v397 : string = method4()
    let v398 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v397 v91
    let v399 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v394, v396, v398) v95
    let v400 : string = Fable.Core.Rust.emitExpr v399 v81
    let v401 : string = $"r#\"{v109}\"#"
    let v402 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v401
    let v403 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v402 v86
    let v404 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v403 v88
    let v405 : string = method2(v400)
    let v406 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v405 v91
    let v407 : string = method5()
    let v408 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v407 v91
    let v409 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v404, v406, v408) v95
    let v410 : string = Fable.Core.Rust.emitExpr v409 v81
    let v411 : Types.std.string.String = Fable.Core.Rust.emitExpr v410 v11
    let v412 : Types.EmitType<Types.std.string.String> = v411 |> unbox<Types.EmitType<Types.std.string.String>>
    let v413 : string = method7()
    let v414 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v413 v91
    let v415 : unativeint = unativeint 0
    let v416 : unativeint = unativeint 2
    let v417 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v414, v415, v416) v165
    let v418 : string = Fable.Core.Rust.emitExpr v417 v81
    let v419 : uint8 = Fable.Core.Rust.emitExpr v418 v168
    let v420 : string = method7()
    let v421 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v420 v91
    let v422 : unativeint = unativeint 2
    let v423 : unativeint = unativeint 4
    let v424 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v421, v422, v423) v165
    let v425 : string = Fable.Core.Rust.emitExpr v424 v81
    let v426 : uint8 = Fable.Core.Rust.emitExpr v425 v168
    let v427 : string = method7()
    let v428 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v427 v91
    let v429 : unativeint = unativeint 4
    let v430 : unativeint = unativeint 6
    let v431 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v428, v429, v430) v165
    let v432 : string = Fable.Core.Rust.emitExpr v431 v81
    let v433 : uint8 = Fable.Core.Rust.emitExpr v432 v168
    let v434 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v412, v419, v426, v433) v184
    let v435 : Types.std.string.String = Fable.Core.Rust.emitExpr v434 v125
    let v436 : string = $"{v321} {v378} {v435}"
    System.Console.WriteLine v436
    let v437 : string = "($0).parent()"
    let v438 : Option<Types.Ref<Types.std.path.Path>> = Fable.Core.Rust.emitExpr v246 v437
    let v439 : string = "$0.unwrap()"
    let v440 : Types.Ref<Types.std.path.Path> = Fable.Core.Rust.emitExpr v438 v439
    let v441 : string = "std::path::PathBuf::from($0)"
    let v442 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v440 v441
    let v443 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v442 v18
    let v444 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v443 v16
    let v445 : string = "src_path"
    let v446 : Types.std.string.String = Fable.Core.Rust.emitExpr v445 v11
    let v447 : Types.EmitType<Types.std.string.String> = v446 |> unbox<Types.EmitType<Types.std.string.String>>
    let v448 : string = Fable.Core.Rust.emitExpr v444 v21
    let v449 : Types.std.string.String = Fable.Core.Rust.emitExpr v448 v11
    let v450 : Types.EmitType<Types.std.string.String> = v449 |> unbox<Types.EmitType<Types.std.string.String>>
    let v451 : (Types.EmitType<Types.std.string.String> []) = [|v447; v450|]
    let v452 : obj = Fable.Core.Rust.emitExpr v451 v39
    let v453 : Types.std.string.String = Fable.Core.Rust.emitExpr v452 v41
    let v454 : Types.EmitType<Types.std.string.String> = v453 |> unbox<Types.EmitType<Types.std.string.String>>
    let v455 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v456 : int64 = Fable.Core.Rust.emitExpr v455 v8
    let v457 : int64 = v456 - v9
    let v458 : string = (v457).ToString ()
    let v459 : int32 = 6
    let v460 : string = method1(v459, v458)
    let v461 : uint8 = Fable.Core.Rust.emitExpr () v50
    let v462 : Types.std.string.String = Fable.Core.Rust.emitExpr v52 v11
    let v463 : Types.EmitType<Types.std.string.String> = v462 |> unbox<Types.EmitType<Types.std.string.String>>
    let v464 : Types.std.string.String = Fable.Core.Rust.emitExpr v460 v11
    let v465 : Types.EmitType<Types.std.string.String> = v464 |> unbox<Types.EmitType<Types.std.string.String>>
    let v466 : Types.std.string.String = Fable.Core.Rust.emitExpr v57 v11
    let v467 : Types.EmitType<Types.std.string.String> = v466 |> unbox<Types.EmitType<Types.std.string.String>>
    let v468 : Types.std.string.String = Fable.Core.Rust.emitExpr v461 v60
    let v469 : Types.EmitType<Types.std.string.String> = v468 |> unbox<Types.EmitType<Types.std.string.String>>
    let v470 : Types.std.string.String = Fable.Core.Rust.emitExpr v63 v11
    let v471 : Types.EmitType<Types.std.string.String> = v470 |> unbox<Types.EmitType<Types.std.string.String>>
    let v472 : Types.std.string.String = Fable.Core.Rust.emitExpr v66 v11
    let v473 : Types.EmitType<Types.std.string.String> = v472 |> unbox<Types.EmitType<Types.std.string.String>>
    let v474 : (Types.EmitType<Types.std.string.String> []) = [|v463; v465; v467; v469; v471; v473|]
    let v475 : obj = Fable.Core.Rust.emitExpr v474 v39
    let v476 : Types.std.string.String = Fable.Core.Rust.emitExpr v475 v41
    let v477 : Types.EmitType<Types.std.string.String> = v476 |> unbox<Types.EmitType<Types.std.string.String>>
    let v478 : Types.std.string.String = Fable.Core.Rust.emitExpr v73 v11
    let v479 : Types.EmitType<Types.std.string.String> = v478 |> unbox<Types.EmitType<Types.std.string.String>>
    let v480 : (Types.EmitType<Types.std.string.String> []) = [|v479|]
    let v481 : obj = Fable.Core.Rust.emitExpr v480 v39
    let v482 : Types.std.string.String = Fable.Core.Rust.emitExpr v481 v41
    let v483 : Types.EmitType<Types.std.string.String> = v482 |> unbox<Types.EmitType<Types.std.string.String>>
    let v484 : Types.std.string.String = v483 |> unbox
    let v485 : string = Fable.Core.Rust.emitExpr v484 v81
    let v486 : string = $"r#\"{v83}\"#"
    let v487 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v486
    let v488 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v487 v86
    let v489 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v488 v88
    let v490 : string = method2(v485)
    let v491 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v490 v91
    let v492 : string = method3()
    let v493 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v492 v91
    let v494 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v489, v491, v493) v95
    let v495 : string = Fable.Core.Rust.emitExpr v494 v81
    let v496 : string = $"r#\"{v98}\"#"
    let v497 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v496
    let v498 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v497 v86
    let v499 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v498 v88
    let v500 : string = method2(v495)
    let v501 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v500 v91
    let v502 : string = method4()
    let v503 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v502 v91
    let v504 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v499, v501, v503) v95
    let v505 : string = Fable.Core.Rust.emitExpr v504 v81
    let v506 : string = $"r#\"{v109}\"#"
    let v507 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v506
    let v508 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v507 v86
    let v509 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v508 v88
    let v510 : string = method2(v505)
    let v511 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v510 v91
    let v512 : string = method5()
    let v513 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v512 v91
    let v514 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v509, v511, v513) v95
    let v515 : string = Fable.Core.Rust.emitExpr v514 v81
    let v516 : Types.std.string.String = Fable.Core.Rust.emitExpr v515 v11
    let v517 : Types.EmitType<Types.std.string.String> = v516 |> unbox<Types.EmitType<Types.std.string.String>>
    let v518 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v517, v122) v123
    let v519 : Types.std.string.String = Fable.Core.Rust.emitExpr v518 v125
    let v520 : Types.std.string.String = v454 |> unbox
    let v521 : string = Fable.Core.Rust.emitExpr v520 v81
    let v522 : string = $"r#\"{v83}\"#"
    let v523 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v522
    let v524 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v523 v86
    let v525 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v524 v88
    let v526 : string = method2(v521)
    let v527 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v526 v91
    let v528 : string = method3()
    let v529 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v528 v91
    let v530 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v525, v527, v529) v95
    let v531 : string = Fable.Core.Rust.emitExpr v530 v81
    let v532 : string = $"r#\"{v98}\"#"
    let v533 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v532
    let v534 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v533 v86
    let v535 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v534 v88
    let v536 : string = method2(v531)
    let v537 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v536 v91
    let v538 : string = method4()
    let v539 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v538 v91
    let v540 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v535, v537, v539) v95
    let v541 : string = Fable.Core.Rust.emitExpr v540 v81
    let v542 : string = $"r#\"{v109}\"#"
    let v543 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v542
    let v544 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v543 v86
    let v545 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v544 v88
    let v546 : string = method2(v541)
    let v547 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v546 v91
    let v548 : string = method5()
    let v549 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v548 v91
    let v550 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v545, v547, v549) v95
    let v551 : string = Fable.Core.Rust.emitExpr v550 v81
    let v552 : Types.std.string.String = Fable.Core.Rust.emitExpr v551 v11
    let v553 : Types.EmitType<Types.std.string.String> = v552 |> unbox<Types.EmitType<Types.std.string.String>>
    let v554 : string = method6()
    let v555 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v554 v91
    let v556 : unativeint = unativeint 0
    let v557 : unativeint = unativeint 2
    let v558 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v555, v556, v557) v165
    let v559 : string = Fable.Core.Rust.emitExpr v558 v81
    let v560 : uint8 = Fable.Core.Rust.emitExpr v559 v168
    let v561 : string = method6()
    let v562 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v561 v91
    let v563 : unativeint = unativeint 2
    let v564 : unativeint = unativeint 4
    let v565 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v562, v563, v564) v165
    let v566 : string = Fable.Core.Rust.emitExpr v565 v81
    let v567 : uint8 = Fable.Core.Rust.emitExpr v566 v168
    let v568 : string = method6()
    let v569 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v568 v91
    let v570 : unativeint = unativeint 4
    let v571 : unativeint = unativeint 6
    let v572 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v569, v570, v571) v165
    let v573 : string = Fable.Core.Rust.emitExpr v572 v81
    let v574 : uint8 = Fable.Core.Rust.emitExpr v573 v168
    let v575 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v553, v560, v567, v574) v184
    let v576 : Types.std.string.String = Fable.Core.Rust.emitExpr v575 v125
    let v577 : Types.std.string.String = v477 |> unbox
    let v578 : string = Fable.Core.Rust.emitExpr v577 v81
    let v579 : string = $"r#\"{v83}\"#"
    let v580 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v579
    let v581 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v580 v86
    let v582 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v581 v88
    let v583 : string = method2(v578)
    let v584 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v583 v91
    let v585 : string = method3()
    let v586 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v585 v91
    let v587 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v582, v584, v586) v95
    let v588 : string = Fable.Core.Rust.emitExpr v587 v81
    let v589 : string = $"r#\"{v98}\"#"
    let v590 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v589
    let v591 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v590 v86
    let v592 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v591 v88
    let v593 : string = method2(v588)
    let v594 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v593 v91
    let v595 : string = method4()
    let v596 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v595 v91
    let v597 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v592, v594, v596) v95
    let v598 : string = Fable.Core.Rust.emitExpr v597 v81
    let v599 : string = $"r#\"{v109}\"#"
    let v600 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v599
    let v601 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v600 v86
    let v602 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v601 v88
    let v603 : string = method2(v598)
    let v604 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v603 v91
    let v605 : string = method5()
    let v606 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v605 v91
    let v607 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v602, v604, v606) v95
    let v608 : string = Fable.Core.Rust.emitExpr v607 v81
    let v609 : Types.std.string.String = Fable.Core.Rust.emitExpr v608 v11
    let v610 : Types.EmitType<Types.std.string.String> = v609 |> unbox<Types.EmitType<Types.std.string.String>>
    let v611 : string = method7()
    let v612 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v611 v91
    let v613 : unativeint = unativeint 0
    let v614 : unativeint = unativeint 2
    let v615 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v612, v613, v614) v165
    let v616 : string = Fable.Core.Rust.emitExpr v615 v81
    let v617 : uint8 = Fable.Core.Rust.emitExpr v616 v168
    let v618 : string = method7()
    let v619 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v618 v91
    let v620 : unativeint = unativeint 2
    let v621 : unativeint = unativeint 4
    let v622 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v619, v620, v621) v165
    let v623 : string = Fable.Core.Rust.emitExpr v622 v81
    let v624 : uint8 = Fable.Core.Rust.emitExpr v623 v168
    let v625 : string = method7()
    let v626 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v625 v91
    let v627 : unativeint = unativeint 4
    let v628 : unativeint = unativeint 6
    let v629 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v626, v627, v628) v165
    let v630 : string = Fable.Core.Rust.emitExpr v629 v81
    let v631 : uint8 = Fable.Core.Rust.emitExpr v630 v168
    let v632 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v610, v617, v624, v631) v184
    let v633 : Types.std.string.String = Fable.Core.Rust.emitExpr v632 v125
    let v634 : string = $"{v519} {v576} {v633}"
    System.Console.WriteLine v634
    let v635 : string = "$0.ancestors()"
    let v636 : Types.Ref<Types.std.path.Ancestors> = Fable.Core.Rust.emitExpr v444 v635
    let v637 : unativeint = unativeint 10
    let v638 : string = "$1.take($0)"
    let v639 : Types.std.iter.Iterator<Types.Ref<Types.std.path.Path>> = Fable.Core.Rust.emitExpr struct (v637, v636) v638
    let v640 : (Types.Ref<Types.std.path.Path> -> Types.std.path.PathBuf) = closure2()
    let v641 : Types.Ref<(Types.Ref<Types.std.path.Path> -> Types.std.path.PathBuf)> = v640 |> unbox
    let v642 : string = "$1.into_iter().map($0)"
    let v643 : Types.std.iter.Iterator<Types.std.path.PathBuf> = Fable.Core.Rust.emitExpr struct (v641, v639) v642
    let v644 : (Types.Ref<Types.std.path.PathBuf> -> bool) = closure3()
    let v645 : Types.Ref<(Types.Ref<Types.std.path.PathBuf> -> bool)> = v644 |> unbox
    let v646 : string = "$1.into_iter().find($0)"
    let v647 : Option<Types.std.path.PathBuf> = Fable.Core.Rust.emitExpr struct (v645, v643) v646
    let v648 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v647 v16
    let v649 : string = "spiproj_path"
    let v650 : Types.std.string.String = Fable.Core.Rust.emitExpr v649 v11
    let v651 : Types.EmitType<Types.std.string.String> = v650 |> unbox<Types.EmitType<Types.std.string.String>>
    let v652 : string = Fable.Core.Rust.emitExpr v648 v21
    let v653 : Types.std.string.String = Fable.Core.Rust.emitExpr v652 v11
    let v654 : Types.EmitType<Types.std.string.String> = v653 |> unbox<Types.EmitType<Types.std.string.String>>
    let v655 : (Types.EmitType<Types.std.string.String> []) = [|v651; v654|]
    let v656 : obj = Fable.Core.Rust.emitExpr v655 v39
    let v657 : Types.std.string.String = Fable.Core.Rust.emitExpr v656 v41
    let v658 : Types.EmitType<Types.std.string.String> = v657 |> unbox<Types.EmitType<Types.std.string.String>>
    let v659 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v660 : int64 = Fable.Core.Rust.emitExpr v659 v8
    let v661 : int64 = v660 - v9
    let v662 : string = (v661).ToString ()
    let v663 : int32 = 6
    let v664 : string = method1(v663, v662)
    let v665 : uint8 = Fable.Core.Rust.emitExpr () v50
    let v666 : Types.std.string.String = Fable.Core.Rust.emitExpr v52 v11
    let v667 : Types.EmitType<Types.std.string.String> = v666 |> unbox<Types.EmitType<Types.std.string.String>>
    let v668 : Types.std.string.String = Fable.Core.Rust.emitExpr v664 v11
    let v669 : Types.EmitType<Types.std.string.String> = v668 |> unbox<Types.EmitType<Types.std.string.String>>
    let v670 : Types.std.string.String = Fable.Core.Rust.emitExpr v57 v11
    let v671 : Types.EmitType<Types.std.string.String> = v670 |> unbox<Types.EmitType<Types.std.string.String>>
    let v672 : Types.std.string.String = Fable.Core.Rust.emitExpr v665 v60
    let v673 : Types.EmitType<Types.std.string.String> = v672 |> unbox<Types.EmitType<Types.std.string.String>>
    let v674 : Types.std.string.String = Fable.Core.Rust.emitExpr v63 v11
    let v675 : Types.EmitType<Types.std.string.String> = v674 |> unbox<Types.EmitType<Types.std.string.String>>
    let v676 : Types.std.string.String = Fable.Core.Rust.emitExpr v66 v11
    let v677 : Types.EmitType<Types.std.string.String> = v676 |> unbox<Types.EmitType<Types.std.string.String>>
    let v678 : (Types.EmitType<Types.std.string.String> []) = [|v667; v669; v671; v673; v675; v677|]
    let v679 : obj = Fable.Core.Rust.emitExpr v678 v39
    let v680 : Types.std.string.String = Fable.Core.Rust.emitExpr v679 v41
    let v681 : Types.EmitType<Types.std.string.String> = v680 |> unbox<Types.EmitType<Types.std.string.String>>
    let v682 : Types.std.string.String = Fable.Core.Rust.emitExpr v73 v11
    let v683 : Types.EmitType<Types.std.string.String> = v682 |> unbox<Types.EmitType<Types.std.string.String>>
    let v684 : (Types.EmitType<Types.std.string.String> []) = [|v683|]
    let v685 : obj = Fable.Core.Rust.emitExpr v684 v39
    let v686 : Types.std.string.String = Fable.Core.Rust.emitExpr v685 v41
    let v687 : Types.EmitType<Types.std.string.String> = v686 |> unbox<Types.EmitType<Types.std.string.String>>
    let v688 : Types.std.string.String = v687 |> unbox
    let v689 : string = Fable.Core.Rust.emitExpr v688 v81
    let v690 : string = $"r#\"{v83}\"#"
    let v691 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v690
    let v692 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v691 v86
    let v693 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v692 v88
    let v694 : string = method2(v689)
    let v695 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v694 v91
    let v696 : string = method3()
    let v697 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v696 v91
    let v698 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v693, v695, v697) v95
    let v699 : string = Fable.Core.Rust.emitExpr v698 v81
    let v700 : string = $"r#\"{v98}\"#"
    let v701 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v700
    let v702 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v701 v86
    let v703 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v702 v88
    let v704 : string = method2(v699)
    let v705 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v704 v91
    let v706 : string = method4()
    let v707 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v706 v91
    let v708 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v703, v705, v707) v95
    let v709 : string = Fable.Core.Rust.emitExpr v708 v81
    let v710 : string = $"r#\"{v109}\"#"
    let v711 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v710
    let v712 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v711 v86
    let v713 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v712 v88
    let v714 : string = method2(v709)
    let v715 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v714 v91
    let v716 : string = method5()
    let v717 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v716 v91
    let v718 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v713, v715, v717) v95
    let v719 : string = Fable.Core.Rust.emitExpr v718 v81
    let v720 : Types.std.string.String = Fable.Core.Rust.emitExpr v719 v11
    let v721 : Types.EmitType<Types.std.string.String> = v720 |> unbox<Types.EmitType<Types.std.string.String>>
    let v722 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v721, v122) v123
    let v723 : Types.std.string.String = Fable.Core.Rust.emitExpr v722 v125
    let v724 : Types.std.string.String = v658 |> unbox
    let v725 : string = Fable.Core.Rust.emitExpr v724 v81
    let v726 : string = $"r#\"{v83}\"#"
    let v727 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v726
    let v728 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v727 v86
    let v729 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v728 v88
    let v730 : string = method2(v725)
    let v731 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v730 v91
    let v732 : string = method3()
    let v733 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v732 v91
    let v734 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v729, v731, v733) v95
    let v735 : string = Fable.Core.Rust.emitExpr v734 v81
    let v736 : string = $"r#\"{v98}\"#"
    let v737 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v736
    let v738 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v737 v86
    let v739 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v738 v88
    let v740 : string = method2(v735)
    let v741 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v740 v91
    let v742 : string = method4()
    let v743 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v742 v91
    let v744 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v739, v741, v743) v95
    let v745 : string = Fable.Core.Rust.emitExpr v744 v81
    let v746 : string = $"r#\"{v109}\"#"
    let v747 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v746
    let v748 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v747 v86
    let v749 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v748 v88
    let v750 : string = method2(v745)
    let v751 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v750 v91
    let v752 : string = method5()
    let v753 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v752 v91
    let v754 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v749, v751, v753) v95
    let v755 : string = Fable.Core.Rust.emitExpr v754 v81
    let v756 : Types.std.string.String = Fable.Core.Rust.emitExpr v755 v11
    let v757 : Types.EmitType<Types.std.string.String> = v756 |> unbox<Types.EmitType<Types.std.string.String>>
    let v758 : string = method6()
    let v759 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v758 v91
    let v760 : unativeint = unativeint 0
    let v761 : unativeint = unativeint 2
    let v762 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v759, v760, v761) v165
    let v763 : string = Fable.Core.Rust.emitExpr v762 v81
    let v764 : uint8 = Fable.Core.Rust.emitExpr v763 v168
    let v765 : string = method6()
    let v766 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v765 v91
    let v767 : unativeint = unativeint 2
    let v768 : unativeint = unativeint 4
    let v769 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v766, v767, v768) v165
    let v770 : string = Fable.Core.Rust.emitExpr v769 v81
    let v771 : uint8 = Fable.Core.Rust.emitExpr v770 v168
    let v772 : string = method6()
    let v773 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v772 v91
    let v774 : unativeint = unativeint 4
    let v775 : unativeint = unativeint 6
    let v776 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v773, v774, v775) v165
    let v777 : string = Fable.Core.Rust.emitExpr v776 v81
    let v778 : uint8 = Fable.Core.Rust.emitExpr v777 v168
    let v779 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v757, v764, v771, v778) v184
    let v780 : Types.std.string.String = Fable.Core.Rust.emitExpr v779 v125
    let v781 : Types.std.string.String = v681 |> unbox
    let v782 : string = Fable.Core.Rust.emitExpr v781 v81
    let v783 : string = $"r#\"{v83}\"#"
    let v784 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v783
    let v785 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v784 v86
    let v786 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v785 v88
    let v787 : string = method2(v782)
    let v788 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v787 v91
    let v789 : string = method3()
    let v790 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v789 v91
    let v791 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v786, v788, v790) v95
    let v792 : string = Fable.Core.Rust.emitExpr v791 v81
    let v793 : string = $"r#\"{v98}\"#"
    let v794 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v793
    let v795 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v794 v86
    let v796 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v795 v88
    let v797 : string = method2(v792)
    let v798 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v797 v91
    let v799 : string = method4()
    let v800 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v799 v91
    let v801 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v796, v798, v800) v95
    let v802 : string = Fable.Core.Rust.emitExpr v801 v81
    let v803 : string = $"r#\"{v109}\"#"
    let v804 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v803
    let v805 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v804 v86
    let v806 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v805 v88
    let v807 : string = method2(v802)
    let v808 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v807 v91
    let v809 : string = method5()
    let v810 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v809 v91
    let v811 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v806, v808, v810) v95
    let v812 : string = Fable.Core.Rust.emitExpr v811 v81
    let v813 : Types.std.string.String = Fable.Core.Rust.emitExpr v812 v11
    let v814 : Types.EmitType<Types.std.string.String> = v813 |> unbox<Types.EmitType<Types.std.string.String>>
    let v815 : string = method7()
    let v816 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v815 v91
    let v817 : unativeint = unativeint 0
    let v818 : unativeint = unativeint 2
    let v819 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v816, v817, v818) v165
    let v820 : string = Fable.Core.Rust.emitExpr v819 v81
    let v821 : uint8 = Fable.Core.Rust.emitExpr v820 v168
    let v822 : string = method7()
    let v823 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v822 v91
    let v824 : unativeint = unativeint 2
    let v825 : unativeint = unativeint 4
    let v826 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v823, v824, v825) v165
    let v827 : string = Fable.Core.Rust.emitExpr v826 v81
    let v828 : uint8 = Fable.Core.Rust.emitExpr v827 v168
    let v829 : string = method7()
    let v830 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v829 v91
    let v831 : unativeint = unativeint 4
    let v832 : unativeint = unativeint 6
    let v833 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v830, v831, v832) v165
    let v834 : string = Fable.Core.Rust.emitExpr v833 v81
    let v835 : uint8 = Fable.Core.Rust.emitExpr v834 v168
    let v836 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v814, v821, v828, v835) v184
    let v837 : Types.std.string.String = Fable.Core.Rust.emitExpr v836 v125
    let v838 : string = $"{v723} {v780} {v837}"
    System.Console.WriteLine v838
    let v839 : string = "($0).to_str()"
    let v840 : Option<Types.Ref<Types.Str>> = Fable.Core.Rust.emitExpr v246 v839
    let v841 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v840 v439
    let v842 : string = ".spir"
    let v843 : Types.Ref<string> = v842 |> unbox
    let v844 : string = ".spi"
    let v845 : Types.Ref<string> = v844 |> unbox
    let v846 : string = "&$2.replace(&*$0, &$1)"
    let v847 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v843, v845, v841) v846
    let v848 : Types.Ref<string> = v844 |> unbox
    let v849 : string = ".fsx"
    let v850 : Types.Ref<string> = v849 |> unbox
    let v851 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v848, v850, v847) v846
    let v852 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v851 v441
    let v853 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v852 v18
    let v854 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v853 v16
    let v855 : string = "fsx_path"
    let v856 : Types.std.string.String = Fable.Core.Rust.emitExpr v855 v11
    let v857 : Types.EmitType<Types.std.string.String> = v856 |> unbox<Types.EmitType<Types.std.string.String>>
    let v858 : string = Fable.Core.Rust.emitExpr v854 v21
    let v859 : Types.std.string.String = Fable.Core.Rust.emitExpr v858 v11
    let v860 : Types.EmitType<Types.std.string.String> = v859 |> unbox<Types.EmitType<Types.std.string.String>>
    let v861 : (Types.EmitType<Types.std.string.String> []) = [|v857; v860|]
    let v862 : obj = Fable.Core.Rust.emitExpr v861 v39
    let v863 : Types.std.string.String = Fable.Core.Rust.emitExpr v862 v41
    let v864 : Types.EmitType<Types.std.string.String> = v863 |> unbox<Types.EmitType<Types.std.string.String>>
    let v865 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v866 : int64 = Fable.Core.Rust.emitExpr v865 v8
    let v867 : int64 = v866 - v9
    let v868 : string = (v867).ToString ()
    let v869 : int32 = 6
    let v870 : string = method1(v869, v868)
    let v871 : uint8 = Fable.Core.Rust.emitExpr () v50
    let v872 : Types.std.string.String = Fable.Core.Rust.emitExpr v52 v11
    let v873 : Types.EmitType<Types.std.string.String> = v872 |> unbox<Types.EmitType<Types.std.string.String>>
    let v874 : Types.std.string.String = Fable.Core.Rust.emitExpr v870 v11
    let v875 : Types.EmitType<Types.std.string.String> = v874 |> unbox<Types.EmitType<Types.std.string.String>>
    let v876 : Types.std.string.String = Fable.Core.Rust.emitExpr v57 v11
    let v877 : Types.EmitType<Types.std.string.String> = v876 |> unbox<Types.EmitType<Types.std.string.String>>
    let v878 : Types.std.string.String = Fable.Core.Rust.emitExpr v871 v60
    let v879 : Types.EmitType<Types.std.string.String> = v878 |> unbox<Types.EmitType<Types.std.string.String>>
    let v880 : Types.std.string.String = Fable.Core.Rust.emitExpr v63 v11
    let v881 : Types.EmitType<Types.std.string.String> = v880 |> unbox<Types.EmitType<Types.std.string.String>>
    let v882 : Types.std.string.String = Fable.Core.Rust.emitExpr v66 v11
    let v883 : Types.EmitType<Types.std.string.String> = v882 |> unbox<Types.EmitType<Types.std.string.String>>
    let v884 : (Types.EmitType<Types.std.string.String> []) = [|v873; v875; v877; v879; v881; v883|]
    let v885 : obj = Fable.Core.Rust.emitExpr v884 v39
    let v886 : Types.std.string.String = Fable.Core.Rust.emitExpr v885 v41
    let v887 : Types.EmitType<Types.std.string.String> = v886 |> unbox<Types.EmitType<Types.std.string.String>>
    let v888 : Types.std.string.String = Fable.Core.Rust.emitExpr v73 v11
    let v889 : Types.EmitType<Types.std.string.String> = v888 |> unbox<Types.EmitType<Types.std.string.String>>
    let v890 : (Types.EmitType<Types.std.string.String> []) = [|v889|]
    let v891 : obj = Fable.Core.Rust.emitExpr v890 v39
    let v892 : Types.std.string.String = Fable.Core.Rust.emitExpr v891 v41
    let v893 : Types.EmitType<Types.std.string.String> = v892 |> unbox<Types.EmitType<Types.std.string.String>>
    let v894 : Types.std.string.String = v893 |> unbox
    let v895 : string = Fable.Core.Rust.emitExpr v894 v81
    let v896 : string = $"r#\"{v83}\"#"
    let v897 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v896
    let v898 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v897 v86
    let v899 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v898 v88
    let v900 : string = method2(v895)
    let v901 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v900 v91
    let v902 : string = method3()
    let v903 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v902 v91
    let v904 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v899, v901, v903) v95
    let v905 : string = Fable.Core.Rust.emitExpr v904 v81
    let v906 : string = $"r#\"{v98}\"#"
    let v907 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v906
    let v908 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v907 v86
    let v909 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v908 v88
    let v910 : string = method2(v905)
    let v911 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v910 v91
    let v912 : string = method4()
    let v913 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v912 v91
    let v914 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v909, v911, v913) v95
    let v915 : string = Fable.Core.Rust.emitExpr v914 v81
    let v916 : string = $"r#\"{v109}\"#"
    let v917 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v916
    let v918 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v917 v86
    let v919 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v918 v88
    let v920 : string = method2(v915)
    let v921 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v920 v91
    let v922 : string = method5()
    let v923 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v922 v91
    let v924 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v919, v921, v923) v95
    let v925 : string = Fable.Core.Rust.emitExpr v924 v81
    let v926 : Types.std.string.String = Fable.Core.Rust.emitExpr v925 v11
    let v927 : Types.EmitType<Types.std.string.String> = v926 |> unbox<Types.EmitType<Types.std.string.String>>
    let v928 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v927, v122) v123
    let v929 : Types.std.string.String = Fable.Core.Rust.emitExpr v928 v125
    let v930 : Types.std.string.String = v864 |> unbox
    let v931 : string = Fable.Core.Rust.emitExpr v930 v81
    let v932 : string = $"r#\"{v83}\"#"
    let v933 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v932
    let v934 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v933 v86
    let v935 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v934 v88
    let v936 : string = method2(v931)
    let v937 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v936 v91
    let v938 : string = method3()
    let v939 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v938 v91
    let v940 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v935, v937, v939) v95
    let v941 : string = Fable.Core.Rust.emitExpr v940 v81
    let v942 : string = $"r#\"{v98}\"#"
    let v943 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v942
    let v944 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v943 v86
    let v945 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v944 v88
    let v946 : string = method2(v941)
    let v947 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v946 v91
    let v948 : string = method4()
    let v949 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v948 v91
    let v950 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v945, v947, v949) v95
    let v951 : string = Fable.Core.Rust.emitExpr v950 v81
    let v952 : string = $"r#\"{v109}\"#"
    let v953 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v952
    let v954 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v953 v86
    let v955 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v954 v88
    let v956 : string = method2(v951)
    let v957 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v956 v91
    let v958 : string = method5()
    let v959 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v958 v91
    let v960 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v955, v957, v959) v95
    let v961 : string = Fable.Core.Rust.emitExpr v960 v81
    let v962 : Types.std.string.String = Fable.Core.Rust.emitExpr v961 v11
    let v963 : Types.EmitType<Types.std.string.String> = v962 |> unbox<Types.EmitType<Types.std.string.String>>
    let v964 : string = method6()
    let v965 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v964 v91
    let v966 : unativeint = unativeint 0
    let v967 : unativeint = unativeint 2
    let v968 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v965, v966, v967) v165
    let v969 : string = Fable.Core.Rust.emitExpr v968 v81
    let v970 : uint8 = Fable.Core.Rust.emitExpr v969 v168
    let v971 : string = method6()
    let v972 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v971 v91
    let v973 : unativeint = unativeint 2
    let v974 : unativeint = unativeint 4
    let v975 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v972, v973, v974) v165
    let v976 : string = Fable.Core.Rust.emitExpr v975 v81
    let v977 : uint8 = Fable.Core.Rust.emitExpr v976 v168
    let v978 : string = method6()
    let v979 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v978 v91
    let v980 : unativeint = unativeint 4
    let v981 : unativeint = unativeint 6
    let v982 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v979, v980, v981) v165
    let v983 : string = Fable.Core.Rust.emitExpr v982 v81
    let v984 : uint8 = Fable.Core.Rust.emitExpr v983 v168
    let v985 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v963, v970, v977, v984) v184
    let v986 : Types.std.string.String = Fable.Core.Rust.emitExpr v985 v125
    let v987 : Types.std.string.String = v887 |> unbox
    let v988 : string = Fable.Core.Rust.emitExpr v987 v81
    let v989 : string = $"r#\"{v83}\"#"
    let v990 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v989
    let v991 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v990 v86
    let v992 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v991 v88
    let v993 : string = method2(v988)
    let v994 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v993 v91
    let v995 : string = method3()
    let v996 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v995 v91
    let v997 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v992, v994, v996) v95
    let v998 : string = Fable.Core.Rust.emitExpr v997 v81
    let v999 : string = $"r#\"{v98}\"#"
    let v1000 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v999
    let v1001 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1000 v86
    let v1002 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1001 v88
    let v1003 : string = method2(v998)
    let v1004 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1003 v91
    let v1005 : string = method4()
    let v1006 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1005 v91
    let v1007 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1002, v1004, v1006) v95
    let v1008 : string = Fable.Core.Rust.emitExpr v1007 v81
    let v1009 : string = $"r#\"{v109}\"#"
    let v1010 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1009
    let v1011 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1010 v86
    let v1012 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1011 v88
    let v1013 : string = method2(v1008)
    let v1014 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1013 v91
    let v1015 : string = method5()
    let v1016 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1015 v91
    let v1017 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1012, v1014, v1016) v95
    let v1018 : string = Fable.Core.Rust.emitExpr v1017 v81
    let v1019 : Types.std.string.String = Fable.Core.Rust.emitExpr v1018 v11
    let v1020 : Types.EmitType<Types.std.string.String> = v1019 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1021 : string = method7()
    let v1022 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1021 v91
    let v1023 : unativeint = unativeint 0
    let v1024 : unativeint = unativeint 2
    let v1025 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1022, v1023, v1024) v165
    let v1026 : string = Fable.Core.Rust.emitExpr v1025 v81
    let v1027 : uint8 = Fable.Core.Rust.emitExpr v1026 v168
    let v1028 : string = method7()
    let v1029 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1028 v91
    let v1030 : unativeint = unativeint 2
    let v1031 : unativeint = unativeint 4
    let v1032 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1029, v1030, v1031) v165
    let v1033 : string = Fable.Core.Rust.emitExpr v1032 v81
    let v1034 : uint8 = Fable.Core.Rust.emitExpr v1033 v168
    let v1035 : string = method7()
    let v1036 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1035 v91
    let v1037 : unativeint = unativeint 4
    let v1038 : unativeint = unativeint 6
    let v1039 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1036, v1037, v1038) v165
    let v1040 : string = Fable.Core.Rust.emitExpr v1039 v81
    let v1041 : uint8 = Fable.Core.Rust.emitExpr v1040 v168
    let v1042 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1020, v1027, v1034, v1041) v184
    let v1043 : Types.std.string.String = Fable.Core.Rust.emitExpr v1042 v125
    let v1044 : string = $"{v929} {v986} {v1043}"
    System.Console.WriteLine v1044
    let v1045 : string = ""
    let v1046 : string = "std::fs::write($0, $1.as_str())"
    let v1047 : Result<unit, Types.std.io.Error> = Fable.Core.Rust.emitExpr struct (v854, v1045) v1046
    let v1048 : string = "*(($0).as_ref()).unwrap()"
    Fable.Core.Rust.emitExpr v1047 v1048
    let v1049 : string = "> fs_write fsx_path \"\"; ok"
    let v1050 : Types.std.string.String = Fable.Core.Rust.emitExpr v1049 v11
    let v1051 : Types.EmitType<Types.std.string.String> = v1050 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1052 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v1053 : int64 = Fable.Core.Rust.emitExpr v1052 v8
    let v1054 : int64 = v1053 - v9
    let v1055 : string = (v1054).ToString ()
    let v1056 : int32 = 6
    let v1057 : string = method1(v1056, v1055)
    let v1058 : uint8 = Fable.Core.Rust.emitExpr () v50
    let v1059 : Types.std.string.String = Fable.Core.Rust.emitExpr v52 v11
    let v1060 : Types.EmitType<Types.std.string.String> = v1059 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1061 : Types.std.string.String = Fable.Core.Rust.emitExpr v1057 v11
    let v1062 : Types.EmitType<Types.std.string.String> = v1061 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1063 : Types.std.string.String = Fable.Core.Rust.emitExpr v57 v11
    let v1064 : Types.EmitType<Types.std.string.String> = v1063 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1065 : Types.std.string.String = Fable.Core.Rust.emitExpr v1058 v60
    let v1066 : Types.EmitType<Types.std.string.String> = v1065 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1067 : Types.std.string.String = Fable.Core.Rust.emitExpr v63 v11
    let v1068 : Types.EmitType<Types.std.string.String> = v1067 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1069 : Types.std.string.String = Fable.Core.Rust.emitExpr v66 v11
    let v1070 : Types.EmitType<Types.std.string.String> = v1069 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1071 : (Types.EmitType<Types.std.string.String> []) = [|v1060; v1062; v1064; v1066; v1068; v1070|]
    let v1072 : obj = Fable.Core.Rust.emitExpr v1071 v39
    let v1073 : Types.std.string.String = Fable.Core.Rust.emitExpr v1072 v41
    let v1074 : Types.EmitType<Types.std.string.String> = v1073 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1075 : Types.std.string.String = Fable.Core.Rust.emitExpr v73 v11
    let v1076 : Types.EmitType<Types.std.string.String> = v1075 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1077 : (Types.EmitType<Types.std.string.String> []) = [|v1076|]
    let v1078 : obj = Fable.Core.Rust.emitExpr v1077 v39
    let v1079 : Types.std.string.String = Fable.Core.Rust.emitExpr v1078 v41
    let v1080 : Types.EmitType<Types.std.string.String> = v1079 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1081 : Types.std.string.String = v1080 |> unbox
    let v1082 : string = Fable.Core.Rust.emitExpr v1081 v81
    let v1083 : string = $"r#\"{v83}\"#"
    let v1084 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1083
    let v1085 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1084 v86
    let v1086 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1085 v88
    let v1087 : string = method2(v1082)
    let v1088 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1087 v91
    let v1089 : string = method3()
    let v1090 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1089 v91
    let v1091 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1086, v1088, v1090) v95
    let v1092 : string = Fable.Core.Rust.emitExpr v1091 v81
    let v1093 : string = $"r#\"{v98}\"#"
    let v1094 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1093
    let v1095 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1094 v86
    let v1096 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1095 v88
    let v1097 : string = method2(v1092)
    let v1098 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1097 v91
    let v1099 : string = method4()
    let v1100 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1099 v91
    let v1101 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1096, v1098, v1100) v95
    let v1102 : string = Fable.Core.Rust.emitExpr v1101 v81
    let v1103 : string = $"r#\"{v109}\"#"
    let v1104 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1103
    let v1105 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1104 v86
    let v1106 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1105 v88
    let v1107 : string = method2(v1102)
    let v1108 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1107 v91
    let v1109 : string = method5()
    let v1110 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1109 v91
    let v1111 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1106, v1108, v1110) v95
    let v1112 : string = Fable.Core.Rust.emitExpr v1111 v81
    let v1113 : Types.std.string.String = Fable.Core.Rust.emitExpr v1112 v11
    let v1114 : Types.EmitType<Types.std.string.String> = v1113 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1115 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1114, v122) v123
    let v1116 : Types.std.string.String = Fable.Core.Rust.emitExpr v1115 v125
    let v1117 : Types.std.string.String = v1051 |> unbox
    let v1118 : string = Fable.Core.Rust.emitExpr v1117 v81
    let v1119 : string = $"r#\"{v83}\"#"
    let v1120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1119
    let v1121 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1120 v86
    let v1122 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1121 v88
    let v1123 : string = method2(v1118)
    let v1124 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1123 v91
    let v1125 : string = method3()
    let v1126 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1125 v91
    let v1127 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1122, v1124, v1126) v95
    let v1128 : string = Fable.Core.Rust.emitExpr v1127 v81
    let v1129 : string = $"r#\"{v98}\"#"
    let v1130 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1129
    let v1131 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1130 v86
    let v1132 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1131 v88
    let v1133 : string = method2(v1128)
    let v1134 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1133 v91
    let v1135 : string = method4()
    let v1136 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1135 v91
    let v1137 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1132, v1134, v1136) v95
    let v1138 : string = Fable.Core.Rust.emitExpr v1137 v81
    let v1139 : string = $"r#\"{v109}\"#"
    let v1140 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1139
    let v1141 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1140 v86
    let v1142 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1141 v88
    let v1143 : string = method2(v1138)
    let v1144 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1143 v91
    let v1145 : string = method5()
    let v1146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1145 v91
    let v1147 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1142, v1144, v1146) v95
    let v1148 : string = Fable.Core.Rust.emitExpr v1147 v81
    let v1149 : Types.std.string.String = Fable.Core.Rust.emitExpr v1148 v11
    let v1150 : Types.EmitType<Types.std.string.String> = v1149 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1151 : string = method6()
    let v1152 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1151 v91
    let v1153 : unativeint = unativeint 0
    let v1154 : unativeint = unativeint 2
    let v1155 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1152, v1153, v1154) v165
    let v1156 : string = Fable.Core.Rust.emitExpr v1155 v81
    let v1157 : uint8 = Fable.Core.Rust.emitExpr v1156 v168
    let v1158 : string = method6()
    let v1159 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1158 v91
    let v1160 : unativeint = unativeint 2
    let v1161 : unativeint = unativeint 4
    let v1162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1159, v1160, v1161) v165
    let v1163 : string = Fable.Core.Rust.emitExpr v1162 v81
    let v1164 : uint8 = Fable.Core.Rust.emitExpr v1163 v168
    let v1165 : string = method6()
    let v1166 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1165 v91
    let v1167 : unativeint = unativeint 4
    let v1168 : unativeint = unativeint 6
    let v1169 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1166, v1167, v1168) v165
    let v1170 : string = Fable.Core.Rust.emitExpr v1169 v81
    let v1171 : uint8 = Fable.Core.Rust.emitExpr v1170 v168
    let v1172 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1150, v1157, v1164, v1171) v184
    let v1173 : Types.std.string.String = Fable.Core.Rust.emitExpr v1172 v125
    let v1174 : Types.std.string.String = v1074 |> unbox
    let v1175 : string = Fable.Core.Rust.emitExpr v1174 v81
    let v1176 : string = $"r#\"{v83}\"#"
    let v1177 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1176
    let v1178 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1177 v86
    let v1179 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1178 v88
    let v1180 : string = method2(v1175)
    let v1181 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1180 v91
    let v1182 : string = method3()
    let v1183 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1182 v91
    let v1184 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1179, v1181, v1183) v95
    let v1185 : string = Fable.Core.Rust.emitExpr v1184 v81
    let v1186 : string = $"r#\"{v98}\"#"
    let v1187 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1186
    let v1188 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1187 v86
    let v1189 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1188 v88
    let v1190 : string = method2(v1185)
    let v1191 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1190 v91
    let v1192 : string = method4()
    let v1193 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1192 v91
    let v1194 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1189, v1191, v1193) v95
    let v1195 : string = Fable.Core.Rust.emitExpr v1194 v81
    let v1196 : string = $"r#\"{v109}\"#"
    let v1197 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1196
    let v1198 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1197 v86
    let v1199 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1198 v88
    let v1200 : string = method2(v1195)
    let v1201 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1200 v91
    let v1202 : string = method5()
    let v1203 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1202 v91
    let v1204 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1199, v1201, v1203) v95
    let v1205 : string = Fable.Core.Rust.emitExpr v1204 v81
    let v1206 : Types.std.string.String = Fable.Core.Rust.emitExpr v1205 v11
    let v1207 : Types.EmitType<Types.std.string.String> = v1206 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1208 : string = method7()
    let v1209 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1208 v91
    let v1210 : unativeint = unativeint 0
    let v1211 : unativeint = unativeint 2
    let v1212 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1209, v1210, v1211) v165
    let v1213 : string = Fable.Core.Rust.emitExpr v1212 v81
    let v1214 : uint8 = Fable.Core.Rust.emitExpr v1213 v168
    let v1215 : string = method7()
    let v1216 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1215 v91
    let v1217 : unativeint = unativeint 2
    let v1218 : unativeint = unativeint 4
    let v1219 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1216, v1217, v1218) v165
    let v1220 : string = Fable.Core.Rust.emitExpr v1219 v81
    let v1221 : uint8 = Fable.Core.Rust.emitExpr v1220 v168
    let v1222 : string = method7()
    let v1223 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1222 v91
    let v1224 : unativeint = unativeint 4
    let v1225 : unativeint = unativeint 6
    let v1226 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1223, v1224, v1225) v165
    let v1227 : string = Fable.Core.Rust.emitExpr v1226 v81
    let v1228 : uint8 = Fable.Core.Rust.emitExpr v1227 v168
    let v1229 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1207, v1214, v1221, v1228) v184
    let v1230 : Types.std.string.String = Fable.Core.Rust.emitExpr v1229 v125
    let v1231 : string = $"{v1116} {v1173} {v1230}"
    System.Console.WriteLine v1231
    let v1232 : string = "std::fs::read_to_string($0)"
    let v1233 : Result<Types.std.string.String, Types.std.io.Error> = Fable.Core.Rust.emitExpr v648 v1232
    let v1234 : string = "($0).as_ref().unwrap().to_string()"
    let v1235 : Types.std.string.String = Fable.Core.Rust.emitExpr v1233 v1234
    let struct (v1236 : string, v1237 : string, v1238 : string, v1239 : bool) = method0()
    let v1240 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v1241 : int64 = Fable.Core.Rust.emitExpr v1240 v8
    let v1242 : Types.std.string.String = Fable.Core.Rust.emitExpr v649 v11
    let v1243 : Types.EmitType<Types.std.string.String> = v1242 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1244 : string = Fable.Core.Rust.emitExpr v648 v21
    let v1245 : Types.std.string.String = Fable.Core.Rust.emitExpr v1244 v11
    let v1246 : Types.EmitType<Types.std.string.String> = v1245 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1247 : string = "spiproj_text len"
    let v1248 : Types.std.string.String = Fable.Core.Rust.emitExpr v1247 v11
    let v1249 : Types.EmitType<Types.std.string.String> = v1248 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1250 : string = "($0).len().try_into().unwrap()"
    let v1251 : int32 = Fable.Core.Rust.emitExpr v1235 v1250
    let v1252 : Types.std.string.String = Fable.Core.Rust.emitExpr v1251 v60
    let v1253 : Types.EmitType<Types.std.string.String> = v1252 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1254 : (Types.EmitType<Types.std.string.String> []) = [|v1243; v1246; v1249; v1253|]
    let v1255 : obj = Fable.Core.Rust.emitExpr v1254 v39
    let v1256 : Types.std.string.String = Fable.Core.Rust.emitExpr v1255 v41
    let v1257 : Types.EmitType<Types.std.string.String> = v1256 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1258 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v1259 : int64 = Fable.Core.Rust.emitExpr v1258 v8
    let v1260 : int64 = v1259 - v1241
    let v1261 : string = (v1260).ToString ()
    let v1262 : int32 = 6
    let v1263 : string = method1(v1262, v1261)
    let v1264 : uint8 = Fable.Core.Rust.emitExpr () v50
    let v1265 : Types.std.string.String = Fable.Core.Rust.emitExpr v52 v11
    let v1266 : Types.EmitType<Types.std.string.String> = v1265 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1267 : Types.std.string.String = Fable.Core.Rust.emitExpr v1263 v11
    let v1268 : Types.EmitType<Types.std.string.String> = v1267 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1269 : Types.std.string.String = Fable.Core.Rust.emitExpr v57 v11
    let v1270 : Types.EmitType<Types.std.string.String> = v1269 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1271 : Types.std.string.String = Fable.Core.Rust.emitExpr v1264 v60
    let v1272 : Types.EmitType<Types.std.string.String> = v1271 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1273 : Types.std.string.String = Fable.Core.Rust.emitExpr v63 v11
    let v1274 : Types.EmitType<Types.std.string.String> = v1273 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1275 : Types.std.string.String = Fable.Core.Rust.emitExpr v66 v11
    let v1276 : Types.EmitType<Types.std.string.String> = v1275 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1277 : (Types.EmitType<Types.std.string.String> []) = [|v1266; v1268; v1270; v1272; v1274; v1276|]
    let v1278 : obj = Fable.Core.Rust.emitExpr v1277 v39
    let v1279 : Types.std.string.String = Fable.Core.Rust.emitExpr v1278 v41
    let v1280 : Types.EmitType<Types.std.string.String> = v1279 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1281 : string = "> spiproj_open ()"
    let v1282 : Types.std.string.String = Fable.Core.Rust.emitExpr v1281 v11
    let v1283 : Types.EmitType<Types.std.string.String> = v1282 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1284 : (Types.EmitType<Types.std.string.String> []) = [|v1283|]
    let v1285 : obj = Fable.Core.Rust.emitExpr v1284 v39
    let v1286 : Types.std.string.String = Fable.Core.Rust.emitExpr v1285 v41
    let v1287 : Types.EmitType<Types.std.string.String> = v1286 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1288 : Types.std.string.String = v1287 |> unbox
    let v1289 : string = Fable.Core.Rust.emitExpr v1288 v81
    let v1290 : string = $"r#\"{v83}\"#"
    let v1291 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1290
    let v1292 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1291 v86
    let v1293 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1292 v88
    let v1294 : string = method2(v1289)
    let v1295 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1294 v91
    let v1296 : string = method3()
    let v1297 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1296 v91
    let v1298 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1293, v1295, v1297) v95
    let v1299 : string = Fable.Core.Rust.emitExpr v1298 v81
    let v1300 : string = $"r#\"{v98}\"#"
    let v1301 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1300
    let v1302 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1301 v86
    let v1303 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1302 v88
    let v1304 : string = method2(v1299)
    let v1305 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1304 v91
    let v1306 : string = method4()
    let v1307 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1306 v91
    let v1308 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1303, v1305, v1307) v95
    let v1309 : string = Fable.Core.Rust.emitExpr v1308 v81
    let v1310 : string = $"r#\"{v109}\"#"
    let v1311 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1310
    let v1312 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1311 v86
    let v1313 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1312 v88
    let v1314 : string = method2(v1309)
    let v1315 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1314 v91
    let v1316 : string = method5()
    let v1317 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1316 v91
    let v1318 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1313, v1315, v1317) v95
    let v1319 : string = Fable.Core.Rust.emitExpr v1318 v81
    let v1320 : Types.std.string.String = Fable.Core.Rust.emitExpr v1319 v11
    let v1321 : Types.EmitType<Types.std.string.String> = v1320 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1322 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1321, v122) v123
    let v1323 : Types.std.string.String = Fable.Core.Rust.emitExpr v1322 v125
    let v1324 : Types.std.string.String = v1257 |> unbox
    let v1325 : string = Fable.Core.Rust.emitExpr v1324 v81
    let v1326 : string = $"r#\"{v83}\"#"
    let v1327 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1326
    let v1328 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1327 v86
    let v1329 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1328 v88
    let v1330 : string = method2(v1325)
    let v1331 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1330 v91
    let v1332 : string = method3()
    let v1333 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1332 v91
    let v1334 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1329, v1331, v1333) v95
    let v1335 : string = Fable.Core.Rust.emitExpr v1334 v81
    let v1336 : string = $"r#\"{v98}\"#"
    let v1337 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1336
    let v1338 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1337 v86
    let v1339 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1338 v88
    let v1340 : string = method2(v1335)
    let v1341 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1340 v91
    let v1342 : string = method4()
    let v1343 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1342 v91
    let v1344 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1339, v1341, v1343) v95
    let v1345 : string = Fable.Core.Rust.emitExpr v1344 v81
    let v1346 : string = $"r#\"{v109}\"#"
    let v1347 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1346
    let v1348 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1347 v86
    let v1349 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1348 v88
    let v1350 : string = method2(v1345)
    let v1351 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1350 v91
    let v1352 : string = method5()
    let v1353 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1352 v91
    let v1354 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1349, v1351, v1353) v95
    let v1355 : string = Fable.Core.Rust.emitExpr v1354 v81
    let v1356 : Types.std.string.String = Fable.Core.Rust.emitExpr v1355 v11
    let v1357 : Types.EmitType<Types.std.string.String> = v1356 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1358 : string = method8()
    let v1359 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1358 v91
    let v1360 : unativeint = unativeint 0
    let v1361 : unativeint = unativeint 2
    let v1362 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1359, v1360, v1361) v165
    let v1363 : string = Fable.Core.Rust.emitExpr v1362 v81
    let v1364 : uint8 = Fable.Core.Rust.emitExpr v1363 v168
    let v1365 : string = method8()
    let v1366 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1365 v91
    let v1367 : unativeint = unativeint 2
    let v1368 : unativeint = unativeint 4
    let v1369 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1366, v1367, v1368) v165
    let v1370 : string = Fable.Core.Rust.emitExpr v1369 v81
    let v1371 : uint8 = Fable.Core.Rust.emitExpr v1370 v168
    let v1372 : string = method8()
    let v1373 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1372 v91
    let v1374 : unativeint = unativeint 4
    let v1375 : unativeint = unativeint 6
    let v1376 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1373, v1374, v1375) v165
    let v1377 : string = Fable.Core.Rust.emitExpr v1376 v81
    let v1378 : uint8 = Fable.Core.Rust.emitExpr v1377 v168
    let v1379 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1357, v1364, v1371, v1378) v184
    let v1380 : Types.std.string.String = Fable.Core.Rust.emitExpr v1379 v125
    let v1381 : Types.std.string.String = v1280 |> unbox
    let v1382 : string = Fable.Core.Rust.emitExpr v1381 v81
    let v1383 : string = $"r#\"{v83}\"#"
    let v1384 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1383
    let v1385 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1384 v86
    let v1386 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1385 v88
    let v1387 : string = method2(v1382)
    let v1388 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1387 v91
    let v1389 : string = method3()
    let v1390 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1389 v91
    let v1391 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1386, v1388, v1390) v95
    let v1392 : string = Fable.Core.Rust.emitExpr v1391 v81
    let v1393 : string = $"r#\"{v98}\"#"
    let v1394 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1393
    let v1395 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1394 v86
    let v1396 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1395 v88
    let v1397 : string = method2(v1392)
    let v1398 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1397 v91
    let v1399 : string = method4()
    let v1400 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1399 v91
    let v1401 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1396, v1398, v1400) v95
    let v1402 : string = Fable.Core.Rust.emitExpr v1401 v81
    let v1403 : string = $"r#\"{v109}\"#"
    let v1404 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1403
    let v1405 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1404 v86
    let v1406 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1405 v88
    let v1407 : string = method2(v1402)
    let v1408 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1407 v91
    let v1409 : string = method5()
    let v1410 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1409 v91
    let v1411 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1406, v1408, v1410) v95
    let v1412 : string = Fable.Core.Rust.emitExpr v1411 v81
    let v1413 : Types.std.string.String = Fable.Core.Rust.emitExpr v1412 v11
    let v1414 : Types.EmitType<Types.std.string.String> = v1413 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1415 : string = method7()
    let v1416 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1415 v91
    let v1417 : unativeint = unativeint 0
    let v1418 : unativeint = unativeint 2
    let v1419 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1416, v1417, v1418) v165
    let v1420 : string = Fable.Core.Rust.emitExpr v1419 v81
    let v1421 : uint8 = Fable.Core.Rust.emitExpr v1420 v168
    let v1422 : string = method7()
    let v1423 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1422 v91
    let v1424 : unativeint = unativeint 2
    let v1425 : unativeint = unativeint 4
    let v1426 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1423, v1424, v1425) v165
    let v1427 : string = Fable.Core.Rust.emitExpr v1426 v81
    let v1428 : uint8 = Fable.Core.Rust.emitExpr v1427 v168
    let v1429 : string = method7()
    let v1430 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1429 v91
    let v1431 : unativeint = unativeint 4
    let v1432 : unativeint = unativeint 6
    let v1433 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1430, v1431, v1432) v165
    let v1434 : string = Fable.Core.Rust.emitExpr v1433 v81
    let v1435 : uint8 = Fable.Core.Rust.emitExpr v1434 v168
    let v1436 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1414, v1421, v1428, v1435) v184
    let v1437 : Types.std.string.String = Fable.Core.Rust.emitExpr v1436 v125
    let v1438 : string = $"{v1323} {v1380} {v1437}"
    System.Console.WriteLine v1438
    let v1439 : string = "{"
    let v1440 : string = "\"ProjectFileOpen\": {"
    let v1441 : string = v1439 + v1440
    let v1442 : string = "\"uri\": $0,"
    let v1443 : string = v1441 + v1442
    let v1444 : string = "\"spiprojText\": $1"
    let v1445 : string = v1443 + v1444
    let v1446 : string = "}"
    let v1447 : string = v1445 + v1446
    let v1448 : string = v1447 + v1446
    let v1449 : string = "serde_json::json!("
    let v1450 : string = v1449 + v1448
    let v1451 : string = ").to_string()"
    let v1452 : string = v1450 + v1451
    let v1453 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v648, v1235) v1452
    let v1454 : string = "json len="
    let v1455 : Types.std.string.String = Fable.Core.Rust.emitExpr v1454 v11
    let v1456 : Types.EmitType<Types.std.string.String> = v1455 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1457 : int32 = Fable.Core.Rust.emitExpr v1453 v1250
    let v1458 : Types.std.string.String = Fable.Core.Rust.emitExpr v1457 v60
    let v1459 : Types.EmitType<Types.std.string.String> = v1458 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1460 : (Types.EmitType<Types.std.string.String> []) = [|v1456; v1459|]
    let v1461 : obj = Fable.Core.Rust.emitExpr v1460 v39
    let v1462 : Types.std.string.String = Fable.Core.Rust.emitExpr v1461 v41
    let v1463 : Types.EmitType<Types.std.string.String> = v1462 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1464 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v1465 : int64 = Fable.Core.Rust.emitExpr v1464 v8
    let v1466 : int64 = v1465 - v1241
    let v1467 : string = (v1466).ToString ()
    let v1468 : int32 = 6
    let v1469 : string = method1(v1468, v1467)
    let v1470 : uint8 = Fable.Core.Rust.emitExpr () v50
    let v1471 : Types.std.string.String = Fable.Core.Rust.emitExpr v52 v11
    let v1472 : Types.EmitType<Types.std.string.String> = v1471 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1473 : Types.std.string.String = Fable.Core.Rust.emitExpr v1469 v11
    let v1474 : Types.EmitType<Types.std.string.String> = v1473 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1475 : Types.std.string.String = Fable.Core.Rust.emitExpr v57 v11
    let v1476 : Types.EmitType<Types.std.string.String> = v1475 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1477 : Types.std.string.String = Fable.Core.Rust.emitExpr v1470 v60
    let v1478 : Types.EmitType<Types.std.string.String> = v1477 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1479 : Types.std.string.String = Fable.Core.Rust.emitExpr v63 v11
    let v1480 : Types.EmitType<Types.std.string.String> = v1479 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1481 : Types.std.string.String = Fable.Core.Rust.emitExpr v66 v11
    let v1482 : Types.EmitType<Types.std.string.String> = v1481 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1483 : (Types.EmitType<Types.std.string.String> []) = [|v1472; v1474; v1476; v1478; v1480; v1482|]
    let v1484 : obj = Fable.Core.Rust.emitExpr v1483 v39
    let v1485 : Types.std.string.String = Fable.Core.Rust.emitExpr v1484 v41
    let v1486 : Types.EmitType<Types.std.string.String> = v1485 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1487 : Types.std.string.String = Fable.Core.Rust.emitExpr v1281 v11
    let v1488 : Types.EmitType<Types.std.string.String> = v1487 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1489 : (Types.EmitType<Types.std.string.String> []) = [|v1488|]
    let v1490 : obj = Fable.Core.Rust.emitExpr v1489 v39
    let v1491 : Types.std.string.String = Fable.Core.Rust.emitExpr v1490 v41
    let v1492 : Types.EmitType<Types.std.string.String> = v1491 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1493 : Types.std.string.String = v1492 |> unbox
    let v1494 : string = Fable.Core.Rust.emitExpr v1493 v81
    let v1495 : string = $"r#\"{v83}\"#"
    let v1496 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1495
    let v1497 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1496 v86
    let v1498 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1497 v88
    let v1499 : string = method2(v1494)
    let v1500 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1499 v91
    let v1501 : string = method3()
    let v1502 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1501 v91
    let v1503 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1498, v1500, v1502) v95
    let v1504 : string = Fable.Core.Rust.emitExpr v1503 v81
    let v1505 : string = $"r#\"{v98}\"#"
    let v1506 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1505
    let v1507 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1506 v86
    let v1508 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1507 v88
    let v1509 : string = method2(v1504)
    let v1510 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1509 v91
    let v1511 : string = method4()
    let v1512 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1511 v91
    let v1513 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1508, v1510, v1512) v95
    let v1514 : string = Fable.Core.Rust.emitExpr v1513 v81
    let v1515 : string = $"r#\"{v109}\"#"
    let v1516 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1515
    let v1517 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1516 v86
    let v1518 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1517 v88
    let v1519 : string = method2(v1514)
    let v1520 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1519 v91
    let v1521 : string = method5()
    let v1522 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1521 v91
    let v1523 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1518, v1520, v1522) v95
    let v1524 : string = Fable.Core.Rust.emitExpr v1523 v81
    let v1525 : Types.std.string.String = Fable.Core.Rust.emitExpr v1524 v11
    let v1526 : Types.EmitType<Types.std.string.String> = v1525 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1527 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1526, v122) v123
    let v1528 : Types.std.string.String = Fable.Core.Rust.emitExpr v1527 v125
    let v1529 : Types.std.string.String = v1463 |> unbox
    let v1530 : string = Fable.Core.Rust.emitExpr v1529 v81
    let v1531 : string = $"r#\"{v83}\"#"
    let v1532 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1531
    let v1533 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1532 v86
    let v1534 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1533 v88
    let v1535 : string = method2(v1530)
    let v1536 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1535 v91
    let v1537 : string = method3()
    let v1538 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1537 v91
    let v1539 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1534, v1536, v1538) v95
    let v1540 : string = Fable.Core.Rust.emitExpr v1539 v81
    let v1541 : string = $"r#\"{v98}\"#"
    let v1542 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1541
    let v1543 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1542 v86
    let v1544 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1543 v88
    let v1545 : string = method2(v1540)
    let v1546 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1545 v91
    let v1547 : string = method4()
    let v1548 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1547 v91
    let v1549 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1544, v1546, v1548) v95
    let v1550 : string = Fable.Core.Rust.emitExpr v1549 v81
    let v1551 : string = $"r#\"{v109}\"#"
    let v1552 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1551
    let v1553 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1552 v86
    let v1554 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1553 v88
    let v1555 : string = method2(v1550)
    let v1556 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1555 v91
    let v1557 : string = method5()
    let v1558 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1557 v91
    let v1559 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1554, v1556, v1558) v95
    let v1560 : string = Fable.Core.Rust.emitExpr v1559 v81
    let v1561 : Types.std.string.String = Fable.Core.Rust.emitExpr v1560 v11
    let v1562 : Types.EmitType<Types.std.string.String> = v1561 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1563 : string = method8()
    let v1564 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1563 v91
    let v1565 : unativeint = unativeint 0
    let v1566 : unativeint = unativeint 2
    let v1567 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1564, v1565, v1566) v165
    let v1568 : string = Fable.Core.Rust.emitExpr v1567 v81
    let v1569 : uint8 = Fable.Core.Rust.emitExpr v1568 v168
    let v1570 : string = method8()
    let v1571 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1570 v91
    let v1572 : unativeint = unativeint 2
    let v1573 : unativeint = unativeint 4
    let v1574 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1571, v1572, v1573) v165
    let v1575 : string = Fable.Core.Rust.emitExpr v1574 v81
    let v1576 : uint8 = Fable.Core.Rust.emitExpr v1575 v168
    let v1577 : string = method8()
    let v1578 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1577 v91
    let v1579 : unativeint = unativeint 4
    let v1580 : unativeint = unativeint 6
    let v1581 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1578, v1579, v1580) v165
    let v1582 : string = Fable.Core.Rust.emitExpr v1581 v81
    let v1583 : uint8 = Fable.Core.Rust.emitExpr v1582 v168
    let v1584 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1562, v1569, v1576, v1583) v184
    let v1585 : Types.std.string.String = Fable.Core.Rust.emitExpr v1584 v125
    let v1586 : Types.std.string.String = v1486 |> unbox
    let v1587 : string = Fable.Core.Rust.emitExpr v1586 v81
    let v1588 : string = $"r#\"{v83}\"#"
    let v1589 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1588
    let v1590 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1589 v86
    let v1591 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1590 v88
    let v1592 : string = method2(v1587)
    let v1593 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1592 v91
    let v1594 : string = method3()
    let v1595 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1594 v91
    let v1596 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1591, v1593, v1595) v95
    let v1597 : string = Fable.Core.Rust.emitExpr v1596 v81
    let v1598 : string = $"r#\"{v98}\"#"
    let v1599 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1598
    let v1600 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1599 v86
    let v1601 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1600 v88
    let v1602 : string = method2(v1597)
    let v1603 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1602 v91
    let v1604 : string = method4()
    let v1605 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1604 v91
    let v1606 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1601, v1603, v1605) v95
    let v1607 : string = Fable.Core.Rust.emitExpr v1606 v81
    let v1608 : string = $"r#\"{v109}\"#"
    let v1609 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1608
    let v1610 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1609 v86
    let v1611 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1610 v88
    let v1612 : string = method2(v1607)
    let v1613 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1612 v91
    let v1614 : string = method5()
    let v1615 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1614 v91
    let v1616 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1611, v1613, v1615) v95
    let v1617 : string = Fable.Core.Rust.emitExpr v1616 v81
    let v1618 : Types.std.string.String = Fable.Core.Rust.emitExpr v1617 v11
    let v1619 : Types.EmitType<Types.std.string.String> = v1618 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1620 : string = method7()
    let v1621 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1620 v91
    let v1622 : unativeint = unativeint 0
    let v1623 : unativeint = unativeint 2
    let v1624 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1621, v1622, v1623) v165
    let v1625 : string = Fable.Core.Rust.emitExpr v1624 v81
    let v1626 : uint8 = Fable.Core.Rust.emitExpr v1625 v168
    let v1627 : string = method7()
    let v1628 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1627 v91
    let v1629 : unativeint = unativeint 2
    let v1630 : unativeint = unativeint 4
    let v1631 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1628, v1629, v1630) v165
    let v1632 : string = Fable.Core.Rust.emitExpr v1631 v81
    let v1633 : uint8 = Fable.Core.Rust.emitExpr v1632 v168
    let v1634 : string = method7()
    let v1635 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1634 v91
    let v1636 : unativeint = unativeint 4
    let v1637 : unativeint = unativeint 6
    let v1638 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1635, v1636, v1637) v165
    let v1639 : string = Fable.Core.Rust.emitExpr v1638 v81
    let v1640 : uint8 = Fable.Core.Rust.emitExpr v1639 v168
    let v1641 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1619, v1626, v1633, v1640) v184
    let v1642 : Types.std.string.String = Fable.Core.Rust.emitExpr v1641 v125
    let v1643 : string = $"{v1528} {v1585} {v1642}"
    System.Console.WriteLine v1643
    let struct (v1644 : string, v1645 : string, v1646 : string, v1647 : bool) = method0()
    let v1648 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v1649 : int64 = Fable.Core.Rust.emitExpr v1648 v8
    let v1650 : string = "host"
    let v1651 : Types.std.string.String = Fable.Core.Rust.emitExpr v1650 v11
    let v1652 : Types.EmitType<Types.std.string.String> = v1651 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1653 : string = "localhost"
    let v1654 : Types.std.string.String = Fable.Core.Rust.emitExpr v1653 v11
    let v1655 : Types.EmitType<Types.std.string.String> = v1654 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1656 : string = "port"
    let v1657 : Types.std.string.String = Fable.Core.Rust.emitExpr v1656 v11
    let v1658 : Types.EmitType<Types.std.string.String> = v1657 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1659 : Types.std.string.String = Fable.Core.Rust.emitExpr 13805 v60
    let v1660 : Types.EmitType<Types.std.string.String> = v1659 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1661 : string = "msg len"
    let v1662 : Types.std.string.String = Fable.Core.Rust.emitExpr v1661 v11
    let v1663 : Types.EmitType<Types.std.string.String> = v1662 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1664 : int32 = Fable.Core.Rust.emitExpr v1453 v1250
    let v1665 : Types.std.string.String = Fable.Core.Rust.emitExpr v1664 v60
    let v1666 : Types.EmitType<Types.std.string.String> = v1665 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1667 : (Types.EmitType<Types.std.string.String> []) = [|v1652; v1655; v1658; v1660; v1663; v1666|]
    let v1668 : obj = Fable.Core.Rust.emitExpr v1667 v39
    let v1669 : Types.std.string.String = Fable.Core.Rust.emitExpr v1668 v41
    let v1670 : Types.EmitType<Types.std.string.String> = v1669 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1671 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v1672 : int64 = Fable.Core.Rust.emitExpr v1671 v8
    let v1673 : int64 = v1672 - v1649
    let v1674 : string = (v1673).ToString ()
    let v1675 : int32 = 6
    let v1676 : string = method1(v1675, v1674)
    let v1677 : uint8 = Fable.Core.Rust.emitExpr () v50
    let v1678 : Types.std.string.String = Fable.Core.Rust.emitExpr v52 v11
    let v1679 : Types.EmitType<Types.std.string.String> = v1678 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1680 : Types.std.string.String = Fable.Core.Rust.emitExpr v1676 v11
    let v1681 : Types.EmitType<Types.std.string.String> = v1680 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1682 : Types.std.string.String = Fable.Core.Rust.emitExpr v57 v11
    let v1683 : Types.EmitType<Types.std.string.String> = v1682 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1684 : Types.std.string.String = Fable.Core.Rust.emitExpr v1677 v60
    let v1685 : Types.EmitType<Types.std.string.String> = v1684 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1686 : Types.std.string.String = Fable.Core.Rust.emitExpr v63 v11
    let v1687 : Types.EmitType<Types.std.string.String> = v1686 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1688 : Types.std.string.String = Fable.Core.Rust.emitExpr v66 v11
    let v1689 : Types.EmitType<Types.std.string.String> = v1688 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1690 : (Types.EmitType<Types.std.string.String> []) = [|v1679; v1681; v1683; v1685; v1687; v1689|]
    let v1691 : obj = Fable.Core.Rust.emitExpr v1690 v39
    let v1692 : Types.std.string.String = Fable.Core.Rust.emitExpr v1691 v41
    let v1693 : Types.EmitType<Types.std.string.String> = v1692 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1694 : string = "> zmq_request ()"
    let v1695 : Types.std.string.String = Fable.Core.Rust.emitExpr v1694 v11
    let v1696 : Types.EmitType<Types.std.string.String> = v1695 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1697 : (Types.EmitType<Types.std.string.String> []) = [|v1696|]
    let v1698 : obj = Fable.Core.Rust.emitExpr v1697 v39
    let v1699 : Types.std.string.String = Fable.Core.Rust.emitExpr v1698 v41
    let v1700 : Types.EmitType<Types.std.string.String> = v1699 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1701 : Types.std.string.String = v1700 |> unbox
    let v1702 : string = Fable.Core.Rust.emitExpr v1701 v81
    let v1703 : string = $"r#\"{v83}\"#"
    let v1704 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1703
    let v1705 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1704 v86
    let v1706 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1705 v88
    let v1707 : string = method2(v1702)
    let v1708 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1707 v91
    let v1709 : string = method3()
    let v1710 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1709 v91
    let v1711 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1706, v1708, v1710) v95
    let v1712 : string = Fable.Core.Rust.emitExpr v1711 v81
    let v1713 : string = $"r#\"{v98}\"#"
    let v1714 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1713
    let v1715 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1714 v86
    let v1716 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1715 v88
    let v1717 : string = method2(v1712)
    let v1718 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1717 v91
    let v1719 : string = method4()
    let v1720 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1719 v91
    let v1721 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1716, v1718, v1720) v95
    let v1722 : string = Fable.Core.Rust.emitExpr v1721 v81
    let v1723 : string = $"r#\"{v109}\"#"
    let v1724 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1723
    let v1725 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1724 v86
    let v1726 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1725 v88
    let v1727 : string = method2(v1722)
    let v1728 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1727 v91
    let v1729 : string = method5()
    let v1730 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1729 v91
    let v1731 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1726, v1728, v1730) v95
    let v1732 : string = Fable.Core.Rust.emitExpr v1731 v81
    let v1733 : Types.std.string.String = Fable.Core.Rust.emitExpr v1732 v11
    let v1734 : Types.EmitType<Types.std.string.String> = v1733 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1735 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1734, v122) v123
    let v1736 : Types.std.string.String = Fable.Core.Rust.emitExpr v1735 v125
    let v1737 : Types.std.string.String = v1670 |> unbox
    let v1738 : string = Fable.Core.Rust.emitExpr v1737 v81
    let v1739 : string = $"r#\"{v83}\"#"
    let v1740 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1739
    let v1741 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1740 v86
    let v1742 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1741 v88
    let v1743 : string = method2(v1738)
    let v1744 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1743 v91
    let v1745 : string = method3()
    let v1746 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1745 v91
    let v1747 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1742, v1744, v1746) v95
    let v1748 : string = Fable.Core.Rust.emitExpr v1747 v81
    let v1749 : string = $"r#\"{v98}\"#"
    let v1750 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1749
    let v1751 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1750 v86
    let v1752 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1751 v88
    let v1753 : string = method2(v1748)
    let v1754 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1753 v91
    let v1755 : string = method4()
    let v1756 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1755 v91
    let v1757 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1752, v1754, v1756) v95
    let v1758 : string = Fable.Core.Rust.emitExpr v1757 v81
    let v1759 : string = $"r#\"{v109}\"#"
    let v1760 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1759
    let v1761 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1760 v86
    let v1762 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1761 v88
    let v1763 : string = method2(v1758)
    let v1764 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1763 v91
    let v1765 : string = method5()
    let v1766 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1765 v91
    let v1767 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1762, v1764, v1766) v95
    let v1768 : string = Fable.Core.Rust.emitExpr v1767 v81
    let v1769 : Types.std.string.String = Fable.Core.Rust.emitExpr v1768 v11
    let v1770 : Types.EmitType<Types.std.string.String> = v1769 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1771 : string = method9()
    let v1772 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1771 v91
    let v1773 : unativeint = unativeint 0
    let v1774 : unativeint = unativeint 2
    let v1775 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1772, v1773, v1774) v165
    let v1776 : string = Fable.Core.Rust.emitExpr v1775 v81
    let v1777 : uint8 = Fable.Core.Rust.emitExpr v1776 v168
    let v1778 : string = method9()
    let v1779 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1778 v91
    let v1780 : unativeint = unativeint 2
    let v1781 : unativeint = unativeint 4
    let v1782 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1779, v1780, v1781) v165
    let v1783 : string = Fable.Core.Rust.emitExpr v1782 v81
    let v1784 : uint8 = Fable.Core.Rust.emitExpr v1783 v168
    let v1785 : string = method9()
    let v1786 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1785 v91
    let v1787 : unativeint = unativeint 4
    let v1788 : unativeint = unativeint 6
    let v1789 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1786, v1787, v1788) v165
    let v1790 : string = Fable.Core.Rust.emitExpr v1789 v81
    let v1791 : uint8 = Fable.Core.Rust.emitExpr v1790 v168
    let v1792 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1770, v1777, v1784, v1791) v184
    let v1793 : Types.std.string.String = Fable.Core.Rust.emitExpr v1792 v125
    let v1794 : Types.std.string.String = v1693 |> unbox
    let v1795 : string = Fable.Core.Rust.emitExpr v1794 v81
    let v1796 : string = $"r#\"{v83}\"#"
    let v1797 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1796
    let v1798 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1797 v86
    let v1799 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1798 v88
    let v1800 : string = method2(v1795)
    let v1801 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1800 v91
    let v1802 : string = method3()
    let v1803 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1802 v91
    let v1804 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1799, v1801, v1803) v95
    let v1805 : string = Fable.Core.Rust.emitExpr v1804 v81
    let v1806 : string = $"r#\"{v98}\"#"
    let v1807 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1806
    let v1808 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1807 v86
    let v1809 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1808 v88
    let v1810 : string = method2(v1805)
    let v1811 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1810 v91
    let v1812 : string = method4()
    let v1813 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1812 v91
    let v1814 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1809, v1811, v1813) v95
    let v1815 : string = Fable.Core.Rust.emitExpr v1814 v81
    let v1816 : string = $"r#\"{v109}\"#"
    let v1817 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1816
    let v1818 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1817 v86
    let v1819 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1818 v88
    let v1820 : string = method2(v1815)
    let v1821 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1820 v91
    let v1822 : string = method5()
    let v1823 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1822 v91
    let v1824 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1819, v1821, v1823) v95
    let v1825 : string = Fable.Core.Rust.emitExpr v1824 v81
    let v1826 : Types.std.string.String = Fable.Core.Rust.emitExpr v1825 v11
    let v1827 : Types.EmitType<Types.std.string.String> = v1826 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1828 : string = method7()
    let v1829 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1828 v91
    let v1830 : unativeint = unativeint 0
    let v1831 : unativeint = unativeint 2
    let v1832 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1829, v1830, v1831) v165
    let v1833 : string = Fable.Core.Rust.emitExpr v1832 v81
    let v1834 : uint8 = Fable.Core.Rust.emitExpr v1833 v168
    let v1835 : string = method7()
    let v1836 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1835 v91
    let v1837 : unativeint = unativeint 2
    let v1838 : unativeint = unativeint 4
    let v1839 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1836, v1837, v1838) v165
    let v1840 : string = Fable.Core.Rust.emitExpr v1839 v81
    let v1841 : uint8 = Fable.Core.Rust.emitExpr v1840 v168
    let v1842 : string = method7()
    let v1843 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1842 v91
    let v1844 : unativeint = unativeint 4
    let v1845 : unativeint = unativeint 6
    let v1846 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1843, v1844, v1845) v165
    let v1847 : string = Fable.Core.Rust.emitExpr v1846 v81
    let v1848 : uint8 = Fable.Core.Rust.emitExpr v1847 v168
    let v1849 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1827, v1834, v1841, v1848) v184
    let v1850 : Types.std.string.String = Fable.Core.Rust.emitExpr v1849 v125
    let v1851 : string = $"{v1736} {v1793} {v1850}"
    System.Console.WriteLine v1851
    let v1852 : string = "zmq::Context::new()"
    let v1853 : obj = Fable.Core.Rust.emitExpr () v1852
    let v1854 : string = "$0.socket(zmq::REQ).unwrap()"
    let v1855 : obj = Fable.Core.Rust.emitExpr v1853 v1854
    let v1856 : string = $"tcp://{v1653}:{13805}"
    let v1857 : string = "$0.connect(&$1).unwrap()"
    Fable.Core.Rust.emitExpr struct (v1855, v1856) v1857
    let v1858 : string = $"$0.send($1.as_str(), 0).unwrap()"
    Fable.Core.Rust.emitExpr struct (v1855, v1453) v1858
    let v1859 : string = "$0.recv_string(0).unwrap().unwrap()"
    let v1860 : Types.std.string.String = Fable.Core.Rust.emitExpr v1855 v1859
    let v1861 : string = "$0.disconnect(&$1).unwrap()"
    Fable.Core.Rust.emitExpr struct (v1855, v1856) v1861
    let v1862 : string = "result len"
    let v1863 : Types.std.string.String = Fable.Core.Rust.emitExpr v1862 v11
    let v1864 : Types.EmitType<Types.std.string.String> = v1863 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1865 : int32 = Fable.Core.Rust.emitExpr v1860 v1250
    let v1866 : Types.std.string.String = Fable.Core.Rust.emitExpr v1865 v60
    let v1867 : Types.EmitType<Types.std.string.String> = v1866 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1868 : (Types.EmitType<Types.std.string.String> []) = [|v1864; v1867|]
    let v1869 : obj = Fable.Core.Rust.emitExpr v1868 v39
    let v1870 : Types.std.string.String = Fable.Core.Rust.emitExpr v1869 v41
    let v1871 : Types.EmitType<Types.std.string.String> = v1870 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1872 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v1873 : int64 = Fable.Core.Rust.emitExpr v1872 v8
    let v1874 : int64 = v1873 - v1649
    let v1875 : string = (v1874).ToString ()
    let v1876 : int32 = 6
    let v1877 : string = method1(v1876, v1875)
    let v1878 : uint8 = Fable.Core.Rust.emitExpr () v50
    let v1879 : Types.std.string.String = Fable.Core.Rust.emitExpr v52 v11
    let v1880 : Types.EmitType<Types.std.string.String> = v1879 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1881 : Types.std.string.String = Fable.Core.Rust.emitExpr v1877 v11
    let v1882 : Types.EmitType<Types.std.string.String> = v1881 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1883 : Types.std.string.String = Fable.Core.Rust.emitExpr v57 v11
    let v1884 : Types.EmitType<Types.std.string.String> = v1883 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1885 : Types.std.string.String = Fable.Core.Rust.emitExpr v1878 v60
    let v1886 : Types.EmitType<Types.std.string.String> = v1885 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1887 : Types.std.string.String = Fable.Core.Rust.emitExpr v63 v11
    let v1888 : Types.EmitType<Types.std.string.String> = v1887 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1889 : Types.std.string.String = Fable.Core.Rust.emitExpr v66 v11
    let v1890 : Types.EmitType<Types.std.string.String> = v1889 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1891 : (Types.EmitType<Types.std.string.String> []) = [|v1880; v1882; v1884; v1886; v1888; v1890|]
    let v1892 : obj = Fable.Core.Rust.emitExpr v1891 v39
    let v1893 : Types.std.string.String = Fable.Core.Rust.emitExpr v1892 v41
    let v1894 : Types.EmitType<Types.std.string.String> = v1893 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1895 : Types.std.string.String = Fable.Core.Rust.emitExpr v1694 v11
    let v1896 : Types.EmitType<Types.std.string.String> = v1895 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1897 : (Types.EmitType<Types.std.string.String> []) = [|v1896|]
    let v1898 : obj = Fable.Core.Rust.emitExpr v1897 v39
    let v1899 : Types.std.string.String = Fable.Core.Rust.emitExpr v1898 v41
    let v1900 : Types.EmitType<Types.std.string.String> = v1899 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1901 : Types.std.string.String = v1900 |> unbox
    let v1902 : string = Fable.Core.Rust.emitExpr v1901 v81
    let v1903 : string = $"r#\"{v83}\"#"
    let v1904 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1903
    let v1905 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1904 v86
    let v1906 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1905 v88
    let v1907 : string = method2(v1902)
    let v1908 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1907 v91
    let v1909 : string = method3()
    let v1910 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1909 v91
    let v1911 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1906, v1908, v1910) v95
    let v1912 : string = Fable.Core.Rust.emitExpr v1911 v81
    let v1913 : string = $"r#\"{v98}\"#"
    let v1914 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1913
    let v1915 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1914 v86
    let v1916 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1915 v88
    let v1917 : string = method2(v1912)
    let v1918 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1917 v91
    let v1919 : string = method4()
    let v1920 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1919 v91
    let v1921 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1916, v1918, v1920) v95
    let v1922 : string = Fable.Core.Rust.emitExpr v1921 v81
    let v1923 : string = $"r#\"{v109}\"#"
    let v1924 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1923
    let v1925 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1924 v86
    let v1926 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1925 v88
    let v1927 : string = method2(v1922)
    let v1928 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1927 v91
    let v1929 : string = method5()
    let v1930 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1929 v91
    let v1931 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1926, v1928, v1930) v95
    let v1932 : string = Fable.Core.Rust.emitExpr v1931 v81
    let v1933 : Types.std.string.String = Fable.Core.Rust.emitExpr v1932 v11
    let v1934 : Types.EmitType<Types.std.string.String> = v1933 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1935 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1934, v122) v123
    let v1936 : Types.std.string.String = Fable.Core.Rust.emitExpr v1935 v125
    let v1937 : Types.std.string.String = v1871 |> unbox
    let v1938 : string = Fable.Core.Rust.emitExpr v1937 v81
    let v1939 : string = $"r#\"{v83}\"#"
    let v1940 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1939
    let v1941 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1940 v86
    let v1942 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1941 v88
    let v1943 : string = method2(v1938)
    let v1944 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1943 v91
    let v1945 : string = method3()
    let v1946 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1945 v91
    let v1947 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1942, v1944, v1946) v95
    let v1948 : string = Fable.Core.Rust.emitExpr v1947 v81
    let v1949 : string = $"r#\"{v98}\"#"
    let v1950 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1949
    let v1951 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1950 v86
    let v1952 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1951 v88
    let v1953 : string = method2(v1948)
    let v1954 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1953 v91
    let v1955 : string = method4()
    let v1956 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1955 v91
    let v1957 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1952, v1954, v1956) v95
    let v1958 : string = Fable.Core.Rust.emitExpr v1957 v81
    let v1959 : string = $"r#\"{v109}\"#"
    let v1960 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1959
    let v1961 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1960 v86
    let v1962 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1961 v88
    let v1963 : string = method2(v1958)
    let v1964 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1963 v91
    let v1965 : string = method5()
    let v1966 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1965 v91
    let v1967 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1962, v1964, v1966) v95
    let v1968 : string = Fable.Core.Rust.emitExpr v1967 v81
    let v1969 : Types.std.string.String = Fable.Core.Rust.emitExpr v1968 v11
    let v1970 : Types.EmitType<Types.std.string.String> = v1969 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1971 : string = method9()
    let v1972 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1971 v91
    let v1973 : unativeint = unativeint 0
    let v1974 : unativeint = unativeint 2
    let v1975 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1972, v1973, v1974) v165
    let v1976 : string = Fable.Core.Rust.emitExpr v1975 v81
    let v1977 : uint8 = Fable.Core.Rust.emitExpr v1976 v168
    let v1978 : string = method9()
    let v1979 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1978 v91
    let v1980 : unativeint = unativeint 2
    let v1981 : unativeint = unativeint 4
    let v1982 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1979, v1980, v1981) v165
    let v1983 : string = Fable.Core.Rust.emitExpr v1982 v81
    let v1984 : uint8 = Fable.Core.Rust.emitExpr v1983 v168
    let v1985 : string = method9()
    let v1986 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1985 v91
    let v1987 : unativeint = unativeint 4
    let v1988 : unativeint = unativeint 6
    let v1989 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1986, v1987, v1988) v165
    let v1990 : string = Fable.Core.Rust.emitExpr v1989 v81
    let v1991 : uint8 = Fable.Core.Rust.emitExpr v1990 v168
    let v1992 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1970, v1977, v1984, v1991) v184
    let v1993 : Types.std.string.String = Fable.Core.Rust.emitExpr v1992 v125
    let v1994 : Types.std.string.String = v1894 |> unbox
    let v1995 : string = Fable.Core.Rust.emitExpr v1994 v81
    let v1996 : string = $"r#\"{v83}\"#"
    let v1997 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1996
    let v1998 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1997 v86
    let v1999 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1998 v88
    let v2000 : string = method2(v1995)
    let v2001 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2000 v91
    let v2002 : string = method3()
    let v2003 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2002 v91
    let v2004 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1999, v2001, v2003) v95
    let v2005 : string = Fable.Core.Rust.emitExpr v2004 v81
    let v2006 : string = $"r#\"{v98}\"#"
    let v2007 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2006
    let v2008 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2007 v86
    let v2009 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2008 v88
    let v2010 : string = method2(v2005)
    let v2011 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2010 v91
    let v2012 : string = method4()
    let v2013 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2012 v91
    let v2014 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2009, v2011, v2013) v95
    let v2015 : string = Fable.Core.Rust.emitExpr v2014 v81
    let v2016 : string = $"r#\"{v109}\"#"
    let v2017 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2016
    let v2018 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2017 v86
    let v2019 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2018 v88
    let v2020 : string = method2(v2015)
    let v2021 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2020 v91
    let v2022 : string = method5()
    let v2023 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2022 v91
    let v2024 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2019, v2021, v2023) v95
    let v2025 : string = Fable.Core.Rust.emitExpr v2024 v81
    let v2026 : Types.std.string.String = Fable.Core.Rust.emitExpr v2025 v11
    let v2027 : Types.EmitType<Types.std.string.String> = v2026 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2028 : string = method7()
    let v2029 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2028 v91
    let v2030 : unativeint = unativeint 0
    let v2031 : unativeint = unativeint 2
    let v2032 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2029, v2030, v2031) v165
    let v2033 : string = Fable.Core.Rust.emitExpr v2032 v81
    let v2034 : uint8 = Fable.Core.Rust.emitExpr v2033 v168
    let v2035 : string = method7()
    let v2036 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2035 v91
    let v2037 : unativeint = unativeint 2
    let v2038 : unativeint = unativeint 4
    let v2039 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2036, v2037, v2038) v165
    let v2040 : string = Fable.Core.Rust.emitExpr v2039 v81
    let v2041 : uint8 = Fable.Core.Rust.emitExpr v2040 v168
    let v2042 : string = method7()
    let v2043 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2042 v91
    let v2044 : unativeint = unativeint 4
    let v2045 : unativeint = unativeint 6
    let v2046 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2043, v2044, v2045) v165
    let v2047 : string = Fable.Core.Rust.emitExpr v2046 v81
    let v2048 : uint8 = Fable.Core.Rust.emitExpr v2047 v168
    let v2049 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2027, v2034, v2041, v2048) v184
    let v2050 : Types.std.string.String = Fable.Core.Rust.emitExpr v2049 v125
    let v2051 : string = $"{v1936} {v1993} {v2050}"
    System.Console.WriteLine v2051
    let v2052 : string = "> spiproj_open; ok"
    let v2053 : Types.std.string.String = Fable.Core.Rust.emitExpr v2052 v11
    let v2054 : Types.EmitType<Types.std.string.String> = v2053 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2055 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v2056 : int64 = Fable.Core.Rust.emitExpr v2055 v8
    let v2057 : int64 = v2056 - v9
    let v2058 : string = (v2057).ToString ()
    let v2059 : int32 = 6
    let v2060 : string = method1(v2059, v2058)
    let v2061 : uint8 = Fable.Core.Rust.emitExpr () v50
    let v2062 : Types.std.string.String = Fable.Core.Rust.emitExpr v52 v11
    let v2063 : Types.EmitType<Types.std.string.String> = v2062 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2064 : Types.std.string.String = Fable.Core.Rust.emitExpr v2060 v11
    let v2065 : Types.EmitType<Types.std.string.String> = v2064 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2066 : Types.std.string.String = Fable.Core.Rust.emitExpr v57 v11
    let v2067 : Types.EmitType<Types.std.string.String> = v2066 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2068 : Types.std.string.String = Fable.Core.Rust.emitExpr v2061 v60
    let v2069 : Types.EmitType<Types.std.string.String> = v2068 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2070 : Types.std.string.String = Fable.Core.Rust.emitExpr v63 v11
    let v2071 : Types.EmitType<Types.std.string.String> = v2070 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2072 : Types.std.string.String = Fable.Core.Rust.emitExpr v66 v11
    let v2073 : Types.EmitType<Types.std.string.String> = v2072 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2074 : (Types.EmitType<Types.std.string.String> []) = [|v2063; v2065; v2067; v2069; v2071; v2073|]
    let v2075 : obj = Fable.Core.Rust.emitExpr v2074 v39
    let v2076 : Types.std.string.String = Fable.Core.Rust.emitExpr v2075 v41
    let v2077 : Types.EmitType<Types.std.string.String> = v2076 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2078 : Types.std.string.String = Fable.Core.Rust.emitExpr v73 v11
    let v2079 : Types.EmitType<Types.std.string.String> = v2078 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2080 : (Types.EmitType<Types.std.string.String> []) = [|v2079|]
    let v2081 : obj = Fable.Core.Rust.emitExpr v2080 v39
    let v2082 : Types.std.string.String = Fable.Core.Rust.emitExpr v2081 v41
    let v2083 : Types.EmitType<Types.std.string.String> = v2082 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2084 : Types.std.string.String = v2083 |> unbox
    let v2085 : string = Fable.Core.Rust.emitExpr v2084 v81
    let v2086 : string = $"r#\"{v83}\"#"
    let v2087 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2086
    let v2088 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2087 v86
    let v2089 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2088 v88
    let v2090 : string = method2(v2085)
    let v2091 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2090 v91
    let v2092 : string = method3()
    let v2093 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2092 v91
    let v2094 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2089, v2091, v2093) v95
    let v2095 : string = Fable.Core.Rust.emitExpr v2094 v81
    let v2096 : string = $"r#\"{v98}\"#"
    let v2097 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2096
    let v2098 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2097 v86
    let v2099 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2098 v88
    let v2100 : string = method2(v2095)
    let v2101 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2100 v91
    let v2102 : string = method4()
    let v2103 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2102 v91
    let v2104 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2099, v2101, v2103) v95
    let v2105 : string = Fable.Core.Rust.emitExpr v2104 v81
    let v2106 : string = $"r#\"{v109}\"#"
    let v2107 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2106
    let v2108 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2107 v86
    let v2109 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2108 v88
    let v2110 : string = method2(v2105)
    let v2111 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2110 v91
    let v2112 : string = method5()
    let v2113 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2112 v91
    let v2114 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2109, v2111, v2113) v95
    let v2115 : string = Fable.Core.Rust.emitExpr v2114 v81
    let v2116 : Types.std.string.String = Fable.Core.Rust.emitExpr v2115 v11
    let v2117 : Types.EmitType<Types.std.string.String> = v2116 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2118 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2117, v122) v123
    let v2119 : Types.std.string.String = Fable.Core.Rust.emitExpr v2118 v125
    let v2120 : Types.std.string.String = v2054 |> unbox
    let v2121 : string = Fable.Core.Rust.emitExpr v2120 v81
    let v2122 : string = $"r#\"{v83}\"#"
    let v2123 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2122
    let v2124 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2123 v86
    let v2125 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2124 v88
    let v2126 : string = method2(v2121)
    let v2127 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2126 v91
    let v2128 : string = method3()
    let v2129 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2128 v91
    let v2130 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2125, v2127, v2129) v95
    let v2131 : string = Fable.Core.Rust.emitExpr v2130 v81
    let v2132 : string = $"r#\"{v98}\"#"
    let v2133 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2132
    let v2134 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2133 v86
    let v2135 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2134 v88
    let v2136 : string = method2(v2131)
    let v2137 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2136 v91
    let v2138 : string = method4()
    let v2139 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2138 v91
    let v2140 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2135, v2137, v2139) v95
    let v2141 : string = Fable.Core.Rust.emitExpr v2140 v81
    let v2142 : string = $"r#\"{v109}\"#"
    let v2143 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2142
    let v2144 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2143 v86
    let v2145 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2144 v88
    let v2146 : string = method2(v2141)
    let v2147 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2146 v91
    let v2148 : string = method5()
    let v2149 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2148 v91
    let v2150 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2145, v2147, v2149) v95
    let v2151 : string = Fable.Core.Rust.emitExpr v2150 v81
    let v2152 : Types.std.string.String = Fable.Core.Rust.emitExpr v2151 v11
    let v2153 : Types.EmitType<Types.std.string.String> = v2152 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2154 : string = method6()
    let v2155 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2154 v91
    let v2156 : unativeint = unativeint 0
    let v2157 : unativeint = unativeint 2
    let v2158 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2155, v2156, v2157) v165
    let v2159 : string = Fable.Core.Rust.emitExpr v2158 v81
    let v2160 : uint8 = Fable.Core.Rust.emitExpr v2159 v168
    let v2161 : string = method6()
    let v2162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2161 v91
    let v2163 : unativeint = unativeint 2
    let v2164 : unativeint = unativeint 4
    let v2165 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2162, v2163, v2164) v165
    let v2166 : string = Fable.Core.Rust.emitExpr v2165 v81
    let v2167 : uint8 = Fable.Core.Rust.emitExpr v2166 v168
    let v2168 : string = method6()
    let v2169 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2168 v91
    let v2170 : unativeint = unativeint 4
    let v2171 : unativeint = unativeint 6
    let v2172 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2169, v2170, v2171) v165
    let v2173 : string = Fable.Core.Rust.emitExpr v2172 v81
    let v2174 : uint8 = Fable.Core.Rust.emitExpr v2173 v168
    let v2175 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2153, v2160, v2167, v2174) v184
    let v2176 : Types.std.string.String = Fable.Core.Rust.emitExpr v2175 v125
    let v2177 : Types.std.string.String = v2077 |> unbox
    let v2178 : string = Fable.Core.Rust.emitExpr v2177 v81
    let v2179 : string = $"r#\"{v83}\"#"
    let v2180 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2179
    let v2181 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2180 v86
    let v2182 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2181 v88
    let v2183 : string = method2(v2178)
    let v2184 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2183 v91
    let v2185 : string = method3()
    let v2186 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2185 v91
    let v2187 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2182, v2184, v2186) v95
    let v2188 : string = Fable.Core.Rust.emitExpr v2187 v81
    let v2189 : string = $"r#\"{v98}\"#"
    let v2190 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2189
    let v2191 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2190 v86
    let v2192 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2191 v88
    let v2193 : string = method2(v2188)
    let v2194 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2193 v91
    let v2195 : string = method4()
    let v2196 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2195 v91
    let v2197 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2192, v2194, v2196) v95
    let v2198 : string = Fable.Core.Rust.emitExpr v2197 v81
    let v2199 : string = $"r#\"{v109}\"#"
    let v2200 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2199
    let v2201 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2200 v86
    let v2202 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2201 v88
    let v2203 : string = method2(v2198)
    let v2204 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2203 v91
    let v2205 : string = method5()
    let v2206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2205 v91
    let v2207 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2202, v2204, v2206) v95
    let v2208 : string = Fable.Core.Rust.emitExpr v2207 v81
    let v2209 : Types.std.string.String = Fable.Core.Rust.emitExpr v2208 v11
    let v2210 : Types.EmitType<Types.std.string.String> = v2209 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2211 : string = method7()
    let v2212 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2211 v91
    let v2213 : unativeint = unativeint 0
    let v2214 : unativeint = unativeint 2
    let v2215 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2212, v2213, v2214) v165
    let v2216 : string = Fable.Core.Rust.emitExpr v2215 v81
    let v2217 : uint8 = Fable.Core.Rust.emitExpr v2216 v168
    let v2218 : string = method7()
    let v2219 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2218 v91
    let v2220 : unativeint = unativeint 2
    let v2221 : unativeint = unativeint 4
    let v2222 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2219, v2220, v2221) v165
    let v2223 : string = Fable.Core.Rust.emitExpr v2222 v81
    let v2224 : uint8 = Fable.Core.Rust.emitExpr v2223 v168
    let v2225 : string = method7()
    let v2226 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2225 v91
    let v2227 : unativeint = unativeint 4
    let v2228 : unativeint = unativeint 6
    let v2229 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2226, v2227, v2228) v165
    let v2230 : string = Fable.Core.Rust.emitExpr v2229 v81
    let v2231 : uint8 = Fable.Core.Rust.emitExpr v2230 v168
    let v2232 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2210, v2217, v2224, v2231) v184
    let v2233 : Types.std.string.String = Fable.Core.Rust.emitExpr v2232 v125
    let v2234 : string = $"{v2119} {v2176} {v2233}"
    System.Console.WriteLine v2234
    let struct (v2235 : string, v2236 : string, v2237 : string, v2238 : bool) = method0()
    let v2239 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v2240 : int64 = Fable.Core.Rust.emitExpr v2239 v8
    let v2241 : Types.std.string.String = Fable.Core.Rust.emitExpr v25 v11
    let v2242 : Types.EmitType<Types.std.string.String> = v2241 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2243 : string = Fable.Core.Rust.emitExpr v246 v21
    let v2244 : Types.std.string.String = Fable.Core.Rust.emitExpr v2243 v11
    let v2245 : Types.EmitType<Types.std.string.String> = v2244 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2246 : string = "backend"
    let v2247 : Types.std.string.String = Fable.Core.Rust.emitExpr v2246 v11
    let v2248 : Types.EmitType<Types.std.string.String> = v2247 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2249 : string = "Fsharp"
    let v2250 : Types.std.string.String = Fable.Core.Rust.emitExpr v2249 v11
    let v2251 : Types.EmitType<Types.std.string.String> = v2250 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2252 : (Types.EmitType<Types.std.string.String> []) = [|v2242; v2245; v2248; v2251|]
    let v2253 : obj = Fable.Core.Rust.emitExpr v2252 v39
    let v2254 : Types.std.string.String = Fable.Core.Rust.emitExpr v2253 v41
    let v2255 : Types.EmitType<Types.std.string.String> = v2254 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2256 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v2257 : int64 = Fable.Core.Rust.emitExpr v2256 v8
    let v2258 : int64 = v2257 - v2240
    let v2259 : string = (v2258).ToString ()
    let v2260 : int32 = 6
    let v2261 : string = method1(v2260, v2259)
    let v2262 : uint8 = Fable.Core.Rust.emitExpr () v50
    let v2263 : Types.std.string.String = Fable.Core.Rust.emitExpr v52 v11
    let v2264 : Types.EmitType<Types.std.string.String> = v2263 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2265 : Types.std.string.String = Fable.Core.Rust.emitExpr v2261 v11
    let v2266 : Types.EmitType<Types.std.string.String> = v2265 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2267 : Types.std.string.String = Fable.Core.Rust.emitExpr v57 v11
    let v2268 : Types.EmitType<Types.std.string.String> = v2267 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2269 : Types.std.string.String = Fable.Core.Rust.emitExpr v2262 v60
    let v2270 : Types.EmitType<Types.std.string.String> = v2269 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2271 : Types.std.string.String = Fable.Core.Rust.emitExpr v63 v11
    let v2272 : Types.EmitType<Types.std.string.String> = v2271 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2273 : Types.std.string.String = Fable.Core.Rust.emitExpr v66 v11
    let v2274 : Types.EmitType<Types.std.string.String> = v2273 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2275 : (Types.EmitType<Types.std.string.String> []) = [|v2264; v2266; v2268; v2270; v2272; v2274|]
    let v2276 : obj = Fable.Core.Rust.emitExpr v2275 v39
    let v2277 : Types.std.string.String = Fable.Core.Rust.emitExpr v2276 v41
    let v2278 : Types.EmitType<Types.std.string.String> = v2277 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2279 : string = "> spi_build_file ()"
    let v2280 : Types.std.string.String = Fable.Core.Rust.emitExpr v2279 v11
    let v2281 : Types.EmitType<Types.std.string.String> = v2280 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2282 : (Types.EmitType<Types.std.string.String> []) = [|v2281|]
    let v2283 : obj = Fable.Core.Rust.emitExpr v2282 v39
    let v2284 : Types.std.string.String = Fable.Core.Rust.emitExpr v2283 v41
    let v2285 : Types.EmitType<Types.std.string.String> = v2284 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2286 : Types.std.string.String = v2285 |> unbox
    let v2287 : string = Fable.Core.Rust.emitExpr v2286 v81
    let v2288 : string = $"r#\"{v83}\"#"
    let v2289 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2288
    let v2290 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2289 v86
    let v2291 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2290 v88
    let v2292 : string = method2(v2287)
    let v2293 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2292 v91
    let v2294 : string = method3()
    let v2295 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2294 v91
    let v2296 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2291, v2293, v2295) v95
    let v2297 : string = Fable.Core.Rust.emitExpr v2296 v81
    let v2298 : string = $"r#\"{v98}\"#"
    let v2299 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2298
    let v2300 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2299 v86
    let v2301 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2300 v88
    let v2302 : string = method2(v2297)
    let v2303 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2302 v91
    let v2304 : string = method4()
    let v2305 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2304 v91
    let v2306 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2301, v2303, v2305) v95
    let v2307 : string = Fable.Core.Rust.emitExpr v2306 v81
    let v2308 : string = $"r#\"{v109}\"#"
    let v2309 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2308
    let v2310 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2309 v86
    let v2311 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2310 v88
    let v2312 : string = method2(v2307)
    let v2313 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2312 v91
    let v2314 : string = method5()
    let v2315 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2314 v91
    let v2316 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2311, v2313, v2315) v95
    let v2317 : string = Fable.Core.Rust.emitExpr v2316 v81
    let v2318 : Types.std.string.String = Fable.Core.Rust.emitExpr v2317 v11
    let v2319 : Types.EmitType<Types.std.string.String> = v2318 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2320 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2319, v122) v123
    let v2321 : Types.std.string.String = Fable.Core.Rust.emitExpr v2320 v125
    let v2322 : Types.std.string.String = v2255 |> unbox
    let v2323 : string = Fable.Core.Rust.emitExpr v2322 v81
    let v2324 : string = $"r#\"{v83}\"#"
    let v2325 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2324
    let v2326 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2325 v86
    let v2327 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2326 v88
    let v2328 : string = method2(v2323)
    let v2329 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2328 v91
    let v2330 : string = method3()
    let v2331 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2330 v91
    let v2332 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2327, v2329, v2331) v95
    let v2333 : string = Fable.Core.Rust.emitExpr v2332 v81
    let v2334 : string = $"r#\"{v98}\"#"
    let v2335 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2334
    let v2336 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2335 v86
    let v2337 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2336 v88
    let v2338 : string = method2(v2333)
    let v2339 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2338 v91
    let v2340 : string = method4()
    let v2341 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2340 v91
    let v2342 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2337, v2339, v2341) v95
    let v2343 : string = Fable.Core.Rust.emitExpr v2342 v81
    let v2344 : string = $"r#\"{v109}\"#"
    let v2345 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2344
    let v2346 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2345 v86
    let v2347 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2346 v88
    let v2348 : string = method2(v2343)
    let v2349 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2348 v91
    let v2350 : string = method5()
    let v2351 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2350 v91
    let v2352 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2347, v2349, v2351) v95
    let v2353 : string = Fable.Core.Rust.emitExpr v2352 v81
    let v2354 : Types.std.string.String = Fable.Core.Rust.emitExpr v2353 v11
    let v2355 : Types.EmitType<Types.std.string.String> = v2354 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2356 : string = method10()
    let v2357 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2356 v91
    let v2358 : unativeint = unativeint 0
    let v2359 : unativeint = unativeint 2
    let v2360 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2357, v2358, v2359) v165
    let v2361 : string = Fable.Core.Rust.emitExpr v2360 v81
    let v2362 : uint8 = Fable.Core.Rust.emitExpr v2361 v168
    let v2363 : string = method10()
    let v2364 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2363 v91
    let v2365 : unativeint = unativeint 2
    let v2366 : unativeint = unativeint 4
    let v2367 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2364, v2365, v2366) v165
    let v2368 : string = Fable.Core.Rust.emitExpr v2367 v81
    let v2369 : uint8 = Fable.Core.Rust.emitExpr v2368 v168
    let v2370 : string = method10()
    let v2371 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2370 v91
    let v2372 : unativeint = unativeint 4
    let v2373 : unativeint = unativeint 6
    let v2374 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2371, v2372, v2373) v165
    let v2375 : string = Fable.Core.Rust.emitExpr v2374 v81
    let v2376 : uint8 = Fable.Core.Rust.emitExpr v2375 v168
    let v2377 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2355, v2362, v2369, v2376) v184
    let v2378 : Types.std.string.String = Fable.Core.Rust.emitExpr v2377 v125
    let v2379 : Types.std.string.String = v2278 |> unbox
    let v2380 : string = Fable.Core.Rust.emitExpr v2379 v81
    let v2381 : string = $"r#\"{v83}\"#"
    let v2382 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2381
    let v2383 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2382 v86
    let v2384 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2383 v88
    let v2385 : string = method2(v2380)
    let v2386 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2385 v91
    let v2387 : string = method3()
    let v2388 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2387 v91
    let v2389 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2384, v2386, v2388) v95
    let v2390 : string = Fable.Core.Rust.emitExpr v2389 v81
    let v2391 : string = $"r#\"{v98}\"#"
    let v2392 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2391
    let v2393 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2392 v86
    let v2394 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2393 v88
    let v2395 : string = method2(v2390)
    let v2396 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2395 v91
    let v2397 : string = method4()
    let v2398 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2397 v91
    let v2399 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2394, v2396, v2398) v95
    let v2400 : string = Fable.Core.Rust.emitExpr v2399 v81
    let v2401 : string = $"r#\"{v109}\"#"
    let v2402 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2401
    let v2403 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2402 v86
    let v2404 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2403 v88
    let v2405 : string = method2(v2400)
    let v2406 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2405 v91
    let v2407 : string = method5()
    let v2408 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2407 v91
    let v2409 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2404, v2406, v2408) v95
    let v2410 : string = Fable.Core.Rust.emitExpr v2409 v81
    let v2411 : Types.std.string.String = Fable.Core.Rust.emitExpr v2410 v11
    let v2412 : Types.EmitType<Types.std.string.String> = v2411 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2413 : string = method7()
    let v2414 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2413 v91
    let v2415 : unativeint = unativeint 0
    let v2416 : unativeint = unativeint 2
    let v2417 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2414, v2415, v2416) v165
    let v2418 : string = Fable.Core.Rust.emitExpr v2417 v81
    let v2419 : uint8 = Fable.Core.Rust.emitExpr v2418 v168
    let v2420 : string = method7()
    let v2421 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2420 v91
    let v2422 : unativeint = unativeint 2
    let v2423 : unativeint = unativeint 4
    let v2424 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2421, v2422, v2423) v165
    let v2425 : string = Fable.Core.Rust.emitExpr v2424 v81
    let v2426 : uint8 = Fable.Core.Rust.emitExpr v2425 v168
    let v2427 : string = method7()
    let v2428 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2427 v91
    let v2429 : unativeint = unativeint 4
    let v2430 : unativeint = unativeint 6
    let v2431 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2428, v2429, v2430) v165
    let v2432 : string = Fable.Core.Rust.emitExpr v2431 v81
    let v2433 : uint8 = Fable.Core.Rust.emitExpr v2432 v168
    let v2434 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2412, v2419, v2426, v2433) v184
    let v2435 : Types.std.string.String = Fable.Core.Rust.emitExpr v2434 v125
    let v2436 : string = $"{v2321} {v2378} {v2435}"
    System.Console.WriteLine v2436
    let v2437 : Types.std.string.String = Fable.Core.Rust.emitExpr v2249 v11
    let v2438 : string = "\"BuildFile\": {"
    let v2439 : string = v1439 + v2438
    let v2440 : string = v2439 + v1442
    let v2441 : string = "\"backend\": $1"
    let v2442 : string = v2440 + v2441
    let v2443 : string = v2442 + v1446
    let v2444 : string = v2443 + v1446
    let v2445 : string = v1449 + v2444
    let v2446 : string = v2445 + v1451
    let v2447 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v246, v2437) v2446
    let v2448 : string = "json len"
    let v2449 : Types.std.string.String = Fable.Core.Rust.emitExpr v2448 v11
    let v2450 : Types.EmitType<Types.std.string.String> = v2449 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2451 : int32 = Fable.Core.Rust.emitExpr v2447 v1250
    let v2452 : Types.std.string.String = Fable.Core.Rust.emitExpr v2451 v60
    let v2453 : Types.EmitType<Types.std.string.String> = v2452 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2454 : (Types.EmitType<Types.std.string.String> []) = [|v2450; v2453|]
    let v2455 : obj = Fable.Core.Rust.emitExpr v2454 v39
    let v2456 : Types.std.string.String = Fable.Core.Rust.emitExpr v2455 v41
    let v2457 : Types.EmitType<Types.std.string.String> = v2456 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2458 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v2459 : int64 = Fable.Core.Rust.emitExpr v2458 v8
    let v2460 : int64 = v2459 - v2240
    let v2461 : string = (v2460).ToString ()
    let v2462 : int32 = 6
    let v2463 : string = method1(v2462, v2461)
    let v2464 : uint8 = Fable.Core.Rust.emitExpr () v50
    let v2465 : Types.std.string.String = Fable.Core.Rust.emitExpr v52 v11
    let v2466 : Types.EmitType<Types.std.string.String> = v2465 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2467 : Types.std.string.String = Fable.Core.Rust.emitExpr v2463 v11
    let v2468 : Types.EmitType<Types.std.string.String> = v2467 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2469 : Types.std.string.String = Fable.Core.Rust.emitExpr v57 v11
    let v2470 : Types.EmitType<Types.std.string.String> = v2469 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2471 : Types.std.string.String = Fable.Core.Rust.emitExpr v2464 v60
    let v2472 : Types.EmitType<Types.std.string.String> = v2471 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2473 : Types.std.string.String = Fable.Core.Rust.emitExpr v63 v11
    let v2474 : Types.EmitType<Types.std.string.String> = v2473 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2475 : Types.std.string.String = Fable.Core.Rust.emitExpr v66 v11
    let v2476 : Types.EmitType<Types.std.string.String> = v2475 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2477 : (Types.EmitType<Types.std.string.String> []) = [|v2466; v2468; v2470; v2472; v2474; v2476|]
    let v2478 : obj = Fable.Core.Rust.emitExpr v2477 v39
    let v2479 : Types.std.string.String = Fable.Core.Rust.emitExpr v2478 v41
    let v2480 : Types.EmitType<Types.std.string.String> = v2479 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2481 : Types.std.string.String = Fable.Core.Rust.emitExpr v2279 v11
    let v2482 : Types.EmitType<Types.std.string.String> = v2481 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2483 : (Types.EmitType<Types.std.string.String> []) = [|v2482|]
    let v2484 : obj = Fable.Core.Rust.emitExpr v2483 v39
    let v2485 : Types.std.string.String = Fable.Core.Rust.emitExpr v2484 v41
    let v2486 : Types.EmitType<Types.std.string.String> = v2485 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2487 : Types.std.string.String = v2486 |> unbox
    let v2488 : string = Fable.Core.Rust.emitExpr v2487 v81
    let v2489 : string = $"r#\"{v83}\"#"
    let v2490 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2489
    let v2491 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2490 v86
    let v2492 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2491 v88
    let v2493 : string = method2(v2488)
    let v2494 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2493 v91
    let v2495 : string = method3()
    let v2496 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2495 v91
    let v2497 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2492, v2494, v2496) v95
    let v2498 : string = Fable.Core.Rust.emitExpr v2497 v81
    let v2499 : string = $"r#\"{v98}\"#"
    let v2500 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2499
    let v2501 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2500 v86
    let v2502 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2501 v88
    let v2503 : string = method2(v2498)
    let v2504 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2503 v91
    let v2505 : string = method4()
    let v2506 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2505 v91
    let v2507 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2502, v2504, v2506) v95
    let v2508 : string = Fable.Core.Rust.emitExpr v2507 v81
    let v2509 : string = $"r#\"{v109}\"#"
    let v2510 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2509
    let v2511 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2510 v86
    let v2512 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2511 v88
    let v2513 : string = method2(v2508)
    let v2514 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2513 v91
    let v2515 : string = method5()
    let v2516 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2515 v91
    let v2517 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2512, v2514, v2516) v95
    let v2518 : string = Fable.Core.Rust.emitExpr v2517 v81
    let v2519 : Types.std.string.String = Fable.Core.Rust.emitExpr v2518 v11
    let v2520 : Types.EmitType<Types.std.string.String> = v2519 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2521 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2520, v122) v123
    let v2522 : Types.std.string.String = Fable.Core.Rust.emitExpr v2521 v125
    let v2523 : Types.std.string.String = v2457 |> unbox
    let v2524 : string = Fable.Core.Rust.emitExpr v2523 v81
    let v2525 : string = $"r#\"{v83}\"#"
    let v2526 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2525
    let v2527 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2526 v86
    let v2528 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2527 v88
    let v2529 : string = method2(v2524)
    let v2530 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2529 v91
    let v2531 : string = method3()
    let v2532 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2531 v91
    let v2533 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2528, v2530, v2532) v95
    let v2534 : string = Fable.Core.Rust.emitExpr v2533 v81
    let v2535 : string = $"r#\"{v98}\"#"
    let v2536 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2535
    let v2537 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2536 v86
    let v2538 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2537 v88
    let v2539 : string = method2(v2534)
    let v2540 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2539 v91
    let v2541 : string = method4()
    let v2542 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2541 v91
    let v2543 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2538, v2540, v2542) v95
    let v2544 : string = Fable.Core.Rust.emitExpr v2543 v81
    let v2545 : string = $"r#\"{v109}\"#"
    let v2546 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2545
    let v2547 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2546 v86
    let v2548 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2547 v88
    let v2549 : string = method2(v2544)
    let v2550 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2549 v91
    let v2551 : string = method5()
    let v2552 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2551 v91
    let v2553 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2548, v2550, v2552) v95
    let v2554 : string = Fable.Core.Rust.emitExpr v2553 v81
    let v2555 : Types.std.string.String = Fable.Core.Rust.emitExpr v2554 v11
    let v2556 : Types.EmitType<Types.std.string.String> = v2555 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2557 : string = method10()
    let v2558 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2557 v91
    let v2559 : unativeint = unativeint 0
    let v2560 : unativeint = unativeint 2
    let v2561 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2558, v2559, v2560) v165
    let v2562 : string = Fable.Core.Rust.emitExpr v2561 v81
    let v2563 : uint8 = Fable.Core.Rust.emitExpr v2562 v168
    let v2564 : string = method10()
    let v2565 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2564 v91
    let v2566 : unativeint = unativeint 2
    let v2567 : unativeint = unativeint 4
    let v2568 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2565, v2566, v2567) v165
    let v2569 : string = Fable.Core.Rust.emitExpr v2568 v81
    let v2570 : uint8 = Fable.Core.Rust.emitExpr v2569 v168
    let v2571 : string = method10()
    let v2572 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2571 v91
    let v2573 : unativeint = unativeint 4
    let v2574 : unativeint = unativeint 6
    let v2575 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2572, v2573, v2574) v165
    let v2576 : string = Fable.Core.Rust.emitExpr v2575 v81
    let v2577 : uint8 = Fable.Core.Rust.emitExpr v2576 v168
    let v2578 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2556, v2563, v2570, v2577) v184
    let v2579 : Types.std.string.String = Fable.Core.Rust.emitExpr v2578 v125
    let v2580 : Types.std.string.String = v2480 |> unbox
    let v2581 : string = Fable.Core.Rust.emitExpr v2580 v81
    let v2582 : string = $"r#\"{v83}\"#"
    let v2583 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2582
    let v2584 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2583 v86
    let v2585 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2584 v88
    let v2586 : string = method2(v2581)
    let v2587 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2586 v91
    let v2588 : string = method3()
    let v2589 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2588 v91
    let v2590 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2585, v2587, v2589) v95
    let v2591 : string = Fable.Core.Rust.emitExpr v2590 v81
    let v2592 : string = $"r#\"{v98}\"#"
    let v2593 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2592
    let v2594 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2593 v86
    let v2595 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2594 v88
    let v2596 : string = method2(v2591)
    let v2597 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2596 v91
    let v2598 : string = method4()
    let v2599 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2598 v91
    let v2600 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2595, v2597, v2599) v95
    let v2601 : string = Fable.Core.Rust.emitExpr v2600 v81
    let v2602 : string = $"r#\"{v109}\"#"
    let v2603 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2602
    let v2604 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2603 v86
    let v2605 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2604 v88
    let v2606 : string = method2(v2601)
    let v2607 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2606 v91
    let v2608 : string = method5()
    let v2609 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2608 v91
    let v2610 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2605, v2607, v2609) v95
    let v2611 : string = Fable.Core.Rust.emitExpr v2610 v81
    let v2612 : Types.std.string.String = Fable.Core.Rust.emitExpr v2611 v11
    let v2613 : Types.EmitType<Types.std.string.String> = v2612 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2614 : string = method7()
    let v2615 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2614 v91
    let v2616 : unativeint = unativeint 0
    let v2617 : unativeint = unativeint 2
    let v2618 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2615, v2616, v2617) v165
    let v2619 : string = Fable.Core.Rust.emitExpr v2618 v81
    let v2620 : uint8 = Fable.Core.Rust.emitExpr v2619 v168
    let v2621 : string = method7()
    let v2622 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2621 v91
    let v2623 : unativeint = unativeint 2
    let v2624 : unativeint = unativeint 4
    let v2625 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2622, v2623, v2624) v165
    let v2626 : string = Fable.Core.Rust.emitExpr v2625 v81
    let v2627 : uint8 = Fable.Core.Rust.emitExpr v2626 v168
    let v2628 : string = method7()
    let v2629 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2628 v91
    let v2630 : unativeint = unativeint 4
    let v2631 : unativeint = unativeint 6
    let v2632 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2629, v2630, v2631) v165
    let v2633 : string = Fable.Core.Rust.emitExpr v2632 v81
    let v2634 : uint8 = Fable.Core.Rust.emitExpr v2633 v168
    let v2635 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2613, v2620, v2627, v2634) v184
    let v2636 : Types.std.string.String = Fable.Core.Rust.emitExpr v2635 v125
    let v2637 : string = $"{v2522} {v2579} {v2636}"
    System.Console.WriteLine v2637
    let struct (v2638 : string, v2639 : string, v2640 : string, v2641 : bool) = method0()
    let v2642 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v2643 : int64 = Fable.Core.Rust.emitExpr v2642 v8
    let v2644 : Types.std.string.String = Fable.Core.Rust.emitExpr v1650 v11
    let v2645 : Types.EmitType<Types.std.string.String> = v2644 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2646 : Types.std.string.String = Fable.Core.Rust.emitExpr v1653 v11
    let v2647 : Types.EmitType<Types.std.string.String> = v2646 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2648 : Types.std.string.String = Fable.Core.Rust.emitExpr v1656 v11
    let v2649 : Types.EmitType<Types.std.string.String> = v2648 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2650 : Types.std.string.String = Fable.Core.Rust.emitExpr 13805 v60
    let v2651 : Types.EmitType<Types.std.string.String> = v2650 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2652 : Types.std.string.String = Fable.Core.Rust.emitExpr v1661 v11
    let v2653 : Types.EmitType<Types.std.string.String> = v2652 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2654 : int32 = Fable.Core.Rust.emitExpr v2447 v1250
    let v2655 : Types.std.string.String = Fable.Core.Rust.emitExpr v2654 v60
    let v2656 : Types.EmitType<Types.std.string.String> = v2655 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2657 : (Types.EmitType<Types.std.string.String> []) = [|v2645; v2647; v2649; v2651; v2653; v2656|]
    let v2658 : obj = Fable.Core.Rust.emitExpr v2657 v39
    let v2659 : Types.std.string.String = Fable.Core.Rust.emitExpr v2658 v41
    let v2660 : Types.EmitType<Types.std.string.String> = v2659 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2661 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v2662 : int64 = Fable.Core.Rust.emitExpr v2661 v8
    let v2663 : int64 = v2662 - v2643
    let v2664 : string = (v2663).ToString ()
    let v2665 : int32 = 6
    let v2666 : string = method1(v2665, v2664)
    let v2667 : uint8 = Fable.Core.Rust.emitExpr () v50
    let v2668 : Types.std.string.String = Fable.Core.Rust.emitExpr v52 v11
    let v2669 : Types.EmitType<Types.std.string.String> = v2668 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2670 : Types.std.string.String = Fable.Core.Rust.emitExpr v2666 v11
    let v2671 : Types.EmitType<Types.std.string.String> = v2670 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2672 : Types.std.string.String = Fable.Core.Rust.emitExpr v57 v11
    let v2673 : Types.EmitType<Types.std.string.String> = v2672 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2674 : Types.std.string.String = Fable.Core.Rust.emitExpr v2667 v60
    let v2675 : Types.EmitType<Types.std.string.String> = v2674 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2676 : Types.std.string.String = Fable.Core.Rust.emitExpr v63 v11
    let v2677 : Types.EmitType<Types.std.string.String> = v2676 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2678 : Types.std.string.String = Fable.Core.Rust.emitExpr v66 v11
    let v2679 : Types.EmitType<Types.std.string.String> = v2678 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2680 : (Types.EmitType<Types.std.string.String> []) = [|v2669; v2671; v2673; v2675; v2677; v2679|]
    let v2681 : obj = Fable.Core.Rust.emitExpr v2680 v39
    let v2682 : Types.std.string.String = Fable.Core.Rust.emitExpr v2681 v41
    let v2683 : Types.EmitType<Types.std.string.String> = v2682 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2684 : Types.std.string.String = Fable.Core.Rust.emitExpr v1694 v11
    let v2685 : Types.EmitType<Types.std.string.String> = v2684 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2686 : (Types.EmitType<Types.std.string.String> []) = [|v2685|]
    let v2687 : obj = Fable.Core.Rust.emitExpr v2686 v39
    let v2688 : Types.std.string.String = Fable.Core.Rust.emitExpr v2687 v41
    let v2689 : Types.EmitType<Types.std.string.String> = v2688 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2690 : Types.std.string.String = v2689 |> unbox
    let v2691 : string = Fable.Core.Rust.emitExpr v2690 v81
    let v2692 : string = $"r#\"{v83}\"#"
    let v2693 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2692
    let v2694 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2693 v86
    let v2695 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2694 v88
    let v2696 : string = method2(v2691)
    let v2697 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2696 v91
    let v2698 : string = method3()
    let v2699 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2698 v91
    let v2700 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2695, v2697, v2699) v95
    let v2701 : string = Fable.Core.Rust.emitExpr v2700 v81
    let v2702 : string = $"r#\"{v98}\"#"
    let v2703 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2702
    let v2704 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2703 v86
    let v2705 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2704 v88
    let v2706 : string = method2(v2701)
    let v2707 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2706 v91
    let v2708 : string = method4()
    let v2709 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2708 v91
    let v2710 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2705, v2707, v2709) v95
    let v2711 : string = Fable.Core.Rust.emitExpr v2710 v81
    let v2712 : string = $"r#\"{v109}\"#"
    let v2713 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2712
    let v2714 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2713 v86
    let v2715 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2714 v88
    let v2716 : string = method2(v2711)
    let v2717 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2716 v91
    let v2718 : string = method5()
    let v2719 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2718 v91
    let v2720 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2715, v2717, v2719) v95
    let v2721 : string = Fable.Core.Rust.emitExpr v2720 v81
    let v2722 : Types.std.string.String = Fable.Core.Rust.emitExpr v2721 v11
    let v2723 : Types.EmitType<Types.std.string.String> = v2722 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2724 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2723, v122) v123
    let v2725 : Types.std.string.String = Fable.Core.Rust.emitExpr v2724 v125
    let v2726 : Types.std.string.String = v2660 |> unbox
    let v2727 : string = Fable.Core.Rust.emitExpr v2726 v81
    let v2728 : string = $"r#\"{v83}\"#"
    let v2729 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2728
    let v2730 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2729 v86
    let v2731 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2730 v88
    let v2732 : string = method2(v2727)
    let v2733 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2732 v91
    let v2734 : string = method3()
    let v2735 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2734 v91
    let v2736 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2731, v2733, v2735) v95
    let v2737 : string = Fable.Core.Rust.emitExpr v2736 v81
    let v2738 : string = $"r#\"{v98}\"#"
    let v2739 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2738
    let v2740 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2739 v86
    let v2741 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2740 v88
    let v2742 : string = method2(v2737)
    let v2743 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2742 v91
    let v2744 : string = method4()
    let v2745 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2744 v91
    let v2746 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2741, v2743, v2745) v95
    let v2747 : string = Fable.Core.Rust.emitExpr v2746 v81
    let v2748 : string = $"r#\"{v109}\"#"
    let v2749 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2748
    let v2750 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2749 v86
    let v2751 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2750 v88
    let v2752 : string = method2(v2747)
    let v2753 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2752 v91
    let v2754 : string = method5()
    let v2755 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2754 v91
    let v2756 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2751, v2753, v2755) v95
    let v2757 : string = Fable.Core.Rust.emitExpr v2756 v81
    let v2758 : Types.std.string.String = Fable.Core.Rust.emitExpr v2757 v11
    let v2759 : Types.EmitType<Types.std.string.String> = v2758 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2760 : string = method9()
    let v2761 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2760 v91
    let v2762 : unativeint = unativeint 0
    let v2763 : unativeint = unativeint 2
    let v2764 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2761, v2762, v2763) v165
    let v2765 : string = Fable.Core.Rust.emitExpr v2764 v81
    let v2766 : uint8 = Fable.Core.Rust.emitExpr v2765 v168
    let v2767 : string = method9()
    let v2768 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2767 v91
    let v2769 : unativeint = unativeint 2
    let v2770 : unativeint = unativeint 4
    let v2771 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2768, v2769, v2770) v165
    let v2772 : string = Fable.Core.Rust.emitExpr v2771 v81
    let v2773 : uint8 = Fable.Core.Rust.emitExpr v2772 v168
    let v2774 : string = method9()
    let v2775 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2774 v91
    let v2776 : unativeint = unativeint 4
    let v2777 : unativeint = unativeint 6
    let v2778 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2775, v2776, v2777) v165
    let v2779 : string = Fable.Core.Rust.emitExpr v2778 v81
    let v2780 : uint8 = Fable.Core.Rust.emitExpr v2779 v168
    let v2781 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2759, v2766, v2773, v2780) v184
    let v2782 : Types.std.string.String = Fable.Core.Rust.emitExpr v2781 v125
    let v2783 : Types.std.string.String = v2683 |> unbox
    let v2784 : string = Fable.Core.Rust.emitExpr v2783 v81
    let v2785 : string = $"r#\"{v83}\"#"
    let v2786 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2785
    let v2787 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2786 v86
    let v2788 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2787 v88
    let v2789 : string = method2(v2784)
    let v2790 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2789 v91
    let v2791 : string = method3()
    let v2792 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2791 v91
    let v2793 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2788, v2790, v2792) v95
    let v2794 : string = Fable.Core.Rust.emitExpr v2793 v81
    let v2795 : string = $"r#\"{v98}\"#"
    let v2796 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2795
    let v2797 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2796 v86
    let v2798 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2797 v88
    let v2799 : string = method2(v2794)
    let v2800 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2799 v91
    let v2801 : string = method4()
    let v2802 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2801 v91
    let v2803 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2798, v2800, v2802) v95
    let v2804 : string = Fable.Core.Rust.emitExpr v2803 v81
    let v2805 : string = $"r#\"{v109}\"#"
    let v2806 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2805
    let v2807 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2806 v86
    let v2808 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2807 v88
    let v2809 : string = method2(v2804)
    let v2810 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2809 v91
    let v2811 : string = method5()
    let v2812 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2811 v91
    let v2813 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2808, v2810, v2812) v95
    let v2814 : string = Fable.Core.Rust.emitExpr v2813 v81
    let v2815 : Types.std.string.String = Fable.Core.Rust.emitExpr v2814 v11
    let v2816 : Types.EmitType<Types.std.string.String> = v2815 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2817 : string = method7()
    let v2818 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2817 v91
    let v2819 : unativeint = unativeint 0
    let v2820 : unativeint = unativeint 2
    let v2821 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2818, v2819, v2820) v165
    let v2822 : string = Fable.Core.Rust.emitExpr v2821 v81
    let v2823 : uint8 = Fable.Core.Rust.emitExpr v2822 v168
    let v2824 : string = method7()
    let v2825 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2824 v91
    let v2826 : unativeint = unativeint 2
    let v2827 : unativeint = unativeint 4
    let v2828 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2825, v2826, v2827) v165
    let v2829 : string = Fable.Core.Rust.emitExpr v2828 v81
    let v2830 : uint8 = Fable.Core.Rust.emitExpr v2829 v168
    let v2831 : string = method7()
    let v2832 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2831 v91
    let v2833 : unativeint = unativeint 4
    let v2834 : unativeint = unativeint 6
    let v2835 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2832, v2833, v2834) v165
    let v2836 : string = Fable.Core.Rust.emitExpr v2835 v81
    let v2837 : uint8 = Fable.Core.Rust.emitExpr v2836 v168
    let v2838 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2816, v2823, v2830, v2837) v184
    let v2839 : Types.std.string.String = Fable.Core.Rust.emitExpr v2838 v125
    let v2840 : string = $"{v2725} {v2782} {v2839}"
    System.Console.WriteLine v2840
    let v2841 : obj = Fable.Core.Rust.emitExpr () v1852
    let v2842 : obj = Fable.Core.Rust.emitExpr v2841 v1854
    let v2843 : string = $"tcp://{v1653}:{13805}"
    Fable.Core.Rust.emitExpr struct (v2842, v2843) v1857
    let v2844 : string = $"$0.send($1.as_str(), 0).unwrap()"
    Fable.Core.Rust.emitExpr struct (v2842, v2447) v2844
    let v2845 : Types.std.string.String = Fable.Core.Rust.emitExpr v2842 v1859
    Fable.Core.Rust.emitExpr struct (v2842, v2843) v1861
    let v2846 : Types.std.string.String = Fable.Core.Rust.emitExpr v1862 v11
    let v2847 : Types.EmitType<Types.std.string.String> = v2846 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2848 : int32 = Fable.Core.Rust.emitExpr v2845 v1250
    let v2849 : Types.std.string.String = Fable.Core.Rust.emitExpr v2848 v60
    let v2850 : Types.EmitType<Types.std.string.String> = v2849 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2851 : (Types.EmitType<Types.std.string.String> []) = [|v2847; v2850|]
    let v2852 : obj = Fable.Core.Rust.emitExpr v2851 v39
    let v2853 : Types.std.string.String = Fable.Core.Rust.emitExpr v2852 v41
    let v2854 : Types.EmitType<Types.std.string.String> = v2853 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2855 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v2856 : int64 = Fable.Core.Rust.emitExpr v2855 v8
    let v2857 : int64 = v2856 - v2643
    let v2858 : string = (v2857).ToString ()
    let v2859 : int32 = 6
    let v2860 : string = method1(v2859, v2858)
    let v2861 : uint8 = Fable.Core.Rust.emitExpr () v50
    let v2862 : Types.std.string.String = Fable.Core.Rust.emitExpr v52 v11
    let v2863 : Types.EmitType<Types.std.string.String> = v2862 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2864 : Types.std.string.String = Fable.Core.Rust.emitExpr v2860 v11
    let v2865 : Types.EmitType<Types.std.string.String> = v2864 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2866 : Types.std.string.String = Fable.Core.Rust.emitExpr v57 v11
    let v2867 : Types.EmitType<Types.std.string.String> = v2866 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2868 : Types.std.string.String = Fable.Core.Rust.emitExpr v2861 v60
    let v2869 : Types.EmitType<Types.std.string.String> = v2868 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2870 : Types.std.string.String = Fable.Core.Rust.emitExpr v63 v11
    let v2871 : Types.EmitType<Types.std.string.String> = v2870 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2872 : Types.std.string.String = Fable.Core.Rust.emitExpr v66 v11
    let v2873 : Types.EmitType<Types.std.string.String> = v2872 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2874 : (Types.EmitType<Types.std.string.String> []) = [|v2863; v2865; v2867; v2869; v2871; v2873|]
    let v2875 : obj = Fable.Core.Rust.emitExpr v2874 v39
    let v2876 : Types.std.string.String = Fable.Core.Rust.emitExpr v2875 v41
    let v2877 : Types.EmitType<Types.std.string.String> = v2876 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2878 : Types.std.string.String = Fable.Core.Rust.emitExpr v1694 v11
    let v2879 : Types.EmitType<Types.std.string.String> = v2878 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2880 : (Types.EmitType<Types.std.string.String> []) = [|v2879|]
    let v2881 : obj = Fable.Core.Rust.emitExpr v2880 v39
    let v2882 : Types.std.string.String = Fable.Core.Rust.emitExpr v2881 v41
    let v2883 : Types.EmitType<Types.std.string.String> = v2882 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2884 : Types.std.string.String = v2883 |> unbox
    let v2885 : string = Fable.Core.Rust.emitExpr v2884 v81
    let v2886 : string = $"r#\"{v83}\"#"
    let v2887 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2886
    let v2888 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2887 v86
    let v2889 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2888 v88
    let v2890 : string = method2(v2885)
    let v2891 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2890 v91
    let v2892 : string = method3()
    let v2893 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2892 v91
    let v2894 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2889, v2891, v2893) v95
    let v2895 : string = Fable.Core.Rust.emitExpr v2894 v81
    let v2896 : string = $"r#\"{v98}\"#"
    let v2897 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2896
    let v2898 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2897 v86
    let v2899 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2898 v88
    let v2900 : string = method2(v2895)
    let v2901 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2900 v91
    let v2902 : string = method4()
    let v2903 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2902 v91
    let v2904 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2899, v2901, v2903) v95
    let v2905 : string = Fable.Core.Rust.emitExpr v2904 v81
    let v2906 : string = $"r#\"{v109}\"#"
    let v2907 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2906
    let v2908 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2907 v86
    let v2909 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2908 v88
    let v2910 : string = method2(v2905)
    let v2911 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2910 v91
    let v2912 : string = method5()
    let v2913 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2912 v91
    let v2914 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2909, v2911, v2913) v95
    let v2915 : string = Fable.Core.Rust.emitExpr v2914 v81
    let v2916 : Types.std.string.String = Fable.Core.Rust.emitExpr v2915 v11
    let v2917 : Types.EmitType<Types.std.string.String> = v2916 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2918 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2917, v122) v123
    let v2919 : Types.std.string.String = Fable.Core.Rust.emitExpr v2918 v125
    let v2920 : Types.std.string.String = v2854 |> unbox
    let v2921 : string = Fable.Core.Rust.emitExpr v2920 v81
    let v2922 : string = $"r#\"{v83}\"#"
    let v2923 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2922
    let v2924 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2923 v86
    let v2925 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2924 v88
    let v2926 : string = method2(v2921)
    let v2927 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2926 v91
    let v2928 : string = method3()
    let v2929 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2928 v91
    let v2930 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2925, v2927, v2929) v95
    let v2931 : string = Fable.Core.Rust.emitExpr v2930 v81
    let v2932 : string = $"r#\"{v98}\"#"
    let v2933 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2932
    let v2934 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2933 v86
    let v2935 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2934 v88
    let v2936 : string = method2(v2931)
    let v2937 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2936 v91
    let v2938 : string = method4()
    let v2939 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2938 v91
    let v2940 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2935, v2937, v2939) v95
    let v2941 : string = Fable.Core.Rust.emitExpr v2940 v81
    let v2942 : string = $"r#\"{v109}\"#"
    let v2943 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2942
    let v2944 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2943 v86
    let v2945 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2944 v88
    let v2946 : string = method2(v2941)
    let v2947 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2946 v91
    let v2948 : string = method5()
    let v2949 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2948 v91
    let v2950 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2945, v2947, v2949) v95
    let v2951 : string = Fable.Core.Rust.emitExpr v2950 v81
    let v2952 : Types.std.string.String = Fable.Core.Rust.emitExpr v2951 v11
    let v2953 : Types.EmitType<Types.std.string.String> = v2952 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2954 : string = method9()
    let v2955 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2954 v91
    let v2956 : unativeint = unativeint 0
    let v2957 : unativeint = unativeint 2
    let v2958 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2955, v2956, v2957) v165
    let v2959 : string = Fable.Core.Rust.emitExpr v2958 v81
    let v2960 : uint8 = Fable.Core.Rust.emitExpr v2959 v168
    let v2961 : string = method9()
    let v2962 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2961 v91
    let v2963 : unativeint = unativeint 2
    let v2964 : unativeint = unativeint 4
    let v2965 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2962, v2963, v2964) v165
    let v2966 : string = Fable.Core.Rust.emitExpr v2965 v81
    let v2967 : uint8 = Fable.Core.Rust.emitExpr v2966 v168
    let v2968 : string = method9()
    let v2969 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2968 v91
    let v2970 : unativeint = unativeint 4
    let v2971 : unativeint = unativeint 6
    let v2972 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2969, v2970, v2971) v165
    let v2973 : string = Fable.Core.Rust.emitExpr v2972 v81
    let v2974 : uint8 = Fable.Core.Rust.emitExpr v2973 v168
    let v2975 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2953, v2960, v2967, v2974) v184
    let v2976 : Types.std.string.String = Fable.Core.Rust.emitExpr v2975 v125
    let v2977 : Types.std.string.String = v2877 |> unbox
    let v2978 : string = Fable.Core.Rust.emitExpr v2977 v81
    let v2979 : string = $"r#\"{v83}\"#"
    let v2980 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2979
    let v2981 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2980 v86
    let v2982 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2981 v88
    let v2983 : string = method2(v2978)
    let v2984 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2983 v91
    let v2985 : string = method3()
    let v2986 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2985 v91
    let v2987 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2982, v2984, v2986) v95
    let v2988 : string = Fable.Core.Rust.emitExpr v2987 v81
    let v2989 : string = $"r#\"{v98}\"#"
    let v2990 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2989
    let v2991 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2990 v86
    let v2992 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2991 v88
    let v2993 : string = method2(v2988)
    let v2994 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2993 v91
    let v2995 : string = method4()
    let v2996 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2995 v91
    let v2997 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2992, v2994, v2996) v95
    let v2998 : string = Fable.Core.Rust.emitExpr v2997 v81
    let v2999 : string = $"r#\"{v109}\"#"
    let v3000 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2999
    let v3001 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3000 v86
    let v3002 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3001 v88
    let v3003 : string = method2(v2998)
    let v3004 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3003 v91
    let v3005 : string = method5()
    let v3006 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3005 v91
    let v3007 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3002, v3004, v3006) v95
    let v3008 : string = Fable.Core.Rust.emitExpr v3007 v81
    let v3009 : Types.std.string.String = Fable.Core.Rust.emitExpr v3008 v11
    let v3010 : Types.EmitType<Types.std.string.String> = v3009 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3011 : string = method7()
    let v3012 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3011 v91
    let v3013 : unativeint = unativeint 0
    let v3014 : unativeint = unativeint 2
    let v3015 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3012, v3013, v3014) v165
    let v3016 : string = Fable.Core.Rust.emitExpr v3015 v81
    let v3017 : uint8 = Fable.Core.Rust.emitExpr v3016 v168
    let v3018 : string = method7()
    let v3019 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3018 v91
    let v3020 : unativeint = unativeint 2
    let v3021 : unativeint = unativeint 4
    let v3022 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3019, v3020, v3021) v165
    let v3023 : string = Fable.Core.Rust.emitExpr v3022 v81
    let v3024 : uint8 = Fable.Core.Rust.emitExpr v3023 v168
    let v3025 : string = method7()
    let v3026 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3025 v91
    let v3027 : unativeint = unativeint 4
    let v3028 : unativeint = unativeint 6
    let v3029 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3026, v3027, v3028) v165
    let v3030 : string = Fable.Core.Rust.emitExpr v3029 v81
    let v3031 : uint8 = Fable.Core.Rust.emitExpr v3030 v168
    let v3032 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3010, v3017, v3024, v3031) v184
    let v3033 : Types.std.string.String = Fable.Core.Rust.emitExpr v3032 v125
    let v3034 : string = $"{v2919} {v2976} {v3033}"
    System.Console.WriteLine v3034
    let v3035 : string = "> spi_build_file; ok"
    let v3036 : Types.std.string.String = Fable.Core.Rust.emitExpr v3035 v11
    let v3037 : Types.EmitType<Types.std.string.String> = v3036 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3038 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v3039 : int64 = Fable.Core.Rust.emitExpr v3038 v8
    let v3040 : int64 = v3039 - v9
    let v3041 : string = (v3040).ToString ()
    let v3042 : int32 = 6
    let v3043 : string = method1(v3042, v3041)
    let v3044 : uint8 = Fable.Core.Rust.emitExpr () v50
    let v3045 : Types.std.string.String = Fable.Core.Rust.emitExpr v52 v11
    let v3046 : Types.EmitType<Types.std.string.String> = v3045 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3047 : Types.std.string.String = Fable.Core.Rust.emitExpr v3043 v11
    let v3048 : Types.EmitType<Types.std.string.String> = v3047 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3049 : Types.std.string.String = Fable.Core.Rust.emitExpr v57 v11
    let v3050 : Types.EmitType<Types.std.string.String> = v3049 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3051 : Types.std.string.String = Fable.Core.Rust.emitExpr v3044 v60
    let v3052 : Types.EmitType<Types.std.string.String> = v3051 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3053 : Types.std.string.String = Fable.Core.Rust.emitExpr v63 v11
    let v3054 : Types.EmitType<Types.std.string.String> = v3053 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3055 : Types.std.string.String = Fable.Core.Rust.emitExpr v66 v11
    let v3056 : Types.EmitType<Types.std.string.String> = v3055 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3057 : (Types.EmitType<Types.std.string.String> []) = [|v3046; v3048; v3050; v3052; v3054; v3056|]
    let v3058 : obj = Fable.Core.Rust.emitExpr v3057 v39
    let v3059 : Types.std.string.String = Fable.Core.Rust.emitExpr v3058 v41
    let v3060 : Types.EmitType<Types.std.string.String> = v3059 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3061 : Types.std.string.String = Fable.Core.Rust.emitExpr v73 v11
    let v3062 : Types.EmitType<Types.std.string.String> = v3061 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3063 : (Types.EmitType<Types.std.string.String> []) = [|v3062|]
    let v3064 : obj = Fable.Core.Rust.emitExpr v3063 v39
    let v3065 : Types.std.string.String = Fable.Core.Rust.emitExpr v3064 v41
    let v3066 : Types.EmitType<Types.std.string.String> = v3065 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3067 : Types.std.string.String = v3066 |> unbox
    let v3068 : string = Fable.Core.Rust.emitExpr v3067 v81
    let v3069 : string = $"r#\"{v83}\"#"
    let v3070 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3069
    let v3071 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3070 v86
    let v3072 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3071 v88
    let v3073 : string = method2(v3068)
    let v3074 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3073 v91
    let v3075 : string = method3()
    let v3076 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3075 v91
    let v3077 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3072, v3074, v3076) v95
    let v3078 : string = Fable.Core.Rust.emitExpr v3077 v81
    let v3079 : string = $"r#\"{v98}\"#"
    let v3080 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3079
    let v3081 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3080 v86
    let v3082 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3081 v88
    let v3083 : string = method2(v3078)
    let v3084 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3083 v91
    let v3085 : string = method4()
    let v3086 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3085 v91
    let v3087 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3082, v3084, v3086) v95
    let v3088 : string = Fable.Core.Rust.emitExpr v3087 v81
    let v3089 : string = $"r#\"{v109}\"#"
    let v3090 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3089
    let v3091 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3090 v86
    let v3092 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3091 v88
    let v3093 : string = method2(v3088)
    let v3094 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3093 v91
    let v3095 : string = method5()
    let v3096 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3095 v91
    let v3097 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3092, v3094, v3096) v95
    let v3098 : string = Fable.Core.Rust.emitExpr v3097 v81
    let v3099 : Types.std.string.String = Fable.Core.Rust.emitExpr v3098 v11
    let v3100 : Types.EmitType<Types.std.string.String> = v3099 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3101 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3100, v122) v123
    let v3102 : Types.std.string.String = Fable.Core.Rust.emitExpr v3101 v125
    let v3103 : Types.std.string.String = v3037 |> unbox
    let v3104 : string = Fable.Core.Rust.emitExpr v3103 v81
    let v3105 : string = $"r#\"{v83}\"#"
    let v3106 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3105
    let v3107 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3106 v86
    let v3108 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3107 v88
    let v3109 : string = method2(v3104)
    let v3110 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3109 v91
    let v3111 : string = method3()
    let v3112 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3111 v91
    let v3113 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3108, v3110, v3112) v95
    let v3114 : string = Fable.Core.Rust.emitExpr v3113 v81
    let v3115 : string = $"r#\"{v98}\"#"
    let v3116 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3115
    let v3117 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3116 v86
    let v3118 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3117 v88
    let v3119 : string = method2(v3114)
    let v3120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3119 v91
    let v3121 : string = method4()
    let v3122 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3121 v91
    let v3123 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3118, v3120, v3122) v95
    let v3124 : string = Fable.Core.Rust.emitExpr v3123 v81
    let v3125 : string = $"r#\"{v109}\"#"
    let v3126 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3125
    let v3127 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3126 v86
    let v3128 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3127 v88
    let v3129 : string = method2(v3124)
    let v3130 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3129 v91
    let v3131 : string = method5()
    let v3132 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3131 v91
    let v3133 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3128, v3130, v3132) v95
    let v3134 : string = Fable.Core.Rust.emitExpr v3133 v81
    let v3135 : Types.std.string.String = Fable.Core.Rust.emitExpr v3134 v11
    let v3136 : Types.EmitType<Types.std.string.String> = v3135 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3137 : string = method6()
    let v3138 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3137 v91
    let v3139 : unativeint = unativeint 0
    let v3140 : unativeint = unativeint 2
    let v3141 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3138, v3139, v3140) v165
    let v3142 : string = Fable.Core.Rust.emitExpr v3141 v81
    let v3143 : uint8 = Fable.Core.Rust.emitExpr v3142 v168
    let v3144 : string = method6()
    let v3145 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3144 v91
    let v3146 : unativeint = unativeint 2
    let v3147 : unativeint = unativeint 4
    let v3148 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3145, v3146, v3147) v165
    let v3149 : string = Fable.Core.Rust.emitExpr v3148 v81
    let v3150 : uint8 = Fable.Core.Rust.emitExpr v3149 v168
    let v3151 : string = method6()
    let v3152 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3151 v91
    let v3153 : unativeint = unativeint 4
    let v3154 : unativeint = unativeint 6
    let v3155 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3152, v3153, v3154) v165
    let v3156 : string = Fable.Core.Rust.emitExpr v3155 v81
    let v3157 : uint8 = Fable.Core.Rust.emitExpr v3156 v168
    let v3158 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3136, v3143, v3150, v3157) v184
    let v3159 : Types.std.string.String = Fable.Core.Rust.emitExpr v3158 v125
    let v3160 : Types.std.string.String = v3060 |> unbox
    let v3161 : string = Fable.Core.Rust.emitExpr v3160 v81
    let v3162 : string = $"r#\"{v83}\"#"
    let v3163 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3162
    let v3164 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3163 v86
    let v3165 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3164 v88
    let v3166 : string = method2(v3161)
    let v3167 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3166 v91
    let v3168 : string = method3()
    let v3169 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3168 v91
    let v3170 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3165, v3167, v3169) v95
    let v3171 : string = Fable.Core.Rust.emitExpr v3170 v81
    let v3172 : string = $"r#\"{v98}\"#"
    let v3173 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3172
    let v3174 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3173 v86
    let v3175 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3174 v88
    let v3176 : string = method2(v3171)
    let v3177 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3176 v91
    let v3178 : string = method4()
    let v3179 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3178 v91
    let v3180 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3175, v3177, v3179) v95
    let v3181 : string = Fable.Core.Rust.emitExpr v3180 v81
    let v3182 : string = $"r#\"{v109}\"#"
    let v3183 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3182
    let v3184 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3183 v86
    let v3185 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3184 v88
    let v3186 : string = method2(v3181)
    let v3187 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3186 v91
    let v3188 : string = method5()
    let v3189 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3188 v91
    let v3190 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3185, v3187, v3189) v95
    let v3191 : string = Fable.Core.Rust.emitExpr v3190 v81
    let v3192 : Types.std.string.String = Fable.Core.Rust.emitExpr v3191 v11
    let v3193 : Types.EmitType<Types.std.string.String> = v3192 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3194 : string = method7()
    let v3195 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3194 v91
    let v3196 : unativeint = unativeint 0
    let v3197 : unativeint = unativeint 2
    let v3198 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3195, v3196, v3197) v165
    let v3199 : string = Fable.Core.Rust.emitExpr v3198 v81
    let v3200 : uint8 = Fable.Core.Rust.emitExpr v3199 v168
    let v3201 : string = method7()
    let v3202 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3201 v91
    let v3203 : unativeint = unativeint 2
    let v3204 : unativeint = unativeint 4
    let v3205 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3202, v3203, v3204) v165
    let v3206 : string = Fable.Core.Rust.emitExpr v3205 v81
    let v3207 : uint8 = Fable.Core.Rust.emitExpr v3206 v168
    let v3208 : string = method7()
    let v3209 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3208 v91
    let v3210 : unativeint = unativeint 4
    let v3211 : unativeint = unativeint 6
    let v3212 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3209, v3210, v3211) v165
    let v3213 : string = Fable.Core.Rust.emitExpr v3212 v81
    let v3214 : uint8 = Fable.Core.Rust.emitExpr v3213 v168
    let v3215 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3193, v3200, v3207, v3214) v184
    let v3216 : Types.std.string.String = Fable.Core.Rust.emitExpr v3215 v125
    let v3217 : string = $"{v3102} {v3159} {v3216}"
    System.Console.WriteLine v3217
    let struct (v3218 : string, v3219 : string, v3220 : string, v3221 : bool) = method0()
    let v3222 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v3223 : int64 = Fable.Core.Rust.emitExpr v3222 v8
    let v3224 : string = "std::fs::metadata($0).unwrap().modified().unwrap()"
    let v3225 : Types.std.time.SystemTime = Fable.Core.Rust.emitExpr v854 v3224
    let v3226 : Types.std.string.String = Fable.Core.Rust.emitExpr v855 v11
    let v3227 : Types.EmitType<Types.std.string.String> = v3226 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3228 : string = Fable.Core.Rust.emitExpr v854 v21
    let v3229 : Types.std.string.String = Fable.Core.Rust.emitExpr v3228 v11
    let v3230 : Types.EmitType<Types.std.string.String> = v3229 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3231 : string = "start"
    let v3232 : Types.std.string.String = Fable.Core.Rust.emitExpr v3231 v11
    let v3233 : Types.EmitType<Types.std.string.String> = v3232 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3234 : Types.std.string.String = Fable.Core.Rust.emitExpr v3225 v60
    let v3235 : Types.EmitType<Types.std.string.String> = v3234 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3236 : (Types.EmitType<Types.std.string.String> []) = [|v3227; v3230; v3233; v3235|]
    let v3237 : obj = Fable.Core.Rust.emitExpr v3236 v39
    let v3238 : Types.std.string.String = Fable.Core.Rust.emitExpr v3237 v41
    let v3239 : Types.EmitType<Types.std.string.String> = v3238 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3240 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v3241 : int64 = Fable.Core.Rust.emitExpr v3240 v8
    let v3242 : int64 = v3241 - v3223
    let v3243 : string = (v3242).ToString ()
    let v3244 : int32 = 6
    let v3245 : string = method1(v3244, v3243)
    let v3246 : uint8 = Fable.Core.Rust.emitExpr () v50
    let v3247 : Types.std.string.String = Fable.Core.Rust.emitExpr v52 v11
    let v3248 : Types.EmitType<Types.std.string.String> = v3247 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3249 : Types.std.string.String = Fable.Core.Rust.emitExpr v3245 v11
    let v3250 : Types.EmitType<Types.std.string.String> = v3249 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3251 : Types.std.string.String = Fable.Core.Rust.emitExpr v57 v11
    let v3252 : Types.EmitType<Types.std.string.String> = v3251 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3253 : Types.std.string.String = Fable.Core.Rust.emitExpr v3246 v60
    let v3254 : Types.EmitType<Types.std.string.String> = v3253 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3255 : Types.std.string.String = Fable.Core.Rust.emitExpr v63 v11
    let v3256 : Types.EmitType<Types.std.string.String> = v3255 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3257 : Types.std.string.String = Fable.Core.Rust.emitExpr v66 v11
    let v3258 : Types.EmitType<Types.std.string.String> = v3257 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3259 : (Types.EmitType<Types.std.string.String> []) = [|v3248; v3250; v3252; v3254; v3256; v3258|]
    let v3260 : obj = Fable.Core.Rust.emitExpr v3259 v39
    let v3261 : Types.std.string.String = Fable.Core.Rust.emitExpr v3260 v41
    let v3262 : Types.EmitType<Types.std.string.String> = v3261 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3263 : string = "> wait_file_change ()"
    let v3264 : Types.std.string.String = Fable.Core.Rust.emitExpr v3263 v11
    let v3265 : Types.EmitType<Types.std.string.String> = v3264 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3266 : (Types.EmitType<Types.std.string.String> []) = [|v3265|]
    let v3267 : obj = Fable.Core.Rust.emitExpr v3266 v39
    let v3268 : Types.std.string.String = Fable.Core.Rust.emitExpr v3267 v41
    let v3269 : Types.EmitType<Types.std.string.String> = v3268 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3270 : Types.std.string.String = v3269 |> unbox
    let v3271 : string = Fable.Core.Rust.emitExpr v3270 v81
    let v3272 : string = $"r#\"{v83}\"#"
    let v3273 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3272
    let v3274 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3273 v86
    let v3275 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3274 v88
    let v3276 : string = method2(v3271)
    let v3277 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3276 v91
    let v3278 : string = method3()
    let v3279 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3278 v91
    let v3280 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3275, v3277, v3279) v95
    let v3281 : string = Fable.Core.Rust.emitExpr v3280 v81
    let v3282 : string = $"r#\"{v98}\"#"
    let v3283 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3282
    let v3284 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3283 v86
    let v3285 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3284 v88
    let v3286 : string = method2(v3281)
    let v3287 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3286 v91
    let v3288 : string = method4()
    let v3289 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3288 v91
    let v3290 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3285, v3287, v3289) v95
    let v3291 : string = Fable.Core.Rust.emitExpr v3290 v81
    let v3292 : string = $"r#\"{v109}\"#"
    let v3293 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3292
    let v3294 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3293 v86
    let v3295 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3294 v88
    let v3296 : string = method2(v3291)
    let v3297 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3296 v91
    let v3298 : string = method5()
    let v3299 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3298 v91
    let v3300 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3295, v3297, v3299) v95
    let v3301 : string = Fable.Core.Rust.emitExpr v3300 v81
    let v3302 : Types.std.string.String = Fable.Core.Rust.emitExpr v3301 v11
    let v3303 : Types.EmitType<Types.std.string.String> = v3302 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3304 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3303, v122) v123
    let v3305 : Types.std.string.String = Fable.Core.Rust.emitExpr v3304 v125
    let v3306 : Types.std.string.String = v3239 |> unbox
    let v3307 : string = Fable.Core.Rust.emitExpr v3306 v81
    let v3308 : string = $"r#\"{v83}\"#"
    let v3309 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3308
    let v3310 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3309 v86
    let v3311 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3310 v88
    let v3312 : string = method2(v3307)
    let v3313 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3312 v91
    let v3314 : string = method3()
    let v3315 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3314 v91
    let v3316 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3311, v3313, v3315) v95
    let v3317 : string = Fable.Core.Rust.emitExpr v3316 v81
    let v3318 : string = $"r#\"{v98}\"#"
    let v3319 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3318
    let v3320 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3319 v86
    let v3321 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3320 v88
    let v3322 : string = method2(v3317)
    let v3323 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3322 v91
    let v3324 : string = method4()
    let v3325 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3324 v91
    let v3326 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3321, v3323, v3325) v95
    let v3327 : string = Fable.Core.Rust.emitExpr v3326 v81
    let v3328 : string = $"r#\"{v109}\"#"
    let v3329 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3328
    let v3330 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3329 v86
    let v3331 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3330 v88
    let v3332 : string = method2(v3327)
    let v3333 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3332 v91
    let v3334 : string = method5()
    let v3335 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3334 v91
    let v3336 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3331, v3333, v3335) v95
    let v3337 : string = Fable.Core.Rust.emitExpr v3336 v81
    let v3338 : Types.std.string.String = Fable.Core.Rust.emitExpr v3337 v11
    let v3339 : Types.EmitType<Types.std.string.String> = v3338 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3340 : string = method11()
    let v3341 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3340 v91
    let v3342 : unativeint = unativeint 0
    let v3343 : unativeint = unativeint 2
    let v3344 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3341, v3342, v3343) v165
    let v3345 : string = Fable.Core.Rust.emitExpr v3344 v81
    let v3346 : uint8 = Fable.Core.Rust.emitExpr v3345 v168
    let v3347 : string = method11()
    let v3348 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3347 v91
    let v3349 : unativeint = unativeint 2
    let v3350 : unativeint = unativeint 4
    let v3351 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3348, v3349, v3350) v165
    let v3352 : string = Fable.Core.Rust.emitExpr v3351 v81
    let v3353 : uint8 = Fable.Core.Rust.emitExpr v3352 v168
    let v3354 : string = method11()
    let v3355 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3354 v91
    let v3356 : unativeint = unativeint 4
    let v3357 : unativeint = unativeint 6
    let v3358 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3355, v3356, v3357) v165
    let v3359 : string = Fable.Core.Rust.emitExpr v3358 v81
    let v3360 : uint8 = Fable.Core.Rust.emitExpr v3359 v168
    let v3361 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3339, v3346, v3353, v3360) v184
    let v3362 : Types.std.string.String = Fable.Core.Rust.emitExpr v3361 v125
    let v3363 : Types.std.string.String = v3262 |> unbox
    let v3364 : string = Fable.Core.Rust.emitExpr v3363 v81
    let v3365 : string = $"r#\"{v83}\"#"
    let v3366 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3365
    let v3367 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3366 v86
    let v3368 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3367 v88
    let v3369 : string = method2(v3364)
    let v3370 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3369 v91
    let v3371 : string = method3()
    let v3372 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3371 v91
    let v3373 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3368, v3370, v3372) v95
    let v3374 : string = Fable.Core.Rust.emitExpr v3373 v81
    let v3375 : string = $"r#\"{v98}\"#"
    let v3376 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3375
    let v3377 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3376 v86
    let v3378 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3377 v88
    let v3379 : string = method2(v3374)
    let v3380 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3379 v91
    let v3381 : string = method4()
    let v3382 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3381 v91
    let v3383 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3378, v3380, v3382) v95
    let v3384 : string = Fable.Core.Rust.emitExpr v3383 v81
    let v3385 : string = $"r#\"{v109}\"#"
    let v3386 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3385
    let v3387 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3386 v86
    let v3388 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3387 v88
    let v3389 : string = method2(v3384)
    let v3390 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3389 v91
    let v3391 : string = method5()
    let v3392 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3391 v91
    let v3393 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3388, v3390, v3392) v95
    let v3394 : string = Fable.Core.Rust.emitExpr v3393 v81
    let v3395 : Types.std.string.String = Fable.Core.Rust.emitExpr v3394 v11
    let v3396 : Types.EmitType<Types.std.string.String> = v3395 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3397 : string = method7()
    let v3398 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3397 v91
    let v3399 : unativeint = unativeint 0
    let v3400 : unativeint = unativeint 2
    let v3401 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3398, v3399, v3400) v165
    let v3402 : string = Fable.Core.Rust.emitExpr v3401 v81
    let v3403 : uint8 = Fable.Core.Rust.emitExpr v3402 v168
    let v3404 : string = method7()
    let v3405 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3404 v91
    let v3406 : unativeint = unativeint 2
    let v3407 : unativeint = unativeint 4
    let v3408 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3405, v3406, v3407) v165
    let v3409 : string = Fable.Core.Rust.emitExpr v3408 v81
    let v3410 : uint8 = Fable.Core.Rust.emitExpr v3409 v168
    let v3411 : string = method7()
    let v3412 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3411 v91
    let v3413 : unativeint = unativeint 4
    let v3414 : unativeint = unativeint 6
    let v3415 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3412, v3413, v3414) v165
    let v3416 : string = Fable.Core.Rust.emitExpr v3415 v81
    let v3417 : uint8 = Fable.Core.Rust.emitExpr v3416 v168
    let v3418 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3396, v3403, v3410, v3417) v184
    let v3419 : Types.std.string.String = Fable.Core.Rust.emitExpr v3418 v125
    let v3420 : string = $"{v3305} {v3362} {v3419}"
    System.Console.WriteLine v3420
    let v3421 : (int32 []) = [| 0..50 |]
    let v3422 : int32 = v3421.Length
    let v3423 : US0 = US0_0
    let v3424 : Mut0 = {l0 = 0; l1 = v3423} : Mut0
    while method12(v3422, v3424) do
        let v3426 : int32 = v3424.l0
        let v3427 : US0 = v3424.l1
        let v3428 : int32 = v3421.[int v3426]
        let v3636 : US0 =
            match v3427 with
            | US0_0 -> (* None *)
                let v3431 : Types.std.time.SystemTime = Fable.Core.Rust.emitExpr v854 v3224
                let v3432 : string = "i"
                let v3433 : Types.std.string.String = Fable.Core.Rust.emitExpr v3432 v11
                let v3434 : Types.EmitType<Types.std.string.String> = v3433 |> unbox<Types.EmitType<Types.std.string.String>>
                let v3435 : Types.std.string.String = Fable.Core.Rust.emitExpr v3428 v60
                let v3436 : Types.EmitType<Types.std.string.String> = v3435 |> unbox<Types.EmitType<Types.std.string.String>>
                let v3437 : string = "last_modified"
                let v3438 : Types.std.string.String = Fable.Core.Rust.emitExpr v3437 v11
                let v3439 : Types.EmitType<Types.std.string.String> = v3438 |> unbox<Types.EmitType<Types.std.string.String>>
                let v3440 : Types.std.string.String = Fable.Core.Rust.emitExpr v3431 v60
                let v3441 : Types.EmitType<Types.std.string.String> = v3440 |> unbox<Types.EmitType<Types.std.string.String>>
                let v3442 : (Types.EmitType<Types.std.string.String> []) = [|v3434; v3436; v3439; v3441|]
                let v3443 : obj = Fable.Core.Rust.emitExpr v3442 v39
                let v3444 : Types.std.string.String = Fable.Core.Rust.emitExpr v3443 v41
                let v3445 : Types.EmitType<Types.std.string.String> = v3444 |> unbox<Types.EmitType<Types.std.string.String>>
                let v3446 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
                let v3447 : int64 = Fable.Core.Rust.emitExpr v3446 v8
                let v3448 : int64 = v3447 - v3223
                let v3449 : string = (v3448).ToString ()
                let v3450 : int32 = 6
                let v3451 : string = method1(v3450, v3449)
                let v3452 : uint8 = Fable.Core.Rust.emitExpr () v50
                let v3453 : Types.std.string.String = Fable.Core.Rust.emitExpr v52 v11
                let v3454 : Types.EmitType<Types.std.string.String> = v3453 |> unbox<Types.EmitType<Types.std.string.String>>
                let v3455 : Types.std.string.String = Fable.Core.Rust.emitExpr v3451 v11
                let v3456 : Types.EmitType<Types.std.string.String> = v3455 |> unbox<Types.EmitType<Types.std.string.String>>
                let v3457 : Types.std.string.String = Fable.Core.Rust.emitExpr v57 v11
                let v3458 : Types.EmitType<Types.std.string.String> = v3457 |> unbox<Types.EmitType<Types.std.string.String>>
                let v3459 : Types.std.string.String = Fable.Core.Rust.emitExpr v3452 v60
                let v3460 : Types.EmitType<Types.std.string.String> = v3459 |> unbox<Types.EmitType<Types.std.string.String>>
                let v3461 : Types.std.string.String = Fable.Core.Rust.emitExpr v63 v11
                let v3462 : Types.EmitType<Types.std.string.String> = v3461 |> unbox<Types.EmitType<Types.std.string.String>>
                let v3463 : Types.std.string.String = Fable.Core.Rust.emitExpr v66 v11
                let v3464 : Types.EmitType<Types.std.string.String> = v3463 |> unbox<Types.EmitType<Types.std.string.String>>
                let v3465 : (Types.EmitType<Types.std.string.String> []) = [|v3454; v3456; v3458; v3460; v3462; v3464|]
                let v3466 : obj = Fable.Core.Rust.emitExpr v3465 v39
                let v3467 : Types.std.string.String = Fable.Core.Rust.emitExpr v3466 v41
                let v3468 : Types.EmitType<Types.std.string.String> = v3467 |> unbox<Types.EmitType<Types.std.string.String>>
                let v3469 : Types.std.string.String = Fable.Core.Rust.emitExpr v3263 v11
                let v3470 : Types.EmitType<Types.std.string.String> = v3469 |> unbox<Types.EmitType<Types.std.string.String>>
                let v3471 : (Types.EmitType<Types.std.string.String> []) = [|v3470|]
                let v3472 : obj = Fable.Core.Rust.emitExpr v3471 v39
                let v3473 : Types.std.string.String = Fable.Core.Rust.emitExpr v3472 v41
                let v3474 : Types.EmitType<Types.std.string.String> = v3473 |> unbox<Types.EmitType<Types.std.string.String>>
                let v3475 : Types.std.string.String = v3474 |> unbox
                let v3476 : string = Fable.Core.Rust.emitExpr v3475 v81
                let v3477 : string = $"r#\"{v83}\"#"
                let v3478 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3477
                let v3479 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3478 v86
                let v3480 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3479 v88
                let v3481 : string = method2(v3476)
                let v3482 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3481 v91
                let v3483 : string = method3()
                let v3484 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3483 v91
                let v3485 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3480, v3482, v3484) v95
                let v3486 : string = Fable.Core.Rust.emitExpr v3485 v81
                let v3487 : string = $"r#\"{v98}\"#"
                let v3488 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3487
                let v3489 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3488 v86
                let v3490 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3489 v88
                let v3491 : string = method2(v3486)
                let v3492 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3491 v91
                let v3493 : string = method4()
                let v3494 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3493 v91
                let v3495 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3490, v3492, v3494) v95
                let v3496 : string = Fable.Core.Rust.emitExpr v3495 v81
                let v3497 : string = $"r#\"{v109}\"#"
                let v3498 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3497
                let v3499 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3498 v86
                let v3500 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3499 v88
                let v3501 : string = method2(v3496)
                let v3502 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3501 v91
                let v3503 : string = method5()
                let v3504 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3503 v91
                let v3505 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3500, v3502, v3504) v95
                let v3506 : string = Fable.Core.Rust.emitExpr v3505 v81
                let v3507 : Types.std.string.String = Fable.Core.Rust.emitExpr v3506 v11
                let v3508 : Types.EmitType<Types.std.string.String> = v3507 |> unbox<Types.EmitType<Types.std.string.String>>
                let v3509 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3508, v122) v123
                let v3510 : Types.std.string.String = Fable.Core.Rust.emitExpr v3509 v125
                let v3511 : Types.std.string.String = v3445 |> unbox
                let v3512 : string = Fable.Core.Rust.emitExpr v3511 v81
                let v3513 : string = $"r#\"{v83}\"#"
                let v3514 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3513
                let v3515 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3514 v86
                let v3516 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3515 v88
                let v3517 : string = method2(v3512)
                let v3518 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3517 v91
                let v3519 : string = method3()
                let v3520 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3519 v91
                let v3521 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3516, v3518, v3520) v95
                let v3522 : string = Fable.Core.Rust.emitExpr v3521 v81
                let v3523 : string = $"r#\"{v98}\"#"
                let v3524 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3523
                let v3525 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3524 v86
                let v3526 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3525 v88
                let v3527 : string = method2(v3522)
                let v3528 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3527 v91
                let v3529 : string = method4()
                let v3530 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3529 v91
                let v3531 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3526, v3528, v3530) v95
                let v3532 : string = Fable.Core.Rust.emitExpr v3531 v81
                let v3533 : string = $"r#\"{v109}\"#"
                let v3534 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3533
                let v3535 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3534 v86
                let v3536 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3535 v88
                let v3537 : string = method2(v3532)
                let v3538 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3537 v91
                let v3539 : string = method5()
                let v3540 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3539 v91
                let v3541 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3536, v3538, v3540) v95
                let v3542 : string = Fable.Core.Rust.emitExpr v3541 v81
                let v3543 : Types.std.string.String = Fable.Core.Rust.emitExpr v3542 v11
                let v3544 : Types.EmitType<Types.std.string.String> = v3543 |> unbox<Types.EmitType<Types.std.string.String>>
                let v3545 : string = method11()
                let v3546 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3545 v91
                let v3547 : unativeint = unativeint 0
                let v3548 : unativeint = unativeint 2
                let v3549 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3546, v3547, v3548) v165
                let v3550 : string = Fable.Core.Rust.emitExpr v3549 v81
                let v3551 : uint8 = Fable.Core.Rust.emitExpr v3550 v168
                let v3552 : string = method11()
                let v3553 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3552 v91
                let v3554 : unativeint = unativeint 2
                let v3555 : unativeint = unativeint 4
                let v3556 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3553, v3554, v3555) v165
                let v3557 : string = Fable.Core.Rust.emitExpr v3556 v81
                let v3558 : uint8 = Fable.Core.Rust.emitExpr v3557 v168
                let v3559 : string = method11()
                let v3560 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3559 v91
                let v3561 : unativeint = unativeint 4
                let v3562 : unativeint = unativeint 6
                let v3563 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3560, v3561, v3562) v165
                let v3564 : string = Fable.Core.Rust.emitExpr v3563 v81
                let v3565 : uint8 = Fable.Core.Rust.emitExpr v3564 v168
                let v3566 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3544, v3551, v3558, v3565) v184
                let v3567 : Types.std.string.String = Fable.Core.Rust.emitExpr v3566 v125
                let v3568 : Types.std.string.String = v3468 |> unbox
                let v3569 : string = Fable.Core.Rust.emitExpr v3568 v81
                let v3570 : string = $"r#\"{v83}\"#"
                let v3571 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3570
                let v3572 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3571 v86
                let v3573 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3572 v88
                let v3574 : string = method2(v3569)
                let v3575 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3574 v91
                let v3576 : string = method3()
                let v3577 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3576 v91
                let v3578 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3573, v3575, v3577) v95
                let v3579 : string = Fable.Core.Rust.emitExpr v3578 v81
                let v3580 : string = $"r#\"{v98}\"#"
                let v3581 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3580
                let v3582 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3581 v86
                let v3583 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3582 v88
                let v3584 : string = method2(v3579)
                let v3585 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3584 v91
                let v3586 : string = method4()
                let v3587 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3586 v91
                let v3588 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3583, v3585, v3587) v95
                let v3589 : string = Fable.Core.Rust.emitExpr v3588 v81
                let v3590 : string = $"r#\"{v109}\"#"
                let v3591 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3590
                let v3592 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3591 v86
                let v3593 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3592 v88
                let v3594 : string = method2(v3589)
                let v3595 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3594 v91
                let v3596 : string = method5()
                let v3597 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3596 v91
                let v3598 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3593, v3595, v3597) v95
                let v3599 : string = Fable.Core.Rust.emitExpr v3598 v81
                let v3600 : Types.std.string.String = Fable.Core.Rust.emitExpr v3599 v11
                let v3601 : Types.EmitType<Types.std.string.String> = v3600 |> unbox<Types.EmitType<Types.std.string.String>>
                let v3602 : string = method7()
                let v3603 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3602 v91
                let v3604 : unativeint = unativeint 0
                let v3605 : unativeint = unativeint 2
                let v3606 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3603, v3604, v3605) v165
                let v3607 : string = Fable.Core.Rust.emitExpr v3606 v81
                let v3608 : uint8 = Fable.Core.Rust.emitExpr v3607 v168
                let v3609 : string = method7()
                let v3610 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3609 v91
                let v3611 : unativeint = unativeint 2
                let v3612 : unativeint = unativeint 4
                let v3613 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3610, v3611, v3612) v165
                let v3614 : string = Fable.Core.Rust.emitExpr v3613 v81
                let v3615 : uint8 = Fable.Core.Rust.emitExpr v3614 v168
                let v3616 : string = method7()
                let v3617 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3616 v91
                let v3618 : unativeint = unativeint 4
                let v3619 : unativeint = unativeint 6
                let v3620 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3617, v3618, v3619) v165
                let v3621 : string = Fable.Core.Rust.emitExpr v3620 v81
                let v3622 : uint8 = Fable.Core.Rust.emitExpr v3621 v168
                let v3623 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3601, v3608, v3615, v3622) v184
                let v3624 : Types.std.string.String = Fable.Core.Rust.emitExpr v3623 v125
                let v3625 : string = $"{v3510} {v3567} {v3624}"
                System.Console.WriteLine v3625
                let v3626 : string = "$0 > $1"
                let v3627 : bool = Fable.Core.Rust.emitExpr struct (v3431, v3225) v3626
                if v3627 then
                    let v3628 : Result<Types.std.string.String, Types.std.io.Error> = Fable.Core.Rust.emitExpr v854 v1232
                    let v3629 : Types.std.string.String = Fable.Core.Rust.emitExpr v3628 v1234
                    let v3630 : string = Fable.Core.Rust.emitExpr v3629 v81
                    US0_1(v3630)
                else
                    let v3632 : string = "std::thread::sleep(std::time::Duration::from_millis(*$0))"
                    Fable.Core.Rust.emitExpr 25UL v3632
                    US0_0
            | US0_1(v3429) -> (* Some *)
                US0_1(v3429)
        let v3637 : int32 = v3426 + 1
        v3424.l0 <- v3637
        v3424.l1 <- v3636
        ()
    let v3638 : US0 = v3424.l1
    let v3641 : string =
        match v3638 with
        | US0_0 -> (* None *)
            v1045
        | US0_1(v3639) -> (* Some *)
            v3639
    let v3642 : string = "new_fsx len"
    let v3643 : Types.std.string.String = Fable.Core.Rust.emitExpr v3642 v11
    let v3644 : Types.EmitType<Types.std.string.String> = v3643 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3645 : int32 = Fable.Core.Rust.emitExpr v3641 v1250
    let v3646 : Types.std.string.String = Fable.Core.Rust.emitExpr v3645 v60
    let v3647 : Types.EmitType<Types.std.string.String> = v3646 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3648 : (Types.EmitType<Types.std.string.String> []) = [|v3644; v3647|]
    let v3649 : obj = Fable.Core.Rust.emitExpr v3648 v39
    let v3650 : Types.std.string.String = Fable.Core.Rust.emitExpr v3649 v41
    let v3651 : Types.EmitType<Types.std.string.String> = v3650 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3652 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v3653 : int64 = Fable.Core.Rust.emitExpr v3652 v8
    let v3654 : int64 = v3653 - v9
    let v3655 : string = (v3654).ToString ()
    let v3656 : int32 = 6
    let v3657 : string = method1(v3656, v3655)
    let v3658 : uint8 = Fable.Core.Rust.emitExpr () v50
    let v3659 : Types.std.string.String = Fable.Core.Rust.emitExpr v52 v11
    let v3660 : Types.EmitType<Types.std.string.String> = v3659 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3661 : Types.std.string.String = Fable.Core.Rust.emitExpr v3657 v11
    let v3662 : Types.EmitType<Types.std.string.String> = v3661 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3663 : Types.std.string.String = Fable.Core.Rust.emitExpr v57 v11
    let v3664 : Types.EmitType<Types.std.string.String> = v3663 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3665 : Types.std.string.String = Fable.Core.Rust.emitExpr v3658 v60
    let v3666 : Types.EmitType<Types.std.string.String> = v3665 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3667 : Types.std.string.String = Fable.Core.Rust.emitExpr v63 v11
    let v3668 : Types.EmitType<Types.std.string.String> = v3667 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3669 : Types.std.string.String = Fable.Core.Rust.emitExpr v66 v11
    let v3670 : Types.EmitType<Types.std.string.String> = v3669 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3671 : (Types.EmitType<Types.std.string.String> []) = [|v3660; v3662; v3664; v3666; v3668; v3670|]
    let v3672 : obj = Fable.Core.Rust.emitExpr v3671 v39
    let v3673 : Types.std.string.String = Fable.Core.Rust.emitExpr v3672 v41
    let v3674 : Types.EmitType<Types.std.string.String> = v3673 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3675 : Types.std.string.String = Fable.Core.Rust.emitExpr v73 v11
    let v3676 : Types.EmitType<Types.std.string.String> = v3675 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3677 : (Types.EmitType<Types.std.string.String> []) = [|v3676|]
    let v3678 : obj = Fable.Core.Rust.emitExpr v3677 v39
    let v3679 : Types.std.string.String = Fable.Core.Rust.emitExpr v3678 v41
    let v3680 : Types.EmitType<Types.std.string.String> = v3679 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3681 : Types.std.string.String = v3680 |> unbox
    let v3682 : string = Fable.Core.Rust.emitExpr v3681 v81
    let v3683 : string = $"r#\"{v83}\"#"
    let v3684 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3683
    let v3685 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3684 v86
    let v3686 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3685 v88
    let v3687 : string = method2(v3682)
    let v3688 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3687 v91
    let v3689 : string = method3()
    let v3690 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3689 v91
    let v3691 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3686, v3688, v3690) v95
    let v3692 : string = Fable.Core.Rust.emitExpr v3691 v81
    let v3693 : string = $"r#\"{v98}\"#"
    let v3694 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3693
    let v3695 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3694 v86
    let v3696 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3695 v88
    let v3697 : string = method2(v3692)
    let v3698 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3697 v91
    let v3699 : string = method4()
    let v3700 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3699 v91
    let v3701 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3696, v3698, v3700) v95
    let v3702 : string = Fable.Core.Rust.emitExpr v3701 v81
    let v3703 : string = $"r#\"{v109}\"#"
    let v3704 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3703
    let v3705 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3704 v86
    let v3706 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3705 v88
    let v3707 : string = method2(v3702)
    let v3708 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3707 v91
    let v3709 : string = method5()
    let v3710 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3709 v91
    let v3711 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3706, v3708, v3710) v95
    let v3712 : string = Fable.Core.Rust.emitExpr v3711 v81
    let v3713 : Types.std.string.String = Fable.Core.Rust.emitExpr v3712 v11
    let v3714 : Types.EmitType<Types.std.string.String> = v3713 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3715 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3714, v122) v123
    let v3716 : Types.std.string.String = Fable.Core.Rust.emitExpr v3715 v125
    let v3717 : Types.std.string.String = v3651 |> unbox
    let v3718 : string = Fable.Core.Rust.emitExpr v3717 v81
    let v3719 : string = $"r#\"{v83}\"#"
    let v3720 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3719
    let v3721 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3720 v86
    let v3722 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3721 v88
    let v3723 : string = method2(v3718)
    let v3724 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3723 v91
    let v3725 : string = method3()
    let v3726 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3725 v91
    let v3727 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3722, v3724, v3726) v95
    let v3728 : string = Fable.Core.Rust.emitExpr v3727 v81
    let v3729 : string = $"r#\"{v98}\"#"
    let v3730 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3729
    let v3731 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3730 v86
    let v3732 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3731 v88
    let v3733 : string = method2(v3728)
    let v3734 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3733 v91
    let v3735 : string = method4()
    let v3736 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3735 v91
    let v3737 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3732, v3734, v3736) v95
    let v3738 : string = Fable.Core.Rust.emitExpr v3737 v81
    let v3739 : string = $"r#\"{v109}\"#"
    let v3740 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3739
    let v3741 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3740 v86
    let v3742 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3741 v88
    let v3743 : string = method2(v3738)
    let v3744 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3743 v91
    let v3745 : string = method5()
    let v3746 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3745 v91
    let v3747 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3742, v3744, v3746) v95
    let v3748 : string = Fable.Core.Rust.emitExpr v3747 v81
    let v3749 : Types.std.string.String = Fable.Core.Rust.emitExpr v3748 v11
    let v3750 : Types.EmitType<Types.std.string.String> = v3749 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3751 : string = method6()
    let v3752 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3751 v91
    let v3753 : unativeint = unativeint 0
    let v3754 : unativeint = unativeint 2
    let v3755 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3752, v3753, v3754) v165
    let v3756 : string = Fable.Core.Rust.emitExpr v3755 v81
    let v3757 : uint8 = Fable.Core.Rust.emitExpr v3756 v168
    let v3758 : string = method6()
    let v3759 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3758 v91
    let v3760 : unativeint = unativeint 2
    let v3761 : unativeint = unativeint 4
    let v3762 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3759, v3760, v3761) v165
    let v3763 : string = Fable.Core.Rust.emitExpr v3762 v81
    let v3764 : uint8 = Fable.Core.Rust.emitExpr v3763 v168
    let v3765 : string = method6()
    let v3766 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3765 v91
    let v3767 : unativeint = unativeint 4
    let v3768 : unativeint = unativeint 6
    let v3769 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3766, v3767, v3768) v165
    let v3770 : string = Fable.Core.Rust.emitExpr v3769 v81
    let v3771 : uint8 = Fable.Core.Rust.emitExpr v3770 v168
    let v3772 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3750, v3757, v3764, v3771) v184
    let v3773 : Types.std.string.String = Fable.Core.Rust.emitExpr v3772 v125
    let v3774 : Types.std.string.String = v3674 |> unbox
    let v3775 : string = Fable.Core.Rust.emitExpr v3774 v81
    let v3776 : string = $"r#\"{v83}\"#"
    let v3777 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3776
    let v3778 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3777 v86
    let v3779 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3778 v88
    let v3780 : string = method2(v3775)
    let v3781 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3780 v91
    let v3782 : string = method3()
    let v3783 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3782 v91
    let v3784 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3779, v3781, v3783) v95
    let v3785 : string = Fable.Core.Rust.emitExpr v3784 v81
    let v3786 : string = $"r#\"{v98}\"#"
    let v3787 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3786
    let v3788 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3787 v86
    let v3789 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3788 v88
    let v3790 : string = method2(v3785)
    let v3791 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3790 v91
    let v3792 : string = method4()
    let v3793 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3792 v91
    let v3794 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3789, v3791, v3793) v95
    let v3795 : string = Fable.Core.Rust.emitExpr v3794 v81
    let v3796 : string = $"r#\"{v109}\"#"
    let v3797 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3796
    let v3798 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3797 v86
    let v3799 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3798 v88
    let v3800 : string = method2(v3795)
    let v3801 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3800 v91
    let v3802 : string = method5()
    let v3803 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3802 v91
    let v3804 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3799, v3801, v3803) v95
    let v3805 : string = Fable.Core.Rust.emitExpr v3804 v81
    let v3806 : Types.std.string.String = Fable.Core.Rust.emitExpr v3805 v11
    let v3807 : Types.EmitType<Types.std.string.String> = v3806 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3808 : string = method7()
    let v3809 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3808 v91
    let v3810 : unativeint = unativeint 0
    let v3811 : unativeint = unativeint 2
    let v3812 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3809, v3810, v3811) v165
    let v3813 : string = Fable.Core.Rust.emitExpr v3812 v81
    let v3814 : uint8 = Fable.Core.Rust.emitExpr v3813 v168
    let v3815 : string = method7()
    let v3816 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3815 v91
    let v3817 : unativeint = unativeint 2
    let v3818 : unativeint = unativeint 4
    let v3819 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3816, v3817, v3818) v165
    let v3820 : string = Fable.Core.Rust.emitExpr v3819 v81
    let v3821 : uint8 = Fable.Core.Rust.emitExpr v3820 v168
    let v3822 : string = method7()
    let v3823 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3822 v91
    let v3824 : unativeint = unativeint 4
    let v3825 : unativeint = unativeint 6
    let v3826 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3823, v3824, v3825) v165
    let v3827 : string = Fable.Core.Rust.emitExpr v3826 v81
    let v3828 : uint8 = Fable.Core.Rust.emitExpr v3827 v168
    let v3829 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3807, v3814, v3821, v3828) v184
    let v3830 : Types.std.string.String = Fable.Core.Rust.emitExpr v3829 v125
    let v3831 : string = $"{v3716} {v3773} {v3830}"
    System.Console.WriteLine v3831
    let v3832 : Types.std.path.PathBuf = v1 |> Option.defaultValue v854
    let v3833 : Result<unit, Types.std.io.Error> = Fable.Core.Rust.emitExpr struct (v3832, v3641) v1046
    Fable.Core.Rust.emitExpr v3833 v1048
    let v3834 : string = "> fs_write new_fsx_path; ok"
    let v3835 : Types.std.string.String = Fable.Core.Rust.emitExpr v3834 v11
    let v3836 : Types.EmitType<Types.std.string.String> = v3835 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3837 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v3838 : int64 = Fable.Core.Rust.emitExpr v3837 v8
    let v3839 : int64 = v3838 - v9
    let v3840 : string = (v3839).ToString ()
    let v3841 : int32 = 6
    let v3842 : string = method1(v3841, v3840)
    let v3843 : uint8 = Fable.Core.Rust.emitExpr () v50
    let v3844 : Types.std.string.String = Fable.Core.Rust.emitExpr v52 v11
    let v3845 : Types.EmitType<Types.std.string.String> = v3844 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3846 : Types.std.string.String = Fable.Core.Rust.emitExpr v3842 v11
    let v3847 : Types.EmitType<Types.std.string.String> = v3846 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3848 : Types.std.string.String = Fable.Core.Rust.emitExpr v57 v11
    let v3849 : Types.EmitType<Types.std.string.String> = v3848 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3850 : Types.std.string.String = Fable.Core.Rust.emitExpr v3843 v60
    let v3851 : Types.EmitType<Types.std.string.String> = v3850 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3852 : Types.std.string.String = Fable.Core.Rust.emitExpr v63 v11
    let v3853 : Types.EmitType<Types.std.string.String> = v3852 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3854 : Types.std.string.String = Fable.Core.Rust.emitExpr v66 v11
    let v3855 : Types.EmitType<Types.std.string.String> = v3854 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3856 : (Types.EmitType<Types.std.string.String> []) = [|v3845; v3847; v3849; v3851; v3853; v3855|]
    let v3857 : obj = Fable.Core.Rust.emitExpr v3856 v39
    let v3858 : Types.std.string.String = Fable.Core.Rust.emitExpr v3857 v41
    let v3859 : Types.EmitType<Types.std.string.String> = v3858 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3860 : Types.std.string.String = Fable.Core.Rust.emitExpr v73 v11
    let v3861 : Types.EmitType<Types.std.string.String> = v3860 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3862 : (Types.EmitType<Types.std.string.String> []) = [|v3861|]
    let v3863 : obj = Fable.Core.Rust.emitExpr v3862 v39
    let v3864 : Types.std.string.String = Fable.Core.Rust.emitExpr v3863 v41
    let v3865 : Types.EmitType<Types.std.string.String> = v3864 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3866 : Types.std.string.String = v3865 |> unbox
    let v3867 : string = Fable.Core.Rust.emitExpr v3866 v81
    let v3868 : string = $"r#\"{v83}\"#"
    let v3869 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3868
    let v3870 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3869 v86
    let v3871 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3870 v88
    let v3872 : string = method2(v3867)
    let v3873 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3872 v91
    let v3874 : string = method3()
    let v3875 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3874 v91
    let v3876 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3871, v3873, v3875) v95
    let v3877 : string = Fable.Core.Rust.emitExpr v3876 v81
    let v3878 : string = $"r#\"{v98}\"#"
    let v3879 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3878
    let v3880 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3879 v86
    let v3881 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3880 v88
    let v3882 : string = method2(v3877)
    let v3883 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3882 v91
    let v3884 : string = method4()
    let v3885 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3884 v91
    let v3886 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3881, v3883, v3885) v95
    let v3887 : string = Fable.Core.Rust.emitExpr v3886 v81
    let v3888 : string = $"r#\"{v109}\"#"
    let v3889 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3888
    let v3890 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3889 v86
    let v3891 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3890 v88
    let v3892 : string = method2(v3887)
    let v3893 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3892 v91
    let v3894 : string = method5()
    let v3895 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3894 v91
    let v3896 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3891, v3893, v3895) v95
    let v3897 : string = Fable.Core.Rust.emitExpr v3896 v81
    let v3898 : Types.std.string.String = Fable.Core.Rust.emitExpr v3897 v11
    let v3899 : Types.EmitType<Types.std.string.String> = v3898 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3900 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3899, v122) v123
    let v3901 : Types.std.string.String = Fable.Core.Rust.emitExpr v3900 v125
    let v3902 : Types.std.string.String = v3836 |> unbox
    let v3903 : string = Fable.Core.Rust.emitExpr v3902 v81
    let v3904 : string = $"r#\"{v83}\"#"
    let v3905 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3904
    let v3906 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3905 v86
    let v3907 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3906 v88
    let v3908 : string = method2(v3903)
    let v3909 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3908 v91
    let v3910 : string = method3()
    let v3911 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3910 v91
    let v3912 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3907, v3909, v3911) v95
    let v3913 : string = Fable.Core.Rust.emitExpr v3912 v81
    let v3914 : string = $"r#\"{v98}\"#"
    let v3915 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3914
    let v3916 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3915 v86
    let v3917 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3916 v88
    let v3918 : string = method2(v3913)
    let v3919 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3918 v91
    let v3920 : string = method4()
    let v3921 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3920 v91
    let v3922 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3917, v3919, v3921) v95
    let v3923 : string = Fable.Core.Rust.emitExpr v3922 v81
    let v3924 : string = $"r#\"{v109}\"#"
    let v3925 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3924
    let v3926 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3925 v86
    let v3927 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3926 v88
    let v3928 : string = method2(v3923)
    let v3929 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3928 v91
    let v3930 : string = method5()
    let v3931 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3930 v91
    let v3932 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3927, v3929, v3931) v95
    let v3933 : string = Fable.Core.Rust.emitExpr v3932 v81
    let v3934 : Types.std.string.String = Fable.Core.Rust.emitExpr v3933 v11
    let v3935 : Types.EmitType<Types.std.string.String> = v3934 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3936 : string = method6()
    let v3937 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3936 v91
    let v3938 : unativeint = unativeint 0
    let v3939 : unativeint = unativeint 2
    let v3940 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3937, v3938, v3939) v165
    let v3941 : string = Fable.Core.Rust.emitExpr v3940 v81
    let v3942 : uint8 = Fable.Core.Rust.emitExpr v3941 v168
    let v3943 : string = method6()
    let v3944 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3943 v91
    let v3945 : unativeint = unativeint 2
    let v3946 : unativeint = unativeint 4
    let v3947 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3944, v3945, v3946) v165
    let v3948 : string = Fable.Core.Rust.emitExpr v3947 v81
    let v3949 : uint8 = Fable.Core.Rust.emitExpr v3948 v168
    let v3950 : string = method6()
    let v3951 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3950 v91
    let v3952 : unativeint = unativeint 4
    let v3953 : unativeint = unativeint 6
    let v3954 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3951, v3952, v3953) v165
    let v3955 : string = Fable.Core.Rust.emitExpr v3954 v81
    let v3956 : uint8 = Fable.Core.Rust.emitExpr v3955 v168
    let v3957 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3935, v3942, v3949, v3956) v184
    let v3958 : Types.std.string.String = Fable.Core.Rust.emitExpr v3957 v125
    let v3959 : Types.std.string.String = v3859 |> unbox
    let v3960 : string = Fable.Core.Rust.emitExpr v3959 v81
    let v3961 : string = $"r#\"{v83}\"#"
    let v3962 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3961
    let v3963 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3962 v86
    let v3964 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3963 v88
    let v3965 : string = method2(v3960)
    let v3966 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3965 v91
    let v3967 : string = method3()
    let v3968 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3967 v91
    let v3969 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3964, v3966, v3968) v95
    let v3970 : string = Fable.Core.Rust.emitExpr v3969 v81
    let v3971 : string = $"r#\"{v98}\"#"
    let v3972 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3971
    let v3973 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3972 v86
    let v3974 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3973 v88
    let v3975 : string = method2(v3970)
    let v3976 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3975 v91
    let v3977 : string = method4()
    let v3978 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3977 v91
    let v3979 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3974, v3976, v3978) v95
    let v3980 : string = Fable.Core.Rust.emitExpr v3979 v81
    let v3981 : string = $"r#\"{v109}\"#"
    let v3982 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3981
    let v3983 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3982 v86
    let v3984 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3983 v88
    let v3985 : string = method2(v3980)
    let v3986 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3985 v91
    let v3987 : string = method5()
    let v3988 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3987 v91
    let v3989 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3984, v3986, v3988) v95
    let v3990 : string = Fable.Core.Rust.emitExpr v3989 v81
    let v3991 : Types.std.string.String = Fable.Core.Rust.emitExpr v3990 v11
    let v3992 : Types.EmitType<Types.std.string.String> = v3991 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3993 : string = method7()
    let v3994 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3993 v91
    let v3995 : unativeint = unativeint 0
    let v3996 : unativeint = unativeint 2
    let v3997 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3994, v3995, v3996) v165
    let v3998 : string = Fable.Core.Rust.emitExpr v3997 v81
    let v3999 : uint8 = Fable.Core.Rust.emitExpr v3998 v168
    let v4000 : string = method7()
    let v4001 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4000 v91
    let v4002 : unativeint = unativeint 2
    let v4003 : unativeint = unativeint 4
    let v4004 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v4001, v4002, v4003) v165
    let v4005 : string = Fable.Core.Rust.emitExpr v4004 v81
    let v4006 : uint8 = Fable.Core.Rust.emitExpr v4005 v168
    let v4007 : string = method7()
    let v4008 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4007 v91
    let v4009 : unativeint = unativeint 4
    let v4010 : unativeint = unativeint 6
    let v4011 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v4008, v4009, v4010) v165
    let v4012 : string = Fable.Core.Rust.emitExpr v4011 v81
    let v4013 : uint8 = Fable.Core.Rust.emitExpr v4012 v168
    let v4014 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3992, v3999, v4006, v4013) v184
    let v4015 : Types.std.string.String = Fable.Core.Rust.emitExpr v4014 v125
    let v4016 : string = $"{v3901} {v3958} {v4015}"
    System.Console.WriteLine v4016
    v3641
and closure0 () (v0 : Types.std.path.PathBuf) : (Option<Types.std.path.PathBuf> -> string) =
    closure1(v0)
let v0 : (Types.std.path.PathBuf -> (Option<Types.std.path.PathBuf> -> string)) = closure0()
()
