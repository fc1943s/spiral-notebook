type [<Struct>] US0 =
    | US0_0
    | US0_1
and [<Struct>] US1 =
    | US1_0
    | US1_1 of f1_0 : string
and Mut0 = {mutable l0 : int32; mutable l1 : US1}
let rec method0 () : struct (string * string * string * bool) =
    let v0 : string = ""
    let v1 : obj = v0
    struct (v0, v0, v0, true)
and method1 (v0 : int32, v1 : string) : string =
    let v2 : int32 = String.length v1
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : string = $"0{v1}"
        method1(v0, v4)
    else
        v1
and method2 (v0 : string) : string =
    v0
and method3 () : string =
    let v0 : string = "$1=$2"
    v0
and method4 () : string =
    let v0 : string = "[$1]"
    v0
and method5 () : string =
    let v0 : string = " "
    v0
and method6 () : string =
    let v0 : string = "de884c"
    v0
and method7 () : string =
    let v0 : string = "222222"
    v0
and closure2 () (v0 : Types.Ref<Types.std.path.Path>) : Types.std.path.PathBuf =
    let v1 : string = "package.spiproj"
    let v2 : string = "$1.join($0.as_str())"
    let v3 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr struct (v1, v0) v2
    v3
and closure3 () (v0 : Types.Ref<Types.std.path.PathBuf>) : bool =
    let v1 : string = "std::path::Path::exists($0)"
    let v2 : bool = Fable.Core.Rust.emitExpr v0 v1
    v2
and method8 () : string =
    let v0 : string = "e36a62"
    v0
and method9 () : string =
    let v0 : string = "fcfb1b"
    v0
and method10 () : string =
    let v0 : string = "98d5ef"
    v0
and method11 () : string =
    let v0 : string = "387957"
    v0
and method12 (v0 : int32, v1 : Mut0) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and closure1 (v0 : Types.std.path.PathBuf) (v1 : Option<Types.std.path.PathBuf>) : string =
    let struct (v2 : string, v3 : string, v4 : string, v5 : bool) = method0()
    let v6 : string = "chrono::Utc::now()"
    let v7 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v8 : string = "($0).timestamp()"
    let v9 : int64 = Fable.Core.Rust.emitExpr v7 v8
    let v10 : string = "pwd"
    let v11 : string = "($0).to_string()"
    let v12 : Types.std.string.String = Fable.Core.Rust.emitExpr v10 v11
    let v13 : Types.EmitType<Types.std.string.String> = v12 |> unbox<Types.EmitType<Types.std.string.String>>
    let v14 : string = "std::env::current_dir()"
    let v15 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr () v14
    let v16 : string = "($0).as_ref().unwrap().to_path_buf()"
    let v17 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v15 v16
    let v18 : string = "($0).canonicalize()"
    let v19 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v17 v18
    let v20 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v19 v16
    let v21 : string = "fable_library_rust::String_::fromStr(&format!(\"{}\", $0.display()))"
    let v22 : string = Fable.Core.Rust.emitExpr v20 v21
    let v23 : Types.std.string.String = Fable.Core.Rust.emitExpr v22 v11
    let v24 : Types.EmitType<Types.std.string.String> = v23 |> unbox<Types.EmitType<Types.std.string.String>>
    let v25 : string = "spi_path"
    let v26 : Types.std.string.String = Fable.Core.Rust.emitExpr v25 v11
    let v27 : Types.EmitType<Types.std.string.String> = v26 |> unbox<Types.EmitType<Types.std.string.String>>
    let v28 : string = Fable.Core.Rust.emitExpr v0 v21
    let v29 : Types.std.string.String = Fable.Core.Rust.emitExpr v28 v11
    let v30 : Types.EmitType<Types.std.string.String> = v29 |> unbox<Types.EmitType<Types.std.string.String>>
    let v31 : string = "new_fsx_path"
    let v32 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v11
    let v33 : Types.EmitType<Types.std.string.String> = v32 |> unbox<Types.EmitType<Types.std.string.String>>
    let v34 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v1 v16
    let v35 : string = Fable.Core.Rust.emitExpr v34 v21
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v35 v11
    let v37 : Types.EmitType<Types.std.string.String> = v36 |> unbox<Types.EmitType<Types.std.string.String>>
    let v38 : (Types.EmitType<Types.std.string.String> []) = [|v13; v24; v27; v30; v33; v37|]
    let v39 : string = "core::ops::Deref::deref($0)"
    let v40 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v38 v39
    let v41 : string = "&***$0"
    let v42 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v40 v41
    let v43 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v42 v41
    let v44 : string = "format!(\"{:?}\", $0)"
    let v45 : Types.std.string.String = Fable.Core.Rust.emitExpr v43 v44
    let v46 : Types.EmitType<Types.std.string.String> = v45 |> unbox<Types.EmitType<Types.std.string.String>>
    let v47 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v48 : int64 = Fable.Core.Rust.emitExpr v47 v8
    let v49 : int64 = v48 - v9
    let v50 : string = (v49).ToString ()
    let v51 : int32 = 6
    let v52 : string = method1(v51, v50)
    let v53 : string = "rand::random::<u8>()"
    let v54 : uint8 = Fable.Core.Rust.emitExpr () v53
    let v55 : string = "timestamp"
    let v56 : Types.std.string.String = Fable.Core.Rust.emitExpr v55 v11
    let v57 : Types.EmitType<Types.std.string.String> = v56 |> unbox<Types.EmitType<Types.std.string.String>>
    let v58 : Types.std.string.String = Fable.Core.Rust.emitExpr v52 v11
    let v59 : Types.EmitType<Types.std.string.String> = v58 |> unbox<Types.EmitType<Types.std.string.String>>
    let v60 : string = "run_id"
    let v61 : Types.std.string.String = Fable.Core.Rust.emitExpr v60 v11
    let v62 : Types.EmitType<Types.std.string.String> = v61 |> unbox<Types.EmitType<Types.std.string.String>>
    let v63 : Types.std.string.String = Fable.Core.Rust.emitExpr v54 v44
    let v64 : Types.EmitType<Types.std.string.String> = v63 |> unbox<Types.EmitType<Types.std.string.String>>
    let v65 : string = "log_level"
    let v66 : Types.std.string.String = Fable.Core.Rust.emitExpr v65 v11
    let v67 : Types.EmitType<Types.std.string.String> = v66 |> unbox<Types.EmitType<Types.std.string.String>>
    let v68 : string = "Debug"
    let v69 : Types.std.string.String = Fable.Core.Rust.emitExpr v68 v11
    let v70 : Types.EmitType<Types.std.string.String> = v69 |> unbox<Types.EmitType<Types.std.string.String>>
    let v71 : (Types.EmitType<Types.std.string.String> []) = [|v57; v59; v62; v64; v67; v70|]
    let v72 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v71 v39
    let v73 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v72 v41
    let v74 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v73 v41
    let v75 : Types.std.string.String = Fable.Core.Rust.emitExpr v74 v44
    let v76 : Types.EmitType<Types.std.string.String> = v75 |> unbox<Types.EmitType<Types.std.string.String>>
    let v77 : string = "> spi_to_fsx ()"
    let v78 : Types.std.string.String = Fable.Core.Rust.emitExpr v77 v11
    let v79 : Types.EmitType<Types.std.string.String> = v78 |> unbox<Types.EmitType<Types.std.string.String>>
    let v80 : (Types.EmitType<Types.std.string.String> []) = [|v79|]
    let v81 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v80 v39
    let v82 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v81 v41
    let v83 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v82 v41
    let v84 : Types.std.string.String = Fable.Core.Rust.emitExpr v83 v44
    let v85 : Types.EmitType<Types.std.string.String> = v84 |> unbox<Types.EmitType<Types.std.string.String>>
    let v86 : string = "format!(\"{}\", $0)"
    let v87 : Types.std.string.String = Fable.Core.Rust.emitExpr v85 v86
    let v88 : string = (v87).ToString ()
    let v89 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v90 : string = $"r#\"{v89}\"#"
    let v91 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v90
    let v92 : string = "regex::RegexBuilder::new($0)"
    let v93 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v91 v92
    let v94 : string = "$0.build().unwrap()"
    let v95 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v93 v94
    let v96 : string = method2(v88)
    let v97 : string = "$0.as_str()"
    let v98 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v96 v97
    let v99 : string = method3()
    let v100 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v99 v97
    let v101 : string = "$0.replace_all(&$1, $2).to_string()"
    let v102 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v95, v98, v100) v101
    let v103 : string = "fable_library_rust::String_::fromStr($0)"
    let v104 : string = Fable.Core.Rust.emitExpr v102 v103
    let v105 : string = "\\[\"(.*?)\"\\]"
    let v106 : string = $"r#\"{v105}\"#"
    let v107 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v106
    let v108 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v107 v92
    let v109 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v108 v94
    let v110 : string = method2(v104)
    let v111 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v110 v97
    let v112 : string = method4()
    let v113 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v112 v97
    let v114 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v109, v111, v113) v101
    let v115 : string = Fable.Core.Rust.emitExpr v114 v103
    let v116 : string = ", "
    let v117 : string = $"r#\"{v116}\"#"
    let v118 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v117
    let v119 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v118 v92
    let v120 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v119 v94
    let v121 : string = method2(v115)
    let v122 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v121 v97
    let v123 : string = method5()
    let v124 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v123 v97
    let v125 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v120, v122, v124) v101
    let v126 : string = Fable.Core.Rust.emitExpr v125 v103
    let v127 : Types.std.string.String = Fable.Core.Rust.emitExpr v126 v11
    let v128 : Types.EmitType<Types.std.string.String> = v127 |> unbox<Types.EmitType<Types.std.string.String>>
    let v129 : Types.std.string.String = Fable.Core.Rust.emitExpr v46 v86
    let v130 : string = (v129).ToString ()
    let v131 : string = $"r#\"{v89}\"#"
    let v132 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v131
    let v133 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v132 v92
    let v134 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v133 v94
    let v135 : string = method2(v130)
    let v136 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v135 v97
    let v137 : string = method3()
    let v138 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v137 v97
    let v139 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v134, v136, v138) v101
    let v140 : string = Fable.Core.Rust.emitExpr v139 v103
    let v141 : string = $"r#\"{v105}\"#"
    let v142 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v141
    let v143 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v142 v92
    let v144 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v143 v94
    let v145 : string = method2(v140)
    let v146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v145 v97
    let v147 : string = method4()
    let v148 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v147 v97
    let v149 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v144, v146, v148) v101
    let v150 : string = Fable.Core.Rust.emitExpr v149 v103
    let v151 : string = $"r#\"{v116}\"#"
    let v152 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v151
    let v153 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v152 v92
    let v154 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v153 v94
    let v155 : string = method2(v150)
    let v156 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v155 v97
    let v157 : string = method5()
    let v158 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v157 v97
    let v159 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v154, v156, v158) v101
    let v160 : string = Fable.Core.Rust.emitExpr v159 v103
    let v161 : Types.std.string.String = Fable.Core.Rust.emitExpr v160 v11
    let v162 : Types.EmitType<Types.std.string.String> = v161 |> unbox<Types.EmitType<Types.std.string.String>>
    let v163 : Types.std.string.String = Fable.Core.Rust.emitExpr v76 v86
    let v164 : string = (v163).ToString ()
    let v165 : string = $"r#\"{v89}\"#"
    let v166 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v165
    let v167 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v166 v92
    let v168 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v167 v94
    let v169 : string = method2(v164)
    let v170 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v169 v97
    let v171 : string = method3()
    let v172 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v171 v97
    let v173 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v168, v170, v172) v101
    let v174 : string = Fable.Core.Rust.emitExpr v173 v103
    let v175 : string = $"r#\"{v105}\"#"
    let v176 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v175
    let v177 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v176 v92
    let v178 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v177 v94
    let v179 : string = method2(v174)
    let v180 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v179 v97
    let v181 : string = method4()
    let v182 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v181 v97
    let v183 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v178, v180, v182) v101
    let v184 : string = Fable.Core.Rust.emitExpr v183 v103
    let v185 : string = $"r#\"{v116}\"#"
    let v186 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v185
    let v187 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v186 v92
    let v188 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v187 v94
    let v189 : string = method2(v184)
    let v190 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v189 v97
    let v191 : string = method5()
    let v192 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v191 v97
    let v193 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v188, v190, v192) v101
    let v194 : string = Fable.Core.Rust.emitExpr v193 v103
    let v195 : Types.std.string.String = Fable.Core.Rust.emitExpr v194 v11
    let v196 : Types.EmitType<Types.std.string.String> = v195 |> unbox<Types.EmitType<Types.std.string.String>>
    let v197 : string = "cfg!(target_arch = \"wasm32\")"
    let v198 : bool = Fable.Core.Rust.emitExpr () v197
    let v201 : US0 =
        if v198 then
            US0_1
        else
            US0_0
    match v201 with
    | US0_1 -> (* Wasm32 *)
        let v202 : string = "%c%s %c%s %c%s"
        let v203 : string = "($0).as_ref().to_string()"
        let v204 : Types.std.string.String = Fable.Core.Rust.emitExpr v202 v203
        let v205 : string = "color: purple"
        let v206 : Types.std.string.String = Fable.Core.Rust.emitExpr v205 v203
        let v207 : string = $"{v128}"
        let v208 : Types.std.string.String = Fable.Core.Rust.emitExpr v207 v203
        let v209 : string = "de884c"
        let v210 : string = $"color: {v209}"
        let v211 : Types.std.string.String = Fable.Core.Rust.emitExpr v210 v203
        let v212 : string = $"{v162} {v196}"
        let v213 : Types.std.string.String = Fable.Core.Rust.emitExpr v212 v203
        let v214 : string = "color: #222222"
        let v215 : Types.std.string.String = Fable.Core.Rust.emitExpr v214 v203
        let v216 : string = $"{v196}"
        let v217 : Types.std.string.String = Fable.Core.Rust.emitExpr v216 v203
        let v218 : (Types.std.string.String []) = [|v204; v206; v208; v211; v213; v215; v217|]
        let v219 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v218 v39
        let v220 : obj = v219
        let v221 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v222 : obj = Fable.Core.Rust.emitExpr v220 v221
        let v223 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v222 v223
        ()
    | _ ->
        let v224 : string = "purple"
        let v225 : string = "colored::Colorize::color(&*$0, $1.to_string())"
        let v226 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v128, v224) v225
        let v227 : Types.std.string.String = Fable.Core.Rust.emitExpr v226 v86
        let v228 : string = method6()
        let v229 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v228 v97
        let v230 : unativeint = unativeint 0
        let v231 : unativeint = unativeint 2
        let v232 : string = "&$0[$1..$2]"
        let v233 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v229, v230, v231) v232
        let v234 : string = Fable.Core.Rust.emitExpr v233 v103
        let v235 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v236 : uint8 = Fable.Core.Rust.emitExpr v234 v235
        let v237 : string = method6()
        let v238 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v237 v97
        let v239 : unativeint = unativeint 2
        let v240 : unativeint = unativeint 4
        let v241 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v238, v239, v240) v232
        let v242 : string = Fable.Core.Rust.emitExpr v241 v103
        let v243 : uint8 = Fable.Core.Rust.emitExpr v242 v235
        let v244 : string = method6()
        let v245 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v244 v97
        let v246 : unativeint = unativeint 4
        let v247 : unativeint = unativeint 6
        let v248 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v245, v246, v247) v232
        let v249 : string = Fable.Core.Rust.emitExpr v248 v103
        let v250 : uint8 = Fable.Core.Rust.emitExpr v249 v235
        let v251 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v252 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v162, v236, v243, v250) v251
        let v253 : Types.std.string.String = Fable.Core.Rust.emitExpr v252 v86
        let v254 : string = method7()
        let v255 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v254 v97
        let v256 : unativeint = unativeint 0
        let v257 : unativeint = unativeint 2
        let v258 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v255, v256, v257) v232
        let v259 : string = Fable.Core.Rust.emitExpr v258 v103
        let v260 : uint8 = Fable.Core.Rust.emitExpr v259 v235
        let v261 : string = method7()
        let v262 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v261 v97
        let v263 : unativeint = unativeint 2
        let v264 : unativeint = unativeint 4
        let v265 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v262, v263, v264) v232
        let v266 : string = Fable.Core.Rust.emitExpr v265 v103
        let v267 : uint8 = Fable.Core.Rust.emitExpr v266 v235
        let v268 : string = method7()
        let v269 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v268 v97
        let v270 : unativeint = unativeint 4
        let v271 : unativeint = unativeint 6
        let v272 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v269, v270, v271) v232
        let v273 : string = Fable.Core.Rust.emitExpr v272 v103
        let v274 : uint8 = Fable.Core.Rust.emitExpr v273 v235
        let v275 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v196, v260, v267, v274) v251
        let v276 : Types.std.string.String = Fable.Core.Rust.emitExpr v275 v86
        let v277 : string = $"{v227} {v253} {v276}"
        System.Console.WriteLine v277
        ()
    let v278 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v0 v18
    let v279 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v278 v16
    let v280 : string = "spi_path_clean"
    let v281 : Types.std.string.String = Fable.Core.Rust.emitExpr v280 v11
    let v282 : Types.EmitType<Types.std.string.String> = v281 |> unbox<Types.EmitType<Types.std.string.String>>
    let v283 : string = Fable.Core.Rust.emitExpr v279 v21
    let v284 : Types.std.string.String = Fable.Core.Rust.emitExpr v283 v11
    let v285 : Types.EmitType<Types.std.string.String> = v284 |> unbox<Types.EmitType<Types.std.string.String>>
    let v286 : (Types.EmitType<Types.std.string.String> []) = [|v282; v285|]
    let v287 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v286 v39
    let v288 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v287 v41
    let v289 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v288 v41
    let v290 : Types.std.string.String = Fable.Core.Rust.emitExpr v289 v44
    let v291 : Types.EmitType<Types.std.string.String> = v290 |> unbox<Types.EmitType<Types.std.string.String>>
    let v292 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v293 : int64 = Fable.Core.Rust.emitExpr v292 v8
    let v294 : int64 = v293 - v9
    let v295 : string = (v294).ToString ()
    let v296 : int32 = 6
    let v297 : string = method1(v296, v295)
    let v298 : uint8 = Fable.Core.Rust.emitExpr () v53
    let v299 : Types.std.string.String = Fable.Core.Rust.emitExpr v55 v11
    let v300 : Types.EmitType<Types.std.string.String> = v299 |> unbox<Types.EmitType<Types.std.string.String>>
    let v301 : Types.std.string.String = Fable.Core.Rust.emitExpr v297 v11
    let v302 : Types.EmitType<Types.std.string.String> = v301 |> unbox<Types.EmitType<Types.std.string.String>>
    let v303 : Types.std.string.String = Fable.Core.Rust.emitExpr v60 v11
    let v304 : Types.EmitType<Types.std.string.String> = v303 |> unbox<Types.EmitType<Types.std.string.String>>
    let v305 : Types.std.string.String = Fable.Core.Rust.emitExpr v298 v44
    let v306 : Types.EmitType<Types.std.string.String> = v305 |> unbox<Types.EmitType<Types.std.string.String>>
    let v307 : Types.std.string.String = Fable.Core.Rust.emitExpr v65 v11
    let v308 : Types.EmitType<Types.std.string.String> = v307 |> unbox<Types.EmitType<Types.std.string.String>>
    let v309 : Types.std.string.String = Fable.Core.Rust.emitExpr v68 v11
    let v310 : Types.EmitType<Types.std.string.String> = v309 |> unbox<Types.EmitType<Types.std.string.String>>
    let v311 : (Types.EmitType<Types.std.string.String> []) = [|v300; v302; v304; v306; v308; v310|]
    let v312 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v311 v39
    let v313 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v312 v41
    let v314 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v313 v41
    let v315 : Types.std.string.String = Fable.Core.Rust.emitExpr v314 v44
    let v316 : Types.EmitType<Types.std.string.String> = v315 |> unbox<Types.EmitType<Types.std.string.String>>
    let v317 : Types.std.string.String = Fable.Core.Rust.emitExpr v77 v11
    let v318 : Types.EmitType<Types.std.string.String> = v317 |> unbox<Types.EmitType<Types.std.string.String>>
    let v319 : (Types.EmitType<Types.std.string.String> []) = [|v318|]
    let v320 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v319 v39
    let v321 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v320 v41
    let v322 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v321 v41
    let v323 : Types.std.string.String = Fable.Core.Rust.emitExpr v322 v44
    let v324 : Types.EmitType<Types.std.string.String> = v323 |> unbox<Types.EmitType<Types.std.string.String>>
    let v325 : Types.std.string.String = Fable.Core.Rust.emitExpr v324 v86
    let v326 : string = (v325).ToString ()
    let v327 : string = $"r#\"{v89}\"#"
    let v328 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v327
    let v329 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v328 v92
    let v330 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v329 v94
    let v331 : string = method2(v326)
    let v332 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v331 v97
    let v333 : string = method3()
    let v334 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v333 v97
    let v335 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v330, v332, v334) v101
    let v336 : string = Fable.Core.Rust.emitExpr v335 v103
    let v337 : string = $"r#\"{v105}\"#"
    let v338 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v337
    let v339 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v338 v92
    let v340 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v339 v94
    let v341 : string = method2(v336)
    let v342 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v341 v97
    let v343 : string = method4()
    let v344 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v343 v97
    let v345 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v340, v342, v344) v101
    let v346 : string = Fable.Core.Rust.emitExpr v345 v103
    let v347 : string = $"r#\"{v116}\"#"
    let v348 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v347
    let v349 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v348 v92
    let v350 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v349 v94
    let v351 : string = method2(v346)
    let v352 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v351 v97
    let v353 : string = method5()
    let v354 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v353 v97
    let v355 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v350, v352, v354) v101
    let v356 : string = Fable.Core.Rust.emitExpr v355 v103
    let v357 : Types.std.string.String = Fable.Core.Rust.emitExpr v356 v11
    let v358 : Types.EmitType<Types.std.string.String> = v357 |> unbox<Types.EmitType<Types.std.string.String>>
    let v359 : Types.std.string.String = Fable.Core.Rust.emitExpr v291 v86
    let v360 : string = (v359).ToString ()
    let v361 : string = $"r#\"{v89}\"#"
    let v362 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v361
    let v363 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v362 v92
    let v364 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v363 v94
    let v365 : string = method2(v360)
    let v366 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v365 v97
    let v367 : string = method3()
    let v368 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v367 v97
    let v369 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v364, v366, v368) v101
    let v370 : string = Fable.Core.Rust.emitExpr v369 v103
    let v371 : string = $"r#\"{v105}\"#"
    let v372 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v371
    let v373 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v372 v92
    let v374 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v373 v94
    let v375 : string = method2(v370)
    let v376 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v375 v97
    let v377 : string = method4()
    let v378 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v377 v97
    let v379 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v374, v376, v378) v101
    let v380 : string = Fable.Core.Rust.emitExpr v379 v103
    let v381 : string = $"r#\"{v116}\"#"
    let v382 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v381
    let v383 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v382 v92
    let v384 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v383 v94
    let v385 : string = method2(v380)
    let v386 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v385 v97
    let v387 : string = method5()
    let v388 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v387 v97
    let v389 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v384, v386, v388) v101
    let v390 : string = Fable.Core.Rust.emitExpr v389 v103
    let v391 : Types.std.string.String = Fable.Core.Rust.emitExpr v390 v11
    let v392 : Types.EmitType<Types.std.string.String> = v391 |> unbox<Types.EmitType<Types.std.string.String>>
    let v393 : Types.std.string.String = Fable.Core.Rust.emitExpr v316 v86
    let v394 : string = (v393).ToString ()
    let v395 : string = $"r#\"{v89}\"#"
    let v396 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v395
    let v397 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v396 v92
    let v398 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v397 v94
    let v399 : string = method2(v394)
    let v400 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v399 v97
    let v401 : string = method3()
    let v402 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v401 v97
    let v403 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v398, v400, v402) v101
    let v404 : string = Fable.Core.Rust.emitExpr v403 v103
    let v405 : string = $"r#\"{v105}\"#"
    let v406 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v405
    let v407 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v406 v92
    let v408 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v407 v94
    let v409 : string = method2(v404)
    let v410 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v409 v97
    let v411 : string = method4()
    let v412 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v411 v97
    let v413 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v408, v410, v412) v101
    let v414 : string = Fable.Core.Rust.emitExpr v413 v103
    let v415 : string = $"r#\"{v116}\"#"
    let v416 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v415
    let v417 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v416 v92
    let v418 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v417 v94
    let v419 : string = method2(v414)
    let v420 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v419 v97
    let v421 : string = method5()
    let v422 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v421 v97
    let v423 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v418, v420, v422) v101
    let v424 : string = Fable.Core.Rust.emitExpr v423 v103
    let v425 : Types.std.string.String = Fable.Core.Rust.emitExpr v424 v11
    let v426 : Types.EmitType<Types.std.string.String> = v425 |> unbox<Types.EmitType<Types.std.string.String>>
    let v427 : bool = Fable.Core.Rust.emitExpr () v197
    let v430 : US0 =
        if v427 then
            US0_1
        else
            US0_0
    match v430 with
    | US0_1 -> (* Wasm32 *)
        let v431 : string = "%c%s %c%s %c%s"
        let v432 : string = "($0).as_ref().to_string()"
        let v433 : Types.std.string.String = Fable.Core.Rust.emitExpr v431 v432
        let v434 : string = "color: purple"
        let v435 : Types.std.string.String = Fable.Core.Rust.emitExpr v434 v432
        let v436 : string = $"{v358}"
        let v437 : Types.std.string.String = Fable.Core.Rust.emitExpr v436 v432
        let v438 : string = "de884c"
        let v439 : string = $"color: {v438}"
        let v440 : Types.std.string.String = Fable.Core.Rust.emitExpr v439 v432
        let v441 : string = $"{v392} {v426}"
        let v442 : Types.std.string.String = Fable.Core.Rust.emitExpr v441 v432
        let v443 : string = "color: #222222"
        let v444 : Types.std.string.String = Fable.Core.Rust.emitExpr v443 v432
        let v445 : string = $"{v426}"
        let v446 : Types.std.string.String = Fable.Core.Rust.emitExpr v445 v432
        let v447 : (Types.std.string.String []) = [|v433; v435; v437; v440; v442; v444; v446|]
        let v448 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v447 v39
        let v449 : obj = v448
        let v450 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v451 : obj = Fable.Core.Rust.emitExpr v449 v450
        let v452 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v451 v452
        ()
    | _ ->
        let v453 : string = "purple"
        let v454 : string = "colored::Colorize::color(&*$0, $1.to_string())"
        let v455 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v358, v453) v454
        let v456 : Types.std.string.String = Fable.Core.Rust.emitExpr v455 v86
        let v457 : string = method6()
        let v458 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v457 v97
        let v459 : unativeint = unativeint 0
        let v460 : unativeint = unativeint 2
        let v461 : string = "&$0[$1..$2]"
        let v462 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v458, v459, v460) v461
        let v463 : string = Fable.Core.Rust.emitExpr v462 v103
        let v464 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v465 : uint8 = Fable.Core.Rust.emitExpr v463 v464
        let v466 : string = method6()
        let v467 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v466 v97
        let v468 : unativeint = unativeint 2
        let v469 : unativeint = unativeint 4
        let v470 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v467, v468, v469) v461
        let v471 : string = Fable.Core.Rust.emitExpr v470 v103
        let v472 : uint8 = Fable.Core.Rust.emitExpr v471 v464
        let v473 : string = method6()
        let v474 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v473 v97
        let v475 : unativeint = unativeint 4
        let v476 : unativeint = unativeint 6
        let v477 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v474, v475, v476) v461
        let v478 : string = Fable.Core.Rust.emitExpr v477 v103
        let v479 : uint8 = Fable.Core.Rust.emitExpr v478 v464
        let v480 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v481 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v392, v465, v472, v479) v480
        let v482 : Types.std.string.String = Fable.Core.Rust.emitExpr v481 v86
        let v483 : string = method7()
        let v484 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v483 v97
        let v485 : unativeint = unativeint 0
        let v486 : unativeint = unativeint 2
        let v487 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v484, v485, v486) v461
        let v488 : string = Fable.Core.Rust.emitExpr v487 v103
        let v489 : uint8 = Fable.Core.Rust.emitExpr v488 v464
        let v490 : string = method7()
        let v491 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v490 v97
        let v492 : unativeint = unativeint 2
        let v493 : unativeint = unativeint 4
        let v494 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v491, v492, v493) v461
        let v495 : string = Fable.Core.Rust.emitExpr v494 v103
        let v496 : uint8 = Fable.Core.Rust.emitExpr v495 v464
        let v497 : string = method7()
        let v498 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v497 v97
        let v499 : unativeint = unativeint 4
        let v500 : unativeint = unativeint 6
        let v501 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v498, v499, v500) v461
        let v502 : string = Fable.Core.Rust.emitExpr v501 v103
        let v503 : uint8 = Fable.Core.Rust.emitExpr v502 v464
        let v504 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v426, v489, v496, v503) v480
        let v505 : Types.std.string.String = Fable.Core.Rust.emitExpr v504 v86
        let v506 : string = $"{v456} {v482} {v505}"
        System.Console.WriteLine v506
        ()
    let v507 : string = "($0).parent()"
    let v508 : Option<Types.Ref<Types.std.path.Path>> = Fable.Core.Rust.emitExpr v279 v507
    let v509 : string = "$0.unwrap()"
    let v510 : Types.Ref<Types.std.path.Path> = Fable.Core.Rust.emitExpr v508 v509
    let v511 : string = "std::path::PathBuf::from($0)"
    let v512 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v510 v511
    let v513 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v512 v18
    let v514 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v513 v16
    let v515 : string = "src_path"
    let v516 : Types.std.string.String = Fable.Core.Rust.emitExpr v515 v11
    let v517 : Types.EmitType<Types.std.string.String> = v516 |> unbox<Types.EmitType<Types.std.string.String>>
    let v518 : string = Fable.Core.Rust.emitExpr v514 v21
    let v519 : Types.std.string.String = Fable.Core.Rust.emitExpr v518 v11
    let v520 : Types.EmitType<Types.std.string.String> = v519 |> unbox<Types.EmitType<Types.std.string.String>>
    let v521 : (Types.EmitType<Types.std.string.String> []) = [|v517; v520|]
    let v522 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v521 v39
    let v523 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v522 v41
    let v524 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v523 v41
    let v525 : Types.std.string.String = Fable.Core.Rust.emitExpr v524 v44
    let v526 : Types.EmitType<Types.std.string.String> = v525 |> unbox<Types.EmitType<Types.std.string.String>>
    let v527 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v528 : int64 = Fable.Core.Rust.emitExpr v527 v8
    let v529 : int64 = v528 - v9
    let v530 : string = (v529).ToString ()
    let v531 : int32 = 6
    let v532 : string = method1(v531, v530)
    let v533 : uint8 = Fable.Core.Rust.emitExpr () v53
    let v534 : Types.std.string.String = Fable.Core.Rust.emitExpr v55 v11
    let v535 : Types.EmitType<Types.std.string.String> = v534 |> unbox<Types.EmitType<Types.std.string.String>>
    let v536 : Types.std.string.String = Fable.Core.Rust.emitExpr v532 v11
    let v537 : Types.EmitType<Types.std.string.String> = v536 |> unbox<Types.EmitType<Types.std.string.String>>
    let v538 : Types.std.string.String = Fable.Core.Rust.emitExpr v60 v11
    let v539 : Types.EmitType<Types.std.string.String> = v538 |> unbox<Types.EmitType<Types.std.string.String>>
    let v540 : Types.std.string.String = Fable.Core.Rust.emitExpr v533 v44
    let v541 : Types.EmitType<Types.std.string.String> = v540 |> unbox<Types.EmitType<Types.std.string.String>>
    let v542 : Types.std.string.String = Fable.Core.Rust.emitExpr v65 v11
    let v543 : Types.EmitType<Types.std.string.String> = v542 |> unbox<Types.EmitType<Types.std.string.String>>
    let v544 : Types.std.string.String = Fable.Core.Rust.emitExpr v68 v11
    let v545 : Types.EmitType<Types.std.string.String> = v544 |> unbox<Types.EmitType<Types.std.string.String>>
    let v546 : (Types.EmitType<Types.std.string.String> []) = [|v535; v537; v539; v541; v543; v545|]
    let v547 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v546 v39
    let v548 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v547 v41
    let v549 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v548 v41
    let v550 : Types.std.string.String = Fable.Core.Rust.emitExpr v549 v44
    let v551 : Types.EmitType<Types.std.string.String> = v550 |> unbox<Types.EmitType<Types.std.string.String>>
    let v552 : Types.std.string.String = Fable.Core.Rust.emitExpr v77 v11
    let v553 : Types.EmitType<Types.std.string.String> = v552 |> unbox<Types.EmitType<Types.std.string.String>>
    let v554 : (Types.EmitType<Types.std.string.String> []) = [|v553|]
    let v555 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v554 v39
    let v556 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v555 v41
    let v557 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v556 v41
    let v558 : Types.std.string.String = Fable.Core.Rust.emitExpr v557 v44
    let v559 : Types.EmitType<Types.std.string.String> = v558 |> unbox<Types.EmitType<Types.std.string.String>>
    let v560 : Types.std.string.String = Fable.Core.Rust.emitExpr v559 v86
    let v561 : string = (v560).ToString ()
    let v562 : string = $"r#\"{v89}\"#"
    let v563 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v562
    let v564 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v563 v92
    let v565 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v564 v94
    let v566 : string = method2(v561)
    let v567 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v566 v97
    let v568 : string = method3()
    let v569 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v568 v97
    let v570 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v565, v567, v569) v101
    let v571 : string = Fable.Core.Rust.emitExpr v570 v103
    let v572 : string = $"r#\"{v105}\"#"
    let v573 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v572
    let v574 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v573 v92
    let v575 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v574 v94
    let v576 : string = method2(v571)
    let v577 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v576 v97
    let v578 : string = method4()
    let v579 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v578 v97
    let v580 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v575, v577, v579) v101
    let v581 : string = Fable.Core.Rust.emitExpr v580 v103
    let v582 : string = $"r#\"{v116}\"#"
    let v583 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v582
    let v584 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v583 v92
    let v585 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v584 v94
    let v586 : string = method2(v581)
    let v587 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v586 v97
    let v588 : string = method5()
    let v589 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v588 v97
    let v590 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v585, v587, v589) v101
    let v591 : string = Fable.Core.Rust.emitExpr v590 v103
    let v592 : Types.std.string.String = Fable.Core.Rust.emitExpr v591 v11
    let v593 : Types.EmitType<Types.std.string.String> = v592 |> unbox<Types.EmitType<Types.std.string.String>>
    let v594 : Types.std.string.String = Fable.Core.Rust.emitExpr v526 v86
    let v595 : string = (v594).ToString ()
    let v596 : string = $"r#\"{v89}\"#"
    let v597 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v596
    let v598 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v597 v92
    let v599 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v598 v94
    let v600 : string = method2(v595)
    let v601 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v600 v97
    let v602 : string = method3()
    let v603 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v602 v97
    let v604 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v599, v601, v603) v101
    let v605 : string = Fable.Core.Rust.emitExpr v604 v103
    let v606 : string = $"r#\"{v105}\"#"
    let v607 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v606
    let v608 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v607 v92
    let v609 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v608 v94
    let v610 : string = method2(v605)
    let v611 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v610 v97
    let v612 : string = method4()
    let v613 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v612 v97
    let v614 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v609, v611, v613) v101
    let v615 : string = Fable.Core.Rust.emitExpr v614 v103
    let v616 : string = $"r#\"{v116}\"#"
    let v617 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v616
    let v618 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v617 v92
    let v619 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v618 v94
    let v620 : string = method2(v615)
    let v621 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v620 v97
    let v622 : string = method5()
    let v623 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v622 v97
    let v624 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v619, v621, v623) v101
    let v625 : string = Fable.Core.Rust.emitExpr v624 v103
    let v626 : Types.std.string.String = Fable.Core.Rust.emitExpr v625 v11
    let v627 : Types.EmitType<Types.std.string.String> = v626 |> unbox<Types.EmitType<Types.std.string.String>>
    let v628 : Types.std.string.String = Fable.Core.Rust.emitExpr v551 v86
    let v629 : string = (v628).ToString ()
    let v630 : string = $"r#\"{v89}\"#"
    let v631 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v630
    let v632 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v631 v92
    let v633 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v632 v94
    let v634 : string = method2(v629)
    let v635 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v634 v97
    let v636 : string = method3()
    let v637 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v636 v97
    let v638 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v633, v635, v637) v101
    let v639 : string = Fable.Core.Rust.emitExpr v638 v103
    let v640 : string = $"r#\"{v105}\"#"
    let v641 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v640
    let v642 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v641 v92
    let v643 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v642 v94
    let v644 : string = method2(v639)
    let v645 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v644 v97
    let v646 : string = method4()
    let v647 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v646 v97
    let v648 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v643, v645, v647) v101
    let v649 : string = Fable.Core.Rust.emitExpr v648 v103
    let v650 : string = $"r#\"{v116}\"#"
    let v651 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v650
    let v652 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v651 v92
    let v653 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v652 v94
    let v654 : string = method2(v649)
    let v655 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v654 v97
    let v656 : string = method5()
    let v657 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v656 v97
    let v658 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v653, v655, v657) v101
    let v659 : string = Fable.Core.Rust.emitExpr v658 v103
    let v660 : Types.std.string.String = Fable.Core.Rust.emitExpr v659 v11
    let v661 : Types.EmitType<Types.std.string.String> = v660 |> unbox<Types.EmitType<Types.std.string.String>>
    let v662 : bool = Fable.Core.Rust.emitExpr () v197
    let v665 : US0 =
        if v662 then
            US0_1
        else
            US0_0
    match v665 with
    | US0_1 -> (* Wasm32 *)
        let v666 : string = "%c%s %c%s %c%s"
        let v667 : string = "($0).as_ref().to_string()"
        let v668 : Types.std.string.String = Fable.Core.Rust.emitExpr v666 v667
        let v669 : string = "color: purple"
        let v670 : Types.std.string.String = Fable.Core.Rust.emitExpr v669 v667
        let v671 : string = $"{v593}"
        let v672 : Types.std.string.String = Fable.Core.Rust.emitExpr v671 v667
        let v673 : string = "de884c"
        let v674 : string = $"color: {v673}"
        let v675 : Types.std.string.String = Fable.Core.Rust.emitExpr v674 v667
        let v676 : string = $"{v627} {v661}"
        let v677 : Types.std.string.String = Fable.Core.Rust.emitExpr v676 v667
        let v678 : string = "color: #222222"
        let v679 : Types.std.string.String = Fable.Core.Rust.emitExpr v678 v667
        let v680 : string = $"{v661}"
        let v681 : Types.std.string.String = Fable.Core.Rust.emitExpr v680 v667
        let v682 : (Types.std.string.String []) = [|v668; v670; v672; v675; v677; v679; v681|]
        let v683 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v682 v39
        let v684 : obj = v683
        let v685 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v686 : obj = Fable.Core.Rust.emitExpr v684 v685
        let v687 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v686 v687
        ()
    | _ ->
        let v688 : string = "purple"
        let v689 : string = "colored::Colorize::color(&*$0, $1.to_string())"
        let v690 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v593, v688) v689
        let v691 : Types.std.string.String = Fable.Core.Rust.emitExpr v690 v86
        let v692 : string = method6()
        let v693 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v692 v97
        let v694 : unativeint = unativeint 0
        let v695 : unativeint = unativeint 2
        let v696 : string = "&$0[$1..$2]"
        let v697 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v693, v694, v695) v696
        let v698 : string = Fable.Core.Rust.emitExpr v697 v103
        let v699 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v700 : uint8 = Fable.Core.Rust.emitExpr v698 v699
        let v701 : string = method6()
        let v702 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v701 v97
        let v703 : unativeint = unativeint 2
        let v704 : unativeint = unativeint 4
        let v705 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v702, v703, v704) v696
        let v706 : string = Fable.Core.Rust.emitExpr v705 v103
        let v707 : uint8 = Fable.Core.Rust.emitExpr v706 v699
        let v708 : string = method6()
        let v709 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v708 v97
        let v710 : unativeint = unativeint 4
        let v711 : unativeint = unativeint 6
        let v712 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v709, v710, v711) v696
        let v713 : string = Fable.Core.Rust.emitExpr v712 v103
        let v714 : uint8 = Fable.Core.Rust.emitExpr v713 v699
        let v715 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v716 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v627, v700, v707, v714) v715
        let v717 : Types.std.string.String = Fable.Core.Rust.emitExpr v716 v86
        let v718 : string = method7()
        let v719 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v718 v97
        let v720 : unativeint = unativeint 0
        let v721 : unativeint = unativeint 2
        let v722 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v719, v720, v721) v696
        let v723 : string = Fable.Core.Rust.emitExpr v722 v103
        let v724 : uint8 = Fable.Core.Rust.emitExpr v723 v699
        let v725 : string = method7()
        let v726 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v725 v97
        let v727 : unativeint = unativeint 2
        let v728 : unativeint = unativeint 4
        let v729 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v726, v727, v728) v696
        let v730 : string = Fable.Core.Rust.emitExpr v729 v103
        let v731 : uint8 = Fable.Core.Rust.emitExpr v730 v699
        let v732 : string = method7()
        let v733 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v732 v97
        let v734 : unativeint = unativeint 4
        let v735 : unativeint = unativeint 6
        let v736 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v733, v734, v735) v696
        let v737 : string = Fable.Core.Rust.emitExpr v736 v103
        let v738 : uint8 = Fable.Core.Rust.emitExpr v737 v699
        let v739 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v661, v724, v731, v738) v715
        let v740 : Types.std.string.String = Fable.Core.Rust.emitExpr v739 v86
        let v741 : string = $"{v691} {v717} {v740}"
        System.Console.WriteLine v741
        ()
    let v742 : string = "$0.ancestors()"
    let v743 : Types.Ref<Types.std.path.Ancestors> = Fable.Core.Rust.emitExpr v514 v742
    let v744 : unativeint = unativeint 10
    let v745 : string = "$1.take($0)"
    let v746 : Types.std.iter.Iterator<Types.Ref<Types.std.path.Path>> = Fable.Core.Rust.emitExpr struct (v744, v743) v745
    let v747 : (Types.Ref<Types.std.path.Path> -> Types.std.path.PathBuf) = closure2()
    let v748 : Types.Ref<(Types.Ref<Types.std.path.Path> -> Types.std.path.PathBuf)> = v747 |> unbox
    let v749 : string = "$1.into_iter().map($0)"
    let v750 : Types.std.iter.Iterator<Types.std.path.PathBuf> = Fable.Core.Rust.emitExpr struct (v748, v746) v749
    let v751 : (Types.Ref<Types.std.path.PathBuf> -> bool) = closure3()
    let v752 : Types.Ref<(Types.Ref<Types.std.path.PathBuf> -> bool)> = v751 |> unbox
    let v753 : string = "$1.into_iter().find($0)"
    let v754 : Option<Types.std.path.PathBuf> = Fable.Core.Rust.emitExpr struct (v752, v750) v753
    let v755 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v754 v16
    let v756 : string = "spiproj_path"
    let v757 : Types.std.string.String = Fable.Core.Rust.emitExpr v756 v11
    let v758 : Types.EmitType<Types.std.string.String> = v757 |> unbox<Types.EmitType<Types.std.string.String>>
    let v759 : string = Fable.Core.Rust.emitExpr v755 v21
    let v760 : Types.std.string.String = Fable.Core.Rust.emitExpr v759 v11
    let v761 : Types.EmitType<Types.std.string.String> = v760 |> unbox<Types.EmitType<Types.std.string.String>>
    let v762 : (Types.EmitType<Types.std.string.String> []) = [|v758; v761|]
    let v763 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v762 v39
    let v764 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v763 v41
    let v765 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v764 v41
    let v766 : Types.std.string.String = Fable.Core.Rust.emitExpr v765 v44
    let v767 : Types.EmitType<Types.std.string.String> = v766 |> unbox<Types.EmitType<Types.std.string.String>>
    let v768 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v769 : int64 = Fable.Core.Rust.emitExpr v768 v8
    let v770 : int64 = v769 - v9
    let v771 : string = (v770).ToString ()
    let v772 : int32 = 6
    let v773 : string = method1(v772, v771)
    let v774 : uint8 = Fable.Core.Rust.emitExpr () v53
    let v775 : Types.std.string.String = Fable.Core.Rust.emitExpr v55 v11
    let v776 : Types.EmitType<Types.std.string.String> = v775 |> unbox<Types.EmitType<Types.std.string.String>>
    let v777 : Types.std.string.String = Fable.Core.Rust.emitExpr v773 v11
    let v778 : Types.EmitType<Types.std.string.String> = v777 |> unbox<Types.EmitType<Types.std.string.String>>
    let v779 : Types.std.string.String = Fable.Core.Rust.emitExpr v60 v11
    let v780 : Types.EmitType<Types.std.string.String> = v779 |> unbox<Types.EmitType<Types.std.string.String>>
    let v781 : Types.std.string.String = Fable.Core.Rust.emitExpr v774 v44
    let v782 : Types.EmitType<Types.std.string.String> = v781 |> unbox<Types.EmitType<Types.std.string.String>>
    let v783 : Types.std.string.String = Fable.Core.Rust.emitExpr v65 v11
    let v784 : Types.EmitType<Types.std.string.String> = v783 |> unbox<Types.EmitType<Types.std.string.String>>
    let v785 : Types.std.string.String = Fable.Core.Rust.emitExpr v68 v11
    let v786 : Types.EmitType<Types.std.string.String> = v785 |> unbox<Types.EmitType<Types.std.string.String>>
    let v787 : (Types.EmitType<Types.std.string.String> []) = [|v776; v778; v780; v782; v784; v786|]
    let v788 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v787 v39
    let v789 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v788 v41
    let v790 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v789 v41
    let v791 : Types.std.string.String = Fable.Core.Rust.emitExpr v790 v44
    let v792 : Types.EmitType<Types.std.string.String> = v791 |> unbox<Types.EmitType<Types.std.string.String>>
    let v793 : Types.std.string.String = Fable.Core.Rust.emitExpr v77 v11
    let v794 : Types.EmitType<Types.std.string.String> = v793 |> unbox<Types.EmitType<Types.std.string.String>>
    let v795 : (Types.EmitType<Types.std.string.String> []) = [|v794|]
    let v796 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v795 v39
    let v797 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v796 v41
    let v798 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v797 v41
    let v799 : Types.std.string.String = Fable.Core.Rust.emitExpr v798 v44
    let v800 : Types.EmitType<Types.std.string.String> = v799 |> unbox<Types.EmitType<Types.std.string.String>>
    let v801 : Types.std.string.String = Fable.Core.Rust.emitExpr v800 v86
    let v802 : string = (v801).ToString ()
    let v803 : string = $"r#\"{v89}\"#"
    let v804 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v803
    let v805 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v804 v92
    let v806 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v805 v94
    let v807 : string = method2(v802)
    let v808 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v807 v97
    let v809 : string = method3()
    let v810 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v809 v97
    let v811 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v806, v808, v810) v101
    let v812 : string = Fable.Core.Rust.emitExpr v811 v103
    let v813 : string = $"r#\"{v105}\"#"
    let v814 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v813
    let v815 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v814 v92
    let v816 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v815 v94
    let v817 : string = method2(v812)
    let v818 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v817 v97
    let v819 : string = method4()
    let v820 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v819 v97
    let v821 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v816, v818, v820) v101
    let v822 : string = Fable.Core.Rust.emitExpr v821 v103
    let v823 : string = $"r#\"{v116}\"#"
    let v824 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v823
    let v825 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v824 v92
    let v826 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v825 v94
    let v827 : string = method2(v822)
    let v828 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v827 v97
    let v829 : string = method5()
    let v830 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v829 v97
    let v831 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v826, v828, v830) v101
    let v832 : string = Fable.Core.Rust.emitExpr v831 v103
    let v833 : Types.std.string.String = Fable.Core.Rust.emitExpr v832 v11
    let v834 : Types.EmitType<Types.std.string.String> = v833 |> unbox<Types.EmitType<Types.std.string.String>>
    let v835 : Types.std.string.String = Fable.Core.Rust.emitExpr v767 v86
    let v836 : string = (v835).ToString ()
    let v837 : string = $"r#\"{v89}\"#"
    let v838 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v837
    let v839 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v838 v92
    let v840 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v839 v94
    let v841 : string = method2(v836)
    let v842 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v841 v97
    let v843 : string = method3()
    let v844 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v843 v97
    let v845 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v840, v842, v844) v101
    let v846 : string = Fable.Core.Rust.emitExpr v845 v103
    let v847 : string = $"r#\"{v105}\"#"
    let v848 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v847
    let v849 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v848 v92
    let v850 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v849 v94
    let v851 : string = method2(v846)
    let v852 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v851 v97
    let v853 : string = method4()
    let v854 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v853 v97
    let v855 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v850, v852, v854) v101
    let v856 : string = Fable.Core.Rust.emitExpr v855 v103
    let v857 : string = $"r#\"{v116}\"#"
    let v858 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v857
    let v859 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v858 v92
    let v860 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v859 v94
    let v861 : string = method2(v856)
    let v862 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v861 v97
    let v863 : string = method5()
    let v864 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v863 v97
    let v865 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v860, v862, v864) v101
    let v866 : string = Fable.Core.Rust.emitExpr v865 v103
    let v867 : Types.std.string.String = Fable.Core.Rust.emitExpr v866 v11
    let v868 : Types.EmitType<Types.std.string.String> = v867 |> unbox<Types.EmitType<Types.std.string.String>>
    let v869 : Types.std.string.String = Fable.Core.Rust.emitExpr v792 v86
    let v870 : string = (v869).ToString ()
    let v871 : string = $"r#\"{v89}\"#"
    let v872 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v871
    let v873 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v872 v92
    let v874 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v873 v94
    let v875 : string = method2(v870)
    let v876 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v875 v97
    let v877 : string = method3()
    let v878 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v877 v97
    let v879 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v874, v876, v878) v101
    let v880 : string = Fable.Core.Rust.emitExpr v879 v103
    let v881 : string = $"r#\"{v105}\"#"
    let v882 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v881
    let v883 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v882 v92
    let v884 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v883 v94
    let v885 : string = method2(v880)
    let v886 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v885 v97
    let v887 : string = method4()
    let v888 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v887 v97
    let v889 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v884, v886, v888) v101
    let v890 : string = Fable.Core.Rust.emitExpr v889 v103
    let v891 : string = $"r#\"{v116}\"#"
    let v892 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v891
    let v893 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v892 v92
    let v894 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v893 v94
    let v895 : string = method2(v890)
    let v896 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v895 v97
    let v897 : string = method5()
    let v898 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v897 v97
    let v899 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v894, v896, v898) v101
    let v900 : string = Fable.Core.Rust.emitExpr v899 v103
    let v901 : Types.std.string.String = Fable.Core.Rust.emitExpr v900 v11
    let v902 : Types.EmitType<Types.std.string.String> = v901 |> unbox<Types.EmitType<Types.std.string.String>>
    let v903 : bool = Fable.Core.Rust.emitExpr () v197
    let v906 : US0 =
        if v903 then
            US0_1
        else
            US0_0
    match v906 with
    | US0_1 -> (* Wasm32 *)
        let v907 : string = "%c%s %c%s %c%s"
        let v908 : string = "($0).as_ref().to_string()"
        let v909 : Types.std.string.String = Fable.Core.Rust.emitExpr v907 v908
        let v910 : string = "color: purple"
        let v911 : Types.std.string.String = Fable.Core.Rust.emitExpr v910 v908
        let v912 : string = $"{v834}"
        let v913 : Types.std.string.String = Fable.Core.Rust.emitExpr v912 v908
        let v914 : string = "de884c"
        let v915 : string = $"color: {v914}"
        let v916 : Types.std.string.String = Fable.Core.Rust.emitExpr v915 v908
        let v917 : string = $"{v868} {v902}"
        let v918 : Types.std.string.String = Fable.Core.Rust.emitExpr v917 v908
        let v919 : string = "color: #222222"
        let v920 : Types.std.string.String = Fable.Core.Rust.emitExpr v919 v908
        let v921 : string = $"{v902}"
        let v922 : Types.std.string.String = Fable.Core.Rust.emitExpr v921 v908
        let v923 : (Types.std.string.String []) = [|v909; v911; v913; v916; v918; v920; v922|]
        let v924 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v923 v39
        let v925 : obj = v924
        let v926 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v927 : obj = Fable.Core.Rust.emitExpr v925 v926
        let v928 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v927 v928
        ()
    | _ ->
        let v929 : string = "purple"
        let v930 : string = "colored::Colorize::color(&*$0, $1.to_string())"
        let v931 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v834, v929) v930
        let v932 : Types.std.string.String = Fable.Core.Rust.emitExpr v931 v86
        let v933 : string = method6()
        let v934 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v933 v97
        let v935 : unativeint = unativeint 0
        let v936 : unativeint = unativeint 2
        let v937 : string = "&$0[$1..$2]"
        let v938 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v934, v935, v936) v937
        let v939 : string = Fable.Core.Rust.emitExpr v938 v103
        let v940 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v941 : uint8 = Fable.Core.Rust.emitExpr v939 v940
        let v942 : string = method6()
        let v943 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v942 v97
        let v944 : unativeint = unativeint 2
        let v945 : unativeint = unativeint 4
        let v946 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v943, v944, v945) v937
        let v947 : string = Fable.Core.Rust.emitExpr v946 v103
        let v948 : uint8 = Fable.Core.Rust.emitExpr v947 v940
        let v949 : string = method6()
        let v950 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v949 v97
        let v951 : unativeint = unativeint 4
        let v952 : unativeint = unativeint 6
        let v953 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v950, v951, v952) v937
        let v954 : string = Fable.Core.Rust.emitExpr v953 v103
        let v955 : uint8 = Fable.Core.Rust.emitExpr v954 v940
        let v956 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v957 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v868, v941, v948, v955) v956
        let v958 : Types.std.string.String = Fable.Core.Rust.emitExpr v957 v86
        let v959 : string = method7()
        let v960 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v959 v97
        let v961 : unativeint = unativeint 0
        let v962 : unativeint = unativeint 2
        let v963 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v960, v961, v962) v937
        let v964 : string = Fable.Core.Rust.emitExpr v963 v103
        let v965 : uint8 = Fable.Core.Rust.emitExpr v964 v940
        let v966 : string = method7()
        let v967 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v966 v97
        let v968 : unativeint = unativeint 2
        let v969 : unativeint = unativeint 4
        let v970 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v967, v968, v969) v937
        let v971 : string = Fable.Core.Rust.emitExpr v970 v103
        let v972 : uint8 = Fable.Core.Rust.emitExpr v971 v940
        let v973 : string = method7()
        let v974 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v973 v97
        let v975 : unativeint = unativeint 4
        let v976 : unativeint = unativeint 6
        let v977 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v974, v975, v976) v937
        let v978 : string = Fable.Core.Rust.emitExpr v977 v103
        let v979 : uint8 = Fable.Core.Rust.emitExpr v978 v940
        let v980 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v902, v965, v972, v979) v956
        let v981 : Types.std.string.String = Fable.Core.Rust.emitExpr v980 v86
        let v982 : string = $"{v932} {v958} {v981}"
        System.Console.WriteLine v982
        ()
    let v983 : string = "($0).to_str()"
    let v984 : Option<Types.Ref<Types.Str>> = Fable.Core.Rust.emitExpr v279 v983
    let v985 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v984 v509
    let v986 : string = ".spir"
    let v987 : Types.Ref<string> = v986 |> unbox
    let v988 : string = ".spi"
    let v989 : Types.Ref<string> = v988 |> unbox
    let v990 : string = "&$2.replace(&*$0, &$1)"
    let v991 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v987, v989, v985) v990
    let v992 : Types.Ref<string> = v988 |> unbox
    let v993 : string = ".fsx"
    let v994 : Types.Ref<string> = v993 |> unbox
    let v995 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v992, v994, v991) v990
    let v996 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v995 v511
    let v997 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v996 v18
    let v998 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v997 v16
    let v999 : string = "fsx_path"
    let v1000 : Types.std.string.String = Fable.Core.Rust.emitExpr v999 v11
    let v1001 : Types.EmitType<Types.std.string.String> = v1000 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1002 : string = Fable.Core.Rust.emitExpr v998 v21
    let v1003 : Types.std.string.String = Fable.Core.Rust.emitExpr v1002 v11
    let v1004 : Types.EmitType<Types.std.string.String> = v1003 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1005 : (Types.EmitType<Types.std.string.String> []) = [|v1001; v1004|]
    let v1006 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1005 v39
    let v1007 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1006 v41
    let v1008 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1007 v41
    let v1009 : Types.std.string.String = Fable.Core.Rust.emitExpr v1008 v44
    let v1010 : Types.EmitType<Types.std.string.String> = v1009 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1011 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v1012 : int64 = Fable.Core.Rust.emitExpr v1011 v8
    let v1013 : int64 = v1012 - v9
    let v1014 : string = (v1013).ToString ()
    let v1015 : int32 = 6
    let v1016 : string = method1(v1015, v1014)
    let v1017 : uint8 = Fable.Core.Rust.emitExpr () v53
    let v1018 : Types.std.string.String = Fable.Core.Rust.emitExpr v55 v11
    let v1019 : Types.EmitType<Types.std.string.String> = v1018 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1020 : Types.std.string.String = Fable.Core.Rust.emitExpr v1016 v11
    let v1021 : Types.EmitType<Types.std.string.String> = v1020 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1022 : Types.std.string.String = Fable.Core.Rust.emitExpr v60 v11
    let v1023 : Types.EmitType<Types.std.string.String> = v1022 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1024 : Types.std.string.String = Fable.Core.Rust.emitExpr v1017 v44
    let v1025 : Types.EmitType<Types.std.string.String> = v1024 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1026 : Types.std.string.String = Fable.Core.Rust.emitExpr v65 v11
    let v1027 : Types.EmitType<Types.std.string.String> = v1026 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1028 : Types.std.string.String = Fable.Core.Rust.emitExpr v68 v11
    let v1029 : Types.EmitType<Types.std.string.String> = v1028 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1030 : (Types.EmitType<Types.std.string.String> []) = [|v1019; v1021; v1023; v1025; v1027; v1029|]
    let v1031 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1030 v39
    let v1032 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1031 v41
    let v1033 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1032 v41
    let v1034 : Types.std.string.String = Fable.Core.Rust.emitExpr v1033 v44
    let v1035 : Types.EmitType<Types.std.string.String> = v1034 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1036 : Types.std.string.String = Fable.Core.Rust.emitExpr v77 v11
    let v1037 : Types.EmitType<Types.std.string.String> = v1036 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1038 : (Types.EmitType<Types.std.string.String> []) = [|v1037|]
    let v1039 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1038 v39
    let v1040 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1039 v41
    let v1041 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1040 v41
    let v1042 : Types.std.string.String = Fable.Core.Rust.emitExpr v1041 v44
    let v1043 : Types.EmitType<Types.std.string.String> = v1042 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1044 : Types.std.string.String = Fable.Core.Rust.emitExpr v1043 v86
    let v1045 : string = (v1044).ToString ()
    let v1046 : string = $"r#\"{v89}\"#"
    let v1047 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1046
    let v1048 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1047 v92
    let v1049 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1048 v94
    let v1050 : string = method2(v1045)
    let v1051 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1050 v97
    let v1052 : string = method3()
    let v1053 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1052 v97
    let v1054 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1049, v1051, v1053) v101
    let v1055 : string = Fable.Core.Rust.emitExpr v1054 v103
    let v1056 : string = $"r#\"{v105}\"#"
    let v1057 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1056
    let v1058 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1057 v92
    let v1059 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1058 v94
    let v1060 : string = method2(v1055)
    let v1061 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1060 v97
    let v1062 : string = method4()
    let v1063 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1062 v97
    let v1064 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1059, v1061, v1063) v101
    let v1065 : string = Fable.Core.Rust.emitExpr v1064 v103
    let v1066 : string = $"r#\"{v116}\"#"
    let v1067 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1066
    let v1068 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1067 v92
    let v1069 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1068 v94
    let v1070 : string = method2(v1065)
    let v1071 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1070 v97
    let v1072 : string = method5()
    let v1073 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1072 v97
    let v1074 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1069, v1071, v1073) v101
    let v1075 : string = Fable.Core.Rust.emitExpr v1074 v103
    let v1076 : Types.std.string.String = Fable.Core.Rust.emitExpr v1075 v11
    let v1077 : Types.EmitType<Types.std.string.String> = v1076 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1078 : Types.std.string.String = Fable.Core.Rust.emitExpr v1010 v86
    let v1079 : string = (v1078).ToString ()
    let v1080 : string = $"r#\"{v89}\"#"
    let v1081 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1080
    let v1082 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1081 v92
    let v1083 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1082 v94
    let v1084 : string = method2(v1079)
    let v1085 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1084 v97
    let v1086 : string = method3()
    let v1087 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1086 v97
    let v1088 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1083, v1085, v1087) v101
    let v1089 : string = Fable.Core.Rust.emitExpr v1088 v103
    let v1090 : string = $"r#\"{v105}\"#"
    let v1091 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1090
    let v1092 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1091 v92
    let v1093 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1092 v94
    let v1094 : string = method2(v1089)
    let v1095 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1094 v97
    let v1096 : string = method4()
    let v1097 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1096 v97
    let v1098 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1093, v1095, v1097) v101
    let v1099 : string = Fable.Core.Rust.emitExpr v1098 v103
    let v1100 : string = $"r#\"{v116}\"#"
    let v1101 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1100
    let v1102 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1101 v92
    let v1103 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1102 v94
    let v1104 : string = method2(v1099)
    let v1105 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1104 v97
    let v1106 : string = method5()
    let v1107 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1106 v97
    let v1108 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1103, v1105, v1107) v101
    let v1109 : string = Fable.Core.Rust.emitExpr v1108 v103
    let v1110 : Types.std.string.String = Fable.Core.Rust.emitExpr v1109 v11
    let v1111 : Types.EmitType<Types.std.string.String> = v1110 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1112 : Types.std.string.String = Fable.Core.Rust.emitExpr v1035 v86
    let v1113 : string = (v1112).ToString ()
    let v1114 : string = $"r#\"{v89}\"#"
    let v1115 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1114
    let v1116 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1115 v92
    let v1117 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1116 v94
    let v1118 : string = method2(v1113)
    let v1119 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1118 v97
    let v1120 : string = method3()
    let v1121 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1120 v97
    let v1122 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1117, v1119, v1121) v101
    let v1123 : string = Fable.Core.Rust.emitExpr v1122 v103
    let v1124 : string = $"r#\"{v105}\"#"
    let v1125 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1124
    let v1126 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1125 v92
    let v1127 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1126 v94
    let v1128 : string = method2(v1123)
    let v1129 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1128 v97
    let v1130 : string = method4()
    let v1131 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1130 v97
    let v1132 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1127, v1129, v1131) v101
    let v1133 : string = Fable.Core.Rust.emitExpr v1132 v103
    let v1134 : string = $"r#\"{v116}\"#"
    let v1135 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1134
    let v1136 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1135 v92
    let v1137 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1136 v94
    let v1138 : string = method2(v1133)
    let v1139 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1138 v97
    let v1140 : string = method5()
    let v1141 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1140 v97
    let v1142 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1137, v1139, v1141) v101
    let v1143 : string = Fable.Core.Rust.emitExpr v1142 v103
    let v1144 : Types.std.string.String = Fable.Core.Rust.emitExpr v1143 v11
    let v1145 : Types.EmitType<Types.std.string.String> = v1144 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1146 : bool = Fable.Core.Rust.emitExpr () v197
    let v1149 : US0 =
        if v1146 then
            US0_1
        else
            US0_0
    match v1149 with
    | US0_1 -> (* Wasm32 *)
        let v1150 : string = "%c%s %c%s %c%s"
        let v1151 : string = "($0).as_ref().to_string()"
        let v1152 : Types.std.string.String = Fable.Core.Rust.emitExpr v1150 v1151
        let v1153 : string = "color: purple"
        let v1154 : Types.std.string.String = Fable.Core.Rust.emitExpr v1153 v1151
        let v1155 : string = $"{v1077}"
        let v1156 : Types.std.string.String = Fable.Core.Rust.emitExpr v1155 v1151
        let v1157 : string = "de884c"
        let v1158 : string = $"color: {v1157}"
        let v1159 : Types.std.string.String = Fable.Core.Rust.emitExpr v1158 v1151
        let v1160 : string = $"{v1111} {v1145}"
        let v1161 : Types.std.string.String = Fable.Core.Rust.emitExpr v1160 v1151
        let v1162 : string = "color: #222222"
        let v1163 : Types.std.string.String = Fable.Core.Rust.emitExpr v1162 v1151
        let v1164 : string = $"{v1145}"
        let v1165 : Types.std.string.String = Fable.Core.Rust.emitExpr v1164 v1151
        let v1166 : (Types.std.string.String []) = [|v1152; v1154; v1156; v1159; v1161; v1163; v1165|]
        let v1167 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v1166 v39
        let v1168 : obj = v1167
        let v1169 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v1170 : obj = Fable.Core.Rust.emitExpr v1168 v1169
        let v1171 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v1170 v1171
        ()
    | _ ->
        let v1172 : string = "purple"
        let v1173 : string = "colored::Colorize::color(&*$0, $1.to_string())"
        let v1174 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1077, v1172) v1173
        let v1175 : Types.std.string.String = Fable.Core.Rust.emitExpr v1174 v86
        let v1176 : string = method6()
        let v1177 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1176 v97
        let v1178 : unativeint = unativeint 0
        let v1179 : unativeint = unativeint 2
        let v1180 : string = "&$0[$1..$2]"
        let v1181 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1177, v1178, v1179) v1180
        let v1182 : string = Fable.Core.Rust.emitExpr v1181 v103
        let v1183 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v1184 : uint8 = Fable.Core.Rust.emitExpr v1182 v1183
        let v1185 : string = method6()
        let v1186 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1185 v97
        let v1187 : unativeint = unativeint 2
        let v1188 : unativeint = unativeint 4
        let v1189 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1186, v1187, v1188) v1180
        let v1190 : string = Fable.Core.Rust.emitExpr v1189 v103
        let v1191 : uint8 = Fable.Core.Rust.emitExpr v1190 v1183
        let v1192 : string = method6()
        let v1193 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1192 v97
        let v1194 : unativeint = unativeint 4
        let v1195 : unativeint = unativeint 6
        let v1196 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1193, v1194, v1195) v1180
        let v1197 : string = Fable.Core.Rust.emitExpr v1196 v103
        let v1198 : uint8 = Fable.Core.Rust.emitExpr v1197 v1183
        let v1199 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v1200 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1111, v1184, v1191, v1198) v1199
        let v1201 : Types.std.string.String = Fable.Core.Rust.emitExpr v1200 v86
        let v1202 : string = method7()
        let v1203 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1202 v97
        let v1204 : unativeint = unativeint 0
        let v1205 : unativeint = unativeint 2
        let v1206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1203, v1204, v1205) v1180
        let v1207 : string = Fable.Core.Rust.emitExpr v1206 v103
        let v1208 : uint8 = Fable.Core.Rust.emitExpr v1207 v1183
        let v1209 : string = method7()
        let v1210 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1209 v97
        let v1211 : unativeint = unativeint 2
        let v1212 : unativeint = unativeint 4
        let v1213 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1210, v1211, v1212) v1180
        let v1214 : string = Fable.Core.Rust.emitExpr v1213 v103
        let v1215 : uint8 = Fable.Core.Rust.emitExpr v1214 v1183
        let v1216 : string = method7()
        let v1217 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1216 v97
        let v1218 : unativeint = unativeint 4
        let v1219 : unativeint = unativeint 6
        let v1220 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1217, v1218, v1219) v1180
        let v1221 : string = Fable.Core.Rust.emitExpr v1220 v103
        let v1222 : uint8 = Fable.Core.Rust.emitExpr v1221 v1183
        let v1223 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1145, v1208, v1215, v1222) v1199
        let v1224 : Types.std.string.String = Fable.Core.Rust.emitExpr v1223 v86
        let v1225 : string = $"{v1175} {v1201} {v1224}"
        System.Console.WriteLine v1225
        ()
    let v1226 : string = ""
    let v1227 : string = "std::fs::write($0, $1.as_str())"
    let v1228 : Result<unit, Types.std.io.Error> = Fable.Core.Rust.emitExpr struct (v998, v1226) v1227
    let v1229 : string = "*(($0).as_ref()).unwrap()"
    Fable.Core.Rust.emitExpr v1228 v1229
    let v1230 : string = "> fs_write fsx_path \"\"; ok"
    let v1231 : Types.std.string.String = Fable.Core.Rust.emitExpr v1230 v11
    let v1232 : Types.EmitType<Types.std.string.String> = v1231 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1233 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v1234 : int64 = Fable.Core.Rust.emitExpr v1233 v8
    let v1235 : int64 = v1234 - v9
    let v1236 : string = (v1235).ToString ()
    let v1237 : int32 = 6
    let v1238 : string = method1(v1237, v1236)
    let v1239 : uint8 = Fable.Core.Rust.emitExpr () v53
    let v1240 : Types.std.string.String = Fable.Core.Rust.emitExpr v55 v11
    let v1241 : Types.EmitType<Types.std.string.String> = v1240 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1242 : Types.std.string.String = Fable.Core.Rust.emitExpr v1238 v11
    let v1243 : Types.EmitType<Types.std.string.String> = v1242 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1244 : Types.std.string.String = Fable.Core.Rust.emitExpr v60 v11
    let v1245 : Types.EmitType<Types.std.string.String> = v1244 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1246 : Types.std.string.String = Fable.Core.Rust.emitExpr v1239 v44
    let v1247 : Types.EmitType<Types.std.string.String> = v1246 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1248 : Types.std.string.String = Fable.Core.Rust.emitExpr v65 v11
    let v1249 : Types.EmitType<Types.std.string.String> = v1248 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1250 : Types.std.string.String = Fable.Core.Rust.emitExpr v68 v11
    let v1251 : Types.EmitType<Types.std.string.String> = v1250 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1252 : (Types.EmitType<Types.std.string.String> []) = [|v1241; v1243; v1245; v1247; v1249; v1251|]
    let v1253 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1252 v39
    let v1254 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1253 v41
    let v1255 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1254 v41
    let v1256 : Types.std.string.String = Fable.Core.Rust.emitExpr v1255 v44
    let v1257 : Types.EmitType<Types.std.string.String> = v1256 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1258 : Types.std.string.String = Fable.Core.Rust.emitExpr v77 v11
    let v1259 : Types.EmitType<Types.std.string.String> = v1258 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1260 : (Types.EmitType<Types.std.string.String> []) = [|v1259|]
    let v1261 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1260 v39
    let v1262 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1261 v41
    let v1263 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1262 v41
    let v1264 : Types.std.string.String = Fable.Core.Rust.emitExpr v1263 v44
    let v1265 : Types.EmitType<Types.std.string.String> = v1264 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1266 : Types.std.string.String = Fable.Core.Rust.emitExpr v1265 v86
    let v1267 : string = (v1266).ToString ()
    let v1268 : string = $"r#\"{v89}\"#"
    let v1269 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1268
    let v1270 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1269 v92
    let v1271 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1270 v94
    let v1272 : string = method2(v1267)
    let v1273 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1272 v97
    let v1274 : string = method3()
    let v1275 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1274 v97
    let v1276 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1271, v1273, v1275) v101
    let v1277 : string = Fable.Core.Rust.emitExpr v1276 v103
    let v1278 : string = $"r#\"{v105}\"#"
    let v1279 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1278
    let v1280 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1279 v92
    let v1281 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1280 v94
    let v1282 : string = method2(v1277)
    let v1283 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1282 v97
    let v1284 : string = method4()
    let v1285 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1284 v97
    let v1286 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1281, v1283, v1285) v101
    let v1287 : string = Fable.Core.Rust.emitExpr v1286 v103
    let v1288 : string = $"r#\"{v116}\"#"
    let v1289 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1288
    let v1290 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1289 v92
    let v1291 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1290 v94
    let v1292 : string = method2(v1287)
    let v1293 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1292 v97
    let v1294 : string = method5()
    let v1295 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1294 v97
    let v1296 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1291, v1293, v1295) v101
    let v1297 : string = Fable.Core.Rust.emitExpr v1296 v103
    let v1298 : Types.std.string.String = Fable.Core.Rust.emitExpr v1297 v11
    let v1299 : Types.EmitType<Types.std.string.String> = v1298 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1300 : Types.std.string.String = Fable.Core.Rust.emitExpr v1232 v86
    let v1301 : string = (v1300).ToString ()
    let v1302 : string = $"r#\"{v89}\"#"
    let v1303 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1302
    let v1304 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1303 v92
    let v1305 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1304 v94
    let v1306 : string = method2(v1301)
    let v1307 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1306 v97
    let v1308 : string = method3()
    let v1309 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1308 v97
    let v1310 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1305, v1307, v1309) v101
    let v1311 : string = Fable.Core.Rust.emitExpr v1310 v103
    let v1312 : string = $"r#\"{v105}\"#"
    let v1313 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1312
    let v1314 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1313 v92
    let v1315 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1314 v94
    let v1316 : string = method2(v1311)
    let v1317 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1316 v97
    let v1318 : string = method4()
    let v1319 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1318 v97
    let v1320 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1315, v1317, v1319) v101
    let v1321 : string = Fable.Core.Rust.emitExpr v1320 v103
    let v1322 : string = $"r#\"{v116}\"#"
    let v1323 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1322
    let v1324 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1323 v92
    let v1325 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1324 v94
    let v1326 : string = method2(v1321)
    let v1327 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1326 v97
    let v1328 : string = method5()
    let v1329 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1328 v97
    let v1330 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1325, v1327, v1329) v101
    let v1331 : string = Fable.Core.Rust.emitExpr v1330 v103
    let v1332 : Types.std.string.String = Fable.Core.Rust.emitExpr v1331 v11
    let v1333 : Types.EmitType<Types.std.string.String> = v1332 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1334 : Types.std.string.String = Fable.Core.Rust.emitExpr v1257 v86
    let v1335 : string = (v1334).ToString ()
    let v1336 : string = $"r#\"{v89}\"#"
    let v1337 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1336
    let v1338 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1337 v92
    let v1339 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1338 v94
    let v1340 : string = method2(v1335)
    let v1341 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1340 v97
    let v1342 : string = method3()
    let v1343 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1342 v97
    let v1344 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1339, v1341, v1343) v101
    let v1345 : string = Fable.Core.Rust.emitExpr v1344 v103
    let v1346 : string = $"r#\"{v105}\"#"
    let v1347 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1346
    let v1348 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1347 v92
    let v1349 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1348 v94
    let v1350 : string = method2(v1345)
    let v1351 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1350 v97
    let v1352 : string = method4()
    let v1353 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1352 v97
    let v1354 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1349, v1351, v1353) v101
    let v1355 : string = Fable.Core.Rust.emitExpr v1354 v103
    let v1356 : string = $"r#\"{v116}\"#"
    let v1357 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1356
    let v1358 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1357 v92
    let v1359 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1358 v94
    let v1360 : string = method2(v1355)
    let v1361 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1360 v97
    let v1362 : string = method5()
    let v1363 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1362 v97
    let v1364 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1359, v1361, v1363) v101
    let v1365 : string = Fable.Core.Rust.emitExpr v1364 v103
    let v1366 : Types.std.string.String = Fable.Core.Rust.emitExpr v1365 v11
    let v1367 : Types.EmitType<Types.std.string.String> = v1366 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1368 : bool = Fable.Core.Rust.emitExpr () v197
    let v1371 : US0 =
        if v1368 then
            US0_1
        else
            US0_0
    match v1371 with
    | US0_1 -> (* Wasm32 *)
        let v1372 : string = "%c%s %c%s %c%s"
        let v1373 : string = "($0).as_ref().to_string()"
        let v1374 : Types.std.string.String = Fable.Core.Rust.emitExpr v1372 v1373
        let v1375 : string = "color: purple"
        let v1376 : Types.std.string.String = Fable.Core.Rust.emitExpr v1375 v1373
        let v1377 : string = $"{v1299}"
        let v1378 : Types.std.string.String = Fable.Core.Rust.emitExpr v1377 v1373
        let v1379 : string = "de884c"
        let v1380 : string = $"color: {v1379}"
        let v1381 : Types.std.string.String = Fable.Core.Rust.emitExpr v1380 v1373
        let v1382 : string = $"{v1333} {v1367}"
        let v1383 : Types.std.string.String = Fable.Core.Rust.emitExpr v1382 v1373
        let v1384 : string = "color: #222222"
        let v1385 : Types.std.string.String = Fable.Core.Rust.emitExpr v1384 v1373
        let v1386 : string = $"{v1367}"
        let v1387 : Types.std.string.String = Fable.Core.Rust.emitExpr v1386 v1373
        let v1388 : (Types.std.string.String []) = [|v1374; v1376; v1378; v1381; v1383; v1385; v1387|]
        let v1389 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v1388 v39
        let v1390 : obj = v1389
        let v1391 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v1392 : obj = Fable.Core.Rust.emitExpr v1390 v1391
        let v1393 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v1392 v1393
        ()
    | _ ->
        let v1394 : string = "purple"
        let v1395 : string = "colored::Colorize::color(&*$0, $1.to_string())"
        let v1396 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1299, v1394) v1395
        let v1397 : Types.std.string.String = Fable.Core.Rust.emitExpr v1396 v86
        let v1398 : string = method6()
        let v1399 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1398 v97
        let v1400 : unativeint = unativeint 0
        let v1401 : unativeint = unativeint 2
        let v1402 : string = "&$0[$1..$2]"
        let v1403 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1399, v1400, v1401) v1402
        let v1404 : string = Fable.Core.Rust.emitExpr v1403 v103
        let v1405 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v1406 : uint8 = Fable.Core.Rust.emitExpr v1404 v1405
        let v1407 : string = method6()
        let v1408 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1407 v97
        let v1409 : unativeint = unativeint 2
        let v1410 : unativeint = unativeint 4
        let v1411 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1408, v1409, v1410) v1402
        let v1412 : string = Fable.Core.Rust.emitExpr v1411 v103
        let v1413 : uint8 = Fable.Core.Rust.emitExpr v1412 v1405
        let v1414 : string = method6()
        let v1415 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1414 v97
        let v1416 : unativeint = unativeint 4
        let v1417 : unativeint = unativeint 6
        let v1418 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1415, v1416, v1417) v1402
        let v1419 : string = Fable.Core.Rust.emitExpr v1418 v103
        let v1420 : uint8 = Fable.Core.Rust.emitExpr v1419 v1405
        let v1421 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v1422 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1333, v1406, v1413, v1420) v1421
        let v1423 : Types.std.string.String = Fable.Core.Rust.emitExpr v1422 v86
        let v1424 : string = method7()
        let v1425 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1424 v97
        let v1426 : unativeint = unativeint 0
        let v1427 : unativeint = unativeint 2
        let v1428 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1425, v1426, v1427) v1402
        let v1429 : string = Fable.Core.Rust.emitExpr v1428 v103
        let v1430 : uint8 = Fable.Core.Rust.emitExpr v1429 v1405
        let v1431 : string = method7()
        let v1432 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1431 v97
        let v1433 : unativeint = unativeint 2
        let v1434 : unativeint = unativeint 4
        let v1435 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1432, v1433, v1434) v1402
        let v1436 : string = Fable.Core.Rust.emitExpr v1435 v103
        let v1437 : uint8 = Fable.Core.Rust.emitExpr v1436 v1405
        let v1438 : string = method7()
        let v1439 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1438 v97
        let v1440 : unativeint = unativeint 4
        let v1441 : unativeint = unativeint 6
        let v1442 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1439, v1440, v1441) v1402
        let v1443 : string = Fable.Core.Rust.emitExpr v1442 v103
        let v1444 : uint8 = Fable.Core.Rust.emitExpr v1443 v1405
        let v1445 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1367, v1430, v1437, v1444) v1421
        let v1446 : Types.std.string.String = Fable.Core.Rust.emitExpr v1445 v86
        let v1447 : string = $"{v1397} {v1423} {v1446}"
        System.Console.WriteLine v1447
        ()
    let v1448 : string = "std::fs::read_to_string($0)"
    let v1449 : Result<Types.std.string.String, Types.std.io.Error> = Fable.Core.Rust.emitExpr v755 v1448
    let v1450 : string = "($0).as_ref().to_string()"
    let v1451 : Types.std.string.String = Fable.Core.Rust.emitExpr v1449 v1450
    let struct (v1452 : string, v1453 : string, v1454 : string, v1455 : bool) = method0()
    let v1456 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v1457 : int64 = Fable.Core.Rust.emitExpr v1456 v8
    let v1458 : Types.std.string.String = Fable.Core.Rust.emitExpr v756 v11
    let v1459 : Types.EmitType<Types.std.string.String> = v1458 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1460 : string = Fable.Core.Rust.emitExpr v755 v21
    let v1461 : Types.std.string.String = Fable.Core.Rust.emitExpr v1460 v11
    let v1462 : Types.EmitType<Types.std.string.String> = v1461 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1463 : string = "spiproj_text len"
    let v1464 : Types.std.string.String = Fable.Core.Rust.emitExpr v1463 v11
    let v1465 : Types.EmitType<Types.std.string.String> = v1464 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1466 : string = "($0).len().try_into().unwrap()"
    let v1467 : int32 = Fable.Core.Rust.emitExpr v1451 v1466
    let v1468 : Types.std.string.String = Fable.Core.Rust.emitExpr v1467 v44
    let v1469 : Types.EmitType<Types.std.string.String> = v1468 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1470 : (Types.EmitType<Types.std.string.String> []) = [|v1459; v1462; v1465; v1469|]
    let v1471 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1470 v39
    let v1472 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1471 v41
    let v1473 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1472 v41
    let v1474 : Types.std.string.String = Fable.Core.Rust.emitExpr v1473 v44
    let v1475 : Types.EmitType<Types.std.string.String> = v1474 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1476 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v1477 : int64 = Fable.Core.Rust.emitExpr v1476 v8
    let v1478 : int64 = v1477 - v1457
    let v1479 : string = (v1478).ToString ()
    let v1480 : int32 = 6
    let v1481 : string = method1(v1480, v1479)
    let v1482 : uint8 = Fable.Core.Rust.emitExpr () v53
    let v1483 : Types.std.string.String = Fable.Core.Rust.emitExpr v55 v11
    let v1484 : Types.EmitType<Types.std.string.String> = v1483 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1485 : Types.std.string.String = Fable.Core.Rust.emitExpr v1481 v11
    let v1486 : Types.EmitType<Types.std.string.String> = v1485 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1487 : Types.std.string.String = Fable.Core.Rust.emitExpr v60 v11
    let v1488 : Types.EmitType<Types.std.string.String> = v1487 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1489 : Types.std.string.String = Fable.Core.Rust.emitExpr v1482 v44
    let v1490 : Types.EmitType<Types.std.string.String> = v1489 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1491 : Types.std.string.String = Fable.Core.Rust.emitExpr v65 v11
    let v1492 : Types.EmitType<Types.std.string.String> = v1491 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1493 : Types.std.string.String = Fable.Core.Rust.emitExpr v68 v11
    let v1494 : Types.EmitType<Types.std.string.String> = v1493 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1495 : (Types.EmitType<Types.std.string.String> []) = [|v1484; v1486; v1488; v1490; v1492; v1494|]
    let v1496 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1495 v39
    let v1497 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1496 v41
    let v1498 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1497 v41
    let v1499 : Types.std.string.String = Fable.Core.Rust.emitExpr v1498 v44
    let v1500 : Types.EmitType<Types.std.string.String> = v1499 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1501 : string = "> spiproj_open ()"
    let v1502 : Types.std.string.String = Fable.Core.Rust.emitExpr v1501 v11
    let v1503 : Types.EmitType<Types.std.string.String> = v1502 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1504 : (Types.EmitType<Types.std.string.String> []) = [|v1503|]
    let v1505 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1504 v39
    let v1506 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1505 v41
    let v1507 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1506 v41
    let v1508 : Types.std.string.String = Fable.Core.Rust.emitExpr v1507 v44
    let v1509 : Types.EmitType<Types.std.string.String> = v1508 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1510 : Types.std.string.String = Fable.Core.Rust.emitExpr v1509 v86
    let v1511 : string = (v1510).ToString ()
    let v1512 : string = $"r#\"{v89}\"#"
    let v1513 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1512
    let v1514 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1513 v92
    let v1515 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1514 v94
    let v1516 : string = method2(v1511)
    let v1517 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1516 v97
    let v1518 : string = method3()
    let v1519 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1518 v97
    let v1520 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1515, v1517, v1519) v101
    let v1521 : string = Fable.Core.Rust.emitExpr v1520 v103
    let v1522 : string = $"r#\"{v105}\"#"
    let v1523 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1522
    let v1524 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1523 v92
    let v1525 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1524 v94
    let v1526 : string = method2(v1521)
    let v1527 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1526 v97
    let v1528 : string = method4()
    let v1529 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1528 v97
    let v1530 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1525, v1527, v1529) v101
    let v1531 : string = Fable.Core.Rust.emitExpr v1530 v103
    let v1532 : string = $"r#\"{v116}\"#"
    let v1533 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1532
    let v1534 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1533 v92
    let v1535 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1534 v94
    let v1536 : string = method2(v1531)
    let v1537 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1536 v97
    let v1538 : string = method5()
    let v1539 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1538 v97
    let v1540 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1535, v1537, v1539) v101
    let v1541 : string = Fable.Core.Rust.emitExpr v1540 v103
    let v1542 : Types.std.string.String = Fable.Core.Rust.emitExpr v1541 v11
    let v1543 : Types.EmitType<Types.std.string.String> = v1542 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1544 : Types.std.string.String = Fable.Core.Rust.emitExpr v1475 v86
    let v1545 : string = (v1544).ToString ()
    let v1546 : string = $"r#\"{v89}\"#"
    let v1547 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1546
    let v1548 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1547 v92
    let v1549 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1548 v94
    let v1550 : string = method2(v1545)
    let v1551 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1550 v97
    let v1552 : string = method3()
    let v1553 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1552 v97
    let v1554 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1549, v1551, v1553) v101
    let v1555 : string = Fable.Core.Rust.emitExpr v1554 v103
    let v1556 : string = $"r#\"{v105}\"#"
    let v1557 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1556
    let v1558 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1557 v92
    let v1559 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1558 v94
    let v1560 : string = method2(v1555)
    let v1561 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1560 v97
    let v1562 : string = method4()
    let v1563 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1562 v97
    let v1564 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1559, v1561, v1563) v101
    let v1565 : string = Fable.Core.Rust.emitExpr v1564 v103
    let v1566 : string = $"r#\"{v116}\"#"
    let v1567 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1566
    let v1568 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1567 v92
    let v1569 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1568 v94
    let v1570 : string = method2(v1565)
    let v1571 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1570 v97
    let v1572 : string = method5()
    let v1573 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1572 v97
    let v1574 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1569, v1571, v1573) v101
    let v1575 : string = Fable.Core.Rust.emitExpr v1574 v103
    let v1576 : Types.std.string.String = Fable.Core.Rust.emitExpr v1575 v11
    let v1577 : Types.EmitType<Types.std.string.String> = v1576 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1578 : Types.std.string.String = Fable.Core.Rust.emitExpr v1500 v86
    let v1579 : string = (v1578).ToString ()
    let v1580 : string = $"r#\"{v89}\"#"
    let v1581 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1580
    let v1582 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1581 v92
    let v1583 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1582 v94
    let v1584 : string = method2(v1579)
    let v1585 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1584 v97
    let v1586 : string = method3()
    let v1587 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1586 v97
    let v1588 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1583, v1585, v1587) v101
    let v1589 : string = Fable.Core.Rust.emitExpr v1588 v103
    let v1590 : string = $"r#\"{v105}\"#"
    let v1591 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1590
    let v1592 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1591 v92
    let v1593 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1592 v94
    let v1594 : string = method2(v1589)
    let v1595 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1594 v97
    let v1596 : string = method4()
    let v1597 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1596 v97
    let v1598 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1593, v1595, v1597) v101
    let v1599 : string = Fable.Core.Rust.emitExpr v1598 v103
    let v1600 : string = $"r#\"{v116}\"#"
    let v1601 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1600
    let v1602 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1601 v92
    let v1603 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1602 v94
    let v1604 : string = method2(v1599)
    let v1605 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1604 v97
    let v1606 : string = method5()
    let v1607 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1606 v97
    let v1608 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1603, v1605, v1607) v101
    let v1609 : string = Fable.Core.Rust.emitExpr v1608 v103
    let v1610 : Types.std.string.String = Fable.Core.Rust.emitExpr v1609 v11
    let v1611 : Types.EmitType<Types.std.string.String> = v1610 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1612 : bool = Fable.Core.Rust.emitExpr () v197
    let v1615 : US0 =
        if v1612 then
            US0_1
        else
            US0_0
    match v1615 with
    | US0_1 -> (* Wasm32 *)
        let v1616 : string = "%c%s %c%s %c%s"
        let v1617 : Types.std.string.String = Fable.Core.Rust.emitExpr v1616 v1450
        let v1618 : string = "color: purple"
        let v1619 : Types.std.string.String = Fable.Core.Rust.emitExpr v1618 v1450
        let v1620 : string = $"{v1543}"
        let v1621 : Types.std.string.String = Fable.Core.Rust.emitExpr v1620 v1450
        let v1622 : string = "e36a62"
        let v1623 : string = $"color: {v1622}"
        let v1624 : Types.std.string.String = Fable.Core.Rust.emitExpr v1623 v1450
        let v1625 : string = $"{v1577} {v1611}"
        let v1626 : Types.std.string.String = Fable.Core.Rust.emitExpr v1625 v1450
        let v1627 : string = "color: #222222"
        let v1628 : Types.std.string.String = Fable.Core.Rust.emitExpr v1627 v1450
        let v1629 : string = $"{v1611}"
        let v1630 : Types.std.string.String = Fable.Core.Rust.emitExpr v1629 v1450
        let v1631 : (Types.std.string.String []) = [|v1617; v1619; v1621; v1624; v1626; v1628; v1630|]
        let v1632 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v1631 v39
        let v1633 : obj = v1632
        let v1634 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v1635 : obj = Fable.Core.Rust.emitExpr v1633 v1634
        let v1636 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v1635 v1636
        ()
    | _ ->
        let v1637 : string = "purple"
        let v1638 : string = "colored::Colorize::color(&*$0, $1.to_string())"
        let v1639 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1543, v1637) v1638
        let v1640 : Types.std.string.String = Fable.Core.Rust.emitExpr v1639 v86
        let v1641 : string = method8()
        let v1642 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1641 v97
        let v1643 : unativeint = unativeint 0
        let v1644 : unativeint = unativeint 2
        let v1645 : string = "&$0[$1..$2]"
        let v1646 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1642, v1643, v1644) v1645
        let v1647 : string = Fable.Core.Rust.emitExpr v1646 v103
        let v1648 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v1649 : uint8 = Fable.Core.Rust.emitExpr v1647 v1648
        let v1650 : string = method8()
        let v1651 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1650 v97
        let v1652 : unativeint = unativeint 2
        let v1653 : unativeint = unativeint 4
        let v1654 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1651, v1652, v1653) v1645
        let v1655 : string = Fable.Core.Rust.emitExpr v1654 v103
        let v1656 : uint8 = Fable.Core.Rust.emitExpr v1655 v1648
        let v1657 : string = method8()
        let v1658 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1657 v97
        let v1659 : unativeint = unativeint 4
        let v1660 : unativeint = unativeint 6
        let v1661 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1658, v1659, v1660) v1645
        let v1662 : string = Fable.Core.Rust.emitExpr v1661 v103
        let v1663 : uint8 = Fable.Core.Rust.emitExpr v1662 v1648
        let v1664 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v1665 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1577, v1649, v1656, v1663) v1664
        let v1666 : Types.std.string.String = Fable.Core.Rust.emitExpr v1665 v86
        let v1667 : string = method7()
        let v1668 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1667 v97
        let v1669 : unativeint = unativeint 0
        let v1670 : unativeint = unativeint 2
        let v1671 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1668, v1669, v1670) v1645
        let v1672 : string = Fable.Core.Rust.emitExpr v1671 v103
        let v1673 : uint8 = Fable.Core.Rust.emitExpr v1672 v1648
        let v1674 : string = method7()
        let v1675 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1674 v97
        let v1676 : unativeint = unativeint 2
        let v1677 : unativeint = unativeint 4
        let v1678 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1675, v1676, v1677) v1645
        let v1679 : string = Fable.Core.Rust.emitExpr v1678 v103
        let v1680 : uint8 = Fable.Core.Rust.emitExpr v1679 v1648
        let v1681 : string = method7()
        let v1682 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1681 v97
        let v1683 : unativeint = unativeint 4
        let v1684 : unativeint = unativeint 6
        let v1685 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1682, v1683, v1684) v1645
        let v1686 : string = Fable.Core.Rust.emitExpr v1685 v103
        let v1687 : uint8 = Fable.Core.Rust.emitExpr v1686 v1648
        let v1688 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1611, v1673, v1680, v1687) v1664
        let v1689 : Types.std.string.String = Fable.Core.Rust.emitExpr v1688 v86
        let v1690 : string = $"{v1640} {v1666} {v1689}"
        System.Console.WriteLine v1690
        ()
    let v1691 : string = "{"
    let v1692 : string = "\"ProjectFileOpen\": {"
    let v1693 : string = v1691 + v1692
    let v1694 : string = "\"uri\": $0,"
    let v1695 : string = v1693 + v1694
    let v1696 : string = "\"spiprojText\": $1"
    let v1697 : string = v1695 + v1696
    let v1698 : string = "}"
    let v1699 : string = v1697 + v1698
    let v1700 : string = v1699 + v1698
    let v1701 : string = "serde_json::json!("
    let v1702 : string = v1701 + v1700
    let v1703 : string = ").to_string()"
    let v1704 : string = v1702 + v1703
    let v1705 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v755, v1451) v1704
    let v1706 : string = "json len="
    let v1707 : Types.std.string.String = Fable.Core.Rust.emitExpr v1706 v11
    let v1708 : Types.EmitType<Types.std.string.String> = v1707 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1709 : int32 = Fable.Core.Rust.emitExpr v1705 v1466
    let v1710 : Types.std.string.String = Fable.Core.Rust.emitExpr v1709 v44
    let v1711 : Types.EmitType<Types.std.string.String> = v1710 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1712 : (Types.EmitType<Types.std.string.String> []) = [|v1708; v1711|]
    let v1713 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1712 v39
    let v1714 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1713 v41
    let v1715 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1714 v41
    let v1716 : Types.std.string.String = Fable.Core.Rust.emitExpr v1715 v44
    let v1717 : Types.EmitType<Types.std.string.String> = v1716 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1718 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v1719 : int64 = Fable.Core.Rust.emitExpr v1718 v8
    let v1720 : int64 = v1719 - v1457
    let v1721 : string = (v1720).ToString ()
    let v1722 : int32 = 6
    let v1723 : string = method1(v1722, v1721)
    let v1724 : uint8 = Fable.Core.Rust.emitExpr () v53
    let v1725 : Types.std.string.String = Fable.Core.Rust.emitExpr v55 v11
    let v1726 : Types.EmitType<Types.std.string.String> = v1725 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1727 : Types.std.string.String = Fable.Core.Rust.emitExpr v1723 v11
    let v1728 : Types.EmitType<Types.std.string.String> = v1727 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1729 : Types.std.string.String = Fable.Core.Rust.emitExpr v60 v11
    let v1730 : Types.EmitType<Types.std.string.String> = v1729 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1731 : Types.std.string.String = Fable.Core.Rust.emitExpr v1724 v44
    let v1732 : Types.EmitType<Types.std.string.String> = v1731 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1733 : Types.std.string.String = Fable.Core.Rust.emitExpr v65 v11
    let v1734 : Types.EmitType<Types.std.string.String> = v1733 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1735 : Types.std.string.String = Fable.Core.Rust.emitExpr v68 v11
    let v1736 : Types.EmitType<Types.std.string.String> = v1735 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1737 : (Types.EmitType<Types.std.string.String> []) = [|v1726; v1728; v1730; v1732; v1734; v1736|]
    let v1738 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1737 v39
    let v1739 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1738 v41
    let v1740 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1739 v41
    let v1741 : Types.std.string.String = Fable.Core.Rust.emitExpr v1740 v44
    let v1742 : Types.EmitType<Types.std.string.String> = v1741 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1743 : Types.std.string.String = Fable.Core.Rust.emitExpr v1501 v11
    let v1744 : Types.EmitType<Types.std.string.String> = v1743 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1745 : (Types.EmitType<Types.std.string.String> []) = [|v1744|]
    let v1746 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1745 v39
    let v1747 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1746 v41
    let v1748 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1747 v41
    let v1749 : Types.std.string.String = Fable.Core.Rust.emitExpr v1748 v44
    let v1750 : Types.EmitType<Types.std.string.String> = v1749 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1751 : Types.std.string.String = Fable.Core.Rust.emitExpr v1750 v86
    let v1752 : string = (v1751).ToString ()
    let v1753 : string = $"r#\"{v89}\"#"
    let v1754 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1753
    let v1755 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1754 v92
    let v1756 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1755 v94
    let v1757 : string = method2(v1752)
    let v1758 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1757 v97
    let v1759 : string = method3()
    let v1760 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1759 v97
    let v1761 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1756, v1758, v1760) v101
    let v1762 : string = Fable.Core.Rust.emitExpr v1761 v103
    let v1763 : string = $"r#\"{v105}\"#"
    let v1764 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1763
    let v1765 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1764 v92
    let v1766 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1765 v94
    let v1767 : string = method2(v1762)
    let v1768 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1767 v97
    let v1769 : string = method4()
    let v1770 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1769 v97
    let v1771 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1766, v1768, v1770) v101
    let v1772 : string = Fable.Core.Rust.emitExpr v1771 v103
    let v1773 : string = $"r#\"{v116}\"#"
    let v1774 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1773
    let v1775 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1774 v92
    let v1776 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1775 v94
    let v1777 : string = method2(v1772)
    let v1778 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1777 v97
    let v1779 : string = method5()
    let v1780 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1779 v97
    let v1781 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1776, v1778, v1780) v101
    let v1782 : string = Fable.Core.Rust.emitExpr v1781 v103
    let v1783 : Types.std.string.String = Fable.Core.Rust.emitExpr v1782 v11
    let v1784 : Types.EmitType<Types.std.string.String> = v1783 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1785 : Types.std.string.String = Fable.Core.Rust.emitExpr v1717 v86
    let v1786 : string = (v1785).ToString ()
    let v1787 : string = $"r#\"{v89}\"#"
    let v1788 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1787
    let v1789 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1788 v92
    let v1790 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1789 v94
    let v1791 : string = method2(v1786)
    let v1792 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1791 v97
    let v1793 : string = method3()
    let v1794 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1793 v97
    let v1795 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1790, v1792, v1794) v101
    let v1796 : string = Fable.Core.Rust.emitExpr v1795 v103
    let v1797 : string = $"r#\"{v105}\"#"
    let v1798 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1797
    let v1799 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1798 v92
    let v1800 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1799 v94
    let v1801 : string = method2(v1796)
    let v1802 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1801 v97
    let v1803 : string = method4()
    let v1804 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1803 v97
    let v1805 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1800, v1802, v1804) v101
    let v1806 : string = Fable.Core.Rust.emitExpr v1805 v103
    let v1807 : string = $"r#\"{v116}\"#"
    let v1808 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1807
    let v1809 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1808 v92
    let v1810 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1809 v94
    let v1811 : string = method2(v1806)
    let v1812 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1811 v97
    let v1813 : string = method5()
    let v1814 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1813 v97
    let v1815 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1810, v1812, v1814) v101
    let v1816 : string = Fable.Core.Rust.emitExpr v1815 v103
    let v1817 : Types.std.string.String = Fable.Core.Rust.emitExpr v1816 v11
    let v1818 : Types.EmitType<Types.std.string.String> = v1817 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1819 : Types.std.string.String = Fable.Core.Rust.emitExpr v1742 v86
    let v1820 : string = (v1819).ToString ()
    let v1821 : string = $"r#\"{v89}\"#"
    let v1822 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1821
    let v1823 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1822 v92
    let v1824 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1823 v94
    let v1825 : string = method2(v1820)
    let v1826 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1825 v97
    let v1827 : string = method3()
    let v1828 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1827 v97
    let v1829 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1824, v1826, v1828) v101
    let v1830 : string = Fable.Core.Rust.emitExpr v1829 v103
    let v1831 : string = $"r#\"{v105}\"#"
    let v1832 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1831
    let v1833 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1832 v92
    let v1834 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1833 v94
    let v1835 : string = method2(v1830)
    let v1836 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1835 v97
    let v1837 : string = method4()
    let v1838 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1837 v97
    let v1839 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1834, v1836, v1838) v101
    let v1840 : string = Fable.Core.Rust.emitExpr v1839 v103
    let v1841 : string = $"r#\"{v116}\"#"
    let v1842 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1841
    let v1843 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1842 v92
    let v1844 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1843 v94
    let v1845 : string = method2(v1840)
    let v1846 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1845 v97
    let v1847 : string = method5()
    let v1848 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1847 v97
    let v1849 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v1844, v1846, v1848) v101
    let v1850 : string = Fable.Core.Rust.emitExpr v1849 v103
    let v1851 : Types.std.string.String = Fable.Core.Rust.emitExpr v1850 v11
    let v1852 : Types.EmitType<Types.std.string.String> = v1851 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1853 : bool = Fable.Core.Rust.emitExpr () v197
    let v1856 : US0 =
        if v1853 then
            US0_1
        else
            US0_0
    match v1856 with
    | US0_1 -> (* Wasm32 *)
        let v1857 : string = "%c%s %c%s %c%s"
        let v1858 : Types.std.string.String = Fable.Core.Rust.emitExpr v1857 v1450
        let v1859 : string = "color: purple"
        let v1860 : Types.std.string.String = Fable.Core.Rust.emitExpr v1859 v1450
        let v1861 : string = $"{v1784}"
        let v1862 : Types.std.string.String = Fable.Core.Rust.emitExpr v1861 v1450
        let v1863 : string = "e36a62"
        let v1864 : string = $"color: {v1863}"
        let v1865 : Types.std.string.String = Fable.Core.Rust.emitExpr v1864 v1450
        let v1866 : string = $"{v1818} {v1852}"
        let v1867 : Types.std.string.String = Fable.Core.Rust.emitExpr v1866 v1450
        let v1868 : string = "color: #222222"
        let v1869 : Types.std.string.String = Fable.Core.Rust.emitExpr v1868 v1450
        let v1870 : string = $"{v1852}"
        let v1871 : Types.std.string.String = Fable.Core.Rust.emitExpr v1870 v1450
        let v1872 : (Types.std.string.String []) = [|v1858; v1860; v1862; v1865; v1867; v1869; v1871|]
        let v1873 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v1872 v39
        let v1874 : obj = v1873
        let v1875 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v1876 : obj = Fable.Core.Rust.emitExpr v1874 v1875
        let v1877 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v1876 v1877
        ()
    | _ ->
        let v1878 : string = "purple"
        let v1879 : string = "colored::Colorize::color(&*$0, $1.to_string())"
        let v1880 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1784, v1878) v1879
        let v1881 : Types.std.string.String = Fable.Core.Rust.emitExpr v1880 v86
        let v1882 : string = method8()
        let v1883 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1882 v97
        let v1884 : unativeint = unativeint 0
        let v1885 : unativeint = unativeint 2
        let v1886 : string = "&$0[$1..$2]"
        let v1887 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1883, v1884, v1885) v1886
        let v1888 : string = Fable.Core.Rust.emitExpr v1887 v103
        let v1889 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v1890 : uint8 = Fable.Core.Rust.emitExpr v1888 v1889
        let v1891 : string = method8()
        let v1892 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1891 v97
        let v1893 : unativeint = unativeint 2
        let v1894 : unativeint = unativeint 4
        let v1895 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1892, v1893, v1894) v1886
        let v1896 : string = Fable.Core.Rust.emitExpr v1895 v103
        let v1897 : uint8 = Fable.Core.Rust.emitExpr v1896 v1889
        let v1898 : string = method8()
        let v1899 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1898 v97
        let v1900 : unativeint = unativeint 4
        let v1901 : unativeint = unativeint 6
        let v1902 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1899, v1900, v1901) v1886
        let v1903 : string = Fable.Core.Rust.emitExpr v1902 v103
        let v1904 : uint8 = Fable.Core.Rust.emitExpr v1903 v1889
        let v1905 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v1906 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1818, v1890, v1897, v1904) v1905
        let v1907 : Types.std.string.String = Fable.Core.Rust.emitExpr v1906 v86
        let v1908 : string = method7()
        let v1909 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1908 v97
        let v1910 : unativeint = unativeint 0
        let v1911 : unativeint = unativeint 2
        let v1912 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1909, v1910, v1911) v1886
        let v1913 : string = Fable.Core.Rust.emitExpr v1912 v103
        let v1914 : uint8 = Fable.Core.Rust.emitExpr v1913 v1889
        let v1915 : string = method7()
        let v1916 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1915 v97
        let v1917 : unativeint = unativeint 2
        let v1918 : unativeint = unativeint 4
        let v1919 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1916, v1917, v1918) v1886
        let v1920 : string = Fable.Core.Rust.emitExpr v1919 v103
        let v1921 : uint8 = Fable.Core.Rust.emitExpr v1920 v1889
        let v1922 : string = method7()
        let v1923 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v1922 v97
        let v1924 : unativeint = unativeint 4
        let v1925 : unativeint = unativeint 6
        let v1926 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v1923, v1924, v1925) v1886
        let v1927 : string = Fable.Core.Rust.emitExpr v1926 v103
        let v1928 : uint8 = Fable.Core.Rust.emitExpr v1927 v1889
        let v1929 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v1852, v1914, v1921, v1928) v1905
        let v1930 : Types.std.string.String = Fable.Core.Rust.emitExpr v1929 v86
        let v1931 : string = $"{v1881} {v1907} {v1930}"
        System.Console.WriteLine v1931
        ()
    let struct (v1932 : string, v1933 : string, v1934 : string, v1935 : bool) = method0()
    let v1936 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v1937 : int64 = Fable.Core.Rust.emitExpr v1936 v8
    let v1938 : string = "host"
    let v1939 : Types.std.string.String = Fable.Core.Rust.emitExpr v1938 v11
    let v1940 : Types.EmitType<Types.std.string.String> = v1939 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1941 : string = "localhost"
    let v1942 : Types.std.string.String = Fable.Core.Rust.emitExpr v1941 v11
    let v1943 : Types.EmitType<Types.std.string.String> = v1942 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1944 : string = "port"
    let v1945 : Types.std.string.String = Fable.Core.Rust.emitExpr v1944 v11
    let v1946 : Types.EmitType<Types.std.string.String> = v1945 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1947 : Types.std.string.String = Fable.Core.Rust.emitExpr 13805 v44
    let v1948 : Types.EmitType<Types.std.string.String> = v1947 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1949 : string = "msg len"
    let v1950 : Types.std.string.String = Fable.Core.Rust.emitExpr v1949 v11
    let v1951 : Types.EmitType<Types.std.string.String> = v1950 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1952 : int32 = Fable.Core.Rust.emitExpr v1705 v1466
    let v1953 : Types.std.string.String = Fable.Core.Rust.emitExpr v1952 v44
    let v1954 : Types.EmitType<Types.std.string.String> = v1953 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1955 : (Types.EmitType<Types.std.string.String> []) = [|v1940; v1943; v1946; v1948; v1951; v1954|]
    let v1956 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1955 v39
    let v1957 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1956 v41
    let v1958 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1957 v41
    let v1959 : Types.std.string.String = Fable.Core.Rust.emitExpr v1958 v44
    let v1960 : Types.EmitType<Types.std.string.String> = v1959 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1961 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v1962 : int64 = Fable.Core.Rust.emitExpr v1961 v8
    let v1963 : int64 = v1962 - v1937
    let v1964 : string = (v1963).ToString ()
    let v1965 : int32 = 6
    let v1966 : string = method1(v1965, v1964)
    let v1967 : uint8 = Fable.Core.Rust.emitExpr () v53
    let v1968 : Types.std.string.String = Fable.Core.Rust.emitExpr v55 v11
    let v1969 : Types.EmitType<Types.std.string.String> = v1968 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1970 : Types.std.string.String = Fable.Core.Rust.emitExpr v1966 v11
    let v1971 : Types.EmitType<Types.std.string.String> = v1970 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1972 : Types.std.string.String = Fable.Core.Rust.emitExpr v60 v11
    let v1973 : Types.EmitType<Types.std.string.String> = v1972 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1974 : Types.std.string.String = Fable.Core.Rust.emitExpr v1967 v44
    let v1975 : Types.EmitType<Types.std.string.String> = v1974 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1976 : Types.std.string.String = Fable.Core.Rust.emitExpr v65 v11
    let v1977 : Types.EmitType<Types.std.string.String> = v1976 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1978 : Types.std.string.String = Fable.Core.Rust.emitExpr v68 v11
    let v1979 : Types.EmitType<Types.std.string.String> = v1978 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1980 : (Types.EmitType<Types.std.string.String> []) = [|v1969; v1971; v1973; v1975; v1977; v1979|]
    let v1981 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1980 v39
    let v1982 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1981 v41
    let v1983 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1982 v41
    let v1984 : Types.std.string.String = Fable.Core.Rust.emitExpr v1983 v44
    let v1985 : Types.EmitType<Types.std.string.String> = v1984 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1986 : string = "> zmq_request ()"
    let v1987 : Types.std.string.String = Fable.Core.Rust.emitExpr v1986 v11
    let v1988 : Types.EmitType<Types.std.string.String> = v1987 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1989 : (Types.EmitType<Types.std.string.String> []) = [|v1988|]
    let v1990 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1989 v39
    let v1991 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1990 v41
    let v1992 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1991 v41
    let v1993 : Types.std.string.String = Fable.Core.Rust.emitExpr v1992 v44
    let v1994 : Types.EmitType<Types.std.string.String> = v1993 |> unbox<Types.EmitType<Types.std.string.String>>
    let v1995 : Types.std.string.String = Fable.Core.Rust.emitExpr v1994 v86
    let v1996 : string = (v1995).ToString ()
    let v1997 : string = $"r#\"{v89}\"#"
    let v1998 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1997
    let v1999 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v1998 v92
    let v2000 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v1999 v94
    let v2001 : string = method2(v1996)
    let v2002 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2001 v97
    let v2003 : string = method3()
    let v2004 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2003 v97
    let v2005 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2000, v2002, v2004) v101
    let v2006 : string = Fable.Core.Rust.emitExpr v2005 v103
    let v2007 : string = $"r#\"{v105}\"#"
    let v2008 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2007
    let v2009 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2008 v92
    let v2010 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2009 v94
    let v2011 : string = method2(v2006)
    let v2012 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2011 v97
    let v2013 : string = method4()
    let v2014 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2013 v97
    let v2015 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2010, v2012, v2014) v101
    let v2016 : string = Fable.Core.Rust.emitExpr v2015 v103
    let v2017 : string = $"r#\"{v116}\"#"
    let v2018 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2017
    let v2019 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2018 v92
    let v2020 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2019 v94
    let v2021 : string = method2(v2016)
    let v2022 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2021 v97
    let v2023 : string = method5()
    let v2024 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2023 v97
    let v2025 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2020, v2022, v2024) v101
    let v2026 : string = Fable.Core.Rust.emitExpr v2025 v103
    let v2027 : Types.std.string.String = Fable.Core.Rust.emitExpr v2026 v11
    let v2028 : Types.EmitType<Types.std.string.String> = v2027 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2029 : Types.std.string.String = Fable.Core.Rust.emitExpr v1960 v86
    let v2030 : string = (v2029).ToString ()
    let v2031 : string = $"r#\"{v89}\"#"
    let v2032 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2031
    let v2033 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2032 v92
    let v2034 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2033 v94
    let v2035 : string = method2(v2030)
    let v2036 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2035 v97
    let v2037 : string = method3()
    let v2038 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2037 v97
    let v2039 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2034, v2036, v2038) v101
    let v2040 : string = Fable.Core.Rust.emitExpr v2039 v103
    let v2041 : string = $"r#\"{v105}\"#"
    let v2042 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2041
    let v2043 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2042 v92
    let v2044 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2043 v94
    let v2045 : string = method2(v2040)
    let v2046 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2045 v97
    let v2047 : string = method4()
    let v2048 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2047 v97
    let v2049 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2044, v2046, v2048) v101
    let v2050 : string = Fable.Core.Rust.emitExpr v2049 v103
    let v2051 : string = $"r#\"{v116}\"#"
    let v2052 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2051
    let v2053 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2052 v92
    let v2054 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2053 v94
    let v2055 : string = method2(v2050)
    let v2056 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2055 v97
    let v2057 : string = method5()
    let v2058 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2057 v97
    let v2059 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2054, v2056, v2058) v101
    let v2060 : string = Fable.Core.Rust.emitExpr v2059 v103
    let v2061 : Types.std.string.String = Fable.Core.Rust.emitExpr v2060 v11
    let v2062 : Types.EmitType<Types.std.string.String> = v2061 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2063 : Types.std.string.String = Fable.Core.Rust.emitExpr v1985 v86
    let v2064 : string = (v2063).ToString ()
    let v2065 : string = $"r#\"{v89}\"#"
    let v2066 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2065
    let v2067 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2066 v92
    let v2068 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2067 v94
    let v2069 : string = method2(v2064)
    let v2070 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2069 v97
    let v2071 : string = method3()
    let v2072 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2071 v97
    let v2073 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2068, v2070, v2072) v101
    let v2074 : string = Fable.Core.Rust.emitExpr v2073 v103
    let v2075 : string = $"r#\"{v105}\"#"
    let v2076 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2075
    let v2077 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2076 v92
    let v2078 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2077 v94
    let v2079 : string = method2(v2074)
    let v2080 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2079 v97
    let v2081 : string = method4()
    let v2082 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2081 v97
    let v2083 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2078, v2080, v2082) v101
    let v2084 : string = Fable.Core.Rust.emitExpr v2083 v103
    let v2085 : string = $"r#\"{v116}\"#"
    let v2086 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2085
    let v2087 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2086 v92
    let v2088 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2087 v94
    let v2089 : string = method2(v2084)
    let v2090 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2089 v97
    let v2091 : string = method5()
    let v2092 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2091 v97
    let v2093 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2088, v2090, v2092) v101
    let v2094 : string = Fable.Core.Rust.emitExpr v2093 v103
    let v2095 : Types.std.string.String = Fable.Core.Rust.emitExpr v2094 v11
    let v2096 : Types.EmitType<Types.std.string.String> = v2095 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2097 : bool = Fable.Core.Rust.emitExpr () v197
    let v2100 : US0 =
        if v2097 then
            US0_1
        else
            US0_0
    match v2100 with
    | US0_1 -> (* Wasm32 *)
        let v2101 : string = "%c%s %c%s %c%s"
        let v2102 : Types.std.string.String = Fable.Core.Rust.emitExpr v2101 v1450
        let v2103 : string = "color: purple"
        let v2104 : Types.std.string.String = Fable.Core.Rust.emitExpr v2103 v1450
        let v2105 : string = $"{v2028}"
        let v2106 : Types.std.string.String = Fable.Core.Rust.emitExpr v2105 v1450
        let v2107 : string = "fcfb1b"
        let v2108 : string = $"color: {v2107}"
        let v2109 : Types.std.string.String = Fable.Core.Rust.emitExpr v2108 v1450
        let v2110 : string = $"{v2062} {v2096}"
        let v2111 : Types.std.string.String = Fable.Core.Rust.emitExpr v2110 v1450
        let v2112 : string = "color: #222222"
        let v2113 : Types.std.string.String = Fable.Core.Rust.emitExpr v2112 v1450
        let v2114 : string = $"{v2096}"
        let v2115 : Types.std.string.String = Fable.Core.Rust.emitExpr v2114 v1450
        let v2116 : (Types.std.string.String []) = [|v2102; v2104; v2106; v2109; v2111; v2113; v2115|]
        let v2117 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v2116 v39
        let v2118 : obj = v2117
        let v2119 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v2120 : obj = Fable.Core.Rust.emitExpr v2118 v2119
        let v2121 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v2120 v2121
        ()
    | _ ->
        let v2122 : string = "purple"
        let v2123 : string = "colored::Colorize::color(&*$0, $1.to_string())"
        let v2124 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2028, v2122) v2123
        let v2125 : Types.std.string.String = Fable.Core.Rust.emitExpr v2124 v86
        let v2126 : string = method9()
        let v2127 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2126 v97
        let v2128 : unativeint = unativeint 0
        let v2129 : unativeint = unativeint 2
        let v2130 : string = "&$0[$1..$2]"
        let v2131 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2127, v2128, v2129) v2130
        let v2132 : string = Fable.Core.Rust.emitExpr v2131 v103
        let v2133 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v2134 : uint8 = Fable.Core.Rust.emitExpr v2132 v2133
        let v2135 : string = method9()
        let v2136 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2135 v97
        let v2137 : unativeint = unativeint 2
        let v2138 : unativeint = unativeint 4
        let v2139 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2136, v2137, v2138) v2130
        let v2140 : string = Fable.Core.Rust.emitExpr v2139 v103
        let v2141 : uint8 = Fable.Core.Rust.emitExpr v2140 v2133
        let v2142 : string = method9()
        let v2143 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2142 v97
        let v2144 : unativeint = unativeint 4
        let v2145 : unativeint = unativeint 6
        let v2146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2143, v2144, v2145) v2130
        let v2147 : string = Fable.Core.Rust.emitExpr v2146 v103
        let v2148 : uint8 = Fable.Core.Rust.emitExpr v2147 v2133
        let v2149 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v2150 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2062, v2134, v2141, v2148) v2149
        let v2151 : Types.std.string.String = Fable.Core.Rust.emitExpr v2150 v86
        let v2152 : string = method7()
        let v2153 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2152 v97
        let v2154 : unativeint = unativeint 0
        let v2155 : unativeint = unativeint 2
        let v2156 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2153, v2154, v2155) v2130
        let v2157 : string = Fable.Core.Rust.emitExpr v2156 v103
        let v2158 : uint8 = Fable.Core.Rust.emitExpr v2157 v2133
        let v2159 : string = method7()
        let v2160 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2159 v97
        let v2161 : unativeint = unativeint 2
        let v2162 : unativeint = unativeint 4
        let v2163 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2160, v2161, v2162) v2130
        let v2164 : string = Fable.Core.Rust.emitExpr v2163 v103
        let v2165 : uint8 = Fable.Core.Rust.emitExpr v2164 v2133
        let v2166 : string = method7()
        let v2167 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2166 v97
        let v2168 : unativeint = unativeint 4
        let v2169 : unativeint = unativeint 6
        let v2170 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2167, v2168, v2169) v2130
        let v2171 : string = Fable.Core.Rust.emitExpr v2170 v103
        let v2172 : uint8 = Fable.Core.Rust.emitExpr v2171 v2133
        let v2173 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2096, v2158, v2165, v2172) v2149
        let v2174 : Types.std.string.String = Fable.Core.Rust.emitExpr v2173 v86
        let v2175 : string = $"{v2125} {v2151} {v2174}"
        System.Console.WriteLine v2175
        ()
    let v2176 : string = "zmq::Context::new()"
    let v2177 : obj = Fable.Core.Rust.emitExpr () v2176
    let v2178 : string = "$0.socket(zmq::REQ).unwrap()"
    let v2179 : obj = Fable.Core.Rust.emitExpr v2177 v2178
    let v2180 : string = $"tcp://{v1941}:{13805}"
    let v2181 : string = "$0.connect(&$1).unwrap()"
    Fable.Core.Rust.emitExpr struct (v2179, v2180) v2181
    let v2182 : string = $"$0.send($1.as_str(), 0).unwrap()"
    Fable.Core.Rust.emitExpr struct (v2179, v1705) v2182
    let v2183 : string = "$0.recv_string(0).unwrap().unwrap()"
    let v2184 : Types.std.string.String = Fable.Core.Rust.emitExpr v2179 v2183
    let v2185 : string = "$0.disconnect(&$1).unwrap()"
    Fable.Core.Rust.emitExpr struct (v2179, v2180) v2185
    let v2186 : string = "result len"
    let v2187 : Types.std.string.String = Fable.Core.Rust.emitExpr v2186 v11
    let v2188 : Types.EmitType<Types.std.string.String> = v2187 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2189 : int32 = Fable.Core.Rust.emitExpr v2184 v1466
    let v2190 : Types.std.string.String = Fable.Core.Rust.emitExpr v2189 v44
    let v2191 : Types.EmitType<Types.std.string.String> = v2190 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2192 : (Types.EmitType<Types.std.string.String> []) = [|v2188; v2191|]
    let v2193 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2192 v39
    let v2194 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2193 v41
    let v2195 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2194 v41
    let v2196 : Types.std.string.String = Fable.Core.Rust.emitExpr v2195 v44
    let v2197 : Types.EmitType<Types.std.string.String> = v2196 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2198 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v2199 : int64 = Fable.Core.Rust.emitExpr v2198 v8
    let v2200 : int64 = v2199 - v1937
    let v2201 : string = (v2200).ToString ()
    let v2202 : int32 = 6
    let v2203 : string = method1(v2202, v2201)
    let v2204 : uint8 = Fable.Core.Rust.emitExpr () v53
    let v2205 : Types.std.string.String = Fable.Core.Rust.emitExpr v55 v11
    let v2206 : Types.EmitType<Types.std.string.String> = v2205 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2207 : Types.std.string.String = Fable.Core.Rust.emitExpr v2203 v11
    let v2208 : Types.EmitType<Types.std.string.String> = v2207 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2209 : Types.std.string.String = Fable.Core.Rust.emitExpr v60 v11
    let v2210 : Types.EmitType<Types.std.string.String> = v2209 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2211 : Types.std.string.String = Fable.Core.Rust.emitExpr v2204 v44
    let v2212 : Types.EmitType<Types.std.string.String> = v2211 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2213 : Types.std.string.String = Fable.Core.Rust.emitExpr v65 v11
    let v2214 : Types.EmitType<Types.std.string.String> = v2213 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2215 : Types.std.string.String = Fable.Core.Rust.emitExpr v68 v11
    let v2216 : Types.EmitType<Types.std.string.String> = v2215 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2217 : (Types.EmitType<Types.std.string.String> []) = [|v2206; v2208; v2210; v2212; v2214; v2216|]
    let v2218 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2217 v39
    let v2219 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2218 v41
    let v2220 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2219 v41
    let v2221 : Types.std.string.String = Fable.Core.Rust.emitExpr v2220 v44
    let v2222 : Types.EmitType<Types.std.string.String> = v2221 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2223 : Types.std.string.String = Fable.Core.Rust.emitExpr v1986 v11
    let v2224 : Types.EmitType<Types.std.string.String> = v2223 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2225 : (Types.EmitType<Types.std.string.String> []) = [|v2224|]
    let v2226 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2225 v39
    let v2227 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2226 v41
    let v2228 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2227 v41
    let v2229 : Types.std.string.String = Fable.Core.Rust.emitExpr v2228 v44
    let v2230 : Types.EmitType<Types.std.string.String> = v2229 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2231 : Types.std.string.String = Fable.Core.Rust.emitExpr v2230 v86
    let v2232 : string = (v2231).ToString ()
    let v2233 : string = $"r#\"{v89}\"#"
    let v2234 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2233
    let v2235 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2234 v92
    let v2236 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2235 v94
    let v2237 : string = method2(v2232)
    let v2238 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2237 v97
    let v2239 : string = method3()
    let v2240 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2239 v97
    let v2241 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2236, v2238, v2240) v101
    let v2242 : string = Fable.Core.Rust.emitExpr v2241 v103
    let v2243 : string = $"r#\"{v105}\"#"
    let v2244 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2243
    let v2245 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2244 v92
    let v2246 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2245 v94
    let v2247 : string = method2(v2242)
    let v2248 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2247 v97
    let v2249 : string = method4()
    let v2250 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2249 v97
    let v2251 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2246, v2248, v2250) v101
    let v2252 : string = Fable.Core.Rust.emitExpr v2251 v103
    let v2253 : string = $"r#\"{v116}\"#"
    let v2254 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2253
    let v2255 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2254 v92
    let v2256 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2255 v94
    let v2257 : string = method2(v2252)
    let v2258 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2257 v97
    let v2259 : string = method5()
    let v2260 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2259 v97
    let v2261 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2256, v2258, v2260) v101
    let v2262 : string = Fable.Core.Rust.emitExpr v2261 v103
    let v2263 : Types.std.string.String = Fable.Core.Rust.emitExpr v2262 v11
    let v2264 : Types.EmitType<Types.std.string.String> = v2263 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2265 : Types.std.string.String = Fable.Core.Rust.emitExpr v2197 v86
    let v2266 : string = (v2265).ToString ()
    let v2267 : string = $"r#\"{v89}\"#"
    let v2268 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2267
    let v2269 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2268 v92
    let v2270 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2269 v94
    let v2271 : string = method2(v2266)
    let v2272 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2271 v97
    let v2273 : string = method3()
    let v2274 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2273 v97
    let v2275 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2270, v2272, v2274) v101
    let v2276 : string = Fable.Core.Rust.emitExpr v2275 v103
    let v2277 : string = $"r#\"{v105}\"#"
    let v2278 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2277
    let v2279 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2278 v92
    let v2280 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2279 v94
    let v2281 : string = method2(v2276)
    let v2282 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2281 v97
    let v2283 : string = method4()
    let v2284 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2283 v97
    let v2285 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2280, v2282, v2284) v101
    let v2286 : string = Fable.Core.Rust.emitExpr v2285 v103
    let v2287 : string = $"r#\"{v116}\"#"
    let v2288 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2287
    let v2289 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2288 v92
    let v2290 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2289 v94
    let v2291 : string = method2(v2286)
    let v2292 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2291 v97
    let v2293 : string = method5()
    let v2294 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2293 v97
    let v2295 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2290, v2292, v2294) v101
    let v2296 : string = Fable.Core.Rust.emitExpr v2295 v103
    let v2297 : Types.std.string.String = Fable.Core.Rust.emitExpr v2296 v11
    let v2298 : Types.EmitType<Types.std.string.String> = v2297 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2299 : Types.std.string.String = Fable.Core.Rust.emitExpr v2222 v86
    let v2300 : string = (v2299).ToString ()
    let v2301 : string = $"r#\"{v89}\"#"
    let v2302 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2301
    let v2303 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2302 v92
    let v2304 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2303 v94
    let v2305 : string = method2(v2300)
    let v2306 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2305 v97
    let v2307 : string = method3()
    let v2308 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2307 v97
    let v2309 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2304, v2306, v2308) v101
    let v2310 : string = Fable.Core.Rust.emitExpr v2309 v103
    let v2311 : string = $"r#\"{v105}\"#"
    let v2312 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2311
    let v2313 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2312 v92
    let v2314 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2313 v94
    let v2315 : string = method2(v2310)
    let v2316 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2315 v97
    let v2317 : string = method4()
    let v2318 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2317 v97
    let v2319 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2314, v2316, v2318) v101
    let v2320 : string = Fable.Core.Rust.emitExpr v2319 v103
    let v2321 : string = $"r#\"{v116}\"#"
    let v2322 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2321
    let v2323 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2322 v92
    let v2324 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2323 v94
    let v2325 : string = method2(v2320)
    let v2326 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2325 v97
    let v2327 : string = method5()
    let v2328 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2327 v97
    let v2329 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2324, v2326, v2328) v101
    let v2330 : string = Fable.Core.Rust.emitExpr v2329 v103
    let v2331 : Types.std.string.String = Fable.Core.Rust.emitExpr v2330 v11
    let v2332 : Types.EmitType<Types.std.string.String> = v2331 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2333 : bool = Fable.Core.Rust.emitExpr () v197
    let v2336 : US0 =
        if v2333 then
            US0_1
        else
            US0_0
    match v2336 with
    | US0_1 -> (* Wasm32 *)
        let v2337 : string = "%c%s %c%s %c%s"
        let v2338 : Types.std.string.String = Fable.Core.Rust.emitExpr v2337 v1450
        let v2339 : string = "color: purple"
        let v2340 : Types.std.string.String = Fable.Core.Rust.emitExpr v2339 v1450
        let v2341 : string = $"{v2264}"
        let v2342 : Types.std.string.String = Fable.Core.Rust.emitExpr v2341 v1450
        let v2343 : string = "fcfb1b"
        let v2344 : string = $"color: {v2343}"
        let v2345 : Types.std.string.String = Fable.Core.Rust.emitExpr v2344 v1450
        let v2346 : string = $"{v2298} {v2332}"
        let v2347 : Types.std.string.String = Fable.Core.Rust.emitExpr v2346 v1450
        let v2348 : string = "color: #222222"
        let v2349 : Types.std.string.String = Fable.Core.Rust.emitExpr v2348 v1450
        let v2350 : string = $"{v2332}"
        let v2351 : Types.std.string.String = Fable.Core.Rust.emitExpr v2350 v1450
        let v2352 : (Types.std.string.String []) = [|v2338; v2340; v2342; v2345; v2347; v2349; v2351|]
        let v2353 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v2352 v39
        let v2354 : obj = v2353
        let v2355 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v2356 : obj = Fable.Core.Rust.emitExpr v2354 v2355
        let v2357 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v2356 v2357
        ()
    | _ ->
        let v2358 : string = "purple"
        let v2359 : string = "colored::Colorize::color(&*$0, $1.to_string())"
        let v2360 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2264, v2358) v2359
        let v2361 : Types.std.string.String = Fable.Core.Rust.emitExpr v2360 v86
        let v2362 : string = method9()
        let v2363 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2362 v97
        let v2364 : unativeint = unativeint 0
        let v2365 : unativeint = unativeint 2
        let v2366 : string = "&$0[$1..$2]"
        let v2367 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2363, v2364, v2365) v2366
        let v2368 : string = Fable.Core.Rust.emitExpr v2367 v103
        let v2369 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v2370 : uint8 = Fable.Core.Rust.emitExpr v2368 v2369
        let v2371 : string = method9()
        let v2372 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2371 v97
        let v2373 : unativeint = unativeint 2
        let v2374 : unativeint = unativeint 4
        let v2375 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2372, v2373, v2374) v2366
        let v2376 : string = Fable.Core.Rust.emitExpr v2375 v103
        let v2377 : uint8 = Fable.Core.Rust.emitExpr v2376 v2369
        let v2378 : string = method9()
        let v2379 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2378 v97
        let v2380 : unativeint = unativeint 4
        let v2381 : unativeint = unativeint 6
        let v2382 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2379, v2380, v2381) v2366
        let v2383 : string = Fable.Core.Rust.emitExpr v2382 v103
        let v2384 : uint8 = Fable.Core.Rust.emitExpr v2383 v2369
        let v2385 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v2386 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2298, v2370, v2377, v2384) v2385
        let v2387 : Types.std.string.String = Fable.Core.Rust.emitExpr v2386 v86
        let v2388 : string = method7()
        let v2389 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2388 v97
        let v2390 : unativeint = unativeint 0
        let v2391 : unativeint = unativeint 2
        let v2392 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2389, v2390, v2391) v2366
        let v2393 : string = Fable.Core.Rust.emitExpr v2392 v103
        let v2394 : uint8 = Fable.Core.Rust.emitExpr v2393 v2369
        let v2395 : string = method7()
        let v2396 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2395 v97
        let v2397 : unativeint = unativeint 2
        let v2398 : unativeint = unativeint 4
        let v2399 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2396, v2397, v2398) v2366
        let v2400 : string = Fable.Core.Rust.emitExpr v2399 v103
        let v2401 : uint8 = Fable.Core.Rust.emitExpr v2400 v2369
        let v2402 : string = method7()
        let v2403 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2402 v97
        let v2404 : unativeint = unativeint 4
        let v2405 : unativeint = unativeint 6
        let v2406 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2403, v2404, v2405) v2366
        let v2407 : string = Fable.Core.Rust.emitExpr v2406 v103
        let v2408 : uint8 = Fable.Core.Rust.emitExpr v2407 v2369
        let v2409 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2332, v2394, v2401, v2408) v2385
        let v2410 : Types.std.string.String = Fable.Core.Rust.emitExpr v2409 v86
        let v2411 : string = $"{v2361} {v2387} {v2410}"
        System.Console.WriteLine v2411
        ()
    let v2412 : string = "> spiproj_open; ok"
    let v2413 : Types.std.string.String = Fable.Core.Rust.emitExpr v2412 v11
    let v2414 : Types.EmitType<Types.std.string.String> = v2413 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2415 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v2416 : int64 = Fable.Core.Rust.emitExpr v2415 v8
    let v2417 : int64 = v2416 - v9
    let v2418 : string = (v2417).ToString ()
    let v2419 : int32 = 6
    let v2420 : string = method1(v2419, v2418)
    let v2421 : uint8 = Fable.Core.Rust.emitExpr () v53
    let v2422 : Types.std.string.String = Fable.Core.Rust.emitExpr v55 v11
    let v2423 : Types.EmitType<Types.std.string.String> = v2422 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2424 : Types.std.string.String = Fable.Core.Rust.emitExpr v2420 v11
    let v2425 : Types.EmitType<Types.std.string.String> = v2424 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2426 : Types.std.string.String = Fable.Core.Rust.emitExpr v60 v11
    let v2427 : Types.EmitType<Types.std.string.String> = v2426 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2428 : Types.std.string.String = Fable.Core.Rust.emitExpr v2421 v44
    let v2429 : Types.EmitType<Types.std.string.String> = v2428 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2430 : Types.std.string.String = Fable.Core.Rust.emitExpr v65 v11
    let v2431 : Types.EmitType<Types.std.string.String> = v2430 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2432 : Types.std.string.String = Fable.Core.Rust.emitExpr v68 v11
    let v2433 : Types.EmitType<Types.std.string.String> = v2432 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2434 : (Types.EmitType<Types.std.string.String> []) = [|v2423; v2425; v2427; v2429; v2431; v2433|]
    let v2435 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2434 v39
    let v2436 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2435 v41
    let v2437 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2436 v41
    let v2438 : Types.std.string.String = Fable.Core.Rust.emitExpr v2437 v44
    let v2439 : Types.EmitType<Types.std.string.String> = v2438 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2440 : Types.std.string.String = Fable.Core.Rust.emitExpr v77 v11
    let v2441 : Types.EmitType<Types.std.string.String> = v2440 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2442 : (Types.EmitType<Types.std.string.String> []) = [|v2441|]
    let v2443 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2442 v39
    let v2444 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2443 v41
    let v2445 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2444 v41
    let v2446 : Types.std.string.String = Fable.Core.Rust.emitExpr v2445 v44
    let v2447 : Types.EmitType<Types.std.string.String> = v2446 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2448 : Types.std.string.String = Fable.Core.Rust.emitExpr v2447 v86
    let v2449 : string = (v2448).ToString ()
    let v2450 : string = $"r#\"{v89}\"#"
    let v2451 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2450
    let v2452 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2451 v92
    let v2453 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2452 v94
    let v2454 : string = method2(v2449)
    let v2455 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2454 v97
    let v2456 : string = method3()
    let v2457 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2456 v97
    let v2458 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2453, v2455, v2457) v101
    let v2459 : string = Fable.Core.Rust.emitExpr v2458 v103
    let v2460 : string = $"r#\"{v105}\"#"
    let v2461 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2460
    let v2462 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2461 v92
    let v2463 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2462 v94
    let v2464 : string = method2(v2459)
    let v2465 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2464 v97
    let v2466 : string = method4()
    let v2467 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2466 v97
    let v2468 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2463, v2465, v2467) v101
    let v2469 : string = Fable.Core.Rust.emitExpr v2468 v103
    let v2470 : string = $"r#\"{v116}\"#"
    let v2471 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2470
    let v2472 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2471 v92
    let v2473 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2472 v94
    let v2474 : string = method2(v2469)
    let v2475 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2474 v97
    let v2476 : string = method5()
    let v2477 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2476 v97
    let v2478 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2473, v2475, v2477) v101
    let v2479 : string = Fable.Core.Rust.emitExpr v2478 v103
    let v2480 : Types.std.string.String = Fable.Core.Rust.emitExpr v2479 v11
    let v2481 : Types.EmitType<Types.std.string.String> = v2480 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2482 : Types.std.string.String = Fable.Core.Rust.emitExpr v2414 v86
    let v2483 : string = (v2482).ToString ()
    let v2484 : string = $"r#\"{v89}\"#"
    let v2485 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2484
    let v2486 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2485 v92
    let v2487 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2486 v94
    let v2488 : string = method2(v2483)
    let v2489 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2488 v97
    let v2490 : string = method3()
    let v2491 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2490 v97
    let v2492 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2487, v2489, v2491) v101
    let v2493 : string = Fable.Core.Rust.emitExpr v2492 v103
    let v2494 : string = $"r#\"{v105}\"#"
    let v2495 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2494
    let v2496 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2495 v92
    let v2497 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2496 v94
    let v2498 : string = method2(v2493)
    let v2499 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2498 v97
    let v2500 : string = method4()
    let v2501 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2500 v97
    let v2502 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2497, v2499, v2501) v101
    let v2503 : string = Fable.Core.Rust.emitExpr v2502 v103
    let v2504 : string = $"r#\"{v116}\"#"
    let v2505 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2504
    let v2506 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2505 v92
    let v2507 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2506 v94
    let v2508 : string = method2(v2503)
    let v2509 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2508 v97
    let v2510 : string = method5()
    let v2511 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2510 v97
    let v2512 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2507, v2509, v2511) v101
    let v2513 : string = Fable.Core.Rust.emitExpr v2512 v103
    let v2514 : Types.std.string.String = Fable.Core.Rust.emitExpr v2513 v11
    let v2515 : Types.EmitType<Types.std.string.String> = v2514 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2516 : Types.std.string.String = Fable.Core.Rust.emitExpr v2439 v86
    let v2517 : string = (v2516).ToString ()
    let v2518 : string = $"r#\"{v89}\"#"
    let v2519 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2518
    let v2520 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2519 v92
    let v2521 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2520 v94
    let v2522 : string = method2(v2517)
    let v2523 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2522 v97
    let v2524 : string = method3()
    let v2525 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2524 v97
    let v2526 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2521, v2523, v2525) v101
    let v2527 : string = Fable.Core.Rust.emitExpr v2526 v103
    let v2528 : string = $"r#\"{v105}\"#"
    let v2529 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2528
    let v2530 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2529 v92
    let v2531 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2530 v94
    let v2532 : string = method2(v2527)
    let v2533 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2532 v97
    let v2534 : string = method4()
    let v2535 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2534 v97
    let v2536 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2531, v2533, v2535) v101
    let v2537 : string = Fable.Core.Rust.emitExpr v2536 v103
    let v2538 : string = $"r#\"{v116}\"#"
    let v2539 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2538
    let v2540 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2539 v92
    let v2541 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2540 v94
    let v2542 : string = method2(v2537)
    let v2543 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2542 v97
    let v2544 : string = method5()
    let v2545 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2544 v97
    let v2546 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2541, v2543, v2545) v101
    let v2547 : string = Fable.Core.Rust.emitExpr v2546 v103
    let v2548 : Types.std.string.String = Fable.Core.Rust.emitExpr v2547 v11
    let v2549 : Types.EmitType<Types.std.string.String> = v2548 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2550 : bool = Fable.Core.Rust.emitExpr () v197
    let v2553 : US0 =
        if v2550 then
            US0_1
        else
            US0_0
    match v2553 with
    | US0_1 -> (* Wasm32 *)
        let v2554 : string = "%c%s %c%s %c%s"
        let v2555 : Types.std.string.String = Fable.Core.Rust.emitExpr v2554 v1450
        let v2556 : string = "color: purple"
        let v2557 : Types.std.string.String = Fable.Core.Rust.emitExpr v2556 v1450
        let v2558 : string = $"{v2481}"
        let v2559 : Types.std.string.String = Fable.Core.Rust.emitExpr v2558 v1450
        let v2560 : string = "de884c"
        let v2561 : string = $"color: {v2560}"
        let v2562 : Types.std.string.String = Fable.Core.Rust.emitExpr v2561 v1450
        let v2563 : string = $"{v2515} {v2549}"
        let v2564 : Types.std.string.String = Fable.Core.Rust.emitExpr v2563 v1450
        let v2565 : string = "color: #222222"
        let v2566 : Types.std.string.String = Fable.Core.Rust.emitExpr v2565 v1450
        let v2567 : string = $"{v2549}"
        let v2568 : Types.std.string.String = Fable.Core.Rust.emitExpr v2567 v1450
        let v2569 : (Types.std.string.String []) = [|v2555; v2557; v2559; v2562; v2564; v2566; v2568|]
        let v2570 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v2569 v39
        let v2571 : obj = v2570
        let v2572 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v2573 : obj = Fable.Core.Rust.emitExpr v2571 v2572
        let v2574 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v2573 v2574
        ()
    | _ ->
        let v2575 : string = "purple"
        let v2576 : string = "colored::Colorize::color(&*$0, $1.to_string())"
        let v2577 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2481, v2575) v2576
        let v2578 : Types.std.string.String = Fable.Core.Rust.emitExpr v2577 v86
        let v2579 : string = method6()
        let v2580 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2579 v97
        let v2581 : unativeint = unativeint 0
        let v2582 : unativeint = unativeint 2
        let v2583 : string = "&$0[$1..$2]"
        let v2584 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2580, v2581, v2582) v2583
        let v2585 : string = Fable.Core.Rust.emitExpr v2584 v103
        let v2586 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v2587 : uint8 = Fable.Core.Rust.emitExpr v2585 v2586
        let v2588 : string = method6()
        let v2589 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2588 v97
        let v2590 : unativeint = unativeint 2
        let v2591 : unativeint = unativeint 4
        let v2592 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2589, v2590, v2591) v2583
        let v2593 : string = Fable.Core.Rust.emitExpr v2592 v103
        let v2594 : uint8 = Fable.Core.Rust.emitExpr v2593 v2586
        let v2595 : string = method6()
        let v2596 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2595 v97
        let v2597 : unativeint = unativeint 4
        let v2598 : unativeint = unativeint 6
        let v2599 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2596, v2597, v2598) v2583
        let v2600 : string = Fable.Core.Rust.emitExpr v2599 v103
        let v2601 : uint8 = Fable.Core.Rust.emitExpr v2600 v2586
        let v2602 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v2603 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2515, v2587, v2594, v2601) v2602
        let v2604 : Types.std.string.String = Fable.Core.Rust.emitExpr v2603 v86
        let v2605 : string = method7()
        let v2606 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2605 v97
        let v2607 : unativeint = unativeint 0
        let v2608 : unativeint = unativeint 2
        let v2609 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2606, v2607, v2608) v2583
        let v2610 : string = Fable.Core.Rust.emitExpr v2609 v103
        let v2611 : uint8 = Fable.Core.Rust.emitExpr v2610 v2586
        let v2612 : string = method7()
        let v2613 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2612 v97
        let v2614 : unativeint = unativeint 2
        let v2615 : unativeint = unativeint 4
        let v2616 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2613, v2614, v2615) v2583
        let v2617 : string = Fable.Core.Rust.emitExpr v2616 v103
        let v2618 : uint8 = Fable.Core.Rust.emitExpr v2617 v2586
        let v2619 : string = method7()
        let v2620 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2619 v97
        let v2621 : unativeint = unativeint 4
        let v2622 : unativeint = unativeint 6
        let v2623 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2620, v2621, v2622) v2583
        let v2624 : string = Fable.Core.Rust.emitExpr v2623 v103
        let v2625 : uint8 = Fable.Core.Rust.emitExpr v2624 v2586
        let v2626 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2549, v2611, v2618, v2625) v2602
        let v2627 : Types.std.string.String = Fable.Core.Rust.emitExpr v2626 v86
        let v2628 : string = $"{v2578} {v2604} {v2627}"
        System.Console.WriteLine v2628
        ()
    let struct (v2629 : string, v2630 : string, v2631 : string, v2632 : bool) = method0()
    let v2633 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v2634 : int64 = Fable.Core.Rust.emitExpr v2633 v8
    let v2635 : Types.std.string.String = Fable.Core.Rust.emitExpr v25 v11
    let v2636 : Types.EmitType<Types.std.string.String> = v2635 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2637 : string = Fable.Core.Rust.emitExpr v279 v21
    let v2638 : Types.std.string.String = Fable.Core.Rust.emitExpr v2637 v11
    let v2639 : Types.EmitType<Types.std.string.String> = v2638 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2640 : string = "backend"
    let v2641 : Types.std.string.String = Fable.Core.Rust.emitExpr v2640 v11
    let v2642 : Types.EmitType<Types.std.string.String> = v2641 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2643 : string = "Fsharp"
    let v2644 : Types.std.string.String = Fable.Core.Rust.emitExpr v2643 v11
    let v2645 : Types.EmitType<Types.std.string.String> = v2644 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2646 : (Types.EmitType<Types.std.string.String> []) = [|v2636; v2639; v2642; v2645|]
    let v2647 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2646 v39
    let v2648 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2647 v41
    let v2649 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2648 v41
    let v2650 : Types.std.string.String = Fable.Core.Rust.emitExpr v2649 v44
    let v2651 : Types.EmitType<Types.std.string.String> = v2650 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2652 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v2653 : int64 = Fable.Core.Rust.emitExpr v2652 v8
    let v2654 : int64 = v2653 - v2634
    let v2655 : string = (v2654).ToString ()
    let v2656 : int32 = 6
    let v2657 : string = method1(v2656, v2655)
    let v2658 : uint8 = Fable.Core.Rust.emitExpr () v53
    let v2659 : Types.std.string.String = Fable.Core.Rust.emitExpr v55 v11
    let v2660 : Types.EmitType<Types.std.string.String> = v2659 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2661 : Types.std.string.String = Fable.Core.Rust.emitExpr v2657 v11
    let v2662 : Types.EmitType<Types.std.string.String> = v2661 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2663 : Types.std.string.String = Fable.Core.Rust.emitExpr v60 v11
    let v2664 : Types.EmitType<Types.std.string.String> = v2663 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2665 : Types.std.string.String = Fable.Core.Rust.emitExpr v2658 v44
    let v2666 : Types.EmitType<Types.std.string.String> = v2665 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2667 : Types.std.string.String = Fable.Core.Rust.emitExpr v65 v11
    let v2668 : Types.EmitType<Types.std.string.String> = v2667 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2669 : Types.std.string.String = Fable.Core.Rust.emitExpr v68 v11
    let v2670 : Types.EmitType<Types.std.string.String> = v2669 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2671 : (Types.EmitType<Types.std.string.String> []) = [|v2660; v2662; v2664; v2666; v2668; v2670|]
    let v2672 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2671 v39
    let v2673 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2672 v41
    let v2674 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2673 v41
    let v2675 : Types.std.string.String = Fable.Core.Rust.emitExpr v2674 v44
    let v2676 : Types.EmitType<Types.std.string.String> = v2675 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2677 : string = "> spi_build_file ()"
    let v2678 : Types.std.string.String = Fable.Core.Rust.emitExpr v2677 v11
    let v2679 : Types.EmitType<Types.std.string.String> = v2678 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2680 : (Types.EmitType<Types.std.string.String> []) = [|v2679|]
    let v2681 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2680 v39
    let v2682 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2681 v41
    let v2683 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2682 v41
    let v2684 : Types.std.string.String = Fable.Core.Rust.emitExpr v2683 v44
    let v2685 : Types.EmitType<Types.std.string.String> = v2684 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2686 : Types.std.string.String = Fable.Core.Rust.emitExpr v2685 v86
    let v2687 : string = (v2686).ToString ()
    let v2688 : string = $"r#\"{v89}\"#"
    let v2689 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2688
    let v2690 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2689 v92
    let v2691 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2690 v94
    let v2692 : string = method2(v2687)
    let v2693 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2692 v97
    let v2694 : string = method3()
    let v2695 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2694 v97
    let v2696 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2691, v2693, v2695) v101
    let v2697 : string = Fable.Core.Rust.emitExpr v2696 v103
    let v2698 : string = $"r#\"{v105}\"#"
    let v2699 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2698
    let v2700 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2699 v92
    let v2701 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2700 v94
    let v2702 : string = method2(v2697)
    let v2703 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2702 v97
    let v2704 : string = method4()
    let v2705 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2704 v97
    let v2706 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2701, v2703, v2705) v101
    let v2707 : string = Fable.Core.Rust.emitExpr v2706 v103
    let v2708 : string = $"r#\"{v116}\"#"
    let v2709 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2708
    let v2710 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2709 v92
    let v2711 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2710 v94
    let v2712 : string = method2(v2707)
    let v2713 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2712 v97
    let v2714 : string = method5()
    let v2715 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2714 v97
    let v2716 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2711, v2713, v2715) v101
    let v2717 : string = Fable.Core.Rust.emitExpr v2716 v103
    let v2718 : Types.std.string.String = Fable.Core.Rust.emitExpr v2717 v11
    let v2719 : Types.EmitType<Types.std.string.String> = v2718 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2720 : Types.std.string.String = Fable.Core.Rust.emitExpr v2651 v86
    let v2721 : string = (v2720).ToString ()
    let v2722 : string = $"r#\"{v89}\"#"
    let v2723 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2722
    let v2724 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2723 v92
    let v2725 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2724 v94
    let v2726 : string = method2(v2721)
    let v2727 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2726 v97
    let v2728 : string = method3()
    let v2729 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2728 v97
    let v2730 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2725, v2727, v2729) v101
    let v2731 : string = Fable.Core.Rust.emitExpr v2730 v103
    let v2732 : string = $"r#\"{v105}\"#"
    let v2733 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2732
    let v2734 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2733 v92
    let v2735 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2734 v94
    let v2736 : string = method2(v2731)
    let v2737 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2736 v97
    let v2738 : string = method4()
    let v2739 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2738 v97
    let v2740 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2735, v2737, v2739) v101
    let v2741 : string = Fable.Core.Rust.emitExpr v2740 v103
    let v2742 : string = $"r#\"{v116}\"#"
    let v2743 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2742
    let v2744 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2743 v92
    let v2745 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2744 v94
    let v2746 : string = method2(v2741)
    let v2747 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2746 v97
    let v2748 : string = method5()
    let v2749 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2748 v97
    let v2750 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2745, v2747, v2749) v101
    let v2751 : string = Fable.Core.Rust.emitExpr v2750 v103
    let v2752 : Types.std.string.String = Fable.Core.Rust.emitExpr v2751 v11
    let v2753 : Types.EmitType<Types.std.string.String> = v2752 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2754 : Types.std.string.String = Fable.Core.Rust.emitExpr v2676 v86
    let v2755 : string = (v2754).ToString ()
    let v2756 : string = $"r#\"{v89}\"#"
    let v2757 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2756
    let v2758 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2757 v92
    let v2759 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2758 v94
    let v2760 : string = method2(v2755)
    let v2761 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2760 v97
    let v2762 : string = method3()
    let v2763 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2762 v97
    let v2764 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2759, v2761, v2763) v101
    let v2765 : string = Fable.Core.Rust.emitExpr v2764 v103
    let v2766 : string = $"r#\"{v105}\"#"
    let v2767 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2766
    let v2768 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2767 v92
    let v2769 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2768 v94
    let v2770 : string = method2(v2765)
    let v2771 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2770 v97
    let v2772 : string = method4()
    let v2773 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2772 v97
    let v2774 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2769, v2771, v2773) v101
    let v2775 : string = Fable.Core.Rust.emitExpr v2774 v103
    let v2776 : string = $"r#\"{v116}\"#"
    let v2777 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2776
    let v2778 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2777 v92
    let v2779 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2778 v94
    let v2780 : string = method2(v2775)
    let v2781 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2780 v97
    let v2782 : string = method5()
    let v2783 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2782 v97
    let v2784 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2779, v2781, v2783) v101
    let v2785 : string = Fable.Core.Rust.emitExpr v2784 v103
    let v2786 : Types.std.string.String = Fable.Core.Rust.emitExpr v2785 v11
    let v2787 : Types.EmitType<Types.std.string.String> = v2786 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2788 : bool = Fable.Core.Rust.emitExpr () v197
    let v2791 : US0 =
        if v2788 then
            US0_1
        else
            US0_0
    match v2791 with
    | US0_1 -> (* Wasm32 *)
        let v2792 : string = "%c%s %c%s %c%s"
        let v2793 : Types.std.string.String = Fable.Core.Rust.emitExpr v2792 v1450
        let v2794 : string = "color: purple"
        let v2795 : Types.std.string.String = Fable.Core.Rust.emitExpr v2794 v1450
        let v2796 : string = $"{v2719}"
        let v2797 : Types.std.string.String = Fable.Core.Rust.emitExpr v2796 v1450
        let v2798 : string = "98d5ef"
        let v2799 : string = $"color: {v2798}"
        let v2800 : Types.std.string.String = Fable.Core.Rust.emitExpr v2799 v1450
        let v2801 : string = $"{v2753} {v2787}"
        let v2802 : Types.std.string.String = Fable.Core.Rust.emitExpr v2801 v1450
        let v2803 : string = "color: #222222"
        let v2804 : Types.std.string.String = Fable.Core.Rust.emitExpr v2803 v1450
        let v2805 : string = $"{v2787}"
        let v2806 : Types.std.string.String = Fable.Core.Rust.emitExpr v2805 v1450
        let v2807 : (Types.std.string.String []) = [|v2793; v2795; v2797; v2800; v2802; v2804; v2806|]
        let v2808 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v2807 v39
        let v2809 : obj = v2808
        let v2810 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v2811 : obj = Fable.Core.Rust.emitExpr v2809 v2810
        let v2812 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v2811 v2812
        ()
    | _ ->
        let v2813 : string = "purple"
        let v2814 : string = "colored::Colorize::color(&*$0, $1.to_string())"
        let v2815 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2719, v2813) v2814
        let v2816 : Types.std.string.String = Fable.Core.Rust.emitExpr v2815 v86
        let v2817 : string = method10()
        let v2818 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2817 v97
        let v2819 : unativeint = unativeint 0
        let v2820 : unativeint = unativeint 2
        let v2821 : string = "&$0[$1..$2]"
        let v2822 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2818, v2819, v2820) v2821
        let v2823 : string = Fable.Core.Rust.emitExpr v2822 v103
        let v2824 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v2825 : uint8 = Fable.Core.Rust.emitExpr v2823 v2824
        let v2826 : string = method10()
        let v2827 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2826 v97
        let v2828 : unativeint = unativeint 2
        let v2829 : unativeint = unativeint 4
        let v2830 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2827, v2828, v2829) v2821
        let v2831 : string = Fable.Core.Rust.emitExpr v2830 v103
        let v2832 : uint8 = Fable.Core.Rust.emitExpr v2831 v2824
        let v2833 : string = method10()
        let v2834 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2833 v97
        let v2835 : unativeint = unativeint 4
        let v2836 : unativeint = unativeint 6
        let v2837 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2834, v2835, v2836) v2821
        let v2838 : string = Fable.Core.Rust.emitExpr v2837 v103
        let v2839 : uint8 = Fable.Core.Rust.emitExpr v2838 v2824
        let v2840 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v2841 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2753, v2825, v2832, v2839) v2840
        let v2842 : Types.std.string.String = Fable.Core.Rust.emitExpr v2841 v86
        let v2843 : string = method7()
        let v2844 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2843 v97
        let v2845 : unativeint = unativeint 0
        let v2846 : unativeint = unativeint 2
        let v2847 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2844, v2845, v2846) v2821
        let v2848 : string = Fable.Core.Rust.emitExpr v2847 v103
        let v2849 : uint8 = Fable.Core.Rust.emitExpr v2848 v2824
        let v2850 : string = method7()
        let v2851 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2850 v97
        let v2852 : unativeint = unativeint 2
        let v2853 : unativeint = unativeint 4
        let v2854 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2851, v2852, v2853) v2821
        let v2855 : string = Fable.Core.Rust.emitExpr v2854 v103
        let v2856 : uint8 = Fable.Core.Rust.emitExpr v2855 v2824
        let v2857 : string = method7()
        let v2858 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2857 v97
        let v2859 : unativeint = unativeint 4
        let v2860 : unativeint = unativeint 6
        let v2861 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v2858, v2859, v2860) v2821
        let v2862 : string = Fable.Core.Rust.emitExpr v2861 v103
        let v2863 : uint8 = Fable.Core.Rust.emitExpr v2862 v2824
        let v2864 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2787, v2849, v2856, v2863) v2840
        let v2865 : Types.std.string.String = Fable.Core.Rust.emitExpr v2864 v86
        let v2866 : string = $"{v2816} {v2842} {v2865}"
        System.Console.WriteLine v2866
        ()
    let v2867 : Types.std.string.String = Fable.Core.Rust.emitExpr v2643 v11
    let v2868 : string = "\"BuildFile\": {"
    let v2869 : string = v1691 + v2868
    let v2870 : string = v2869 + v1694
    let v2871 : string = "\"backend\": $1"
    let v2872 : string = v2870 + v2871
    let v2873 : string = v2872 + v1698
    let v2874 : string = v2873 + v1698
    let v2875 : string = v1701 + v2874
    let v2876 : string = v2875 + v1703
    let v2877 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v279, v2867) v2876
    let v2878 : string = "json len"
    let v2879 : Types.std.string.String = Fable.Core.Rust.emitExpr v2878 v11
    let v2880 : Types.EmitType<Types.std.string.String> = v2879 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2881 : int32 = Fable.Core.Rust.emitExpr v2877 v1466
    let v2882 : Types.std.string.String = Fable.Core.Rust.emitExpr v2881 v44
    let v2883 : Types.EmitType<Types.std.string.String> = v2882 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2884 : (Types.EmitType<Types.std.string.String> []) = [|v2880; v2883|]
    let v2885 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2884 v39
    let v2886 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2885 v41
    let v2887 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2886 v41
    let v2888 : Types.std.string.String = Fable.Core.Rust.emitExpr v2887 v44
    let v2889 : Types.EmitType<Types.std.string.String> = v2888 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2890 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v2891 : int64 = Fable.Core.Rust.emitExpr v2890 v8
    let v2892 : int64 = v2891 - v2634
    let v2893 : string = (v2892).ToString ()
    let v2894 : int32 = 6
    let v2895 : string = method1(v2894, v2893)
    let v2896 : uint8 = Fable.Core.Rust.emitExpr () v53
    let v2897 : Types.std.string.String = Fable.Core.Rust.emitExpr v55 v11
    let v2898 : Types.EmitType<Types.std.string.String> = v2897 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2899 : Types.std.string.String = Fable.Core.Rust.emitExpr v2895 v11
    let v2900 : Types.EmitType<Types.std.string.String> = v2899 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2901 : Types.std.string.String = Fable.Core.Rust.emitExpr v60 v11
    let v2902 : Types.EmitType<Types.std.string.String> = v2901 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2903 : Types.std.string.String = Fable.Core.Rust.emitExpr v2896 v44
    let v2904 : Types.EmitType<Types.std.string.String> = v2903 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2905 : Types.std.string.String = Fable.Core.Rust.emitExpr v65 v11
    let v2906 : Types.EmitType<Types.std.string.String> = v2905 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2907 : Types.std.string.String = Fable.Core.Rust.emitExpr v68 v11
    let v2908 : Types.EmitType<Types.std.string.String> = v2907 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2909 : (Types.EmitType<Types.std.string.String> []) = [|v2898; v2900; v2902; v2904; v2906; v2908|]
    let v2910 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2909 v39
    let v2911 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2910 v41
    let v2912 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2911 v41
    let v2913 : Types.std.string.String = Fable.Core.Rust.emitExpr v2912 v44
    let v2914 : Types.EmitType<Types.std.string.String> = v2913 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2915 : Types.std.string.String = Fable.Core.Rust.emitExpr v2677 v11
    let v2916 : Types.EmitType<Types.std.string.String> = v2915 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2917 : (Types.EmitType<Types.std.string.String> []) = [|v2916|]
    let v2918 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2917 v39
    let v2919 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2918 v41
    let v2920 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2919 v41
    let v2921 : Types.std.string.String = Fable.Core.Rust.emitExpr v2920 v44
    let v2922 : Types.EmitType<Types.std.string.String> = v2921 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2923 : Types.std.string.String = Fable.Core.Rust.emitExpr v2922 v86
    let v2924 : string = (v2923).ToString ()
    let v2925 : string = $"r#\"{v89}\"#"
    let v2926 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2925
    let v2927 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2926 v92
    let v2928 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2927 v94
    let v2929 : string = method2(v2924)
    let v2930 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2929 v97
    let v2931 : string = method3()
    let v2932 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2931 v97
    let v2933 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2928, v2930, v2932) v101
    let v2934 : string = Fable.Core.Rust.emitExpr v2933 v103
    let v2935 : string = $"r#\"{v105}\"#"
    let v2936 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2935
    let v2937 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2936 v92
    let v2938 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2937 v94
    let v2939 : string = method2(v2934)
    let v2940 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2939 v97
    let v2941 : string = method4()
    let v2942 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2941 v97
    let v2943 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2938, v2940, v2942) v101
    let v2944 : string = Fable.Core.Rust.emitExpr v2943 v103
    let v2945 : string = $"r#\"{v116}\"#"
    let v2946 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2945
    let v2947 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2946 v92
    let v2948 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2947 v94
    let v2949 : string = method2(v2944)
    let v2950 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2949 v97
    let v2951 : string = method5()
    let v2952 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2951 v97
    let v2953 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2948, v2950, v2952) v101
    let v2954 : string = Fable.Core.Rust.emitExpr v2953 v103
    let v2955 : Types.std.string.String = Fable.Core.Rust.emitExpr v2954 v11
    let v2956 : Types.EmitType<Types.std.string.String> = v2955 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2957 : Types.std.string.String = Fable.Core.Rust.emitExpr v2889 v86
    let v2958 : string = (v2957).ToString ()
    let v2959 : string = $"r#\"{v89}\"#"
    let v2960 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2959
    let v2961 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2960 v92
    let v2962 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2961 v94
    let v2963 : string = method2(v2958)
    let v2964 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2963 v97
    let v2965 : string = method3()
    let v2966 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2965 v97
    let v2967 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2962, v2964, v2966) v101
    let v2968 : string = Fable.Core.Rust.emitExpr v2967 v103
    let v2969 : string = $"r#\"{v105}\"#"
    let v2970 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2969
    let v2971 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2970 v92
    let v2972 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2971 v94
    let v2973 : string = method2(v2968)
    let v2974 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2973 v97
    let v2975 : string = method4()
    let v2976 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2975 v97
    let v2977 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2972, v2974, v2976) v101
    let v2978 : string = Fable.Core.Rust.emitExpr v2977 v103
    let v2979 : string = $"r#\"{v116}\"#"
    let v2980 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2979
    let v2981 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2980 v92
    let v2982 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2981 v94
    let v2983 : string = method2(v2978)
    let v2984 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2983 v97
    let v2985 : string = method5()
    let v2986 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2985 v97
    let v2987 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2982, v2984, v2986) v101
    let v2988 : string = Fable.Core.Rust.emitExpr v2987 v103
    let v2989 : Types.std.string.String = Fable.Core.Rust.emitExpr v2988 v11
    let v2990 : Types.EmitType<Types.std.string.String> = v2989 |> unbox<Types.EmitType<Types.std.string.String>>
    let v2991 : Types.std.string.String = Fable.Core.Rust.emitExpr v2914 v86
    let v2992 : string = (v2991).ToString ()
    let v2993 : string = $"r#\"{v89}\"#"
    let v2994 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v2993
    let v2995 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v2994 v92
    let v2996 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v2995 v94
    let v2997 : string = method2(v2992)
    let v2998 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2997 v97
    let v2999 : string = method3()
    let v3000 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v2999 v97
    let v3001 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v2996, v2998, v3000) v101
    let v3002 : string = Fable.Core.Rust.emitExpr v3001 v103
    let v3003 : string = $"r#\"{v105}\"#"
    let v3004 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3003
    let v3005 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3004 v92
    let v3006 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3005 v94
    let v3007 : string = method2(v3002)
    let v3008 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3007 v97
    let v3009 : string = method4()
    let v3010 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3009 v97
    let v3011 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3006, v3008, v3010) v101
    let v3012 : string = Fable.Core.Rust.emitExpr v3011 v103
    let v3013 : string = $"r#\"{v116}\"#"
    let v3014 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3013
    let v3015 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3014 v92
    let v3016 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3015 v94
    let v3017 : string = method2(v3012)
    let v3018 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3017 v97
    let v3019 : string = method5()
    let v3020 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3019 v97
    let v3021 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3016, v3018, v3020) v101
    let v3022 : string = Fable.Core.Rust.emitExpr v3021 v103
    let v3023 : Types.std.string.String = Fable.Core.Rust.emitExpr v3022 v11
    let v3024 : Types.EmitType<Types.std.string.String> = v3023 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3025 : bool = Fable.Core.Rust.emitExpr () v197
    let v3028 : US0 =
        if v3025 then
            US0_1
        else
            US0_0
    match v3028 with
    | US0_1 -> (* Wasm32 *)
        let v3029 : string = "%c%s %c%s %c%s"
        let v3030 : Types.std.string.String = Fable.Core.Rust.emitExpr v3029 v1450
        let v3031 : string = "color: purple"
        let v3032 : Types.std.string.String = Fable.Core.Rust.emitExpr v3031 v1450
        let v3033 : string = $"{v2956}"
        let v3034 : Types.std.string.String = Fable.Core.Rust.emitExpr v3033 v1450
        let v3035 : string = "98d5ef"
        let v3036 : string = $"color: {v3035}"
        let v3037 : Types.std.string.String = Fable.Core.Rust.emitExpr v3036 v1450
        let v3038 : string = $"{v2990} {v3024}"
        let v3039 : Types.std.string.String = Fable.Core.Rust.emitExpr v3038 v1450
        let v3040 : string = "color: #222222"
        let v3041 : Types.std.string.String = Fable.Core.Rust.emitExpr v3040 v1450
        let v3042 : string = $"{v3024}"
        let v3043 : Types.std.string.String = Fable.Core.Rust.emitExpr v3042 v1450
        let v3044 : (Types.std.string.String []) = [|v3030; v3032; v3034; v3037; v3039; v3041; v3043|]
        let v3045 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v3044 v39
        let v3046 : obj = v3045
        let v3047 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v3048 : obj = Fable.Core.Rust.emitExpr v3046 v3047
        let v3049 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v3048 v3049
        ()
    | _ ->
        let v3050 : string = "purple"
        let v3051 : string = "colored::Colorize::color(&*$0, $1.to_string())"
        let v3052 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2956, v3050) v3051
        let v3053 : Types.std.string.String = Fable.Core.Rust.emitExpr v3052 v86
        let v3054 : string = method10()
        let v3055 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3054 v97
        let v3056 : unativeint = unativeint 0
        let v3057 : unativeint = unativeint 2
        let v3058 : string = "&$0[$1..$2]"
        let v3059 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3055, v3056, v3057) v3058
        let v3060 : string = Fable.Core.Rust.emitExpr v3059 v103
        let v3061 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v3062 : uint8 = Fable.Core.Rust.emitExpr v3060 v3061
        let v3063 : string = method10()
        let v3064 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3063 v97
        let v3065 : unativeint = unativeint 2
        let v3066 : unativeint = unativeint 4
        let v3067 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3064, v3065, v3066) v3058
        let v3068 : string = Fable.Core.Rust.emitExpr v3067 v103
        let v3069 : uint8 = Fable.Core.Rust.emitExpr v3068 v3061
        let v3070 : string = method10()
        let v3071 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3070 v97
        let v3072 : unativeint = unativeint 4
        let v3073 : unativeint = unativeint 6
        let v3074 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3071, v3072, v3073) v3058
        let v3075 : string = Fable.Core.Rust.emitExpr v3074 v103
        let v3076 : uint8 = Fable.Core.Rust.emitExpr v3075 v3061
        let v3077 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v3078 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v2990, v3062, v3069, v3076) v3077
        let v3079 : Types.std.string.String = Fable.Core.Rust.emitExpr v3078 v86
        let v3080 : string = method7()
        let v3081 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3080 v97
        let v3082 : unativeint = unativeint 0
        let v3083 : unativeint = unativeint 2
        let v3084 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3081, v3082, v3083) v3058
        let v3085 : string = Fable.Core.Rust.emitExpr v3084 v103
        let v3086 : uint8 = Fable.Core.Rust.emitExpr v3085 v3061
        let v3087 : string = method7()
        let v3088 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3087 v97
        let v3089 : unativeint = unativeint 2
        let v3090 : unativeint = unativeint 4
        let v3091 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3088, v3089, v3090) v3058
        let v3092 : string = Fable.Core.Rust.emitExpr v3091 v103
        let v3093 : uint8 = Fable.Core.Rust.emitExpr v3092 v3061
        let v3094 : string = method7()
        let v3095 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3094 v97
        let v3096 : unativeint = unativeint 4
        let v3097 : unativeint = unativeint 6
        let v3098 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3095, v3096, v3097) v3058
        let v3099 : string = Fable.Core.Rust.emitExpr v3098 v103
        let v3100 : uint8 = Fable.Core.Rust.emitExpr v3099 v3061
        let v3101 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3024, v3086, v3093, v3100) v3077
        let v3102 : Types.std.string.String = Fable.Core.Rust.emitExpr v3101 v86
        let v3103 : string = $"{v3053} {v3079} {v3102}"
        System.Console.WriteLine v3103
        ()
    let struct (v3104 : string, v3105 : string, v3106 : string, v3107 : bool) = method0()
    let v3108 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v3109 : int64 = Fable.Core.Rust.emitExpr v3108 v8
    let v3110 : Types.std.string.String = Fable.Core.Rust.emitExpr v1938 v11
    let v3111 : Types.EmitType<Types.std.string.String> = v3110 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3112 : Types.std.string.String = Fable.Core.Rust.emitExpr v1941 v11
    let v3113 : Types.EmitType<Types.std.string.String> = v3112 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3114 : Types.std.string.String = Fable.Core.Rust.emitExpr v1944 v11
    let v3115 : Types.EmitType<Types.std.string.String> = v3114 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3116 : Types.std.string.String = Fable.Core.Rust.emitExpr 13805 v44
    let v3117 : Types.EmitType<Types.std.string.String> = v3116 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3118 : Types.std.string.String = Fable.Core.Rust.emitExpr v1949 v11
    let v3119 : Types.EmitType<Types.std.string.String> = v3118 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3120 : int32 = Fable.Core.Rust.emitExpr v2877 v1466
    let v3121 : Types.std.string.String = Fable.Core.Rust.emitExpr v3120 v44
    let v3122 : Types.EmitType<Types.std.string.String> = v3121 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3123 : (Types.EmitType<Types.std.string.String> []) = [|v3111; v3113; v3115; v3117; v3119; v3122|]
    let v3124 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3123 v39
    let v3125 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3124 v41
    let v3126 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3125 v41
    let v3127 : Types.std.string.String = Fable.Core.Rust.emitExpr v3126 v44
    let v3128 : Types.EmitType<Types.std.string.String> = v3127 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3129 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v3130 : int64 = Fable.Core.Rust.emitExpr v3129 v8
    let v3131 : int64 = v3130 - v3109
    let v3132 : string = (v3131).ToString ()
    let v3133 : int32 = 6
    let v3134 : string = method1(v3133, v3132)
    let v3135 : uint8 = Fable.Core.Rust.emitExpr () v53
    let v3136 : Types.std.string.String = Fable.Core.Rust.emitExpr v55 v11
    let v3137 : Types.EmitType<Types.std.string.String> = v3136 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3138 : Types.std.string.String = Fable.Core.Rust.emitExpr v3134 v11
    let v3139 : Types.EmitType<Types.std.string.String> = v3138 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3140 : Types.std.string.String = Fable.Core.Rust.emitExpr v60 v11
    let v3141 : Types.EmitType<Types.std.string.String> = v3140 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3142 : Types.std.string.String = Fable.Core.Rust.emitExpr v3135 v44
    let v3143 : Types.EmitType<Types.std.string.String> = v3142 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3144 : Types.std.string.String = Fable.Core.Rust.emitExpr v65 v11
    let v3145 : Types.EmitType<Types.std.string.String> = v3144 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3146 : Types.std.string.String = Fable.Core.Rust.emitExpr v68 v11
    let v3147 : Types.EmitType<Types.std.string.String> = v3146 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3148 : (Types.EmitType<Types.std.string.String> []) = [|v3137; v3139; v3141; v3143; v3145; v3147|]
    let v3149 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3148 v39
    let v3150 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3149 v41
    let v3151 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3150 v41
    let v3152 : Types.std.string.String = Fable.Core.Rust.emitExpr v3151 v44
    let v3153 : Types.EmitType<Types.std.string.String> = v3152 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3154 : Types.std.string.String = Fable.Core.Rust.emitExpr v1986 v11
    let v3155 : Types.EmitType<Types.std.string.String> = v3154 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3156 : (Types.EmitType<Types.std.string.String> []) = [|v3155|]
    let v3157 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3156 v39
    let v3158 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3157 v41
    let v3159 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3158 v41
    let v3160 : Types.std.string.String = Fable.Core.Rust.emitExpr v3159 v44
    let v3161 : Types.EmitType<Types.std.string.String> = v3160 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3162 : Types.std.string.String = Fable.Core.Rust.emitExpr v3161 v86
    let v3163 : string = (v3162).ToString ()
    let v3164 : string = $"r#\"{v89}\"#"
    let v3165 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3164
    let v3166 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3165 v92
    let v3167 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3166 v94
    let v3168 : string = method2(v3163)
    let v3169 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3168 v97
    let v3170 : string = method3()
    let v3171 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3170 v97
    let v3172 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3167, v3169, v3171) v101
    let v3173 : string = Fable.Core.Rust.emitExpr v3172 v103
    let v3174 : string = $"r#\"{v105}\"#"
    let v3175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3174
    let v3176 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3175 v92
    let v3177 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3176 v94
    let v3178 : string = method2(v3173)
    let v3179 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3178 v97
    let v3180 : string = method4()
    let v3181 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3180 v97
    let v3182 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3177, v3179, v3181) v101
    let v3183 : string = Fable.Core.Rust.emitExpr v3182 v103
    let v3184 : string = $"r#\"{v116}\"#"
    let v3185 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3184
    let v3186 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3185 v92
    let v3187 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3186 v94
    let v3188 : string = method2(v3183)
    let v3189 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3188 v97
    let v3190 : string = method5()
    let v3191 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3190 v97
    let v3192 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3187, v3189, v3191) v101
    let v3193 : string = Fable.Core.Rust.emitExpr v3192 v103
    let v3194 : Types.std.string.String = Fable.Core.Rust.emitExpr v3193 v11
    let v3195 : Types.EmitType<Types.std.string.String> = v3194 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3196 : Types.std.string.String = Fable.Core.Rust.emitExpr v3128 v86
    let v3197 : string = (v3196).ToString ()
    let v3198 : string = $"r#\"{v89}\"#"
    let v3199 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3198
    let v3200 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3199 v92
    let v3201 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3200 v94
    let v3202 : string = method2(v3197)
    let v3203 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3202 v97
    let v3204 : string = method3()
    let v3205 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3204 v97
    let v3206 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3201, v3203, v3205) v101
    let v3207 : string = Fable.Core.Rust.emitExpr v3206 v103
    let v3208 : string = $"r#\"{v105}\"#"
    let v3209 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3208
    let v3210 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3209 v92
    let v3211 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3210 v94
    let v3212 : string = method2(v3207)
    let v3213 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3212 v97
    let v3214 : string = method4()
    let v3215 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3214 v97
    let v3216 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3211, v3213, v3215) v101
    let v3217 : string = Fable.Core.Rust.emitExpr v3216 v103
    let v3218 : string = $"r#\"{v116}\"#"
    let v3219 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3218
    let v3220 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3219 v92
    let v3221 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3220 v94
    let v3222 : string = method2(v3217)
    let v3223 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3222 v97
    let v3224 : string = method5()
    let v3225 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3224 v97
    let v3226 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3221, v3223, v3225) v101
    let v3227 : string = Fable.Core.Rust.emitExpr v3226 v103
    let v3228 : Types.std.string.String = Fable.Core.Rust.emitExpr v3227 v11
    let v3229 : Types.EmitType<Types.std.string.String> = v3228 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3230 : Types.std.string.String = Fable.Core.Rust.emitExpr v3153 v86
    let v3231 : string = (v3230).ToString ()
    let v3232 : string = $"r#\"{v89}\"#"
    let v3233 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3232
    let v3234 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3233 v92
    let v3235 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3234 v94
    let v3236 : string = method2(v3231)
    let v3237 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3236 v97
    let v3238 : string = method3()
    let v3239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3238 v97
    let v3240 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3235, v3237, v3239) v101
    let v3241 : string = Fable.Core.Rust.emitExpr v3240 v103
    let v3242 : string = $"r#\"{v105}\"#"
    let v3243 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3242
    let v3244 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3243 v92
    let v3245 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3244 v94
    let v3246 : string = method2(v3241)
    let v3247 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3246 v97
    let v3248 : string = method4()
    let v3249 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3248 v97
    let v3250 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3245, v3247, v3249) v101
    let v3251 : string = Fable.Core.Rust.emitExpr v3250 v103
    let v3252 : string = $"r#\"{v116}\"#"
    let v3253 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3252
    let v3254 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3253 v92
    let v3255 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3254 v94
    let v3256 : string = method2(v3251)
    let v3257 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3256 v97
    let v3258 : string = method5()
    let v3259 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3258 v97
    let v3260 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3255, v3257, v3259) v101
    let v3261 : string = Fable.Core.Rust.emitExpr v3260 v103
    let v3262 : Types.std.string.String = Fable.Core.Rust.emitExpr v3261 v11
    let v3263 : Types.EmitType<Types.std.string.String> = v3262 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3264 : bool = Fable.Core.Rust.emitExpr () v197
    let v3267 : US0 =
        if v3264 then
            US0_1
        else
            US0_0
    match v3267 with
    | US0_1 -> (* Wasm32 *)
        let v3268 : string = "%c%s %c%s %c%s"
        let v3269 : Types.std.string.String = Fable.Core.Rust.emitExpr v3268 v1450
        let v3270 : string = "color: purple"
        let v3271 : Types.std.string.String = Fable.Core.Rust.emitExpr v3270 v1450
        let v3272 : string = $"{v3195}"
        let v3273 : Types.std.string.String = Fable.Core.Rust.emitExpr v3272 v1450
        let v3274 : string = "fcfb1b"
        let v3275 : string = $"color: {v3274}"
        let v3276 : Types.std.string.String = Fable.Core.Rust.emitExpr v3275 v1450
        let v3277 : string = $"{v3229} {v3263}"
        let v3278 : Types.std.string.String = Fable.Core.Rust.emitExpr v3277 v1450
        let v3279 : string = "color: #222222"
        let v3280 : Types.std.string.String = Fable.Core.Rust.emitExpr v3279 v1450
        let v3281 : string = $"{v3263}"
        let v3282 : Types.std.string.String = Fable.Core.Rust.emitExpr v3281 v1450
        let v3283 : (Types.std.string.String []) = [|v3269; v3271; v3273; v3276; v3278; v3280; v3282|]
        let v3284 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v3283 v39
        let v3285 : obj = v3284
        let v3286 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v3287 : obj = Fable.Core.Rust.emitExpr v3285 v3286
        let v3288 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v3287 v3288
        ()
    | _ ->
        let v3289 : string = "purple"
        let v3290 : string = "colored::Colorize::color(&*$0, $1.to_string())"
        let v3291 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3195, v3289) v3290
        let v3292 : Types.std.string.String = Fable.Core.Rust.emitExpr v3291 v86
        let v3293 : string = method9()
        let v3294 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3293 v97
        let v3295 : unativeint = unativeint 0
        let v3296 : unativeint = unativeint 2
        let v3297 : string = "&$0[$1..$2]"
        let v3298 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3294, v3295, v3296) v3297
        let v3299 : string = Fable.Core.Rust.emitExpr v3298 v103
        let v3300 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v3301 : uint8 = Fable.Core.Rust.emitExpr v3299 v3300
        let v3302 : string = method9()
        let v3303 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3302 v97
        let v3304 : unativeint = unativeint 2
        let v3305 : unativeint = unativeint 4
        let v3306 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3303, v3304, v3305) v3297
        let v3307 : string = Fable.Core.Rust.emitExpr v3306 v103
        let v3308 : uint8 = Fable.Core.Rust.emitExpr v3307 v3300
        let v3309 : string = method9()
        let v3310 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3309 v97
        let v3311 : unativeint = unativeint 4
        let v3312 : unativeint = unativeint 6
        let v3313 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3310, v3311, v3312) v3297
        let v3314 : string = Fable.Core.Rust.emitExpr v3313 v103
        let v3315 : uint8 = Fable.Core.Rust.emitExpr v3314 v3300
        let v3316 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v3317 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3229, v3301, v3308, v3315) v3316
        let v3318 : Types.std.string.String = Fable.Core.Rust.emitExpr v3317 v86
        let v3319 : string = method7()
        let v3320 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3319 v97
        let v3321 : unativeint = unativeint 0
        let v3322 : unativeint = unativeint 2
        let v3323 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3320, v3321, v3322) v3297
        let v3324 : string = Fable.Core.Rust.emitExpr v3323 v103
        let v3325 : uint8 = Fable.Core.Rust.emitExpr v3324 v3300
        let v3326 : string = method7()
        let v3327 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3326 v97
        let v3328 : unativeint = unativeint 2
        let v3329 : unativeint = unativeint 4
        let v3330 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3327, v3328, v3329) v3297
        let v3331 : string = Fable.Core.Rust.emitExpr v3330 v103
        let v3332 : uint8 = Fable.Core.Rust.emitExpr v3331 v3300
        let v3333 : string = method7()
        let v3334 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3333 v97
        let v3335 : unativeint = unativeint 4
        let v3336 : unativeint = unativeint 6
        let v3337 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3334, v3335, v3336) v3297
        let v3338 : string = Fable.Core.Rust.emitExpr v3337 v103
        let v3339 : uint8 = Fable.Core.Rust.emitExpr v3338 v3300
        let v3340 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3263, v3325, v3332, v3339) v3316
        let v3341 : Types.std.string.String = Fable.Core.Rust.emitExpr v3340 v86
        let v3342 : string = $"{v3292} {v3318} {v3341}"
        System.Console.WriteLine v3342
        ()
    let v3343 : obj = Fable.Core.Rust.emitExpr () v2176
    let v3344 : obj = Fable.Core.Rust.emitExpr v3343 v2178
    let v3345 : string = $"tcp://{v1941}:{13805}"
    Fable.Core.Rust.emitExpr struct (v3344, v3345) v2181
    let v3346 : string = $"$0.send($1.as_str(), 0).unwrap()"
    Fable.Core.Rust.emitExpr struct (v3344, v2877) v3346
    let v3347 : Types.std.string.String = Fable.Core.Rust.emitExpr v3344 v2183
    Fable.Core.Rust.emitExpr struct (v3344, v3345) v2185
    let v3348 : Types.std.string.String = Fable.Core.Rust.emitExpr v2186 v11
    let v3349 : Types.EmitType<Types.std.string.String> = v3348 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3350 : int32 = Fable.Core.Rust.emitExpr v3347 v1466
    let v3351 : Types.std.string.String = Fable.Core.Rust.emitExpr v3350 v44
    let v3352 : Types.EmitType<Types.std.string.String> = v3351 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3353 : (Types.EmitType<Types.std.string.String> []) = [|v3349; v3352|]
    let v3354 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3353 v39
    let v3355 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3354 v41
    let v3356 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3355 v41
    let v3357 : Types.std.string.String = Fable.Core.Rust.emitExpr v3356 v44
    let v3358 : Types.EmitType<Types.std.string.String> = v3357 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3359 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v3360 : int64 = Fable.Core.Rust.emitExpr v3359 v8
    let v3361 : int64 = v3360 - v3109
    let v3362 : string = (v3361).ToString ()
    let v3363 : int32 = 6
    let v3364 : string = method1(v3363, v3362)
    let v3365 : uint8 = Fable.Core.Rust.emitExpr () v53
    let v3366 : Types.std.string.String = Fable.Core.Rust.emitExpr v55 v11
    let v3367 : Types.EmitType<Types.std.string.String> = v3366 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3368 : Types.std.string.String = Fable.Core.Rust.emitExpr v3364 v11
    let v3369 : Types.EmitType<Types.std.string.String> = v3368 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3370 : Types.std.string.String = Fable.Core.Rust.emitExpr v60 v11
    let v3371 : Types.EmitType<Types.std.string.String> = v3370 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3372 : Types.std.string.String = Fable.Core.Rust.emitExpr v3365 v44
    let v3373 : Types.EmitType<Types.std.string.String> = v3372 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3374 : Types.std.string.String = Fable.Core.Rust.emitExpr v65 v11
    let v3375 : Types.EmitType<Types.std.string.String> = v3374 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3376 : Types.std.string.String = Fable.Core.Rust.emitExpr v68 v11
    let v3377 : Types.EmitType<Types.std.string.String> = v3376 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3378 : (Types.EmitType<Types.std.string.String> []) = [|v3367; v3369; v3371; v3373; v3375; v3377|]
    let v3379 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3378 v39
    let v3380 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3379 v41
    let v3381 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3380 v41
    let v3382 : Types.std.string.String = Fable.Core.Rust.emitExpr v3381 v44
    let v3383 : Types.EmitType<Types.std.string.String> = v3382 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3384 : Types.std.string.String = Fable.Core.Rust.emitExpr v1986 v11
    let v3385 : Types.EmitType<Types.std.string.String> = v3384 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3386 : (Types.EmitType<Types.std.string.String> []) = [|v3385|]
    let v3387 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3386 v39
    let v3388 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3387 v41
    let v3389 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3388 v41
    let v3390 : Types.std.string.String = Fable.Core.Rust.emitExpr v3389 v44
    let v3391 : Types.EmitType<Types.std.string.String> = v3390 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3392 : Types.std.string.String = Fable.Core.Rust.emitExpr v3391 v86
    let v3393 : string = (v3392).ToString ()
    let v3394 : string = $"r#\"{v89}\"#"
    let v3395 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3394
    let v3396 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3395 v92
    let v3397 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3396 v94
    let v3398 : string = method2(v3393)
    let v3399 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3398 v97
    let v3400 : string = method3()
    let v3401 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3400 v97
    let v3402 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3397, v3399, v3401) v101
    let v3403 : string = Fable.Core.Rust.emitExpr v3402 v103
    let v3404 : string = $"r#\"{v105}\"#"
    let v3405 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3404
    let v3406 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3405 v92
    let v3407 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3406 v94
    let v3408 : string = method2(v3403)
    let v3409 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3408 v97
    let v3410 : string = method4()
    let v3411 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3410 v97
    let v3412 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3407, v3409, v3411) v101
    let v3413 : string = Fable.Core.Rust.emitExpr v3412 v103
    let v3414 : string = $"r#\"{v116}\"#"
    let v3415 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3414
    let v3416 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3415 v92
    let v3417 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3416 v94
    let v3418 : string = method2(v3413)
    let v3419 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3418 v97
    let v3420 : string = method5()
    let v3421 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3420 v97
    let v3422 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3417, v3419, v3421) v101
    let v3423 : string = Fable.Core.Rust.emitExpr v3422 v103
    let v3424 : Types.std.string.String = Fable.Core.Rust.emitExpr v3423 v11
    let v3425 : Types.EmitType<Types.std.string.String> = v3424 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3426 : Types.std.string.String = Fable.Core.Rust.emitExpr v3358 v86
    let v3427 : string = (v3426).ToString ()
    let v3428 : string = $"r#\"{v89}\"#"
    let v3429 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3428
    let v3430 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3429 v92
    let v3431 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3430 v94
    let v3432 : string = method2(v3427)
    let v3433 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3432 v97
    let v3434 : string = method3()
    let v3435 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3434 v97
    let v3436 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3431, v3433, v3435) v101
    let v3437 : string = Fable.Core.Rust.emitExpr v3436 v103
    let v3438 : string = $"r#\"{v105}\"#"
    let v3439 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3438
    let v3440 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3439 v92
    let v3441 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3440 v94
    let v3442 : string = method2(v3437)
    let v3443 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3442 v97
    let v3444 : string = method4()
    let v3445 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3444 v97
    let v3446 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3441, v3443, v3445) v101
    let v3447 : string = Fable.Core.Rust.emitExpr v3446 v103
    let v3448 : string = $"r#\"{v116}\"#"
    let v3449 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3448
    let v3450 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3449 v92
    let v3451 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3450 v94
    let v3452 : string = method2(v3447)
    let v3453 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3452 v97
    let v3454 : string = method5()
    let v3455 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3454 v97
    let v3456 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3451, v3453, v3455) v101
    let v3457 : string = Fable.Core.Rust.emitExpr v3456 v103
    let v3458 : Types.std.string.String = Fable.Core.Rust.emitExpr v3457 v11
    let v3459 : Types.EmitType<Types.std.string.String> = v3458 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3460 : Types.std.string.String = Fable.Core.Rust.emitExpr v3383 v86
    let v3461 : string = (v3460).ToString ()
    let v3462 : string = $"r#\"{v89}\"#"
    let v3463 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3462
    let v3464 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3463 v92
    let v3465 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3464 v94
    let v3466 : string = method2(v3461)
    let v3467 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3466 v97
    let v3468 : string = method3()
    let v3469 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3468 v97
    let v3470 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3465, v3467, v3469) v101
    let v3471 : string = Fable.Core.Rust.emitExpr v3470 v103
    let v3472 : string = $"r#\"{v105}\"#"
    let v3473 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3472
    let v3474 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3473 v92
    let v3475 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3474 v94
    let v3476 : string = method2(v3471)
    let v3477 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3476 v97
    let v3478 : string = method4()
    let v3479 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3478 v97
    let v3480 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3475, v3477, v3479) v101
    let v3481 : string = Fable.Core.Rust.emitExpr v3480 v103
    let v3482 : string = $"r#\"{v116}\"#"
    let v3483 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3482
    let v3484 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3483 v92
    let v3485 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3484 v94
    let v3486 : string = method2(v3481)
    let v3487 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3486 v97
    let v3488 : string = method5()
    let v3489 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3488 v97
    let v3490 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3485, v3487, v3489) v101
    let v3491 : string = Fable.Core.Rust.emitExpr v3490 v103
    let v3492 : Types.std.string.String = Fable.Core.Rust.emitExpr v3491 v11
    let v3493 : Types.EmitType<Types.std.string.String> = v3492 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3494 : bool = Fable.Core.Rust.emitExpr () v197
    let v3497 : US0 =
        if v3494 then
            US0_1
        else
            US0_0
    match v3497 with
    | US0_1 -> (* Wasm32 *)
        let v3498 : string = "%c%s %c%s %c%s"
        let v3499 : Types.std.string.String = Fable.Core.Rust.emitExpr v3498 v1450
        let v3500 : string = "color: purple"
        let v3501 : Types.std.string.String = Fable.Core.Rust.emitExpr v3500 v1450
        let v3502 : string = $"{v3425}"
        let v3503 : Types.std.string.String = Fable.Core.Rust.emitExpr v3502 v1450
        let v3504 : string = "fcfb1b"
        let v3505 : string = $"color: {v3504}"
        let v3506 : Types.std.string.String = Fable.Core.Rust.emitExpr v3505 v1450
        let v3507 : string = $"{v3459} {v3493}"
        let v3508 : Types.std.string.String = Fable.Core.Rust.emitExpr v3507 v1450
        let v3509 : string = "color: #222222"
        let v3510 : Types.std.string.String = Fable.Core.Rust.emitExpr v3509 v1450
        let v3511 : string = $"{v3493}"
        let v3512 : Types.std.string.String = Fable.Core.Rust.emitExpr v3511 v1450
        let v3513 : (Types.std.string.String []) = [|v3499; v3501; v3503; v3506; v3508; v3510; v3512|]
        let v3514 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v3513 v39
        let v3515 : obj = v3514
        let v3516 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v3517 : obj = Fable.Core.Rust.emitExpr v3515 v3516
        let v3518 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v3517 v3518
        ()
    | _ ->
        let v3519 : string = "purple"
        let v3520 : string = "colored::Colorize::color(&*$0, $1.to_string())"
        let v3521 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3425, v3519) v3520
        let v3522 : Types.std.string.String = Fable.Core.Rust.emitExpr v3521 v86
        let v3523 : string = method9()
        let v3524 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3523 v97
        let v3525 : unativeint = unativeint 0
        let v3526 : unativeint = unativeint 2
        let v3527 : string = "&$0[$1..$2]"
        let v3528 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3524, v3525, v3526) v3527
        let v3529 : string = Fable.Core.Rust.emitExpr v3528 v103
        let v3530 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v3531 : uint8 = Fable.Core.Rust.emitExpr v3529 v3530
        let v3532 : string = method9()
        let v3533 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3532 v97
        let v3534 : unativeint = unativeint 2
        let v3535 : unativeint = unativeint 4
        let v3536 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3533, v3534, v3535) v3527
        let v3537 : string = Fable.Core.Rust.emitExpr v3536 v103
        let v3538 : uint8 = Fable.Core.Rust.emitExpr v3537 v3530
        let v3539 : string = method9()
        let v3540 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3539 v97
        let v3541 : unativeint = unativeint 4
        let v3542 : unativeint = unativeint 6
        let v3543 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3540, v3541, v3542) v3527
        let v3544 : string = Fable.Core.Rust.emitExpr v3543 v103
        let v3545 : uint8 = Fable.Core.Rust.emitExpr v3544 v3530
        let v3546 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v3547 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3459, v3531, v3538, v3545) v3546
        let v3548 : Types.std.string.String = Fable.Core.Rust.emitExpr v3547 v86
        let v3549 : string = method7()
        let v3550 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3549 v97
        let v3551 : unativeint = unativeint 0
        let v3552 : unativeint = unativeint 2
        let v3553 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3550, v3551, v3552) v3527
        let v3554 : string = Fable.Core.Rust.emitExpr v3553 v103
        let v3555 : uint8 = Fable.Core.Rust.emitExpr v3554 v3530
        let v3556 : string = method7()
        let v3557 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3556 v97
        let v3558 : unativeint = unativeint 2
        let v3559 : unativeint = unativeint 4
        let v3560 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3557, v3558, v3559) v3527
        let v3561 : string = Fable.Core.Rust.emitExpr v3560 v103
        let v3562 : uint8 = Fable.Core.Rust.emitExpr v3561 v3530
        let v3563 : string = method7()
        let v3564 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3563 v97
        let v3565 : unativeint = unativeint 4
        let v3566 : unativeint = unativeint 6
        let v3567 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3564, v3565, v3566) v3527
        let v3568 : string = Fable.Core.Rust.emitExpr v3567 v103
        let v3569 : uint8 = Fable.Core.Rust.emitExpr v3568 v3530
        let v3570 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3493, v3555, v3562, v3569) v3546
        let v3571 : Types.std.string.String = Fable.Core.Rust.emitExpr v3570 v86
        let v3572 : string = $"{v3522} {v3548} {v3571}"
        System.Console.WriteLine v3572
        ()
    let v3573 : string = "> spi_build_file; ok"
    let v3574 : Types.std.string.String = Fable.Core.Rust.emitExpr v3573 v11
    let v3575 : Types.EmitType<Types.std.string.String> = v3574 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3576 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v3577 : int64 = Fable.Core.Rust.emitExpr v3576 v8
    let v3578 : int64 = v3577 - v9
    let v3579 : string = (v3578).ToString ()
    let v3580 : int32 = 6
    let v3581 : string = method1(v3580, v3579)
    let v3582 : uint8 = Fable.Core.Rust.emitExpr () v53
    let v3583 : Types.std.string.String = Fable.Core.Rust.emitExpr v55 v11
    let v3584 : Types.EmitType<Types.std.string.String> = v3583 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3585 : Types.std.string.String = Fable.Core.Rust.emitExpr v3581 v11
    let v3586 : Types.EmitType<Types.std.string.String> = v3585 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3587 : Types.std.string.String = Fable.Core.Rust.emitExpr v60 v11
    let v3588 : Types.EmitType<Types.std.string.String> = v3587 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3589 : Types.std.string.String = Fable.Core.Rust.emitExpr v3582 v44
    let v3590 : Types.EmitType<Types.std.string.String> = v3589 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3591 : Types.std.string.String = Fable.Core.Rust.emitExpr v65 v11
    let v3592 : Types.EmitType<Types.std.string.String> = v3591 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3593 : Types.std.string.String = Fable.Core.Rust.emitExpr v68 v11
    let v3594 : Types.EmitType<Types.std.string.String> = v3593 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3595 : (Types.EmitType<Types.std.string.String> []) = [|v3584; v3586; v3588; v3590; v3592; v3594|]
    let v3596 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3595 v39
    let v3597 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3596 v41
    let v3598 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3597 v41
    let v3599 : Types.std.string.String = Fable.Core.Rust.emitExpr v3598 v44
    let v3600 : Types.EmitType<Types.std.string.String> = v3599 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3601 : Types.std.string.String = Fable.Core.Rust.emitExpr v77 v11
    let v3602 : Types.EmitType<Types.std.string.String> = v3601 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3603 : (Types.EmitType<Types.std.string.String> []) = [|v3602|]
    let v3604 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3603 v39
    let v3605 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3604 v41
    let v3606 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3605 v41
    let v3607 : Types.std.string.String = Fable.Core.Rust.emitExpr v3606 v44
    let v3608 : Types.EmitType<Types.std.string.String> = v3607 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3609 : Types.std.string.String = Fable.Core.Rust.emitExpr v3608 v86
    let v3610 : string = (v3609).ToString ()
    let v3611 : string = $"r#\"{v89}\"#"
    let v3612 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3611
    let v3613 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3612 v92
    let v3614 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3613 v94
    let v3615 : string = method2(v3610)
    let v3616 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3615 v97
    let v3617 : string = method3()
    let v3618 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3617 v97
    let v3619 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3614, v3616, v3618) v101
    let v3620 : string = Fable.Core.Rust.emitExpr v3619 v103
    let v3621 : string = $"r#\"{v105}\"#"
    let v3622 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3621
    let v3623 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3622 v92
    let v3624 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3623 v94
    let v3625 : string = method2(v3620)
    let v3626 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3625 v97
    let v3627 : string = method4()
    let v3628 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3627 v97
    let v3629 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3624, v3626, v3628) v101
    let v3630 : string = Fable.Core.Rust.emitExpr v3629 v103
    let v3631 : string = $"r#\"{v116}\"#"
    let v3632 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3631
    let v3633 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3632 v92
    let v3634 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3633 v94
    let v3635 : string = method2(v3630)
    let v3636 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3635 v97
    let v3637 : string = method5()
    let v3638 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3637 v97
    let v3639 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3634, v3636, v3638) v101
    let v3640 : string = Fable.Core.Rust.emitExpr v3639 v103
    let v3641 : Types.std.string.String = Fable.Core.Rust.emitExpr v3640 v11
    let v3642 : Types.EmitType<Types.std.string.String> = v3641 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3643 : Types.std.string.String = Fable.Core.Rust.emitExpr v3575 v86
    let v3644 : string = (v3643).ToString ()
    let v3645 : string = $"r#\"{v89}\"#"
    let v3646 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3645
    let v3647 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3646 v92
    let v3648 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3647 v94
    let v3649 : string = method2(v3644)
    let v3650 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3649 v97
    let v3651 : string = method3()
    let v3652 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3651 v97
    let v3653 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3648, v3650, v3652) v101
    let v3654 : string = Fable.Core.Rust.emitExpr v3653 v103
    let v3655 : string = $"r#\"{v105}\"#"
    let v3656 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3655
    let v3657 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3656 v92
    let v3658 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3657 v94
    let v3659 : string = method2(v3654)
    let v3660 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3659 v97
    let v3661 : string = method4()
    let v3662 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3661 v97
    let v3663 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3658, v3660, v3662) v101
    let v3664 : string = Fable.Core.Rust.emitExpr v3663 v103
    let v3665 : string = $"r#\"{v116}\"#"
    let v3666 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3665
    let v3667 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3666 v92
    let v3668 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3667 v94
    let v3669 : string = method2(v3664)
    let v3670 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3669 v97
    let v3671 : string = method5()
    let v3672 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3671 v97
    let v3673 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3668, v3670, v3672) v101
    let v3674 : string = Fable.Core.Rust.emitExpr v3673 v103
    let v3675 : Types.std.string.String = Fable.Core.Rust.emitExpr v3674 v11
    let v3676 : Types.EmitType<Types.std.string.String> = v3675 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3677 : Types.std.string.String = Fable.Core.Rust.emitExpr v3600 v86
    let v3678 : string = (v3677).ToString ()
    let v3679 : string = $"r#\"{v89}\"#"
    let v3680 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3679
    let v3681 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3680 v92
    let v3682 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3681 v94
    let v3683 : string = method2(v3678)
    let v3684 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3683 v97
    let v3685 : string = method3()
    let v3686 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3685 v97
    let v3687 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3682, v3684, v3686) v101
    let v3688 : string = Fable.Core.Rust.emitExpr v3687 v103
    let v3689 : string = $"r#\"{v105}\"#"
    let v3690 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3689
    let v3691 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3690 v92
    let v3692 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3691 v94
    let v3693 : string = method2(v3688)
    let v3694 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3693 v97
    let v3695 : string = method4()
    let v3696 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3695 v97
    let v3697 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3692, v3694, v3696) v101
    let v3698 : string = Fable.Core.Rust.emitExpr v3697 v103
    let v3699 : string = $"r#\"{v116}\"#"
    let v3700 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3699
    let v3701 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3700 v92
    let v3702 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3701 v94
    let v3703 : string = method2(v3698)
    let v3704 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3703 v97
    let v3705 : string = method5()
    let v3706 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3705 v97
    let v3707 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3702, v3704, v3706) v101
    let v3708 : string = Fable.Core.Rust.emitExpr v3707 v103
    let v3709 : Types.std.string.String = Fable.Core.Rust.emitExpr v3708 v11
    let v3710 : Types.EmitType<Types.std.string.String> = v3709 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3711 : bool = Fable.Core.Rust.emitExpr () v197
    let v3714 : US0 =
        if v3711 then
            US0_1
        else
            US0_0
    match v3714 with
    | US0_1 -> (* Wasm32 *)
        let v3715 : string = "%c%s %c%s %c%s"
        let v3716 : Types.std.string.String = Fable.Core.Rust.emitExpr v3715 v1450
        let v3717 : string = "color: purple"
        let v3718 : Types.std.string.String = Fable.Core.Rust.emitExpr v3717 v1450
        let v3719 : string = $"{v3642}"
        let v3720 : Types.std.string.String = Fable.Core.Rust.emitExpr v3719 v1450
        let v3721 : string = "de884c"
        let v3722 : string = $"color: {v3721}"
        let v3723 : Types.std.string.String = Fable.Core.Rust.emitExpr v3722 v1450
        let v3724 : string = $"{v3676} {v3710}"
        let v3725 : Types.std.string.String = Fable.Core.Rust.emitExpr v3724 v1450
        let v3726 : string = "color: #222222"
        let v3727 : Types.std.string.String = Fable.Core.Rust.emitExpr v3726 v1450
        let v3728 : string = $"{v3710}"
        let v3729 : Types.std.string.String = Fable.Core.Rust.emitExpr v3728 v1450
        let v3730 : (Types.std.string.String []) = [|v3716; v3718; v3720; v3723; v3725; v3727; v3729|]
        let v3731 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v3730 v39
        let v3732 : obj = v3731
        let v3733 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v3734 : obj = Fable.Core.Rust.emitExpr v3732 v3733
        let v3735 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v3734 v3735
        ()
    | _ ->
        let v3736 : string = "purple"
        let v3737 : string = "colored::Colorize::color(&*$0, $1.to_string())"
        let v3738 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3642, v3736) v3737
        let v3739 : Types.std.string.String = Fable.Core.Rust.emitExpr v3738 v86
        let v3740 : string = method6()
        let v3741 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3740 v97
        let v3742 : unativeint = unativeint 0
        let v3743 : unativeint = unativeint 2
        let v3744 : string = "&$0[$1..$2]"
        let v3745 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3741, v3742, v3743) v3744
        let v3746 : string = Fable.Core.Rust.emitExpr v3745 v103
        let v3747 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v3748 : uint8 = Fable.Core.Rust.emitExpr v3746 v3747
        let v3749 : string = method6()
        let v3750 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3749 v97
        let v3751 : unativeint = unativeint 2
        let v3752 : unativeint = unativeint 4
        let v3753 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3750, v3751, v3752) v3744
        let v3754 : string = Fable.Core.Rust.emitExpr v3753 v103
        let v3755 : uint8 = Fable.Core.Rust.emitExpr v3754 v3747
        let v3756 : string = method6()
        let v3757 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3756 v97
        let v3758 : unativeint = unativeint 4
        let v3759 : unativeint = unativeint 6
        let v3760 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3757, v3758, v3759) v3744
        let v3761 : string = Fable.Core.Rust.emitExpr v3760 v103
        let v3762 : uint8 = Fable.Core.Rust.emitExpr v3761 v3747
        let v3763 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v3764 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3676, v3748, v3755, v3762) v3763
        let v3765 : Types.std.string.String = Fable.Core.Rust.emitExpr v3764 v86
        let v3766 : string = method7()
        let v3767 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3766 v97
        let v3768 : unativeint = unativeint 0
        let v3769 : unativeint = unativeint 2
        let v3770 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3767, v3768, v3769) v3744
        let v3771 : string = Fable.Core.Rust.emitExpr v3770 v103
        let v3772 : uint8 = Fable.Core.Rust.emitExpr v3771 v3747
        let v3773 : string = method7()
        let v3774 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3773 v97
        let v3775 : unativeint = unativeint 2
        let v3776 : unativeint = unativeint 4
        let v3777 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3774, v3775, v3776) v3744
        let v3778 : string = Fable.Core.Rust.emitExpr v3777 v103
        let v3779 : uint8 = Fable.Core.Rust.emitExpr v3778 v3747
        let v3780 : string = method7()
        let v3781 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3780 v97
        let v3782 : unativeint = unativeint 4
        let v3783 : unativeint = unativeint 6
        let v3784 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3781, v3782, v3783) v3744
        let v3785 : string = Fable.Core.Rust.emitExpr v3784 v103
        let v3786 : uint8 = Fable.Core.Rust.emitExpr v3785 v3747
        let v3787 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3710, v3772, v3779, v3786) v3763
        let v3788 : Types.std.string.String = Fable.Core.Rust.emitExpr v3787 v86
        let v3789 : string = $"{v3739} {v3765} {v3788}"
        System.Console.WriteLine v3789
        ()
    let struct (v3790 : string, v3791 : string, v3792 : string, v3793 : bool) = method0()
    let v3794 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v3795 : int64 = Fable.Core.Rust.emitExpr v3794 v8
    let v3796 : string = "std::fs::metadata($0).unwrap().modified().unwrap()"
    let v3797 : Types.std.time.SystemTime = Fable.Core.Rust.emitExpr v998 v3796
    let v3798 : Types.std.string.String = Fable.Core.Rust.emitExpr v999 v11
    let v3799 : Types.EmitType<Types.std.string.String> = v3798 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3800 : string = Fable.Core.Rust.emitExpr v998 v21
    let v3801 : Types.std.string.String = Fable.Core.Rust.emitExpr v3800 v11
    let v3802 : Types.EmitType<Types.std.string.String> = v3801 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3803 : string = "start"
    let v3804 : Types.std.string.String = Fable.Core.Rust.emitExpr v3803 v11
    let v3805 : Types.EmitType<Types.std.string.String> = v3804 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3806 : Types.std.string.String = Fable.Core.Rust.emitExpr v3797 v44
    let v3807 : Types.EmitType<Types.std.string.String> = v3806 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3808 : (Types.EmitType<Types.std.string.String> []) = [|v3799; v3802; v3805; v3807|]
    let v3809 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3808 v39
    let v3810 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3809 v41
    let v3811 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3810 v41
    let v3812 : Types.std.string.String = Fable.Core.Rust.emitExpr v3811 v44
    let v3813 : Types.EmitType<Types.std.string.String> = v3812 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3814 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v3815 : int64 = Fable.Core.Rust.emitExpr v3814 v8
    let v3816 : int64 = v3815 - v3795
    let v3817 : string = (v3816).ToString ()
    let v3818 : int32 = 6
    let v3819 : string = method1(v3818, v3817)
    let v3820 : uint8 = Fable.Core.Rust.emitExpr () v53
    let v3821 : Types.std.string.String = Fable.Core.Rust.emitExpr v55 v11
    let v3822 : Types.EmitType<Types.std.string.String> = v3821 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3823 : Types.std.string.String = Fable.Core.Rust.emitExpr v3819 v11
    let v3824 : Types.EmitType<Types.std.string.String> = v3823 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3825 : Types.std.string.String = Fable.Core.Rust.emitExpr v60 v11
    let v3826 : Types.EmitType<Types.std.string.String> = v3825 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3827 : Types.std.string.String = Fable.Core.Rust.emitExpr v3820 v44
    let v3828 : Types.EmitType<Types.std.string.String> = v3827 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3829 : Types.std.string.String = Fable.Core.Rust.emitExpr v65 v11
    let v3830 : Types.EmitType<Types.std.string.String> = v3829 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3831 : Types.std.string.String = Fable.Core.Rust.emitExpr v68 v11
    let v3832 : Types.EmitType<Types.std.string.String> = v3831 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3833 : (Types.EmitType<Types.std.string.String> []) = [|v3822; v3824; v3826; v3828; v3830; v3832|]
    let v3834 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3833 v39
    let v3835 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3834 v41
    let v3836 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3835 v41
    let v3837 : Types.std.string.String = Fable.Core.Rust.emitExpr v3836 v44
    let v3838 : Types.EmitType<Types.std.string.String> = v3837 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3839 : string = "> wait_file_change ()"
    let v3840 : Types.std.string.String = Fable.Core.Rust.emitExpr v3839 v11
    let v3841 : Types.EmitType<Types.std.string.String> = v3840 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3842 : (Types.EmitType<Types.std.string.String> []) = [|v3841|]
    let v3843 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3842 v39
    let v3844 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3843 v41
    let v3845 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v3844 v41
    let v3846 : Types.std.string.String = Fable.Core.Rust.emitExpr v3845 v44
    let v3847 : Types.EmitType<Types.std.string.String> = v3846 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3848 : Types.std.string.String = Fable.Core.Rust.emitExpr v3847 v86
    let v3849 : string = (v3848).ToString ()
    let v3850 : string = $"r#\"{v89}\"#"
    let v3851 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3850
    let v3852 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3851 v92
    let v3853 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3852 v94
    let v3854 : string = method2(v3849)
    let v3855 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3854 v97
    let v3856 : string = method3()
    let v3857 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3856 v97
    let v3858 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3853, v3855, v3857) v101
    let v3859 : string = Fable.Core.Rust.emitExpr v3858 v103
    let v3860 : string = $"r#\"{v105}\"#"
    let v3861 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3860
    let v3862 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3861 v92
    let v3863 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3862 v94
    let v3864 : string = method2(v3859)
    let v3865 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3864 v97
    let v3866 : string = method4()
    let v3867 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3866 v97
    let v3868 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3863, v3865, v3867) v101
    let v3869 : string = Fable.Core.Rust.emitExpr v3868 v103
    let v3870 : string = $"r#\"{v116}\"#"
    let v3871 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3870
    let v3872 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3871 v92
    let v3873 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3872 v94
    let v3874 : string = method2(v3869)
    let v3875 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3874 v97
    let v3876 : string = method5()
    let v3877 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3876 v97
    let v3878 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3873, v3875, v3877) v101
    let v3879 : string = Fable.Core.Rust.emitExpr v3878 v103
    let v3880 : Types.std.string.String = Fable.Core.Rust.emitExpr v3879 v11
    let v3881 : Types.EmitType<Types.std.string.String> = v3880 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3882 : Types.std.string.String = Fable.Core.Rust.emitExpr v3813 v86
    let v3883 : string = (v3882).ToString ()
    let v3884 : string = $"r#\"{v89}\"#"
    let v3885 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3884
    let v3886 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3885 v92
    let v3887 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3886 v94
    let v3888 : string = method2(v3883)
    let v3889 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3888 v97
    let v3890 : string = method3()
    let v3891 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3890 v97
    let v3892 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3887, v3889, v3891) v101
    let v3893 : string = Fable.Core.Rust.emitExpr v3892 v103
    let v3894 : string = $"r#\"{v105}\"#"
    let v3895 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3894
    let v3896 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3895 v92
    let v3897 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3896 v94
    let v3898 : string = method2(v3893)
    let v3899 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3898 v97
    let v3900 : string = method4()
    let v3901 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3900 v97
    let v3902 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3897, v3899, v3901) v101
    let v3903 : string = Fable.Core.Rust.emitExpr v3902 v103
    let v3904 : string = $"r#\"{v116}\"#"
    let v3905 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3904
    let v3906 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3905 v92
    let v3907 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3906 v94
    let v3908 : string = method2(v3903)
    let v3909 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3908 v97
    let v3910 : string = method5()
    let v3911 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3910 v97
    let v3912 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3907, v3909, v3911) v101
    let v3913 : string = Fable.Core.Rust.emitExpr v3912 v103
    let v3914 : Types.std.string.String = Fable.Core.Rust.emitExpr v3913 v11
    let v3915 : Types.EmitType<Types.std.string.String> = v3914 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3916 : Types.std.string.String = Fable.Core.Rust.emitExpr v3838 v86
    let v3917 : string = (v3916).ToString ()
    let v3918 : string = $"r#\"{v89}\"#"
    let v3919 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3918
    let v3920 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3919 v92
    let v3921 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3920 v94
    let v3922 : string = method2(v3917)
    let v3923 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3922 v97
    let v3924 : string = method3()
    let v3925 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3924 v97
    let v3926 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3921, v3923, v3925) v101
    let v3927 : string = Fable.Core.Rust.emitExpr v3926 v103
    let v3928 : string = $"r#\"{v105}\"#"
    let v3929 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3928
    let v3930 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3929 v92
    let v3931 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3930 v94
    let v3932 : string = method2(v3927)
    let v3933 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3932 v97
    let v3934 : string = method4()
    let v3935 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3934 v97
    let v3936 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3931, v3933, v3935) v101
    let v3937 : string = Fable.Core.Rust.emitExpr v3936 v103
    let v3938 : string = $"r#\"{v116}\"#"
    let v3939 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v3938
    let v3940 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v3939 v92
    let v3941 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v3940 v94
    let v3942 : string = method2(v3937)
    let v3943 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3942 v97
    let v3944 : string = method5()
    let v3945 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3944 v97
    let v3946 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v3941, v3943, v3945) v101
    let v3947 : string = Fable.Core.Rust.emitExpr v3946 v103
    let v3948 : Types.std.string.String = Fable.Core.Rust.emitExpr v3947 v11
    let v3949 : Types.EmitType<Types.std.string.String> = v3948 |> unbox<Types.EmitType<Types.std.string.String>>
    let v3950 : bool = Fable.Core.Rust.emitExpr () v197
    let v3953 : US0 =
        if v3950 then
            US0_1
        else
            US0_0
    match v3953 with
    | US0_1 -> (* Wasm32 *)
        let v3954 : string = "%c%s %c%s %c%s"
        let v3955 : Types.std.string.String = Fable.Core.Rust.emitExpr v3954 v1450
        let v3956 : string = "color: purple"
        let v3957 : Types.std.string.String = Fable.Core.Rust.emitExpr v3956 v1450
        let v3958 : string = $"{v3881}"
        let v3959 : Types.std.string.String = Fable.Core.Rust.emitExpr v3958 v1450
        let v3960 : string = "387957"
        let v3961 : string = $"color: {v3960}"
        let v3962 : Types.std.string.String = Fable.Core.Rust.emitExpr v3961 v1450
        let v3963 : string = $"{v3915} {v3949}"
        let v3964 : Types.std.string.String = Fable.Core.Rust.emitExpr v3963 v1450
        let v3965 : string = "color: #222222"
        let v3966 : Types.std.string.String = Fable.Core.Rust.emitExpr v3965 v1450
        let v3967 : string = $"{v3949}"
        let v3968 : Types.std.string.String = Fable.Core.Rust.emitExpr v3967 v1450
        let v3969 : (Types.std.string.String []) = [|v3955; v3957; v3959; v3962; v3964; v3966; v3968|]
        let v3970 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v3969 v39
        let v3971 : obj = v3970
        let v3972 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v3973 : obj = Fable.Core.Rust.emitExpr v3971 v3972
        let v3974 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v3973 v3974
        ()
    | _ ->
        let v3975 : string = "purple"
        let v3976 : string = "colored::Colorize::color(&*$0, $1.to_string())"
        let v3977 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3881, v3975) v3976
        let v3978 : Types.std.string.String = Fable.Core.Rust.emitExpr v3977 v86
        let v3979 : string = method11()
        let v3980 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3979 v97
        let v3981 : unativeint = unativeint 0
        let v3982 : unativeint = unativeint 2
        let v3983 : string = "&$0[$1..$2]"
        let v3984 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3980, v3981, v3982) v3983
        let v3985 : string = Fable.Core.Rust.emitExpr v3984 v103
        let v3986 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v3987 : uint8 = Fable.Core.Rust.emitExpr v3985 v3986
        let v3988 : string = method11()
        let v3989 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3988 v97
        let v3990 : unativeint = unativeint 2
        let v3991 : unativeint = unativeint 4
        let v3992 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3989, v3990, v3991) v3983
        let v3993 : string = Fable.Core.Rust.emitExpr v3992 v103
        let v3994 : uint8 = Fable.Core.Rust.emitExpr v3993 v3986
        let v3995 : string = method11()
        let v3996 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v3995 v97
        let v3997 : unativeint = unativeint 4
        let v3998 : unativeint = unativeint 6
        let v3999 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v3996, v3997, v3998) v3983
        let v4000 : string = Fable.Core.Rust.emitExpr v3999 v103
        let v4001 : uint8 = Fable.Core.Rust.emitExpr v4000 v3986
        let v4002 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v4003 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3915, v3987, v3994, v4001) v4002
        let v4004 : Types.std.string.String = Fable.Core.Rust.emitExpr v4003 v86
        let v4005 : string = method7()
        let v4006 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4005 v97
        let v4007 : unativeint = unativeint 0
        let v4008 : unativeint = unativeint 2
        let v4009 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v4006, v4007, v4008) v3983
        let v4010 : string = Fable.Core.Rust.emitExpr v4009 v103
        let v4011 : uint8 = Fable.Core.Rust.emitExpr v4010 v3986
        let v4012 : string = method7()
        let v4013 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4012 v97
        let v4014 : unativeint = unativeint 2
        let v4015 : unativeint = unativeint 4
        let v4016 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v4013, v4014, v4015) v3983
        let v4017 : string = Fable.Core.Rust.emitExpr v4016 v103
        let v4018 : uint8 = Fable.Core.Rust.emitExpr v4017 v3986
        let v4019 : string = method7()
        let v4020 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4019 v97
        let v4021 : unativeint = unativeint 4
        let v4022 : unativeint = unativeint 6
        let v4023 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v4020, v4021, v4022) v3983
        let v4024 : string = Fable.Core.Rust.emitExpr v4023 v103
        let v4025 : uint8 = Fable.Core.Rust.emitExpr v4024 v3986
        let v4026 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v3949, v4011, v4018, v4025) v4002
        let v4027 : Types.std.string.String = Fable.Core.Rust.emitExpr v4026 v86
        let v4028 : string = $"{v3978} {v4004} {v4027}"
        System.Console.WriteLine v4028
        ()
    let v4029 : (int32 []) = [| 0..50 |]
    let v4030 : int32 = v4029.Length
    let v4031 : US1 = US1_0
    let v4032 : Mut0 = {l0 = 0; l1 = v4031} : Mut0
    while method12(v4030, v4032) do
        let v4034 : int32 = v4032.l0
        let v4035 : US1 = v4032.l1
        let v4036 : int32 = v4029.[int v4034]
        let v4280 : US1 =
            match v4035 with
            | US1_0 -> (* None *)
                let v4039 : Types.std.time.SystemTime = Fable.Core.Rust.emitExpr v998 v3796
                let v4040 : string = "i"
                let v4041 : Types.std.string.String = Fable.Core.Rust.emitExpr v4040 v11
                let v4042 : Types.EmitType<Types.std.string.String> = v4041 |> unbox<Types.EmitType<Types.std.string.String>>
                let v4043 : Types.std.string.String = Fable.Core.Rust.emitExpr v4036 v44
                let v4044 : Types.EmitType<Types.std.string.String> = v4043 |> unbox<Types.EmitType<Types.std.string.String>>
                let v4045 : string = "last_modified"
                let v4046 : Types.std.string.String = Fable.Core.Rust.emitExpr v4045 v11
                let v4047 : Types.EmitType<Types.std.string.String> = v4046 |> unbox<Types.EmitType<Types.std.string.String>>
                let v4048 : Types.std.string.String = Fable.Core.Rust.emitExpr v4039 v44
                let v4049 : Types.EmitType<Types.std.string.String> = v4048 |> unbox<Types.EmitType<Types.std.string.String>>
                let v4050 : (Types.EmitType<Types.std.string.String> []) = [|v4042; v4044; v4047; v4049|]
                let v4051 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4050 v39
                let v4052 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4051 v41
                let v4053 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4052 v41
                let v4054 : Types.std.string.String = Fable.Core.Rust.emitExpr v4053 v44
                let v4055 : Types.EmitType<Types.std.string.String> = v4054 |> unbox<Types.EmitType<Types.std.string.String>>
                let v4056 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
                let v4057 : int64 = Fable.Core.Rust.emitExpr v4056 v8
                let v4058 : int64 = v4057 - v3795
                let v4059 : string = (v4058).ToString ()
                let v4060 : int32 = 6
                let v4061 : string = method1(v4060, v4059)
                let v4062 : uint8 = Fable.Core.Rust.emitExpr () v53
                let v4063 : Types.std.string.String = Fable.Core.Rust.emitExpr v55 v11
                let v4064 : Types.EmitType<Types.std.string.String> = v4063 |> unbox<Types.EmitType<Types.std.string.String>>
                let v4065 : Types.std.string.String = Fable.Core.Rust.emitExpr v4061 v11
                let v4066 : Types.EmitType<Types.std.string.String> = v4065 |> unbox<Types.EmitType<Types.std.string.String>>
                let v4067 : Types.std.string.String = Fable.Core.Rust.emitExpr v60 v11
                let v4068 : Types.EmitType<Types.std.string.String> = v4067 |> unbox<Types.EmitType<Types.std.string.String>>
                let v4069 : Types.std.string.String = Fable.Core.Rust.emitExpr v4062 v44
                let v4070 : Types.EmitType<Types.std.string.String> = v4069 |> unbox<Types.EmitType<Types.std.string.String>>
                let v4071 : Types.std.string.String = Fable.Core.Rust.emitExpr v65 v11
                let v4072 : Types.EmitType<Types.std.string.String> = v4071 |> unbox<Types.EmitType<Types.std.string.String>>
                let v4073 : Types.std.string.String = Fable.Core.Rust.emitExpr v68 v11
                let v4074 : Types.EmitType<Types.std.string.String> = v4073 |> unbox<Types.EmitType<Types.std.string.String>>
                let v4075 : (Types.EmitType<Types.std.string.String> []) = [|v4064; v4066; v4068; v4070; v4072; v4074|]
                let v4076 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4075 v39
                let v4077 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4076 v41
                let v4078 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4077 v41
                let v4079 : Types.std.string.String = Fable.Core.Rust.emitExpr v4078 v44
                let v4080 : Types.EmitType<Types.std.string.String> = v4079 |> unbox<Types.EmitType<Types.std.string.String>>
                let v4081 : Types.std.string.String = Fable.Core.Rust.emitExpr v3839 v11
                let v4082 : Types.EmitType<Types.std.string.String> = v4081 |> unbox<Types.EmitType<Types.std.string.String>>
                let v4083 : (Types.EmitType<Types.std.string.String> []) = [|v4082|]
                let v4084 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4083 v39
                let v4085 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4084 v41
                let v4086 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4085 v41
                let v4087 : Types.std.string.String = Fable.Core.Rust.emitExpr v4086 v44
                let v4088 : Types.EmitType<Types.std.string.String> = v4087 |> unbox<Types.EmitType<Types.std.string.String>>
                let v4089 : Types.std.string.String = Fable.Core.Rust.emitExpr v4088 v86
                let v4090 : string = (v4089).ToString ()
                let v4091 : string = $"r#\"{v89}\"#"
                let v4092 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v4091
                let v4093 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v4092 v92
                let v4094 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v4093 v94
                let v4095 : string = method2(v4090)
                let v4096 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4095 v97
                let v4097 : string = method3()
                let v4098 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4097 v97
                let v4099 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v4094, v4096, v4098) v101
                let v4100 : string = Fable.Core.Rust.emitExpr v4099 v103
                let v4101 : string = $"r#\"{v105}\"#"
                let v4102 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v4101
                let v4103 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v4102 v92
                let v4104 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v4103 v94
                let v4105 : string = method2(v4100)
                let v4106 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4105 v97
                let v4107 : string = method4()
                let v4108 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4107 v97
                let v4109 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v4104, v4106, v4108) v101
                let v4110 : string = Fable.Core.Rust.emitExpr v4109 v103
                let v4111 : string = $"r#\"{v116}\"#"
                let v4112 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v4111
                let v4113 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v4112 v92
                let v4114 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v4113 v94
                let v4115 : string = method2(v4110)
                let v4116 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4115 v97
                let v4117 : string = method5()
                let v4118 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4117 v97
                let v4119 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v4114, v4116, v4118) v101
                let v4120 : string = Fable.Core.Rust.emitExpr v4119 v103
                let v4121 : Types.std.string.String = Fable.Core.Rust.emitExpr v4120 v11
                let v4122 : Types.EmitType<Types.std.string.String> = v4121 |> unbox<Types.EmitType<Types.std.string.String>>
                let v4123 : Types.std.string.String = Fable.Core.Rust.emitExpr v4055 v86
                let v4124 : string = (v4123).ToString ()
                let v4125 : string = $"r#\"{v89}\"#"
                let v4126 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v4125
                let v4127 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v4126 v92
                let v4128 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v4127 v94
                let v4129 : string = method2(v4124)
                let v4130 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4129 v97
                let v4131 : string = method3()
                let v4132 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4131 v97
                let v4133 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v4128, v4130, v4132) v101
                let v4134 : string = Fable.Core.Rust.emitExpr v4133 v103
                let v4135 : string = $"r#\"{v105}\"#"
                let v4136 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v4135
                let v4137 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v4136 v92
                let v4138 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v4137 v94
                let v4139 : string = method2(v4134)
                let v4140 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4139 v97
                let v4141 : string = method4()
                let v4142 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4141 v97
                let v4143 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v4138, v4140, v4142) v101
                let v4144 : string = Fable.Core.Rust.emitExpr v4143 v103
                let v4145 : string = $"r#\"{v116}\"#"
                let v4146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v4145
                let v4147 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v4146 v92
                let v4148 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v4147 v94
                let v4149 : string = method2(v4144)
                let v4150 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4149 v97
                let v4151 : string = method5()
                let v4152 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4151 v97
                let v4153 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v4148, v4150, v4152) v101
                let v4154 : string = Fable.Core.Rust.emitExpr v4153 v103
                let v4155 : Types.std.string.String = Fable.Core.Rust.emitExpr v4154 v11
                let v4156 : Types.EmitType<Types.std.string.String> = v4155 |> unbox<Types.EmitType<Types.std.string.String>>
                let v4157 : Types.std.string.String = Fable.Core.Rust.emitExpr v4080 v86
                let v4158 : string = (v4157).ToString ()
                let v4159 : string = $"r#\"{v89}\"#"
                let v4160 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v4159
                let v4161 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v4160 v92
                let v4162 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v4161 v94
                let v4163 : string = method2(v4158)
                let v4164 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4163 v97
                let v4165 : string = method3()
                let v4166 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4165 v97
                let v4167 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v4162, v4164, v4166) v101
                let v4168 : string = Fable.Core.Rust.emitExpr v4167 v103
                let v4169 : string = $"r#\"{v105}\"#"
                let v4170 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v4169
                let v4171 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v4170 v92
                let v4172 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v4171 v94
                let v4173 : string = method2(v4168)
                let v4174 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4173 v97
                let v4175 : string = method4()
                let v4176 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4175 v97
                let v4177 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v4172, v4174, v4176) v101
                let v4178 : string = Fable.Core.Rust.emitExpr v4177 v103
                let v4179 : string = $"r#\"{v116}\"#"
                let v4180 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v4179
                let v4181 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v4180 v92
                let v4182 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v4181 v94
                let v4183 : string = method2(v4178)
                let v4184 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4183 v97
                let v4185 : string = method5()
                let v4186 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4185 v97
                let v4187 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v4182, v4184, v4186) v101
                let v4188 : string = Fable.Core.Rust.emitExpr v4187 v103
                let v4189 : Types.std.string.String = Fable.Core.Rust.emitExpr v4188 v11
                let v4190 : Types.EmitType<Types.std.string.String> = v4189 |> unbox<Types.EmitType<Types.std.string.String>>
                let v4191 : bool = Fable.Core.Rust.emitExpr () v197
                let v4194 : US0 =
                    if v4191 then
                        US0_1
                    else
                        US0_0
                match v4194 with
                | US0_1 -> (* Wasm32 *)
                    let v4195 : string = "%c%s %c%s %c%s"
                    let v4196 : Types.std.string.String = Fable.Core.Rust.emitExpr v4195 v1450
                    let v4197 : string = "color: purple"
                    let v4198 : Types.std.string.String = Fable.Core.Rust.emitExpr v4197 v1450
                    let v4199 : string = $"{v4122}"
                    let v4200 : Types.std.string.String = Fable.Core.Rust.emitExpr v4199 v1450
                    let v4201 : string = "387957"
                    let v4202 : string = $"color: {v4201}"
                    let v4203 : Types.std.string.String = Fable.Core.Rust.emitExpr v4202 v1450
                    let v4204 : string = $"{v4156} {v4190}"
                    let v4205 : Types.std.string.String = Fable.Core.Rust.emitExpr v4204 v1450
                    let v4206 : string = "color: #222222"
                    let v4207 : Types.std.string.String = Fable.Core.Rust.emitExpr v4206 v1450
                    let v4208 : string = $"{v4190}"
                    let v4209 : Types.std.string.String = Fable.Core.Rust.emitExpr v4208 v1450
                    let v4210 : (Types.std.string.String []) = [|v4196; v4198; v4200; v4203; v4205; v4207; v4209|]
                    let v4211 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v4210 v39
                    let v4212 : obj = v4211
                    let v4213 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
                    let v4214 : obj = Fable.Core.Rust.emitExpr v4212 v4213
                    let v4215 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
                    Fable.Core.Rust.emitExpr v4214 v4215
                    ()
                | _ ->
                    let v4216 : string = "purple"
                    let v4217 : string = "colored::Colorize::color(&*$0, $1.to_string())"
                    let v4218 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v4122, v4216) v4217
                    let v4219 : Types.std.string.String = Fable.Core.Rust.emitExpr v4218 v86
                    let v4220 : string = method11()
                    let v4221 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4220 v97
                    let v4222 : unativeint = unativeint 0
                    let v4223 : unativeint = unativeint 2
                    let v4224 : string = "&$0[$1..$2]"
                    let v4225 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v4221, v4222, v4223) v4224
                    let v4226 : string = Fable.Core.Rust.emitExpr v4225 v103
                    let v4227 : string = "u8::from_str_radix($0, 16).unwrap()"
                    let v4228 : uint8 = Fable.Core.Rust.emitExpr v4226 v4227
                    let v4229 : string = method11()
                    let v4230 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4229 v97
                    let v4231 : unativeint = unativeint 2
                    let v4232 : unativeint = unativeint 4
                    let v4233 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v4230, v4231, v4232) v4224
                    let v4234 : string = Fable.Core.Rust.emitExpr v4233 v103
                    let v4235 : uint8 = Fable.Core.Rust.emitExpr v4234 v4227
                    let v4236 : string = method11()
                    let v4237 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4236 v97
                    let v4238 : unativeint = unativeint 4
                    let v4239 : unativeint = unativeint 6
                    let v4240 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v4237, v4238, v4239) v4224
                    let v4241 : string = Fable.Core.Rust.emitExpr v4240 v103
                    let v4242 : uint8 = Fable.Core.Rust.emitExpr v4241 v4227
                    let v4243 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
                    let v4244 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v4156, v4228, v4235, v4242) v4243
                    let v4245 : Types.std.string.String = Fable.Core.Rust.emitExpr v4244 v86
                    let v4246 : string = method7()
                    let v4247 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4246 v97
                    let v4248 : unativeint = unativeint 0
                    let v4249 : unativeint = unativeint 2
                    let v4250 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v4247, v4248, v4249) v4224
                    let v4251 : string = Fable.Core.Rust.emitExpr v4250 v103
                    let v4252 : uint8 = Fable.Core.Rust.emitExpr v4251 v4227
                    let v4253 : string = method7()
                    let v4254 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4253 v97
                    let v4255 : unativeint = unativeint 2
                    let v4256 : unativeint = unativeint 4
                    let v4257 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v4254, v4255, v4256) v4224
                    let v4258 : string = Fable.Core.Rust.emitExpr v4257 v103
                    let v4259 : uint8 = Fable.Core.Rust.emitExpr v4258 v4227
                    let v4260 : string = method7()
                    let v4261 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4260 v97
                    let v4262 : unativeint = unativeint 4
                    let v4263 : unativeint = unativeint 6
                    let v4264 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v4261, v4262, v4263) v4224
                    let v4265 : string = Fable.Core.Rust.emitExpr v4264 v103
                    let v4266 : uint8 = Fable.Core.Rust.emitExpr v4265 v4227
                    let v4267 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v4190, v4252, v4259, v4266) v4243
                    let v4268 : Types.std.string.String = Fable.Core.Rust.emitExpr v4267 v86
                    let v4269 : string = $"{v4219} {v4245} {v4268}"
                    System.Console.WriteLine v4269
                    ()
                let v4270 : string = "$0 > $1"
                let v4271 : bool = Fable.Core.Rust.emitExpr struct (v4039, v3797) v4270
                if v4271 then
                    let v4272 : Result<Types.std.string.String, Types.std.io.Error> = Fable.Core.Rust.emitExpr v998 v1448
                    let v4273 : Types.std.string.String = Fable.Core.Rust.emitExpr v4272 v1450
                    let v4274 : string = Fable.Core.Rust.emitExpr v4273 v103
                    US1_1(v4274)
                else
                    let v4276 : string = "std::thread::sleep(std::time::Duration::from_millis(*$0))"
                    Fable.Core.Rust.emitExpr 25UL v4276
                    US1_0
            | US1_1(v4037) -> (* Some *)
                US1_1(v4037)
        let v4281 : int32 = v4034 + 1
        v4032.l0 <- v4281
        v4032.l1 <- v4280
        ()
    let v4282 : US1 = v4032.l1
    let v4285 : string =
        match v4282 with
        | US1_0 -> (* None *)
            v1226
        | US1_1(v4283) -> (* Some *)
            v4283
    let v4286 : string = "new_fsx len"
    let v4287 : Types.std.string.String = Fable.Core.Rust.emitExpr v4286 v11
    let v4288 : Types.EmitType<Types.std.string.String> = v4287 |> unbox<Types.EmitType<Types.std.string.String>>
    let v4289 : int32 = Fable.Core.Rust.emitExpr v4285 v1466
    let v4290 : Types.std.string.String = Fable.Core.Rust.emitExpr v4289 v44
    let v4291 : Types.EmitType<Types.std.string.String> = v4290 |> unbox<Types.EmitType<Types.std.string.String>>
    let v4292 : (Types.EmitType<Types.std.string.String> []) = [|v4288; v4291|]
    let v4293 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4292 v39
    let v4294 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4293 v41
    let v4295 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4294 v41
    let v4296 : Types.std.string.String = Fable.Core.Rust.emitExpr v4295 v44
    let v4297 : Types.EmitType<Types.std.string.String> = v4296 |> unbox<Types.EmitType<Types.std.string.String>>
    let v4298 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v4299 : int64 = Fable.Core.Rust.emitExpr v4298 v8
    let v4300 : int64 = v4299 - v9
    let v4301 : string = (v4300).ToString ()
    let v4302 : int32 = 6
    let v4303 : string = method1(v4302, v4301)
    let v4304 : uint8 = Fable.Core.Rust.emitExpr () v53
    let v4305 : Types.std.string.String = Fable.Core.Rust.emitExpr v55 v11
    let v4306 : Types.EmitType<Types.std.string.String> = v4305 |> unbox<Types.EmitType<Types.std.string.String>>
    let v4307 : Types.std.string.String = Fable.Core.Rust.emitExpr v4303 v11
    let v4308 : Types.EmitType<Types.std.string.String> = v4307 |> unbox<Types.EmitType<Types.std.string.String>>
    let v4309 : Types.std.string.String = Fable.Core.Rust.emitExpr v60 v11
    let v4310 : Types.EmitType<Types.std.string.String> = v4309 |> unbox<Types.EmitType<Types.std.string.String>>
    let v4311 : Types.std.string.String = Fable.Core.Rust.emitExpr v4304 v44
    let v4312 : Types.EmitType<Types.std.string.String> = v4311 |> unbox<Types.EmitType<Types.std.string.String>>
    let v4313 : Types.std.string.String = Fable.Core.Rust.emitExpr v65 v11
    let v4314 : Types.EmitType<Types.std.string.String> = v4313 |> unbox<Types.EmitType<Types.std.string.String>>
    let v4315 : Types.std.string.String = Fable.Core.Rust.emitExpr v68 v11
    let v4316 : Types.EmitType<Types.std.string.String> = v4315 |> unbox<Types.EmitType<Types.std.string.String>>
    let v4317 : (Types.EmitType<Types.std.string.String> []) = [|v4306; v4308; v4310; v4312; v4314; v4316|]
    let v4318 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4317 v39
    let v4319 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4318 v41
    let v4320 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4319 v41
    let v4321 : Types.std.string.String = Fable.Core.Rust.emitExpr v4320 v44
    let v4322 : Types.EmitType<Types.std.string.String> = v4321 |> unbox<Types.EmitType<Types.std.string.String>>
    let v4323 : Types.std.string.String = Fable.Core.Rust.emitExpr v77 v11
    let v4324 : Types.EmitType<Types.std.string.String> = v4323 |> unbox<Types.EmitType<Types.std.string.String>>
    let v4325 : (Types.EmitType<Types.std.string.String> []) = [|v4324|]
    let v4326 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4325 v39
    let v4327 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4326 v41
    let v4328 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4327 v41
    let v4329 : Types.std.string.String = Fable.Core.Rust.emitExpr v4328 v44
    let v4330 : Types.EmitType<Types.std.string.String> = v4329 |> unbox<Types.EmitType<Types.std.string.String>>
    let v4331 : Types.std.string.String = Fable.Core.Rust.emitExpr v4330 v86
    let v4332 : string = (v4331).ToString ()
    let v4333 : string = $"r#\"{v89}\"#"
    let v4334 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v4333
    let v4335 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v4334 v92
    let v4336 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v4335 v94
    let v4337 : string = method2(v4332)
    let v4338 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4337 v97
    let v4339 : string = method3()
    let v4340 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4339 v97
    let v4341 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v4336, v4338, v4340) v101
    let v4342 : string = Fable.Core.Rust.emitExpr v4341 v103
    let v4343 : string = $"r#\"{v105}\"#"
    let v4344 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v4343
    let v4345 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v4344 v92
    let v4346 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v4345 v94
    let v4347 : string = method2(v4342)
    let v4348 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4347 v97
    let v4349 : string = method4()
    let v4350 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4349 v97
    let v4351 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v4346, v4348, v4350) v101
    let v4352 : string = Fable.Core.Rust.emitExpr v4351 v103
    let v4353 : string = $"r#\"{v116}\"#"
    let v4354 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v4353
    let v4355 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v4354 v92
    let v4356 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v4355 v94
    let v4357 : string = method2(v4352)
    let v4358 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4357 v97
    let v4359 : string = method5()
    let v4360 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4359 v97
    let v4361 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v4356, v4358, v4360) v101
    let v4362 : string = Fable.Core.Rust.emitExpr v4361 v103
    let v4363 : Types.std.string.String = Fable.Core.Rust.emitExpr v4362 v11
    let v4364 : Types.EmitType<Types.std.string.String> = v4363 |> unbox<Types.EmitType<Types.std.string.String>>
    let v4365 : Types.std.string.String = Fable.Core.Rust.emitExpr v4297 v86
    let v4366 : string = (v4365).ToString ()
    let v4367 : string = $"r#\"{v89}\"#"
    let v4368 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v4367
    let v4369 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v4368 v92
    let v4370 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v4369 v94
    let v4371 : string = method2(v4366)
    let v4372 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4371 v97
    let v4373 : string = method3()
    let v4374 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4373 v97
    let v4375 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v4370, v4372, v4374) v101
    let v4376 : string = Fable.Core.Rust.emitExpr v4375 v103
    let v4377 : string = $"r#\"{v105}\"#"
    let v4378 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v4377
    let v4379 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v4378 v92
    let v4380 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v4379 v94
    let v4381 : string = method2(v4376)
    let v4382 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4381 v97
    let v4383 : string = method4()
    let v4384 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4383 v97
    let v4385 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v4380, v4382, v4384) v101
    let v4386 : string = Fable.Core.Rust.emitExpr v4385 v103
    let v4387 : string = $"r#\"{v116}\"#"
    let v4388 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v4387
    let v4389 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v4388 v92
    let v4390 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v4389 v94
    let v4391 : string = method2(v4386)
    let v4392 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4391 v97
    let v4393 : string = method5()
    let v4394 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4393 v97
    let v4395 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v4390, v4392, v4394) v101
    let v4396 : string = Fable.Core.Rust.emitExpr v4395 v103
    let v4397 : Types.std.string.String = Fable.Core.Rust.emitExpr v4396 v11
    let v4398 : Types.EmitType<Types.std.string.String> = v4397 |> unbox<Types.EmitType<Types.std.string.String>>
    let v4399 : Types.std.string.String = Fable.Core.Rust.emitExpr v4322 v86
    let v4400 : string = (v4399).ToString ()
    let v4401 : string = $"r#\"{v89}\"#"
    let v4402 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v4401
    let v4403 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v4402 v92
    let v4404 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v4403 v94
    let v4405 : string = method2(v4400)
    let v4406 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4405 v97
    let v4407 : string = method3()
    let v4408 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4407 v97
    let v4409 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v4404, v4406, v4408) v101
    let v4410 : string = Fable.Core.Rust.emitExpr v4409 v103
    let v4411 : string = $"r#\"{v105}\"#"
    let v4412 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v4411
    let v4413 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v4412 v92
    let v4414 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v4413 v94
    let v4415 : string = method2(v4410)
    let v4416 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4415 v97
    let v4417 : string = method4()
    let v4418 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4417 v97
    let v4419 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v4414, v4416, v4418) v101
    let v4420 : string = Fable.Core.Rust.emitExpr v4419 v103
    let v4421 : string = $"r#\"{v116}\"#"
    let v4422 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v4421
    let v4423 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v4422 v92
    let v4424 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v4423 v94
    let v4425 : string = method2(v4420)
    let v4426 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4425 v97
    let v4427 : string = method5()
    let v4428 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4427 v97
    let v4429 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v4424, v4426, v4428) v101
    let v4430 : string = Fable.Core.Rust.emitExpr v4429 v103
    let v4431 : Types.std.string.String = Fable.Core.Rust.emitExpr v4430 v11
    let v4432 : Types.EmitType<Types.std.string.String> = v4431 |> unbox<Types.EmitType<Types.std.string.String>>
    let v4433 : bool = Fable.Core.Rust.emitExpr () v197
    let v4436 : US0 =
        if v4433 then
            US0_1
        else
            US0_0
    match v4436 with
    | US0_1 -> (* Wasm32 *)
        let v4437 : string = "%c%s %c%s %c%s"
        let v4438 : Types.std.string.String = Fable.Core.Rust.emitExpr v4437 v1450
        let v4439 : string = "color: purple"
        let v4440 : Types.std.string.String = Fable.Core.Rust.emitExpr v4439 v1450
        let v4441 : string = $"{v4364}"
        let v4442 : Types.std.string.String = Fable.Core.Rust.emitExpr v4441 v1450
        let v4443 : string = "de884c"
        let v4444 : string = $"color: {v4443}"
        let v4445 : Types.std.string.String = Fable.Core.Rust.emitExpr v4444 v1450
        let v4446 : string = $"{v4398} {v4432}"
        let v4447 : Types.std.string.String = Fable.Core.Rust.emitExpr v4446 v1450
        let v4448 : string = "color: #222222"
        let v4449 : Types.std.string.String = Fable.Core.Rust.emitExpr v4448 v1450
        let v4450 : string = $"{v4432}"
        let v4451 : Types.std.string.String = Fable.Core.Rust.emitExpr v4450 v1450
        let v4452 : (Types.std.string.String []) = [|v4438; v4440; v4442; v4445; v4447; v4449; v4451|]
        let v4453 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v4452 v39
        let v4454 : obj = v4453
        let v4455 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v4456 : obj = Fable.Core.Rust.emitExpr v4454 v4455
        let v4457 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v4456 v4457
        ()
    | _ ->
        let v4458 : string = "purple"
        let v4459 : string = "colored::Colorize::color(&*$0, $1.to_string())"
        let v4460 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v4364, v4458) v4459
        let v4461 : Types.std.string.String = Fable.Core.Rust.emitExpr v4460 v86
        let v4462 : string = method6()
        let v4463 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4462 v97
        let v4464 : unativeint = unativeint 0
        let v4465 : unativeint = unativeint 2
        let v4466 : string = "&$0[$1..$2]"
        let v4467 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v4463, v4464, v4465) v4466
        let v4468 : string = Fable.Core.Rust.emitExpr v4467 v103
        let v4469 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v4470 : uint8 = Fable.Core.Rust.emitExpr v4468 v4469
        let v4471 : string = method6()
        let v4472 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4471 v97
        let v4473 : unativeint = unativeint 2
        let v4474 : unativeint = unativeint 4
        let v4475 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v4472, v4473, v4474) v4466
        let v4476 : string = Fable.Core.Rust.emitExpr v4475 v103
        let v4477 : uint8 = Fable.Core.Rust.emitExpr v4476 v4469
        let v4478 : string = method6()
        let v4479 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4478 v97
        let v4480 : unativeint = unativeint 4
        let v4481 : unativeint = unativeint 6
        let v4482 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v4479, v4480, v4481) v4466
        let v4483 : string = Fable.Core.Rust.emitExpr v4482 v103
        let v4484 : uint8 = Fable.Core.Rust.emitExpr v4483 v4469
        let v4485 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v4486 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v4398, v4470, v4477, v4484) v4485
        let v4487 : Types.std.string.String = Fable.Core.Rust.emitExpr v4486 v86
        let v4488 : string = method7()
        let v4489 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4488 v97
        let v4490 : unativeint = unativeint 0
        let v4491 : unativeint = unativeint 2
        let v4492 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v4489, v4490, v4491) v4466
        let v4493 : string = Fable.Core.Rust.emitExpr v4492 v103
        let v4494 : uint8 = Fable.Core.Rust.emitExpr v4493 v4469
        let v4495 : string = method7()
        let v4496 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4495 v97
        let v4497 : unativeint = unativeint 2
        let v4498 : unativeint = unativeint 4
        let v4499 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v4496, v4497, v4498) v4466
        let v4500 : string = Fable.Core.Rust.emitExpr v4499 v103
        let v4501 : uint8 = Fable.Core.Rust.emitExpr v4500 v4469
        let v4502 : string = method7()
        let v4503 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4502 v97
        let v4504 : unativeint = unativeint 4
        let v4505 : unativeint = unativeint 6
        let v4506 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v4503, v4504, v4505) v4466
        let v4507 : string = Fable.Core.Rust.emitExpr v4506 v103
        let v4508 : uint8 = Fable.Core.Rust.emitExpr v4507 v4469
        let v4509 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v4432, v4494, v4501, v4508) v4485
        let v4510 : Types.std.string.String = Fable.Core.Rust.emitExpr v4509 v86
        let v4511 : string = $"{v4461} {v4487} {v4510}"
        System.Console.WriteLine v4511
        ()
    let v4512 : Types.std.path.PathBuf = v1 |> Option.defaultValue v998
    let v4513 : Result<unit, Types.std.io.Error> = Fable.Core.Rust.emitExpr struct (v4512, v4285) v1227
    Fable.Core.Rust.emitExpr v4513 v1229
    let v4514 : string = "> fs_write new_fsx_path; ok"
    let v4515 : Types.std.string.String = Fable.Core.Rust.emitExpr v4514 v11
    let v4516 : Types.EmitType<Types.std.string.String> = v4515 |> unbox<Types.EmitType<Types.std.string.String>>
    let v4517 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v4518 : int64 = Fable.Core.Rust.emitExpr v4517 v8
    let v4519 : int64 = v4518 - v9
    let v4520 : string = (v4519).ToString ()
    let v4521 : int32 = 6
    let v4522 : string = method1(v4521, v4520)
    let v4523 : uint8 = Fable.Core.Rust.emitExpr () v53
    let v4524 : Types.std.string.String = Fable.Core.Rust.emitExpr v55 v11
    let v4525 : Types.EmitType<Types.std.string.String> = v4524 |> unbox<Types.EmitType<Types.std.string.String>>
    let v4526 : Types.std.string.String = Fable.Core.Rust.emitExpr v4522 v11
    let v4527 : Types.EmitType<Types.std.string.String> = v4526 |> unbox<Types.EmitType<Types.std.string.String>>
    let v4528 : Types.std.string.String = Fable.Core.Rust.emitExpr v60 v11
    let v4529 : Types.EmitType<Types.std.string.String> = v4528 |> unbox<Types.EmitType<Types.std.string.String>>
    let v4530 : Types.std.string.String = Fable.Core.Rust.emitExpr v4523 v44
    let v4531 : Types.EmitType<Types.std.string.String> = v4530 |> unbox<Types.EmitType<Types.std.string.String>>
    let v4532 : Types.std.string.String = Fable.Core.Rust.emitExpr v65 v11
    let v4533 : Types.EmitType<Types.std.string.String> = v4532 |> unbox<Types.EmitType<Types.std.string.String>>
    let v4534 : Types.std.string.String = Fable.Core.Rust.emitExpr v68 v11
    let v4535 : Types.EmitType<Types.std.string.String> = v4534 |> unbox<Types.EmitType<Types.std.string.String>>
    let v4536 : (Types.EmitType<Types.std.string.String> []) = [|v4525; v4527; v4529; v4531; v4533; v4535|]
    let v4537 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4536 v39
    let v4538 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4537 v41
    let v4539 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4538 v41
    let v4540 : Types.std.string.String = Fable.Core.Rust.emitExpr v4539 v44
    let v4541 : Types.EmitType<Types.std.string.String> = v4540 |> unbox<Types.EmitType<Types.std.string.String>>
    let v4542 : Types.std.string.String = Fable.Core.Rust.emitExpr v77 v11
    let v4543 : Types.EmitType<Types.std.string.String> = v4542 |> unbox<Types.EmitType<Types.std.string.String>>
    let v4544 : (Types.EmitType<Types.std.string.String> []) = [|v4543|]
    let v4545 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4544 v39
    let v4546 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4545 v41
    let v4547 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4546 v41
    let v4548 : Types.std.string.String = Fable.Core.Rust.emitExpr v4547 v44
    let v4549 : Types.EmitType<Types.std.string.String> = v4548 |> unbox<Types.EmitType<Types.std.string.String>>
    let v4550 : Types.std.string.String = Fable.Core.Rust.emitExpr v4549 v86
    let v4551 : string = (v4550).ToString ()
    let v4552 : string = $"r#\"{v89}\"#"
    let v4553 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v4552
    let v4554 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v4553 v92
    let v4555 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v4554 v94
    let v4556 : string = method2(v4551)
    let v4557 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4556 v97
    let v4558 : string = method3()
    let v4559 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4558 v97
    let v4560 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v4555, v4557, v4559) v101
    let v4561 : string = Fable.Core.Rust.emitExpr v4560 v103
    let v4562 : string = $"r#\"{v105}\"#"
    let v4563 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v4562
    let v4564 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v4563 v92
    let v4565 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v4564 v94
    let v4566 : string = method2(v4561)
    let v4567 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4566 v97
    let v4568 : string = method4()
    let v4569 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4568 v97
    let v4570 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v4565, v4567, v4569) v101
    let v4571 : string = Fable.Core.Rust.emitExpr v4570 v103
    let v4572 : string = $"r#\"{v116}\"#"
    let v4573 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v4572
    let v4574 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v4573 v92
    let v4575 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v4574 v94
    let v4576 : string = method2(v4571)
    let v4577 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4576 v97
    let v4578 : string = method5()
    let v4579 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4578 v97
    let v4580 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v4575, v4577, v4579) v101
    let v4581 : string = Fable.Core.Rust.emitExpr v4580 v103
    let v4582 : Types.std.string.String = Fable.Core.Rust.emitExpr v4581 v11
    let v4583 : Types.EmitType<Types.std.string.String> = v4582 |> unbox<Types.EmitType<Types.std.string.String>>
    let v4584 : Types.std.string.String = Fable.Core.Rust.emitExpr v4516 v86
    let v4585 : string = (v4584).ToString ()
    let v4586 : string = $"r#\"{v89}\"#"
    let v4587 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v4586
    let v4588 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v4587 v92
    let v4589 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v4588 v94
    let v4590 : string = method2(v4585)
    let v4591 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4590 v97
    let v4592 : string = method3()
    let v4593 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4592 v97
    let v4594 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v4589, v4591, v4593) v101
    let v4595 : string = Fable.Core.Rust.emitExpr v4594 v103
    let v4596 : string = $"r#\"{v105}\"#"
    let v4597 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v4596
    let v4598 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v4597 v92
    let v4599 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v4598 v94
    let v4600 : string = method2(v4595)
    let v4601 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4600 v97
    let v4602 : string = method4()
    let v4603 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4602 v97
    let v4604 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v4599, v4601, v4603) v101
    let v4605 : string = Fable.Core.Rust.emitExpr v4604 v103
    let v4606 : string = $"r#\"{v116}\"#"
    let v4607 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v4606
    let v4608 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v4607 v92
    let v4609 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v4608 v94
    let v4610 : string = method2(v4605)
    let v4611 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4610 v97
    let v4612 : string = method5()
    let v4613 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4612 v97
    let v4614 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v4609, v4611, v4613) v101
    let v4615 : string = Fable.Core.Rust.emitExpr v4614 v103
    let v4616 : Types.std.string.String = Fable.Core.Rust.emitExpr v4615 v11
    let v4617 : Types.EmitType<Types.std.string.String> = v4616 |> unbox<Types.EmitType<Types.std.string.String>>
    let v4618 : Types.std.string.String = Fable.Core.Rust.emitExpr v4541 v86
    let v4619 : string = (v4618).ToString ()
    let v4620 : string = $"r#\"{v89}\"#"
    let v4621 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v4620
    let v4622 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v4621 v92
    let v4623 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v4622 v94
    let v4624 : string = method2(v4619)
    let v4625 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4624 v97
    let v4626 : string = method3()
    let v4627 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4626 v97
    let v4628 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v4623, v4625, v4627) v101
    let v4629 : string = Fable.Core.Rust.emitExpr v4628 v103
    let v4630 : string = $"r#\"{v105}\"#"
    let v4631 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v4630
    let v4632 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v4631 v92
    let v4633 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v4632 v94
    let v4634 : string = method2(v4629)
    let v4635 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4634 v97
    let v4636 : string = method4()
    let v4637 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4636 v97
    let v4638 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v4633, v4635, v4637) v101
    let v4639 : string = Fable.Core.Rust.emitExpr v4638 v103
    let v4640 : string = $"r#\"{v116}\"#"
    let v4641 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v4640
    let v4642 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v4641 v92
    let v4643 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v4642 v94
    let v4644 : string = method2(v4639)
    let v4645 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4644 v97
    let v4646 : string = method5()
    let v4647 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4646 v97
    let v4648 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v4643, v4645, v4647) v101
    let v4649 : string = Fable.Core.Rust.emitExpr v4648 v103
    let v4650 : Types.std.string.String = Fable.Core.Rust.emitExpr v4649 v11
    let v4651 : Types.EmitType<Types.std.string.String> = v4650 |> unbox<Types.EmitType<Types.std.string.String>>
    let v4652 : bool = Fable.Core.Rust.emitExpr () v197
    let v4655 : US0 =
        if v4652 then
            US0_1
        else
            US0_0
    match v4655 with
    | US0_1 -> (* Wasm32 *)
        let v4656 : string = "%c%s %c%s %c%s"
        let v4657 : Types.std.string.String = Fable.Core.Rust.emitExpr v4656 v1450
        let v4658 : string = "color: purple"
        let v4659 : Types.std.string.String = Fable.Core.Rust.emitExpr v4658 v1450
        let v4660 : string = $"{v4583}"
        let v4661 : Types.std.string.String = Fable.Core.Rust.emitExpr v4660 v1450
        let v4662 : string = "de884c"
        let v4663 : string = $"color: {v4662}"
        let v4664 : Types.std.string.String = Fable.Core.Rust.emitExpr v4663 v1450
        let v4665 : string = $"{v4617} {v4651}"
        let v4666 : Types.std.string.String = Fable.Core.Rust.emitExpr v4665 v1450
        let v4667 : string = "color: #222222"
        let v4668 : Types.std.string.String = Fable.Core.Rust.emitExpr v4667 v1450
        let v4669 : string = $"{v4651}"
        let v4670 : Types.std.string.String = Fable.Core.Rust.emitExpr v4669 v1450
        let v4671 : (Types.std.string.String []) = [|v4657; v4659; v4661; v4664; v4666; v4668; v4670|]
        let v4672 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v4671 v39
        let v4673 : obj = v4672
        let v4674 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v4675 : obj = Fable.Core.Rust.emitExpr v4673 v4674
        let v4676 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v4675 v4676
        ()
    | _ ->
        let v4677 : string = "purple"
        let v4678 : string = "colored::Colorize::color(&*$0, $1.to_string())"
        let v4679 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v4583, v4677) v4678
        let v4680 : Types.std.string.String = Fable.Core.Rust.emitExpr v4679 v86
        let v4681 : string = method6()
        let v4682 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4681 v97
        let v4683 : unativeint = unativeint 0
        let v4684 : unativeint = unativeint 2
        let v4685 : string = "&$0[$1..$2]"
        let v4686 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v4682, v4683, v4684) v4685
        let v4687 : string = Fable.Core.Rust.emitExpr v4686 v103
        let v4688 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v4689 : uint8 = Fable.Core.Rust.emitExpr v4687 v4688
        let v4690 : string = method6()
        let v4691 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4690 v97
        let v4692 : unativeint = unativeint 2
        let v4693 : unativeint = unativeint 4
        let v4694 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v4691, v4692, v4693) v4685
        let v4695 : string = Fable.Core.Rust.emitExpr v4694 v103
        let v4696 : uint8 = Fable.Core.Rust.emitExpr v4695 v4688
        let v4697 : string = method6()
        let v4698 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4697 v97
        let v4699 : unativeint = unativeint 4
        let v4700 : unativeint = unativeint 6
        let v4701 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v4698, v4699, v4700) v4685
        let v4702 : string = Fable.Core.Rust.emitExpr v4701 v103
        let v4703 : uint8 = Fable.Core.Rust.emitExpr v4702 v4688
        let v4704 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v4705 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v4617, v4689, v4696, v4703) v4704
        let v4706 : Types.std.string.String = Fable.Core.Rust.emitExpr v4705 v86
        let v4707 : string = method7()
        let v4708 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4707 v97
        let v4709 : unativeint = unativeint 0
        let v4710 : unativeint = unativeint 2
        let v4711 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v4708, v4709, v4710) v4685
        let v4712 : string = Fable.Core.Rust.emitExpr v4711 v103
        let v4713 : uint8 = Fable.Core.Rust.emitExpr v4712 v4688
        let v4714 : string = method7()
        let v4715 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4714 v97
        let v4716 : unativeint = unativeint 2
        let v4717 : unativeint = unativeint 4
        let v4718 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v4715, v4716, v4717) v4685
        let v4719 : string = Fable.Core.Rust.emitExpr v4718 v103
        let v4720 : uint8 = Fable.Core.Rust.emitExpr v4719 v4688
        let v4721 : string = method7()
        let v4722 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v4721 v97
        let v4723 : unativeint = unativeint 4
        let v4724 : unativeint = unativeint 6
        let v4725 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v4722, v4723, v4724) v4685
        let v4726 : string = Fable.Core.Rust.emitExpr v4725 v103
        let v4727 : uint8 = Fable.Core.Rust.emitExpr v4726 v4688
        let v4728 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v4651, v4713, v4720, v4727) v4704
        let v4729 : Types.std.string.String = Fable.Core.Rust.emitExpr v4728 v86
        let v4730 : string = $"{v4680} {v4706} {v4729}"
        System.Console.WriteLine v4730
        ()
    v4285
and closure0 () (v0 : Types.std.path.PathBuf) : (Option<Types.std.path.PathBuf> -> string) =
    closure1(v0)
let v0 : (Types.std.path.PathBuf -> (Option<Types.std.path.PathBuf> -> string)) = closure0()
()
