type [<Struct>] US0 =
    | US0_0
    | US0_1
and [<Struct>] US1 =
    | US1_0
    | US1_1 of f1_0 : string
and Mut0 = {mutable l0 : int32; mutable l1 : US1}
let rec method0 () : struct (string * string * string * bool) =
    let v0 : string = ""
    let v1 : obj = v0
    struct (v0, v0, v0, true)
and method1 (v0 : string) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "($0).to_string()"
    let v2 : Types.std.string.String = Fable.Core.Rust.emitExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method3 (v0 : int32, v1 : string) : string =
    let v2 : int32 = String.length v1
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : string = $"0{v1}"
        method3(v0, v4)
    else
        v1
and method4 (v0 : uint8) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.Rust.emitExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method5 (v0 : (Types.EmitType<Types.std.string.String> [])) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "core::ops::Deref::deref($0)"
    let v2 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v0 v1
    let v3 : string = "&***$0"
    let v4 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2 v3
    let v5 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4 v3
    let v6 : string = "format!(\"{:?}\", $0)"
    let v7 : Types.std.string.String = Fable.Core.Rust.emitExpr v5 v6
    let v8 : Types.EmitType<Types.std.string.String> = v7 |> unbox<Types.EmitType<Types.std.string.String>>
    v8
and method6 (v0 : string) : string =
    v0
and method7 () : string =
    let v0 : string = "$1=$2"
    v0
and method8 () : string =
    let v0 : string = "[$1]"
    v0
and method9 () : string =
    let v0 : string = "\""
    v0
and method10 () : string =
    let v0 : string = " "
    v0
and method11 () : string =
    let v0 : string = "de884c"
    v0
and method12 () : string =
    let v0 : string = "385779"
    v0
and method2 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.Rust.emitExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method3(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.Rust.emitExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method1(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method1(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method1(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method4(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method1(v18)
    let v20 : string = "Debug"
    let v21 : Types.EmitType<Types.std.string.String> = method1(v20)
    let v22 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v21|]
    let v23 : Types.EmitType<Types.std.string.String> = method5(v22)
    let v24 : string = "> spi_to_fsx ()"
    let v25 : Types.EmitType<Types.std.string.String> = method1(v24)
    let v26 : (Types.EmitType<Types.std.string.String> []) = [|v25|]
    let v27 : string = "core::ops::Deref::deref($0)"
    let v28 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v26 v27
    let v29 : string = "&***$0"
    let v30 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v28 v29
    let v31 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v30 v29
    let v32 : string = "format!(\"{:?}\", $0)"
    let v33 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v32
    let v34 : Types.EmitType<Types.std.string.String> = v33 |> unbox<Types.EmitType<Types.std.string.String>>
    let v35 : string = "format!(\"{}\", $0)"
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v34 v35
    let v37 : string = (v36).ToString ()
    let v38 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = "regex::RegexBuilder::new($0)"
    let v42 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "$0.build().unwrap()"
    let v44 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : string = method6(v37)
    let v46 : string = "$0.as_str()"
    let v47 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v45 v46
    let v48 : string = method7()
    let v49 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v48 v46
    let v50 : string = "$0.replace_all(&$1, $2).to_string()"
    let v51 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v44, v47, v49) v50
    let v52 : string = "fable_library_rust::String_::fromStr($0)"
    let v53 : string = Fable.Core.Rust.emitExpr v51 v52
    let v54 : string = "\\[\"(.*?)\"\\]"
    let v55 : string = $"r#\"{v54}\"#"
    let v56 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v55
    let v57 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v56 v41
    let v58 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v57 v43
    let v59 : string = method6(v53)
    let v60 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v59 v46
    let v61 : string = method8()
    let v62 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v61 v46
    let v63 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v58, v60, v62) v50
    let v64 : string = Fable.Core.Rust.emitExpr v63 v52
    let v65 : string = "\\\\\""
    let v66 : string = $"r#\"{v65}\"#"
    let v67 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v66
    let v68 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v67 v41
    let v69 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v68 v43
    let v70 : string = method6(v64)
    let v71 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v70 v46
    let v72 : string = method9()
    let v73 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v72 v46
    let v74 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v69, v71, v73) v50
    let v75 : string = Fable.Core.Rust.emitExpr v74 v52
    let v76 : string = ", "
    let v77 : string = $"r#\"{v76}\"#"
    let v78 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v77
    let v79 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v78 v41
    let v80 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v79 v43
    let v81 : string = method6(v75)
    let v82 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v81 v46
    let v83 : string = method10()
    let v84 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v83 v46
    let v85 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v80, v82, v84) v50
    let v86 : string = Fable.Core.Rust.emitExpr v85 v52
    let v87 : Types.EmitType<Types.std.string.String> = method1(v86)
    let v88 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1 v27
    let v89 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v88 v29
    let v90 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v89 v29
    let v91 : Types.std.string.String = Fable.Core.Rust.emitExpr v90 v32
    let v92 : Types.EmitType<Types.std.string.String> = v91 |> unbox<Types.EmitType<Types.std.string.String>>
    let v93 : Types.std.string.String = Fable.Core.Rust.emitExpr v92 v35
    let v94 : string = (v93).ToString ()
    let v95 : string = $"r#\"{v38}\"#"
    let v96 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v95
    let v97 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v96 v41
    let v98 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v97 v43
    let v99 : string = method6(v94)
    let v100 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v99 v46
    let v101 : string = method7()
    let v102 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v101 v46
    let v103 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v98, v100, v102) v50
    let v104 : string = Fable.Core.Rust.emitExpr v103 v52
    let v105 : string = $"r#\"{v54}\"#"
    let v106 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v105
    let v107 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v106 v41
    let v108 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v107 v43
    let v109 : string = method6(v104)
    let v110 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v109 v46
    let v111 : string = method8()
    let v112 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v111 v46
    let v113 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v108, v110, v112) v50
    let v114 : string = Fable.Core.Rust.emitExpr v113 v52
    let v115 : string = $"r#\"{v65}\"#"
    let v116 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v115
    let v117 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v116 v41
    let v118 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v117 v43
    let v119 : string = method6(v114)
    let v120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v119 v46
    let v121 : string = method9()
    let v122 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v121 v46
    let v123 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v118, v120, v122) v50
    let v124 : string = Fable.Core.Rust.emitExpr v123 v52
    let v125 : string = $"r#\"{v76}\"#"
    let v126 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v125
    let v127 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v126 v41
    let v128 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v127 v43
    let v129 : string = method6(v124)
    let v130 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v129 v46
    let v131 : string = method10()
    let v132 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v131 v46
    let v133 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v128, v130, v132) v50
    let v134 : string = Fable.Core.Rust.emitExpr v133 v52
    let v135 : Types.EmitType<Types.std.string.String> = method1(v134)
    let v136 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v35
    let v137 : string = (v136).ToString ()
    let v138 : string = $"r#\"{v38}\"#"
    let v139 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v138
    let v140 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v139 v41
    let v141 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v140 v43
    let v142 : string = method6(v137)
    let v143 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v142 v46
    let v144 : string = method7()
    let v145 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v144 v46
    let v146 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v141, v143, v145) v50
    let v147 : string = Fable.Core.Rust.emitExpr v146 v52
    let v148 : string = $"r#\"{v54}\"#"
    let v149 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v148
    let v150 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v149 v41
    let v151 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v150 v43
    let v152 : string = method6(v147)
    let v153 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v152 v46
    let v154 : string = method8()
    let v155 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v154 v46
    let v156 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v151, v153, v155) v50
    let v157 : string = Fable.Core.Rust.emitExpr v156 v52
    let v158 : string = $"r#\"{v65}\"#"
    let v159 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v158
    let v160 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v159 v41
    let v161 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v160 v43
    let v162 : string = method6(v157)
    let v163 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v162 v46
    let v164 : string = method9()
    let v165 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v164 v46
    let v166 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v161, v163, v165) v50
    let v167 : string = Fable.Core.Rust.emitExpr v166 v52
    let v168 : string = $"r#\"{v76}\"#"
    let v169 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v168
    let v170 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v169 v41
    let v171 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v170 v43
    let v172 : string = method6(v167)
    let v173 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v172 v46
    let v174 : string = method10()
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v174 v46
    let v176 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v171, v173, v175) v50
    let v177 : string = Fable.Core.Rust.emitExpr v176 v52
    let v178 : Types.EmitType<Types.std.string.String> = method1(v177)
    let v179 : string = "cfg!(target_arch = \"wasm32\")"
    let v180 : bool = Fable.Core.Rust.emitExpr () v179
    let v183 : US0 =
        if v180 then
            US0_1
        else
            US0_0
    match v183 with
    | US0_1 -> (* Wasm32 *)
        let v184 : string = (v87).ToString ()
        let v185 : string = (v135).ToString ()
        let v186 : string = (v178).ToString ()
        let v187 : string = " %c"
        let v188 : string = v184 + v187
        let v189 : string = v188 + v185
        let v190 : string = v189 + v187
        let v191 : string = v190 + v186
        let v192 : string = "($0).as_ref().to_string()"
        let v193 : Types.std.string.String = Fable.Core.Rust.emitExpr v191 v192
        let v194 : string = "de884c"
        let v195 : string = $"color: #{v194};"
        let v196 : Types.std.string.String = Fable.Core.Rust.emitExpr v195 v192
        let v197 : string = "color: #385779;"
        let v198 : Types.std.string.String = Fable.Core.Rust.emitExpr v197 v192
        let v199 : (Types.std.string.String []) = [|v193; v196; v198|]
        let v200 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v199 v27
        let v201 : obj = v200
        let v202 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v203 : obj = Fable.Core.Rust.emitExpr v201 v202
        let v204 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v203 v204
        ()
    | _ ->
        let v205 : string = method11()
        let v206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v205 v46
        let v207 : unativeint = unativeint 0
        let v208 : unativeint = unativeint 2
        let v209 : string = "&$0[$1..$2]"
        let v210 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v206, v207, v208) v209
        let v211 : string = Fable.Core.Rust.emitExpr v210 v52
        let v212 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v213 : uint8 = Fable.Core.Rust.emitExpr v211 v212
        let v214 : string = method11()
        let v215 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v214 v46
        let v216 : unativeint = unativeint 2
        let v217 : unativeint = unativeint 4
        let v218 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v215, v216, v217) v209
        let v219 : string = Fable.Core.Rust.emitExpr v218 v52
        let v220 : uint8 = Fable.Core.Rust.emitExpr v219 v212
        let v221 : string = method11()
        let v222 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v221 v46
        let v223 : unativeint = unativeint 4
        let v224 : unativeint = unativeint 6
        let v225 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v222, v223, v224) v209
        let v226 : string = Fable.Core.Rust.emitExpr v225 v52
        let v227 : uint8 = Fable.Core.Rust.emitExpr v226 v212
        let v228 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v229 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v135, v213, v220, v227) v228
        let v230 : Types.std.string.String = Fable.Core.Rust.emitExpr v229 v35
        let v231 : string = method12()
        let v232 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v231 v46
        let v233 : unativeint = unativeint 0
        let v234 : unativeint = unativeint 2
        let v235 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v232, v233, v234) v209
        let v236 : string = Fable.Core.Rust.emitExpr v235 v52
        let v237 : uint8 = Fable.Core.Rust.emitExpr v236 v212
        let v238 : string = method12()
        let v239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v238 v46
        let v240 : unativeint = unativeint 2
        let v241 : unativeint = unativeint 4
        let v242 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v239, v240, v241) v209
        let v243 : string = Fable.Core.Rust.emitExpr v242 v52
        let v244 : uint8 = Fable.Core.Rust.emitExpr v243 v212
        let v245 : string = method12()
        let v246 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v245 v46
        let v247 : unativeint = unativeint 4
        let v248 : unativeint = unativeint 6
        let v249 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v246, v247, v248) v209
        let v250 : string = Fable.Core.Rust.emitExpr v249 v52
        let v251 : uint8 = Fable.Core.Rust.emitExpr v250 v212
        let v252 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v178, v237, v244, v251) v228
        let v253 : Types.std.string.String = Fable.Core.Rust.emitExpr v252 v35
        let v254 : string = $"{v87} {v230} {v253}"
        System.Console.WriteLine v254
        ()
and closure2 () (v0 : Types.Ref<Types.std.path.Path>) : Types.std.path.PathBuf =
    let v1 : string = "package.spiproj"
    let v2 : string = "$1.join($0.as_str())"
    let v3 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr struct (v1, v0) v2
    v3
and closure3 () (v0 : Types.Ref<Types.std.path.PathBuf>) : bool =
    let v1 : string = "std::path::Path::exists($0)"
    let v2 : bool = Fable.Core.Rust.emitExpr v0 v1
    v2
and method13 (v0 : int32) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.Rust.emitExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method15 () : string =
    let v0 : string = "e36a62"
    v0
and method14 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.Rust.emitExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method3(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.Rust.emitExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method1(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method1(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method1(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method4(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method1(v18)
    let v20 : string = "Debug"
    let v21 : Types.EmitType<Types.std.string.String> = method1(v20)
    let v22 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v21|]
    let v23 : Types.EmitType<Types.std.string.String> = method5(v22)
    let v24 : string = "> spiproj_open ()"
    let v25 : Types.EmitType<Types.std.string.String> = method1(v24)
    let v26 : (Types.EmitType<Types.std.string.String> []) = [|v25|]
    let v27 : string = "core::ops::Deref::deref($0)"
    let v28 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v26 v27
    let v29 : string = "&***$0"
    let v30 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v28 v29
    let v31 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v30 v29
    let v32 : string = "format!(\"{:?}\", $0)"
    let v33 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v32
    let v34 : Types.EmitType<Types.std.string.String> = v33 |> unbox<Types.EmitType<Types.std.string.String>>
    let v35 : string = "format!(\"{}\", $0)"
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v34 v35
    let v37 : string = (v36).ToString ()
    let v38 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = "regex::RegexBuilder::new($0)"
    let v42 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "$0.build().unwrap()"
    let v44 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : string = method6(v37)
    let v46 : string = "$0.as_str()"
    let v47 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v45 v46
    let v48 : string = method7()
    let v49 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v48 v46
    let v50 : string = "$0.replace_all(&$1, $2).to_string()"
    let v51 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v44, v47, v49) v50
    let v52 : string = "fable_library_rust::String_::fromStr($0)"
    let v53 : string = Fable.Core.Rust.emitExpr v51 v52
    let v54 : string = "\\[\"(.*?)\"\\]"
    let v55 : string = $"r#\"{v54}\"#"
    let v56 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v55
    let v57 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v56 v41
    let v58 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v57 v43
    let v59 : string = method6(v53)
    let v60 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v59 v46
    let v61 : string = method8()
    let v62 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v61 v46
    let v63 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v58, v60, v62) v50
    let v64 : string = Fable.Core.Rust.emitExpr v63 v52
    let v65 : string = "\\\\\""
    let v66 : string = $"r#\"{v65}\"#"
    let v67 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v66
    let v68 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v67 v41
    let v69 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v68 v43
    let v70 : string = method6(v64)
    let v71 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v70 v46
    let v72 : string = method9()
    let v73 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v72 v46
    let v74 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v69, v71, v73) v50
    let v75 : string = Fable.Core.Rust.emitExpr v74 v52
    let v76 : string = ", "
    let v77 : string = $"r#\"{v76}\"#"
    let v78 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v77
    let v79 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v78 v41
    let v80 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v79 v43
    let v81 : string = method6(v75)
    let v82 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v81 v46
    let v83 : string = method10()
    let v84 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v83 v46
    let v85 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v80, v82, v84) v50
    let v86 : string = Fable.Core.Rust.emitExpr v85 v52
    let v87 : Types.EmitType<Types.std.string.String> = method1(v86)
    let v88 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1 v27
    let v89 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v88 v29
    let v90 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v89 v29
    let v91 : Types.std.string.String = Fable.Core.Rust.emitExpr v90 v32
    let v92 : Types.EmitType<Types.std.string.String> = v91 |> unbox<Types.EmitType<Types.std.string.String>>
    let v93 : Types.std.string.String = Fable.Core.Rust.emitExpr v92 v35
    let v94 : string = (v93).ToString ()
    let v95 : string = $"r#\"{v38}\"#"
    let v96 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v95
    let v97 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v96 v41
    let v98 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v97 v43
    let v99 : string = method6(v94)
    let v100 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v99 v46
    let v101 : string = method7()
    let v102 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v101 v46
    let v103 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v98, v100, v102) v50
    let v104 : string = Fable.Core.Rust.emitExpr v103 v52
    let v105 : string = $"r#\"{v54}\"#"
    let v106 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v105
    let v107 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v106 v41
    let v108 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v107 v43
    let v109 : string = method6(v104)
    let v110 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v109 v46
    let v111 : string = method8()
    let v112 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v111 v46
    let v113 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v108, v110, v112) v50
    let v114 : string = Fable.Core.Rust.emitExpr v113 v52
    let v115 : string = $"r#\"{v65}\"#"
    let v116 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v115
    let v117 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v116 v41
    let v118 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v117 v43
    let v119 : string = method6(v114)
    let v120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v119 v46
    let v121 : string = method9()
    let v122 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v121 v46
    let v123 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v118, v120, v122) v50
    let v124 : string = Fable.Core.Rust.emitExpr v123 v52
    let v125 : string = $"r#\"{v76}\"#"
    let v126 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v125
    let v127 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v126 v41
    let v128 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v127 v43
    let v129 : string = method6(v124)
    let v130 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v129 v46
    let v131 : string = method10()
    let v132 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v131 v46
    let v133 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v128, v130, v132) v50
    let v134 : string = Fable.Core.Rust.emitExpr v133 v52
    let v135 : Types.EmitType<Types.std.string.String> = method1(v134)
    let v136 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v35
    let v137 : string = (v136).ToString ()
    let v138 : string = $"r#\"{v38}\"#"
    let v139 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v138
    let v140 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v139 v41
    let v141 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v140 v43
    let v142 : string = method6(v137)
    let v143 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v142 v46
    let v144 : string = method7()
    let v145 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v144 v46
    let v146 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v141, v143, v145) v50
    let v147 : string = Fable.Core.Rust.emitExpr v146 v52
    let v148 : string = $"r#\"{v54}\"#"
    let v149 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v148
    let v150 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v149 v41
    let v151 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v150 v43
    let v152 : string = method6(v147)
    let v153 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v152 v46
    let v154 : string = method8()
    let v155 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v154 v46
    let v156 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v151, v153, v155) v50
    let v157 : string = Fable.Core.Rust.emitExpr v156 v52
    let v158 : string = $"r#\"{v65}\"#"
    let v159 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v158
    let v160 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v159 v41
    let v161 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v160 v43
    let v162 : string = method6(v157)
    let v163 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v162 v46
    let v164 : string = method9()
    let v165 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v164 v46
    let v166 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v161, v163, v165) v50
    let v167 : string = Fable.Core.Rust.emitExpr v166 v52
    let v168 : string = $"r#\"{v76}\"#"
    let v169 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v168
    let v170 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v169 v41
    let v171 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v170 v43
    let v172 : string = method6(v167)
    let v173 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v172 v46
    let v174 : string = method10()
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v174 v46
    let v176 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v171, v173, v175) v50
    let v177 : string = Fable.Core.Rust.emitExpr v176 v52
    let v178 : Types.EmitType<Types.std.string.String> = method1(v177)
    let v179 : string = "cfg!(target_arch = \"wasm32\")"
    let v180 : bool = Fable.Core.Rust.emitExpr () v179
    let v183 : US0 =
        if v180 then
            US0_1
        else
            US0_0
    match v183 with
    | US0_1 -> (* Wasm32 *)
        let v184 : string = (v87).ToString ()
        let v185 : string = (v135).ToString ()
        let v186 : string = (v178).ToString ()
        let v187 : string = " %c"
        let v188 : string = v184 + v187
        let v189 : string = v188 + v185
        let v190 : string = v189 + v187
        let v191 : string = v190 + v186
        let v192 : string = "($0).as_ref().to_string()"
        let v193 : Types.std.string.String = Fable.Core.Rust.emitExpr v191 v192
        let v194 : string = "e36a62"
        let v195 : string = $"color: #{v194};"
        let v196 : Types.std.string.String = Fable.Core.Rust.emitExpr v195 v192
        let v197 : string = "color: #385779;"
        let v198 : Types.std.string.String = Fable.Core.Rust.emitExpr v197 v192
        let v199 : (Types.std.string.String []) = [|v193; v196; v198|]
        let v200 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v199 v27
        let v201 : obj = v200
        let v202 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v203 : obj = Fable.Core.Rust.emitExpr v201 v202
        let v204 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v203 v204
        ()
    | _ ->
        let v205 : string = method15()
        let v206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v205 v46
        let v207 : unativeint = unativeint 0
        let v208 : unativeint = unativeint 2
        let v209 : string = "&$0[$1..$2]"
        let v210 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v206, v207, v208) v209
        let v211 : string = Fable.Core.Rust.emitExpr v210 v52
        let v212 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v213 : uint8 = Fable.Core.Rust.emitExpr v211 v212
        let v214 : string = method15()
        let v215 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v214 v46
        let v216 : unativeint = unativeint 2
        let v217 : unativeint = unativeint 4
        let v218 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v215, v216, v217) v209
        let v219 : string = Fable.Core.Rust.emitExpr v218 v52
        let v220 : uint8 = Fable.Core.Rust.emitExpr v219 v212
        let v221 : string = method15()
        let v222 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v221 v46
        let v223 : unativeint = unativeint 4
        let v224 : unativeint = unativeint 6
        let v225 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v222, v223, v224) v209
        let v226 : string = Fable.Core.Rust.emitExpr v225 v52
        let v227 : uint8 = Fable.Core.Rust.emitExpr v226 v212
        let v228 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v229 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v135, v213, v220, v227) v228
        let v230 : Types.std.string.String = Fable.Core.Rust.emitExpr v229 v35
        let v231 : string = method12()
        let v232 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v231 v46
        let v233 : unativeint = unativeint 0
        let v234 : unativeint = unativeint 2
        let v235 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v232, v233, v234) v209
        let v236 : string = Fable.Core.Rust.emitExpr v235 v52
        let v237 : uint8 = Fable.Core.Rust.emitExpr v236 v212
        let v238 : string = method12()
        let v239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v238 v46
        let v240 : unativeint = unativeint 2
        let v241 : unativeint = unativeint 4
        let v242 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v239, v240, v241) v209
        let v243 : string = Fable.Core.Rust.emitExpr v242 v52
        let v244 : uint8 = Fable.Core.Rust.emitExpr v243 v212
        let v245 : string = method12()
        let v246 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v245 v46
        let v247 : unativeint = unativeint 4
        let v248 : unativeint = unativeint 6
        let v249 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v246, v247, v248) v209
        let v250 : string = Fable.Core.Rust.emitExpr v249 v52
        let v251 : uint8 = Fable.Core.Rust.emitExpr v250 v212
        let v252 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v178, v237, v244, v251) v228
        let v253 : Types.std.string.String = Fable.Core.Rust.emitExpr v252 v35
        let v254 : string = $"{v87} {v230} {v253}"
        System.Console.WriteLine v254
        ()
and method17 () : string =
    let v0 : string = "fcfb1b"
    v0
and method16 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.Rust.emitExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method3(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.Rust.emitExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method1(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method1(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method1(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method4(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method1(v18)
    let v20 : string = "Debug"
    let v21 : Types.EmitType<Types.std.string.String> = method1(v20)
    let v22 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v21|]
    let v23 : Types.EmitType<Types.std.string.String> = method5(v22)
    let v24 : string = "> zmq_request ()"
    let v25 : Types.EmitType<Types.std.string.String> = method1(v24)
    let v26 : (Types.EmitType<Types.std.string.String> []) = [|v25|]
    let v27 : string = "core::ops::Deref::deref($0)"
    let v28 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v26 v27
    let v29 : string = "&***$0"
    let v30 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v28 v29
    let v31 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v30 v29
    let v32 : string = "format!(\"{:?}\", $0)"
    let v33 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v32
    let v34 : Types.EmitType<Types.std.string.String> = v33 |> unbox<Types.EmitType<Types.std.string.String>>
    let v35 : string = "format!(\"{}\", $0)"
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v34 v35
    let v37 : string = (v36).ToString ()
    let v38 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = "regex::RegexBuilder::new($0)"
    let v42 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "$0.build().unwrap()"
    let v44 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : string = method6(v37)
    let v46 : string = "$0.as_str()"
    let v47 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v45 v46
    let v48 : string = method7()
    let v49 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v48 v46
    let v50 : string = "$0.replace_all(&$1, $2).to_string()"
    let v51 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v44, v47, v49) v50
    let v52 : string = "fable_library_rust::String_::fromStr($0)"
    let v53 : string = Fable.Core.Rust.emitExpr v51 v52
    let v54 : string = "\\[\"(.*?)\"\\]"
    let v55 : string = $"r#\"{v54}\"#"
    let v56 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v55
    let v57 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v56 v41
    let v58 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v57 v43
    let v59 : string = method6(v53)
    let v60 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v59 v46
    let v61 : string = method8()
    let v62 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v61 v46
    let v63 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v58, v60, v62) v50
    let v64 : string = Fable.Core.Rust.emitExpr v63 v52
    let v65 : string = "\\\\\""
    let v66 : string = $"r#\"{v65}\"#"
    let v67 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v66
    let v68 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v67 v41
    let v69 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v68 v43
    let v70 : string = method6(v64)
    let v71 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v70 v46
    let v72 : string = method9()
    let v73 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v72 v46
    let v74 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v69, v71, v73) v50
    let v75 : string = Fable.Core.Rust.emitExpr v74 v52
    let v76 : string = ", "
    let v77 : string = $"r#\"{v76}\"#"
    let v78 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v77
    let v79 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v78 v41
    let v80 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v79 v43
    let v81 : string = method6(v75)
    let v82 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v81 v46
    let v83 : string = method10()
    let v84 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v83 v46
    let v85 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v80, v82, v84) v50
    let v86 : string = Fable.Core.Rust.emitExpr v85 v52
    let v87 : Types.EmitType<Types.std.string.String> = method1(v86)
    let v88 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1 v27
    let v89 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v88 v29
    let v90 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v89 v29
    let v91 : Types.std.string.String = Fable.Core.Rust.emitExpr v90 v32
    let v92 : Types.EmitType<Types.std.string.String> = v91 |> unbox<Types.EmitType<Types.std.string.String>>
    let v93 : Types.std.string.String = Fable.Core.Rust.emitExpr v92 v35
    let v94 : string = (v93).ToString ()
    let v95 : string = $"r#\"{v38}\"#"
    let v96 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v95
    let v97 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v96 v41
    let v98 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v97 v43
    let v99 : string = method6(v94)
    let v100 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v99 v46
    let v101 : string = method7()
    let v102 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v101 v46
    let v103 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v98, v100, v102) v50
    let v104 : string = Fable.Core.Rust.emitExpr v103 v52
    let v105 : string = $"r#\"{v54}\"#"
    let v106 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v105
    let v107 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v106 v41
    let v108 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v107 v43
    let v109 : string = method6(v104)
    let v110 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v109 v46
    let v111 : string = method8()
    let v112 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v111 v46
    let v113 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v108, v110, v112) v50
    let v114 : string = Fable.Core.Rust.emitExpr v113 v52
    let v115 : string = $"r#\"{v65}\"#"
    let v116 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v115
    let v117 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v116 v41
    let v118 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v117 v43
    let v119 : string = method6(v114)
    let v120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v119 v46
    let v121 : string = method9()
    let v122 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v121 v46
    let v123 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v118, v120, v122) v50
    let v124 : string = Fable.Core.Rust.emitExpr v123 v52
    let v125 : string = $"r#\"{v76}\"#"
    let v126 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v125
    let v127 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v126 v41
    let v128 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v127 v43
    let v129 : string = method6(v124)
    let v130 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v129 v46
    let v131 : string = method10()
    let v132 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v131 v46
    let v133 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v128, v130, v132) v50
    let v134 : string = Fable.Core.Rust.emitExpr v133 v52
    let v135 : Types.EmitType<Types.std.string.String> = method1(v134)
    let v136 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v35
    let v137 : string = (v136).ToString ()
    let v138 : string = $"r#\"{v38}\"#"
    let v139 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v138
    let v140 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v139 v41
    let v141 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v140 v43
    let v142 : string = method6(v137)
    let v143 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v142 v46
    let v144 : string = method7()
    let v145 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v144 v46
    let v146 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v141, v143, v145) v50
    let v147 : string = Fable.Core.Rust.emitExpr v146 v52
    let v148 : string = $"r#\"{v54}\"#"
    let v149 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v148
    let v150 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v149 v41
    let v151 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v150 v43
    let v152 : string = method6(v147)
    let v153 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v152 v46
    let v154 : string = method8()
    let v155 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v154 v46
    let v156 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v151, v153, v155) v50
    let v157 : string = Fable.Core.Rust.emitExpr v156 v52
    let v158 : string = $"r#\"{v65}\"#"
    let v159 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v158
    let v160 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v159 v41
    let v161 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v160 v43
    let v162 : string = method6(v157)
    let v163 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v162 v46
    let v164 : string = method9()
    let v165 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v164 v46
    let v166 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v161, v163, v165) v50
    let v167 : string = Fable.Core.Rust.emitExpr v166 v52
    let v168 : string = $"r#\"{v76}\"#"
    let v169 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v168
    let v170 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v169 v41
    let v171 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v170 v43
    let v172 : string = method6(v167)
    let v173 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v172 v46
    let v174 : string = method10()
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v174 v46
    let v176 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v171, v173, v175) v50
    let v177 : string = Fable.Core.Rust.emitExpr v176 v52
    let v178 : Types.EmitType<Types.std.string.String> = method1(v177)
    let v179 : string = "cfg!(target_arch = \"wasm32\")"
    let v180 : bool = Fable.Core.Rust.emitExpr () v179
    let v183 : US0 =
        if v180 then
            US0_1
        else
            US0_0
    match v183 with
    | US0_1 -> (* Wasm32 *)
        let v184 : string = (v87).ToString ()
        let v185 : string = (v135).ToString ()
        let v186 : string = (v178).ToString ()
        let v187 : string = " %c"
        let v188 : string = v184 + v187
        let v189 : string = v188 + v185
        let v190 : string = v189 + v187
        let v191 : string = v190 + v186
        let v192 : string = "($0).as_ref().to_string()"
        let v193 : Types.std.string.String = Fable.Core.Rust.emitExpr v191 v192
        let v194 : string = "fcfb1b"
        let v195 : string = $"color: #{v194};"
        let v196 : Types.std.string.String = Fable.Core.Rust.emitExpr v195 v192
        let v197 : string = "color: #385779;"
        let v198 : Types.std.string.String = Fable.Core.Rust.emitExpr v197 v192
        let v199 : (Types.std.string.String []) = [|v193; v196; v198|]
        let v200 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v199 v27
        let v201 : obj = v200
        let v202 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v203 : obj = Fable.Core.Rust.emitExpr v201 v202
        let v204 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v203 v204
        ()
    | _ ->
        let v205 : string = method17()
        let v206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v205 v46
        let v207 : unativeint = unativeint 0
        let v208 : unativeint = unativeint 2
        let v209 : string = "&$0[$1..$2]"
        let v210 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v206, v207, v208) v209
        let v211 : string = Fable.Core.Rust.emitExpr v210 v52
        let v212 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v213 : uint8 = Fable.Core.Rust.emitExpr v211 v212
        let v214 : string = method17()
        let v215 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v214 v46
        let v216 : unativeint = unativeint 2
        let v217 : unativeint = unativeint 4
        let v218 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v215, v216, v217) v209
        let v219 : string = Fable.Core.Rust.emitExpr v218 v52
        let v220 : uint8 = Fable.Core.Rust.emitExpr v219 v212
        let v221 : string = method17()
        let v222 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v221 v46
        let v223 : unativeint = unativeint 4
        let v224 : unativeint = unativeint 6
        let v225 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v222, v223, v224) v209
        let v226 : string = Fable.Core.Rust.emitExpr v225 v52
        let v227 : uint8 = Fable.Core.Rust.emitExpr v226 v212
        let v228 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v229 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v135, v213, v220, v227) v228
        let v230 : Types.std.string.String = Fable.Core.Rust.emitExpr v229 v35
        let v231 : string = method12()
        let v232 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v231 v46
        let v233 : unativeint = unativeint 0
        let v234 : unativeint = unativeint 2
        let v235 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v232, v233, v234) v209
        let v236 : string = Fable.Core.Rust.emitExpr v235 v52
        let v237 : uint8 = Fable.Core.Rust.emitExpr v236 v212
        let v238 : string = method12()
        let v239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v238 v46
        let v240 : unativeint = unativeint 2
        let v241 : unativeint = unativeint 4
        let v242 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v239, v240, v241) v209
        let v243 : string = Fable.Core.Rust.emitExpr v242 v52
        let v244 : uint8 = Fable.Core.Rust.emitExpr v243 v212
        let v245 : string = method12()
        let v246 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v245 v46
        let v247 : unativeint = unativeint 4
        let v248 : unativeint = unativeint 6
        let v249 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v246, v247, v248) v209
        let v250 : string = Fable.Core.Rust.emitExpr v249 v52
        let v251 : uint8 = Fable.Core.Rust.emitExpr v250 v212
        let v252 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v178, v237, v244, v251) v228
        let v253 : Types.std.string.String = Fable.Core.Rust.emitExpr v252 v35
        let v254 : string = $"{v87} {v230} {v253}"
        System.Console.WriteLine v254
        ()
and method19 () : string =
    let v0 : string = "98d5ef"
    v0
and method18 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.Rust.emitExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method3(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.Rust.emitExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method1(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method1(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method1(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method4(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method1(v18)
    let v20 : string = "Debug"
    let v21 : Types.EmitType<Types.std.string.String> = method1(v20)
    let v22 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v21|]
    let v23 : Types.EmitType<Types.std.string.String> = method5(v22)
    let v24 : string = "> spi_build_file ()"
    let v25 : Types.EmitType<Types.std.string.String> = method1(v24)
    let v26 : (Types.EmitType<Types.std.string.String> []) = [|v25|]
    let v27 : string = "core::ops::Deref::deref($0)"
    let v28 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v26 v27
    let v29 : string = "&***$0"
    let v30 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v28 v29
    let v31 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v30 v29
    let v32 : string = "format!(\"{:?}\", $0)"
    let v33 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v32
    let v34 : Types.EmitType<Types.std.string.String> = v33 |> unbox<Types.EmitType<Types.std.string.String>>
    let v35 : string = "format!(\"{}\", $0)"
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v34 v35
    let v37 : string = (v36).ToString ()
    let v38 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = "regex::RegexBuilder::new($0)"
    let v42 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "$0.build().unwrap()"
    let v44 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : string = method6(v37)
    let v46 : string = "$0.as_str()"
    let v47 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v45 v46
    let v48 : string = method7()
    let v49 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v48 v46
    let v50 : string = "$0.replace_all(&$1, $2).to_string()"
    let v51 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v44, v47, v49) v50
    let v52 : string = "fable_library_rust::String_::fromStr($0)"
    let v53 : string = Fable.Core.Rust.emitExpr v51 v52
    let v54 : string = "\\[\"(.*?)\"\\]"
    let v55 : string = $"r#\"{v54}\"#"
    let v56 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v55
    let v57 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v56 v41
    let v58 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v57 v43
    let v59 : string = method6(v53)
    let v60 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v59 v46
    let v61 : string = method8()
    let v62 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v61 v46
    let v63 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v58, v60, v62) v50
    let v64 : string = Fable.Core.Rust.emitExpr v63 v52
    let v65 : string = "\\\\\""
    let v66 : string = $"r#\"{v65}\"#"
    let v67 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v66
    let v68 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v67 v41
    let v69 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v68 v43
    let v70 : string = method6(v64)
    let v71 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v70 v46
    let v72 : string = method9()
    let v73 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v72 v46
    let v74 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v69, v71, v73) v50
    let v75 : string = Fable.Core.Rust.emitExpr v74 v52
    let v76 : string = ", "
    let v77 : string = $"r#\"{v76}\"#"
    let v78 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v77
    let v79 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v78 v41
    let v80 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v79 v43
    let v81 : string = method6(v75)
    let v82 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v81 v46
    let v83 : string = method10()
    let v84 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v83 v46
    let v85 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v80, v82, v84) v50
    let v86 : string = Fable.Core.Rust.emitExpr v85 v52
    let v87 : Types.EmitType<Types.std.string.String> = method1(v86)
    let v88 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1 v27
    let v89 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v88 v29
    let v90 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v89 v29
    let v91 : Types.std.string.String = Fable.Core.Rust.emitExpr v90 v32
    let v92 : Types.EmitType<Types.std.string.String> = v91 |> unbox<Types.EmitType<Types.std.string.String>>
    let v93 : Types.std.string.String = Fable.Core.Rust.emitExpr v92 v35
    let v94 : string = (v93).ToString ()
    let v95 : string = $"r#\"{v38}\"#"
    let v96 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v95
    let v97 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v96 v41
    let v98 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v97 v43
    let v99 : string = method6(v94)
    let v100 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v99 v46
    let v101 : string = method7()
    let v102 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v101 v46
    let v103 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v98, v100, v102) v50
    let v104 : string = Fable.Core.Rust.emitExpr v103 v52
    let v105 : string = $"r#\"{v54}\"#"
    let v106 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v105
    let v107 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v106 v41
    let v108 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v107 v43
    let v109 : string = method6(v104)
    let v110 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v109 v46
    let v111 : string = method8()
    let v112 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v111 v46
    let v113 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v108, v110, v112) v50
    let v114 : string = Fable.Core.Rust.emitExpr v113 v52
    let v115 : string = $"r#\"{v65}\"#"
    let v116 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v115
    let v117 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v116 v41
    let v118 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v117 v43
    let v119 : string = method6(v114)
    let v120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v119 v46
    let v121 : string = method9()
    let v122 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v121 v46
    let v123 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v118, v120, v122) v50
    let v124 : string = Fable.Core.Rust.emitExpr v123 v52
    let v125 : string = $"r#\"{v76}\"#"
    let v126 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v125
    let v127 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v126 v41
    let v128 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v127 v43
    let v129 : string = method6(v124)
    let v130 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v129 v46
    let v131 : string = method10()
    let v132 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v131 v46
    let v133 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v128, v130, v132) v50
    let v134 : string = Fable.Core.Rust.emitExpr v133 v52
    let v135 : Types.EmitType<Types.std.string.String> = method1(v134)
    let v136 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v35
    let v137 : string = (v136).ToString ()
    let v138 : string = $"r#\"{v38}\"#"
    let v139 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v138
    let v140 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v139 v41
    let v141 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v140 v43
    let v142 : string = method6(v137)
    let v143 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v142 v46
    let v144 : string = method7()
    let v145 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v144 v46
    let v146 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v141, v143, v145) v50
    let v147 : string = Fable.Core.Rust.emitExpr v146 v52
    let v148 : string = $"r#\"{v54}\"#"
    let v149 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v148
    let v150 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v149 v41
    let v151 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v150 v43
    let v152 : string = method6(v147)
    let v153 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v152 v46
    let v154 : string = method8()
    let v155 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v154 v46
    let v156 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v151, v153, v155) v50
    let v157 : string = Fable.Core.Rust.emitExpr v156 v52
    let v158 : string = $"r#\"{v65}\"#"
    let v159 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v158
    let v160 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v159 v41
    let v161 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v160 v43
    let v162 : string = method6(v157)
    let v163 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v162 v46
    let v164 : string = method9()
    let v165 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v164 v46
    let v166 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v161, v163, v165) v50
    let v167 : string = Fable.Core.Rust.emitExpr v166 v52
    let v168 : string = $"r#\"{v76}\"#"
    let v169 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v168
    let v170 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v169 v41
    let v171 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v170 v43
    let v172 : string = method6(v167)
    let v173 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v172 v46
    let v174 : string = method10()
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v174 v46
    let v176 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v171, v173, v175) v50
    let v177 : string = Fable.Core.Rust.emitExpr v176 v52
    let v178 : Types.EmitType<Types.std.string.String> = method1(v177)
    let v179 : string = "cfg!(target_arch = \"wasm32\")"
    let v180 : bool = Fable.Core.Rust.emitExpr () v179
    let v183 : US0 =
        if v180 then
            US0_1
        else
            US0_0
    match v183 with
    | US0_1 -> (* Wasm32 *)
        let v184 : string = (v87).ToString ()
        let v185 : string = (v135).ToString ()
        let v186 : string = (v178).ToString ()
        let v187 : string = " %c"
        let v188 : string = v184 + v187
        let v189 : string = v188 + v185
        let v190 : string = v189 + v187
        let v191 : string = v190 + v186
        let v192 : string = "($0).as_ref().to_string()"
        let v193 : Types.std.string.String = Fable.Core.Rust.emitExpr v191 v192
        let v194 : string = "98d5ef"
        let v195 : string = $"color: #{v194};"
        let v196 : Types.std.string.String = Fable.Core.Rust.emitExpr v195 v192
        let v197 : string = "color: #385779;"
        let v198 : Types.std.string.String = Fable.Core.Rust.emitExpr v197 v192
        let v199 : (Types.std.string.String []) = [|v193; v196; v198|]
        let v200 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v199 v27
        let v201 : obj = v200
        let v202 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v203 : obj = Fable.Core.Rust.emitExpr v201 v202
        let v204 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v203 v204
        ()
    | _ ->
        let v205 : string = method19()
        let v206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v205 v46
        let v207 : unativeint = unativeint 0
        let v208 : unativeint = unativeint 2
        let v209 : string = "&$0[$1..$2]"
        let v210 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v206, v207, v208) v209
        let v211 : string = Fable.Core.Rust.emitExpr v210 v52
        let v212 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v213 : uint8 = Fable.Core.Rust.emitExpr v211 v212
        let v214 : string = method19()
        let v215 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v214 v46
        let v216 : unativeint = unativeint 2
        let v217 : unativeint = unativeint 4
        let v218 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v215, v216, v217) v209
        let v219 : string = Fable.Core.Rust.emitExpr v218 v52
        let v220 : uint8 = Fable.Core.Rust.emitExpr v219 v212
        let v221 : string = method19()
        let v222 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v221 v46
        let v223 : unativeint = unativeint 4
        let v224 : unativeint = unativeint 6
        let v225 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v222, v223, v224) v209
        let v226 : string = Fable.Core.Rust.emitExpr v225 v52
        let v227 : uint8 = Fable.Core.Rust.emitExpr v226 v212
        let v228 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v229 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v135, v213, v220, v227) v228
        let v230 : Types.std.string.String = Fable.Core.Rust.emitExpr v229 v35
        let v231 : string = method12()
        let v232 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v231 v46
        let v233 : unativeint = unativeint 0
        let v234 : unativeint = unativeint 2
        let v235 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v232, v233, v234) v209
        let v236 : string = Fable.Core.Rust.emitExpr v235 v52
        let v237 : uint8 = Fable.Core.Rust.emitExpr v236 v212
        let v238 : string = method12()
        let v239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v238 v46
        let v240 : unativeint = unativeint 2
        let v241 : unativeint = unativeint 4
        let v242 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v239, v240, v241) v209
        let v243 : string = Fable.Core.Rust.emitExpr v242 v52
        let v244 : uint8 = Fable.Core.Rust.emitExpr v243 v212
        let v245 : string = method12()
        let v246 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v245 v46
        let v247 : unativeint = unativeint 4
        let v248 : unativeint = unativeint 6
        let v249 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v246, v247, v248) v209
        let v250 : string = Fable.Core.Rust.emitExpr v249 v52
        let v251 : uint8 = Fable.Core.Rust.emitExpr v250 v212
        let v252 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v178, v237, v244, v251) v228
        let v253 : Types.std.string.String = Fable.Core.Rust.emitExpr v252 v35
        let v254 : string = $"{v87} {v230} {v253}"
        System.Console.WriteLine v254
        ()
and method20 (v0 : Types.std.time.SystemTime) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.Rust.emitExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method22 () : string =
    let v0 : string = "387957"
    v0
and method21 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.Rust.emitExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method3(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.Rust.emitExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method1(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method1(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method1(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method4(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method1(v18)
    let v20 : string = "Debug"
    let v21 : Types.EmitType<Types.std.string.String> = method1(v20)
    let v22 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v21|]
    let v23 : Types.EmitType<Types.std.string.String> = method5(v22)
    let v24 : string = "> wait_file_change ()"
    let v25 : Types.EmitType<Types.std.string.String> = method1(v24)
    let v26 : (Types.EmitType<Types.std.string.String> []) = [|v25|]
    let v27 : string = "core::ops::Deref::deref($0)"
    let v28 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v26 v27
    let v29 : string = "&***$0"
    let v30 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v28 v29
    let v31 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v30 v29
    let v32 : string = "format!(\"{:?}\", $0)"
    let v33 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v32
    let v34 : Types.EmitType<Types.std.string.String> = v33 |> unbox<Types.EmitType<Types.std.string.String>>
    let v35 : string = "format!(\"{}\", $0)"
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v34 v35
    let v37 : string = (v36).ToString ()
    let v38 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = "regex::RegexBuilder::new($0)"
    let v42 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "$0.build().unwrap()"
    let v44 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : string = method6(v37)
    let v46 : string = "$0.as_str()"
    let v47 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v45 v46
    let v48 : string = method7()
    let v49 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v48 v46
    let v50 : string = "$0.replace_all(&$1, $2).to_string()"
    let v51 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v44, v47, v49) v50
    let v52 : string = "fable_library_rust::String_::fromStr($0)"
    let v53 : string = Fable.Core.Rust.emitExpr v51 v52
    let v54 : string = "\\[\"(.*?)\"\\]"
    let v55 : string = $"r#\"{v54}\"#"
    let v56 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v55
    let v57 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v56 v41
    let v58 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v57 v43
    let v59 : string = method6(v53)
    let v60 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v59 v46
    let v61 : string = method8()
    let v62 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v61 v46
    let v63 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v58, v60, v62) v50
    let v64 : string = Fable.Core.Rust.emitExpr v63 v52
    let v65 : string = "\\\\\""
    let v66 : string = $"r#\"{v65}\"#"
    let v67 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v66
    let v68 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v67 v41
    let v69 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v68 v43
    let v70 : string = method6(v64)
    let v71 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v70 v46
    let v72 : string = method9()
    let v73 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v72 v46
    let v74 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v69, v71, v73) v50
    let v75 : string = Fable.Core.Rust.emitExpr v74 v52
    let v76 : string = ", "
    let v77 : string = $"r#\"{v76}\"#"
    let v78 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v77
    let v79 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v78 v41
    let v80 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v79 v43
    let v81 : string = method6(v75)
    let v82 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v81 v46
    let v83 : string = method10()
    let v84 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v83 v46
    let v85 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v80, v82, v84) v50
    let v86 : string = Fable.Core.Rust.emitExpr v85 v52
    let v87 : Types.EmitType<Types.std.string.String> = method1(v86)
    let v88 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1 v27
    let v89 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v88 v29
    let v90 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v89 v29
    let v91 : Types.std.string.String = Fable.Core.Rust.emitExpr v90 v32
    let v92 : Types.EmitType<Types.std.string.String> = v91 |> unbox<Types.EmitType<Types.std.string.String>>
    let v93 : Types.std.string.String = Fable.Core.Rust.emitExpr v92 v35
    let v94 : string = (v93).ToString ()
    let v95 : string = $"r#\"{v38}\"#"
    let v96 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v95
    let v97 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v96 v41
    let v98 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v97 v43
    let v99 : string = method6(v94)
    let v100 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v99 v46
    let v101 : string = method7()
    let v102 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v101 v46
    let v103 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v98, v100, v102) v50
    let v104 : string = Fable.Core.Rust.emitExpr v103 v52
    let v105 : string = $"r#\"{v54}\"#"
    let v106 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v105
    let v107 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v106 v41
    let v108 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v107 v43
    let v109 : string = method6(v104)
    let v110 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v109 v46
    let v111 : string = method8()
    let v112 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v111 v46
    let v113 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v108, v110, v112) v50
    let v114 : string = Fable.Core.Rust.emitExpr v113 v52
    let v115 : string = $"r#\"{v65}\"#"
    let v116 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v115
    let v117 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v116 v41
    let v118 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v117 v43
    let v119 : string = method6(v114)
    let v120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v119 v46
    let v121 : string = method9()
    let v122 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v121 v46
    let v123 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v118, v120, v122) v50
    let v124 : string = Fable.Core.Rust.emitExpr v123 v52
    let v125 : string = $"r#\"{v76}\"#"
    let v126 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v125
    let v127 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v126 v41
    let v128 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v127 v43
    let v129 : string = method6(v124)
    let v130 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v129 v46
    let v131 : string = method10()
    let v132 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v131 v46
    let v133 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v128, v130, v132) v50
    let v134 : string = Fable.Core.Rust.emitExpr v133 v52
    let v135 : Types.EmitType<Types.std.string.String> = method1(v134)
    let v136 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v35
    let v137 : string = (v136).ToString ()
    let v138 : string = $"r#\"{v38}\"#"
    let v139 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v138
    let v140 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v139 v41
    let v141 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v140 v43
    let v142 : string = method6(v137)
    let v143 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v142 v46
    let v144 : string = method7()
    let v145 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v144 v46
    let v146 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v141, v143, v145) v50
    let v147 : string = Fable.Core.Rust.emitExpr v146 v52
    let v148 : string = $"r#\"{v54}\"#"
    let v149 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v148
    let v150 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v149 v41
    let v151 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v150 v43
    let v152 : string = method6(v147)
    let v153 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v152 v46
    let v154 : string = method8()
    let v155 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v154 v46
    let v156 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v151, v153, v155) v50
    let v157 : string = Fable.Core.Rust.emitExpr v156 v52
    let v158 : string = $"r#\"{v65}\"#"
    let v159 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v158
    let v160 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v159 v41
    let v161 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v160 v43
    let v162 : string = method6(v157)
    let v163 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v162 v46
    let v164 : string = method9()
    let v165 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v164 v46
    let v166 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v161, v163, v165) v50
    let v167 : string = Fable.Core.Rust.emitExpr v166 v52
    let v168 : string = $"r#\"{v76}\"#"
    let v169 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v168
    let v170 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v169 v41
    let v171 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v170 v43
    let v172 : string = method6(v167)
    let v173 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v172 v46
    let v174 : string = method10()
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v174 v46
    let v176 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v171, v173, v175) v50
    let v177 : string = Fable.Core.Rust.emitExpr v176 v52
    let v178 : Types.EmitType<Types.std.string.String> = method1(v177)
    let v179 : string = "cfg!(target_arch = \"wasm32\")"
    let v180 : bool = Fable.Core.Rust.emitExpr () v179
    let v183 : US0 =
        if v180 then
            US0_1
        else
            US0_0
    match v183 with
    | US0_1 -> (* Wasm32 *)
        let v184 : string = (v87).ToString ()
        let v185 : string = (v135).ToString ()
        let v186 : string = (v178).ToString ()
        let v187 : string = " %c"
        let v188 : string = v184 + v187
        let v189 : string = v188 + v185
        let v190 : string = v189 + v187
        let v191 : string = v190 + v186
        let v192 : string = "($0).as_ref().to_string()"
        let v193 : Types.std.string.String = Fable.Core.Rust.emitExpr v191 v192
        let v194 : string = "387957"
        let v195 : string = $"color: #{v194};"
        let v196 : Types.std.string.String = Fable.Core.Rust.emitExpr v195 v192
        let v197 : string = "color: #385779;"
        let v198 : Types.std.string.String = Fable.Core.Rust.emitExpr v197 v192
        let v199 : (Types.std.string.String []) = [|v193; v196; v198|]
        let v200 : Types.Ref<Types.Vec<obj>> = Fable.Core.Rust.emitExpr v199 v27
        let v201 : obj = v200
        let v202 : string = "serde_wasm_bindgen::to_value(&*****$0).unwrap()"
        let v203 : obj = Fable.Core.Rust.emitExpr v201 v202
        let v204 : string = "web_sys::console::log(&js_sys::Array::from(&$0))"
        Fable.Core.Rust.emitExpr v203 v204
        ()
    | _ ->
        let v205 : string = method22()
        let v206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v205 v46
        let v207 : unativeint = unativeint 0
        let v208 : unativeint = unativeint 2
        let v209 : string = "&$0[$1..$2]"
        let v210 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v206, v207, v208) v209
        let v211 : string = Fable.Core.Rust.emitExpr v210 v52
        let v212 : string = "u8::from_str_radix($0, 16).unwrap()"
        let v213 : uint8 = Fable.Core.Rust.emitExpr v211 v212
        let v214 : string = method22()
        let v215 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v214 v46
        let v216 : unativeint = unativeint 2
        let v217 : unativeint = unativeint 4
        let v218 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v215, v216, v217) v209
        let v219 : string = Fable.Core.Rust.emitExpr v218 v52
        let v220 : uint8 = Fable.Core.Rust.emitExpr v219 v212
        let v221 : string = method22()
        let v222 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v221 v46
        let v223 : unativeint = unativeint 4
        let v224 : unativeint = unativeint 6
        let v225 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v222, v223, v224) v209
        let v226 : string = Fable.Core.Rust.emitExpr v225 v52
        let v227 : uint8 = Fable.Core.Rust.emitExpr v226 v212
        let v228 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
        let v229 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v135, v213, v220, v227) v228
        let v230 : Types.std.string.String = Fable.Core.Rust.emitExpr v229 v35
        let v231 : string = method12()
        let v232 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v231 v46
        let v233 : unativeint = unativeint 0
        let v234 : unativeint = unativeint 2
        let v235 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v232, v233, v234) v209
        let v236 : string = Fable.Core.Rust.emitExpr v235 v52
        let v237 : uint8 = Fable.Core.Rust.emitExpr v236 v212
        let v238 : string = method12()
        let v239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v238 v46
        let v240 : unativeint = unativeint 2
        let v241 : unativeint = unativeint 4
        let v242 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v239, v240, v241) v209
        let v243 : string = Fable.Core.Rust.emitExpr v242 v52
        let v244 : uint8 = Fable.Core.Rust.emitExpr v243 v212
        let v245 : string = method12()
        let v246 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v245 v46
        let v247 : unativeint = unativeint 4
        let v248 : unativeint = unativeint 6
        let v249 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v246, v247, v248) v209
        let v250 : string = Fable.Core.Rust.emitExpr v249 v52
        let v251 : uint8 = Fable.Core.Rust.emitExpr v250 v212
        let v252 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v178, v237, v244, v251) v228
        let v253 : Types.std.string.String = Fable.Core.Rust.emitExpr v252 v35
        let v254 : string = $"{v87} {v230} {v253}"
        System.Console.WriteLine v254
        ()
and method23 (v0 : int32, v1 : Mut0) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and closure1 (v0 : Types.std.path.PathBuf) (v1 : Option<Types.std.path.PathBuf>) : string =
    let struct (v2 : string, v3 : string, v4 : string, v5 : bool) = method0()
    let v6 : string = "chrono::Utc::now()"
    let v7 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v8 : string = "($0).timestamp()"
    let v9 : int64 = Fable.Core.Rust.emitExpr v7 v8
    let v10 : string = "pwd"
    let v11 : Types.EmitType<Types.std.string.String> = method1(v10)
    let v12 : string = "std::env::current_dir()"
    let v13 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr () v12
    let v14 : string = "($0).as_ref().unwrap().to_path_buf()"
    let v15 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v13 v14
    let v16 : string = "($0).canonicalize()"
    let v17 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v15 v16
    let v18 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v17 v14
    let v19 : string = "fable_library_rust::String_::fromStr(&format!(\"{}\", $0.display()))"
    let v20 : string = Fable.Core.Rust.emitExpr v18 v19
    let v21 : Types.EmitType<Types.std.string.String> = method1(v20)
    let v22 : string = "spi_path"
    let v23 : Types.EmitType<Types.std.string.String> = method1(v22)
    let v24 : string = Fable.Core.Rust.emitExpr v0 v19
    let v25 : Types.EmitType<Types.std.string.String> = method1(v24)
    let v26 : string = "new_fsx_path"
    let v27 : Types.EmitType<Types.std.string.String> = method1(v26)
    let v28 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v1 v14
    let v29 : string = Fable.Core.Rust.emitExpr v28 v19
    let v30 : Types.EmitType<Types.std.string.String> = method1(v29)
    let v31 : (Types.EmitType<Types.std.string.String> []) = [|v11; v21; v23; v25; v27; v30|]
    method2(v9, v31)
    let v32 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v0 v16
    let v33 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v32 v14
    let v34 : string = "spi_path_clean"
    let v35 : Types.EmitType<Types.std.string.String> = method1(v34)
    let v36 : string = Fable.Core.Rust.emitExpr v33 v19
    let v37 : Types.EmitType<Types.std.string.String> = method1(v36)
    let v38 : (Types.EmitType<Types.std.string.String> []) = [|v35; v37|]
    method2(v9, v38)
    let v39 : string = "($0).parent()"
    let v40 : Option<Types.Ref<Types.std.path.Path>> = Fable.Core.Rust.emitExpr v33 v39
    let v41 : string = "$0.unwrap()"
    let v42 : Types.Ref<Types.std.path.Path> = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "std::path::PathBuf::from($0)"
    let v44 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v42 v43
    let v45 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v44 v16
    let v46 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v45 v14
    let v47 : string = "src_path"
    let v48 : Types.EmitType<Types.std.string.String> = method1(v47)
    let v49 : string = Fable.Core.Rust.emitExpr v46 v19
    let v50 : Types.EmitType<Types.std.string.String> = method1(v49)
    let v51 : (Types.EmitType<Types.std.string.String> []) = [|v48; v50|]
    method2(v9, v51)
    let v52 : string = "$0.ancestors()"
    let v53 : Types.Ref<Types.std.path.Ancestors> = Fable.Core.Rust.emitExpr v46 v52
    let v54 : unativeint = unativeint 10
    let v55 : string = "$1.take($0)"
    let v56 : Types.std.iter.Iterator<Types.Ref<Types.std.path.Path>> = Fable.Core.Rust.emitExpr struct (v54, v53) v55
    let v57 : (Types.Ref<Types.std.path.Path> -> Types.std.path.PathBuf) = closure2()
    let v58 : Types.Ref<(Types.Ref<Types.std.path.Path> -> Types.std.path.PathBuf)> = v57 |> unbox
    let v59 : string = "$1.into_iter().map($0)"
    let v60 : Types.std.iter.Iterator<Types.std.path.PathBuf> = Fable.Core.Rust.emitExpr struct (v58, v56) v59
    let v61 : (Types.Ref<Types.std.path.PathBuf> -> bool) = closure3()
    let v62 : Types.Ref<(Types.Ref<Types.std.path.PathBuf> -> bool)> = v61 |> unbox
    let v63 : string = "$1.into_iter().find($0)"
    let v64 : Option<Types.std.path.PathBuf> = Fable.Core.Rust.emitExpr struct (v62, v60) v63
    let v65 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v64 v14
    let v66 : string = "spiproj_path"
    let v67 : Types.EmitType<Types.std.string.String> = method1(v66)
    let v68 : string = Fable.Core.Rust.emitExpr v65 v19
    let v69 : Types.EmitType<Types.std.string.String> = method1(v68)
    let v70 : (Types.EmitType<Types.std.string.String> []) = [|v67; v69|]
    method2(v9, v70)
    let v71 : string = "($0).to_str()"
    let v72 : Option<Types.Ref<Types.Str>> = Fable.Core.Rust.emitExpr v33 v71
    let v73 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v72 v41
    let v74 : string = ".spir"
    let v75 : Types.Ref<string> = v74 |> unbox
    let v76 : string = ".spi"
    let v77 : Types.Ref<string> = v76 |> unbox
    let v78 : string = "&$2.replace(&*$0, &$1)"
    let v79 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v75, v77, v73) v78
    let v80 : Types.Ref<string> = v76 |> unbox
    let v81 : string = ".fsx"
    let v82 : Types.Ref<string> = v81 |> unbox
    let v83 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v80, v82, v79) v78
    let v84 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v83 v43
    let v85 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v84 v16
    let v86 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v85 v14
    let v87 : string = "fsx_path"
    let v88 : Types.EmitType<Types.std.string.String> = method1(v87)
    let v89 : string = Fable.Core.Rust.emitExpr v86 v19
    let v90 : Types.EmitType<Types.std.string.String> = method1(v89)
    let v91 : (Types.EmitType<Types.std.string.String> []) = [|v88; v90|]
    method2(v9, v91)
    let v92 : string = ""
    let v93 : string = "std::fs::write($0, $1.as_str())"
    let v94 : Result<unit, Types.std.io.Error> = Fable.Core.Rust.emitExpr struct (v86, v92) v93
    let v95 : string = "*(($0).as_ref()).unwrap()"
    Fable.Core.Rust.emitExpr v94 v95
    let v96 : string = "> fs_write fsx_path \"\"; ok"
    let v97 : Types.EmitType<Types.std.string.String> = method1(v96)
    let v98 : (Types.EmitType<Types.std.string.String> []) = [|v97|]
    method2(v9, v98)
    let v99 : string = "std::fs::read_to_string($0)"
    let v100 : Result<Types.std.string.String, Types.std.io.Error> = Fable.Core.Rust.emitExpr v65 v99
    let v101 : string = "($0).as_ref().unwrap().to_string()"
    let v102 : Types.std.string.String = Fable.Core.Rust.emitExpr v100 v101
    let struct (v103 : string, v104 : string, v105 : string, v106 : bool) = method0()
    let v107 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v108 : int64 = Fable.Core.Rust.emitExpr v107 v8
    let v109 : Types.EmitType<Types.std.string.String> = method1(v66)
    let v110 : string = Fable.Core.Rust.emitExpr v65 v19
    let v111 : Types.EmitType<Types.std.string.String> = method1(v110)
    let v112 : string = "spiproj_text len"
    let v113 : Types.EmitType<Types.std.string.String> = method1(v112)
    let v114 : string = "($0).len().try_into().unwrap()"
    let v115 : int32 = Fable.Core.Rust.emitExpr v102 v114
    let v116 : Types.EmitType<Types.std.string.String> = method13(v115)
    let v117 : (Types.EmitType<Types.std.string.String> []) = [|v109; v111; v113; v116|]
    method14(v108, v117)
    let v118 : string = "{"
    let v119 : string = "\"ProjectFileOpen\": {"
    let v120 : string = v118 + v119
    let v121 : string = "\"uri\": $0,"
    let v122 : string = v120 + v121
    let v123 : string = "\"spiprojText\": $1"
    let v124 : string = v122 + v123
    let v125 : string = "}"
    let v126 : string = v124 + v125
    let v127 : string = v126 + v125
    let v128 : string = "serde_json::json!("
    let v129 : string = v128 + v127
    let v130 : string = ").to_string()"
    let v131 : string = v129 + v130
    let v132 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v65, v102) v131
    let v133 : string = "json len="
    let v134 : Types.EmitType<Types.std.string.String> = method1(v133)
    let v135 : int32 = Fable.Core.Rust.emitExpr v132 v114
    let v136 : Types.EmitType<Types.std.string.String> = method13(v135)
    let v137 : (Types.EmitType<Types.std.string.String> []) = [|v134; v136|]
    method14(v108, v137)
    let struct (v138 : string, v139 : string, v140 : string, v141 : bool) = method0()
    let v142 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v143 : int64 = Fable.Core.Rust.emitExpr v142 v8
    let v144 : string = "host"
    let v145 : Types.EmitType<Types.std.string.String> = method1(v144)
    let v146 : string = "localhost"
    let v147 : Types.EmitType<Types.std.string.String> = method1(v146)
    let v148 : string = "port"
    let v149 : Types.EmitType<Types.std.string.String> = method1(v148)
    let v150 : int32 = 13805
    let v151 : Types.EmitType<Types.std.string.String> = method13(v150)
    let v152 : string = "msg len"
    let v153 : Types.EmitType<Types.std.string.String> = method1(v152)
    let v154 : int32 = Fable.Core.Rust.emitExpr v132 v114
    let v155 : Types.EmitType<Types.std.string.String> = method13(v154)
    let v156 : (Types.EmitType<Types.std.string.String> []) = [|v145; v147; v149; v151; v153; v155|]
    method16(v143, v156)
    let v157 : string = "zmq::Context::new()"
    let v158 : obj = Fable.Core.Rust.emitExpr () v157
    let v159 : string = "$0.socket(zmq::REQ).unwrap()"
    let v160 : obj = Fable.Core.Rust.emitExpr v158 v159
    let v161 : string = $"tcp://{v146}:{13805}"
    let v162 : string = "$0.connect(&$1).unwrap()"
    Fable.Core.Rust.emitExpr struct (v160, v161) v162
    let v163 : string = $"$0.send($1.as_str(), 0).unwrap()"
    Fable.Core.Rust.emitExpr struct (v160, v132) v163
    let v164 : string = "$0.recv_string(0).unwrap().unwrap()"
    let v165 : Types.std.string.String = Fable.Core.Rust.emitExpr v160 v164
    let v166 : string = "$0.disconnect(&$1).unwrap()"
    Fable.Core.Rust.emitExpr struct (v160, v161) v166
    let v167 : string = "result len"
    let v168 : Types.EmitType<Types.std.string.String> = method1(v167)
    let v169 : int32 = Fable.Core.Rust.emitExpr v165 v114
    let v170 : Types.EmitType<Types.std.string.String> = method13(v169)
    let v171 : (Types.EmitType<Types.std.string.String> []) = [|v168; v170|]
    method16(v143, v171)
    let v172 : string = "> spiproj_open; ok"
    let v173 : Types.EmitType<Types.std.string.String> = method1(v172)
    let v174 : (Types.EmitType<Types.std.string.String> []) = [|v173|]
    method2(v9, v174)
    let struct (v175 : string, v176 : string, v177 : string, v178 : bool) = method0()
    let v179 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v180 : int64 = Fable.Core.Rust.emitExpr v179 v8
    let v181 : Types.EmitType<Types.std.string.String> = method1(v22)
    let v182 : string = Fable.Core.Rust.emitExpr v33 v19
    let v183 : Types.EmitType<Types.std.string.String> = method1(v182)
    let v184 : string = "backend"
    let v185 : Types.EmitType<Types.std.string.String> = method1(v184)
    let v186 : string = "Fsharp"
    let v187 : Types.EmitType<Types.std.string.String> = method1(v186)
    let v188 : (Types.EmitType<Types.std.string.String> []) = [|v181; v183; v185; v187|]
    method18(v180, v188)
    let v189 : string = "($0).to_string()"
    let v190 : Types.std.string.String = Fable.Core.Rust.emitExpr v186 v189
    let v191 : string = "\"BuildFile\": {"
    let v192 : string = v118 + v191
    let v193 : string = v192 + v121
    let v194 : string = "\"backend\": $1"
    let v195 : string = v193 + v194
    let v196 : string = v195 + v125
    let v197 : string = v196 + v125
    let v198 : string = v128 + v197
    let v199 : string = v198 + v130
    let v200 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v33, v190) v199
    let v201 : string = "json len"
    let v202 : Types.EmitType<Types.std.string.String> = method1(v201)
    let v203 : int32 = Fable.Core.Rust.emitExpr v200 v114
    let v204 : Types.EmitType<Types.std.string.String> = method13(v203)
    let v205 : (Types.EmitType<Types.std.string.String> []) = [|v202; v204|]
    method18(v180, v205)
    let struct (v206 : string, v207 : string, v208 : string, v209 : bool) = method0()
    let v210 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v211 : int64 = Fable.Core.Rust.emitExpr v210 v8
    let v212 : Types.EmitType<Types.std.string.String> = method1(v144)
    let v213 : Types.EmitType<Types.std.string.String> = method1(v146)
    let v214 : Types.EmitType<Types.std.string.String> = method1(v148)
    let v215 : int32 = 13805
    let v216 : Types.EmitType<Types.std.string.String> = method13(v215)
    let v217 : Types.EmitType<Types.std.string.String> = method1(v152)
    let v218 : int32 = Fable.Core.Rust.emitExpr v200 v114
    let v219 : Types.EmitType<Types.std.string.String> = method13(v218)
    let v220 : (Types.EmitType<Types.std.string.String> []) = [|v212; v213; v214; v216; v217; v219|]
    method16(v211, v220)
    let v221 : obj = Fable.Core.Rust.emitExpr () v157
    let v222 : obj = Fable.Core.Rust.emitExpr v221 v159
    let v223 : string = $"tcp://{v146}:{13805}"
    Fable.Core.Rust.emitExpr struct (v222, v223) v162
    let v224 : string = $"$0.send($1.as_str(), 0).unwrap()"
    Fable.Core.Rust.emitExpr struct (v222, v200) v224
    let v225 : Types.std.string.String = Fable.Core.Rust.emitExpr v222 v164
    Fable.Core.Rust.emitExpr struct (v222, v223) v166
    let v226 : Types.EmitType<Types.std.string.String> = method1(v167)
    let v227 : int32 = Fable.Core.Rust.emitExpr v225 v114
    let v228 : Types.EmitType<Types.std.string.String> = method13(v227)
    let v229 : (Types.EmitType<Types.std.string.String> []) = [|v226; v228|]
    method16(v211, v229)
    let v230 : string = "> spi_build_file; ok"
    let v231 : Types.EmitType<Types.std.string.String> = method1(v230)
    let v232 : (Types.EmitType<Types.std.string.String> []) = [|v231|]
    method2(v9, v232)
    let struct (v233 : string, v234 : string, v235 : string, v236 : bool) = method0()
    let v237 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v6
    let v238 : int64 = Fable.Core.Rust.emitExpr v237 v8
    let v239 : string = "std::fs::metadata($0).unwrap().modified().unwrap()"
    let v240 : Types.std.time.SystemTime = Fable.Core.Rust.emitExpr v86 v239
    let v241 : Types.EmitType<Types.std.string.String> = method1(v87)
    let v242 : string = Fable.Core.Rust.emitExpr v86 v19
    let v243 : Types.EmitType<Types.std.string.String> = method1(v242)
    let v244 : string = "start"
    let v245 : Types.EmitType<Types.std.string.String> = method1(v244)
    let v246 : Types.EmitType<Types.std.string.String> = method20(v240)
    let v247 : (Types.EmitType<Types.std.string.String> []) = [|v241; v243; v245; v246|]
    method21(v238, v247)
    let v248 : (int32 []) = [| 0..50 |]
    let v249 : int32 = v248.Length
    let v250 : US1 = US1_0
    let v251 : Mut0 = {l0 = 0; l1 = v250} : Mut0
    while method23(v249, v251) do
        let v253 : int32 = v251.l0
        let v254 : US1 = v251.l1
        let v255 : int32 = v248.[int v253]
        let v277 : US1 =
            match v254 with
            | US1_0 -> (* None *)
                let v258 : Types.std.time.SystemTime = Fable.Core.Rust.emitExpr v86 v239
                let v259 : string = "i"
                let v260 : Types.EmitType<Types.std.string.String> = method1(v259)
                let v261 : Types.EmitType<Types.std.string.String> = method13(v255)
                let v262 : string = "last_modified"
                let v263 : Types.EmitType<Types.std.string.String> = method1(v262)
                let v264 : Types.EmitType<Types.std.string.String> = method20(v258)
                let v265 : (Types.EmitType<Types.std.string.String> []) = [|v260; v261; v263; v264|]
                method21(v238, v265)
                let v266 : string = "$0 > $1"
                let v267 : bool = Fable.Core.Rust.emitExpr struct (v258, v240) v266
                if v267 then
                    let v268 : Result<Types.std.string.String, Types.std.io.Error> = Fable.Core.Rust.emitExpr v86 v99
                    let v269 : Types.std.string.String = Fable.Core.Rust.emitExpr v268 v101
                    let v270 : string = "fable_library_rust::String_::fromStr($0)"
                    let v271 : string = Fable.Core.Rust.emitExpr v269 v270
                    US1_1(v271)
                else
                    let v273 : string = "std::thread::sleep(std::time::Duration::from_millis(*$0))"
                    Fable.Core.Rust.emitExpr 25UL v273
                    US1_0
            | US1_1(v256) -> (* Some *)
                US1_1(v256)
        let v278 : int32 = v253 + 1
        v251.l0 <- v278
        v251.l1 <- v277
        ()
    let v279 : US1 = v251.l1
    let v282 : string =
        match v279 with
        | US1_0 -> (* None *)
            v92
        | US1_1(v280) -> (* Some *)
            v280
    let v283 : string = "new_fsx len"
    let v284 : Types.EmitType<Types.std.string.String> = method1(v283)
    let v285 : int32 = Fable.Core.Rust.emitExpr v282 v114
    let v286 : Types.EmitType<Types.std.string.String> = method13(v285)
    let v287 : (Types.EmitType<Types.std.string.String> []) = [|v284; v286|]
    method2(v9, v287)
    let v288 : Types.std.path.PathBuf = v1 |> Option.defaultValue v86
    let v289 : Result<unit, Types.std.io.Error> = Fable.Core.Rust.emitExpr struct (v288, v282) v93
    Fable.Core.Rust.emitExpr v289 v95
    let v290 : string = "> fs_write new_fsx_path; ok"
    let v291 : Types.EmitType<Types.std.string.String> = method1(v290)
    let v292 : (Types.EmitType<Types.std.string.String> []) = [|v291|]
    method2(v9, v292)
    v282
and closure0 () (v0 : Types.std.path.PathBuf) : (Option<Types.std.path.PathBuf> -> string) =
    closure1(v0)
let v0 : (Types.std.path.PathBuf -> (Option<Types.std.path.PathBuf> -> string)) = closure0()
()
