# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_util.ipynb (unless otherwise specified).

__all__ = ['new_id', 'list_partition', 'write_file', 'read_file', 'get_notebook_name', 'run_shell', 'run', 'run_node']

# Cell

import uuid

def new_id():
    return uuid.uuid4().hex

def list_partition(lines, predicate):
    l1, l2 = [], []
    for line in lines:
        (l1, l2)[not predicate(line)].append(line)
    return l1, l2

def write_file(filename, text):
    with open(filename, 'w') as f:
        return f.write(text)

def read_file(filename):
    with open(filename, 'r') as f:
        return f.read()


# Cell

from time import sleep
from IPython.display import display, Javascript
import subprocess
import os
import uuid
import re

def get_notebook_name():
    if '__vsc_ipynb_file__' in globals():
        ipynb_path = __vsc_ipynb_file__
    else:
        magic = new_id()
        print(f'<magic:{magic}>')

        display(Javascript('IPython.notebook.save_checkpoint();'))

        nb_name = None
        while nb_name is None:
            try:
                sleep(0.1)
                nb_name = subprocess.check_output(f'grep -l {magic} *.ipynb', shell=True).decode().strip()
            except:
                pass

        ipynb_path = os.path.join(os.getcwd(), nb_name)

    ipynb_body = read_file(ipynb_path)
    return re.search(r'\# default_exp (\w+) *', ipynb_body).group(1)

_notebook_name = None


# Cell

import subprocess

def run_shell(*args, **kwargs):
    try:
        return subprocess.run(*args, shell=True, capture_output=True, **kwargs)
    except Exception as e:
        print(f'nbs/00_util.ipynb() > run_shell () error. args={args} kwargs={kwargs} e={e}')
        raise e

def run(*args, **kwargs):
    shell = run_shell(*args, **kwargs)
    stdout = shell.stdout.decode()
    stderr = shell.stderr.decode()
    return_code = shell.returncode
    if return_code != 0:
        print(f'nbs/00_util.ipynb() > run () > error. args="{args}" kwargs="{kwargs}" return_code="{return_code}" stdout="{stdout}" stderr="{stderr}"')
        raise Exception(stderr)
    return stdout.strip('\n')

def run_node(code, timeout=60, *args, **kwargs):
    e = ' --input-type=module -e ' if '\n' in code or '.' not in code else ''
    return run(
        f'''NODE_NO_WARNINGS=1 node --loader ts-node/esm --es-module-specifier-resolution=node {e} \'{code}\'''',
        *args,
        timeout=timeout,
        **kwargs
    )
